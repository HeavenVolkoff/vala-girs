<?xml version="1.0"?>
<!-- This file was automatically generated from C sources - DO NOT EDIT!
To affect the contents of this file, edit the original C definitions,
and/or use gtk-doc annotations.  -->
<repository version="1.2"
            xmlns="http://www.gtk.org/introspection/core/1.0"
            xmlns:c="http://www.gtk.org/introspection/c/1.0"
            xmlns:glib="http://www.gtk.org/introspection/glib/1.0">
  <include name="GObject" version="2.0"/>
  <include name="Gio" version="2.0"/>
  <package name="snapd-glib"/>
  <c:include name="snapd-glib/snapd-glib.h"/>
  <namespace name="Snapd"
             version="1"
             shared-library="libsnapd-glib.so.1"
             c:identifier-prefixes="Snapd"
             c:symbol-prefixes="snapd">
    <class name="Alias"
           c:symbol-prefix="alias"
           c:type="SnapdAlias"
           version="1.8"
           parent="GObject.Object"
           glib:type-name="SnapdAlias"
           glib:get-type="snapd_alias_get_type"
           glib:type-struct="AliasClass">
      <doc xml:space="preserve"
           filename="snapd-alias.c"
           line="26">#SnapdAlias contains alias information for a Snap.

Aliases are used to provide alternative binary names for Snap apps.</doc>
      <source-position filename="snapd-alias.h" line="23"/>
      <method name="get_app"
              c:identifier="snapd_alias_get_app"
              version="1.8"
              deprecated="1"
              deprecated-version="1.25">
        <doc xml:space="preserve"
             filename="snapd-alias.c"
             line="61">Get the app this is an alias for.</doc>
        <doc-deprecated xml:space="preserve">Use snapd_alias_get_app_manual() or snapd_alias_get_app_auto().</doc-deprecated>
        <source-position filename="snapd-alias.h" line="48"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="snapd-alias.c"
               line="67">an app name or %NULL.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="alias" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-alias.c"
                 line="63">a #SnapdAlias.</doc>
            <type name="Alias" c:type="SnapdAlias*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_app_auto"
              c:identifier="snapd_alias_get_app_auto"
              version="1.25">
        <doc xml:space="preserve"
             filename="snapd-alias.c"
             line="79">Get the app this alias has been automatically set to (status is %SNAPD_ALIAS_STATUS_AUTO).
Can be overridden when status is %SNAPD_ALIAS_STATUS_MANUAL.</doc>
        <source-position filename="snapd-alias.h" line="50"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="snapd-alias.c"
               line="86">an app name or %NULL.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="alias" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-alias.c"
                 line="81">a #SnapdAlias.</doc>
            <type name="Alias" c:type="SnapdAlias*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_app_manual"
              c:identifier="snapd_alias_get_app_manual"
              version="1.25">
        <doc xml:space="preserve"
             filename="snapd-alias.c"
             line="97">Get the app this alias has been manually set to (status is %SNAPD_ALIAS_STATUS_MANUAL).
This overrides the app from snapd_alias_get_app_auto().</doc>
        <source-position filename="snapd-alias.h" line="54"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="snapd-alias.c"
               line="104">an app name or %NULL.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="alias" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-alias.c"
                 line="99">a #SnapdAlias.</doc>
            <type name="Alias" c:type="SnapdAlias*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_command"
              c:identifier="snapd_alias_get_command"
              version="1.25">
        <doc xml:space="preserve"
             filename="snapd-alias.c"
             line="115">Get the command this alias runs.</doc>
        <source-position filename="snapd-alias.h" line="52"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-alias.c"
               line="121">a command.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="alias" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-alias.c"
                 line="117">a #SnapdAlias.</doc>
            <type name="Alias" c:type="SnapdAlias*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_name"
              c:identifier="snapd_alias_get_name"
              version="1.8">
        <doc xml:space="preserve"
             filename="snapd-alias.c"
             line="132">Get the name of this alias.</doc>
        <source-position filename="snapd-alias.h" line="56"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-alias.c"
               line="138">an alias name.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="alias" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-alias.c"
                 line="134">a #SnapdAlias.</doc>
            <type name="Alias" c:type="SnapdAlias*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_snap"
              c:identifier="snapd_alias_get_snap"
              version="1.8">
        <doc xml:space="preserve"
             filename="snapd-alias.c"
             line="149">Get the snap this alias is for.</doc>
        <source-position filename="snapd-alias.h" line="58"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-alias.c"
               line="155">a snap name.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="alias" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-alias.c"
                 line="151">a #SnapdAlias.</doc>
            <type name="Alias" c:type="SnapdAlias*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_status"
              c:identifier="snapd_alias_get_status"
              version="1.8">
        <doc xml:space="preserve"
             filename="snapd-alias.c"
             line="166">Get the status of this alias.</doc>
        <source-position filename="snapd-alias.h" line="60"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-alias.c"
               line="172">a #SnapdAliasStatus.</doc>
          <type name="AliasStatus" c:type="SnapdAliasStatus"/>
        </return-value>
        <parameters>
          <instance-parameter name="alias" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-alias.c"
                 line="168">a #SnapdAlias.</doc>
            <type name="Alias" c:type="SnapdAlias*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="app-auto"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="app-manual"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="command"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="name"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="snap"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="status"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="AliasStatus"/>
      </property>
    </class>
    <record name="AliasClass"
            c:type="SnapdAliasClass"
            glib:is-gtype-struct-for="Alias">
      <source-position filename="snapd-alias.h" line="23"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <enumeration name="AliasStatus"
                 version="1.8"
                 glib:type-name="SnapdAliasStatus"
                 glib:get-type="snapd_alias_status_get_type"
                 c:type="SnapdAliasStatus">
      <doc xml:space="preserve"
           filename="snapd-alias.h"
           line="25">Status of an alias.</doc>
      <member name="unknown"
              value="0"
              c:identifier="SNAPD_ALIAS_STATUS_UNKNOWN"
              glib:nick="unknown">
        <doc xml:space="preserve"
             filename="snapd-alias.h"
             line="27">the alias status is unknown.</doc>
      </member>
      <member name="default"
              value="1"
              c:identifier="SNAPD_ALIAS_STATUS_DEFAULT"
              glib:nick="default">
        <doc xml:space="preserve"
             filename="snapd-alias.h"
             line="28">deprecated, do not use.</doc>
      </member>
      <member name="enabled"
              value="2"
              c:identifier="SNAPD_ALIAS_STATUS_ENABLED"
              glib:nick="enabled">
        <doc xml:space="preserve"
             filename="snapd-alias.h"
             line="29">deprecated, do not use.</doc>
      </member>
      <member name="disabled"
              value="3"
              c:identifier="SNAPD_ALIAS_STATUS_DISABLED"
              glib:nick="disabled">
        <doc xml:space="preserve"
             filename="snapd-alias.h"
             line="30">the alias is disabled.</doc>
      </member>
      <member name="auto"
              value="4"
              c:identifier="SNAPD_ALIAS_STATUS_AUTO"
              glib:nick="auto">
        <doc xml:space="preserve"
             filename="snapd-alias.h"
             line="31">the alias is automatically enabled.</doc>
      </member>
      <member name="manual"
              value="5"
              c:identifier="SNAPD_ALIAS_STATUS_MANUAL"
              glib:nick="manual">
        <doc xml:space="preserve"
             filename="snapd-alias.h"
             line="32">the alias is manually enabled.</doc>
      </member>
    </enumeration>
    <class name="App"
           c:symbol-prefix="app"
           c:type="SnapdApp"
           version="1.0"
           parent="GObject.Object"
           glib:type-name="SnapdApp"
           glib:get-type="snapd_app_get_type"
           glib:type-struct="AppClass">
      <doc xml:space="preserve"
           filename="snapd-app.c"
           line="26">#SnapdApp contains information about an app in a Snap.

Snaps can contain apps which is a single binary executable.</doc>
      <source-position filename="snapd-app.h" line="24"/>
      <method name="get_active"
              c:identifier="snapd_app_get_active"
              version="1.25">
        <doc xml:space="preserve"
             filename="snapd-app.c"
             line="80">Get if this service is active.</doc>
        <source-position filename="snapd-app.h" line="53"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-app.c"
               line="86">%TRUE if active.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="app" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-app.c"
                 line="82">a #SnapdApp.</doc>
            <type name="App" c:type="SnapdApp*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_aliases"
              c:identifier="snapd_app_get_aliases"
              version="1.7"
              deprecated="1"
              deprecated-version="1.25">
        <doc xml:space="preserve"
             filename="snapd-app.c"
             line="97">Get the aliases for this app.</doc>
        <source-position filename="snapd-app.h" line="55"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-app.c"
               line="103">the alias names.</doc>
          <array c:type="GStrv">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="app" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-app.c"
                 line="99">a #SnapdApp.</doc>
            <type name="App" c:type="SnapdApp*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_common_id"
              c:identifier="snapd_app_get_common_id"
              version="1.41">
        <doc xml:space="preserve"
             filename="snapd-app.c"
             line="115">Get the common ID associated with this app.</doc>
        <source-position filename="snapd-app.h" line="57"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="snapd-app.c"
               line="121">an ID or %NULL.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="app" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-app.c"
                 line="117">a #SnapdApp.</doc>
            <type name="App" c:type="SnapdApp*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_daemon_type"
              c:identifier="snapd_app_get_daemon_type"
              version="1.9">
        <doc xml:space="preserve"
             filename="snapd-app.c"
             line="132">Get the daemon type for this app.</doc>
        <source-position filename="snapd-app.h" line="59"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="snapd-app.c"
               line="138">the daemon type or %NULL.</doc>
          <type name="DaemonType" c:type="SnapdDaemonType"/>
        </return-value>
        <parameters>
          <instance-parameter name="app" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-app.c"
                 line="134">a #SnapdApp.</doc>
            <type name="App" c:type="SnapdApp*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_desktop_file"
              c:identifier="snapd_app_get_desktop_file"
              version="1.14">
        <doc xml:space="preserve"
             filename="snapd-app.c"
             line="149">Get the path to the desktop file for this app.</doc>
        <source-position filename="snapd-app.h" line="61"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="snapd-app.c"
               line="155">a path or %NULL.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="app" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-app.c"
                 line="151">a #SnapdApp.</doc>
            <type name="App" c:type="SnapdApp*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_enabled"
              c:identifier="snapd_app_get_enabled"
              version="1.25">
        <doc xml:space="preserve"
             filename="snapd-app.c"
             line="166">Get if this service is enabled.</doc>
        <source-position filename="snapd-app.h" line="63"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-app.c"
               line="172">%TRUE if enabled.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="app" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-app.c"
                 line="168">a #SnapdApp.</doc>
            <type name="App" c:type="SnapdApp*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_name" c:identifier="snapd_app_get_name" version="1.0">
        <doc xml:space="preserve"
             filename="snapd-app.c"
             line="63">Get the name of this app.</doc>
        <source-position filename="snapd-app.h" line="51"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-app.c"
               line="69">a name.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="app" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-app.c"
                 line="65">a #SnapdApp.</doc>
            <type name="App" c:type="SnapdApp*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_snap" c:identifier="snapd_app_get_snap" version="1.25">
        <doc xml:space="preserve"
             filename="snapd-app.c"
             line="183">Get the snap this app is associated with.</doc>
        <source-position filename="snapd-app.h" line="65"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-app.c"
               line="189">a snap name.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="app" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-app.c"
                 line="185">a #SnapdApp.</doc>
            <type name="App" c:type="SnapdApp*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="active"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="aliases"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <array>
          <type name="utf8"/>
        </array>
      </property>
      <property name="common-id"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="daemon-type"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="DaemonType"/>
      </property>
      <property name="desktop-file"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="enabled"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="name"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="snap"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
    </class>
    <record name="AppClass"
            c:type="SnapdAppClass"
            glib:is-gtype-struct-for="App">
      <source-position filename="snapd-app.h" line="24"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="Assertion"
           c:symbol-prefix="assertion"
           c:type="SnapdAssertion"
           version="1.0"
           parent="GObject.Object"
           glib:type-name="SnapdAssertion"
           glib:get-type="snapd_assertion_get_type"
           glib:type-struct="AssertionClass">
      <doc xml:space="preserve"
           filename="snapd-assertion.c"
           line="30">#SnapdAssertion contains information about a Snap assertion.

Assertions are digitally signed documents that allow Snaps to have secure
trust and control features.</doc>
      <source-position filename="snapd-assertion.h" line="23"/>
      <constructor name="new" c:identifier="snapd_assertion_new" version="1.0">
        <doc xml:space="preserve"
             filename="snapd-assertion.c"
             line="56">Create a new assertion.</doc>
        <source-position filename="snapd-assertion.h" line="25"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="snapd-assertion.c"
               line="62">a new #SnapdAssertion</doc>
          <type name="Assertion" c:type="SnapdAssertion*"/>
        </return-value>
        <parameters>
          <parameter name="content" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-assertion.c"
                 line="58">the text content of the assertion.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_body"
              c:identifier="snapd_assertion_get_body"
              version="1.0">
        <doc xml:space="preserve"
             filename="snapd-assertion.c"
             line="216">Get the body of the assertion.</doc>
        <source-position filename="snapd-assertion.h" line="32"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="snapd-assertion.c"
               line="222">assertion body or %NULL.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="assertion" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-assertion.c"
                 line="218">a #SnapdAssertion.</doc>
            <type name="Assertion" c:type="SnapdAssertion*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_header"
              c:identifier="snapd_assertion_get_header"
              version="1.0">
        <doc xml:space="preserve"
             filename="snapd-assertion.c"
             line="154">Get a header from an assertion.</doc>
        <source-position filename="snapd-assertion.h" line="29"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="snapd-assertion.c"
               line="161">header value or %NULL if undefined.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="assertion" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-assertion.c"
                 line="156">a #SnapdAssertion.</doc>
            <type name="Assertion" c:type="SnapdAssertion*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-assertion.c"
                 line="157">name of the header.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_headers"
              c:identifier="snapd_assertion_get_headers"
              version="1.0">
        <doc xml:space="preserve"
             filename="snapd-assertion.c"
             line="118">Get the headers provided by this assertion.</doc>
        <source-position filename="snapd-assertion.h" line="27"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="snapd-assertion.c"
               line="124">array of header names.</doc>
          <array c:type="GStrv">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="assertion" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-assertion.c"
                 line="120">a #SnapdAssertion.</doc>
            <type name="Assertion" c:type="SnapdAssertion*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_signature"
              c:identifier="snapd_assertion_get_signature"
              version="1.0">
        <doc xml:space="preserve"
             filename="snapd-assertion.c"
             line="240">Get the signature of the assertion.</doc>
        <source-position filename="snapd-assertion.h" line="34"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="snapd-assertion.c"
               line="246">assertion signature.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="assertion" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-assertion.c"
                 line="242">a #SnapdAssertion.</doc>
            <type name="Assertion" c:type="SnapdAssertion*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="content"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
    </class>
    <record name="AssertionClass"
            c:type="SnapdAssertionClass"
            glib:is-gtype-struct-for="Assertion">
      <source-position filename="snapd-assertion.h" line="23"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="AuthData"
           c:symbol-prefix="auth_data"
           c:type="SnapdAuthData"
           version="1.0"
           parent="GObject.Object"
           glib:type-name="SnapdAuthData"
           glib:get-type="snapd_auth_data_get_type"
           glib:type-struct="AuthDataClass">
      <doc xml:space="preserve"
           filename="snapd-auth-data.c"
           line="29">#SnapdAuthData contains authorization data used to communicate with snapd.

The authorization data is in the form of a [Macaroon](https://research.google.com/pubs/pub41892.html).</doc>
      <source-position filename="snapd-auth-data.h" line="23"/>
      <constructor name="new" c:identifier="snapd_auth_data_new" version="1.0">
        <doc xml:space="preserve"
             filename="snapd-auth-data.c"
             line="56">Create some authorization data.</doc>
        <source-position filename="snapd-auth-data.h" line="25"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="snapd-auth-data.c"
               line="63">a new #SnapdAuthData</doc>
          <type name="AuthData" c:type="SnapdAuthData*"/>
        </return-value>
        <parameters>
          <parameter name="macaroon" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-auth-data.c"
                 line="58">serialized macaroon used to authorize access to snapd.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="discharges" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-auth-data.c"
                 line="59">serialized discharges.</doc>
            <array c:type="GStrv">
              <type name="utf8"/>
            </array>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_discharges"
              c:identifier="snapd_auth_data_get_discharges"
              version="1.0">
        <doc xml:space="preserve"
             filename="snapd-auth-data.c"
             line="94">Get the discharges that this authorization uses.</doc>
        <source-position filename="snapd-auth-data.h" line="30"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-auth-data.c"
               line="100">the discharges as serialized strings.</doc>
          <array c:type="GStrv">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="auth_data" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-auth-data.c"
                 line="96">a #SnapdAuthData.</doc>
            <type name="AuthData" c:type="SnapdAuthData*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_macaroon"
              c:identifier="snapd_auth_data_get_macaroon"
              version="1.0">
        <doc xml:space="preserve"
             filename="snapd-auth-data.c"
             line="77">Get the Macaroon that this authorization uses.</doc>
        <source-position filename="snapd-auth-data.h" line="28"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-auth-data.c"
               line="83">the serialized Macaroon used to authorize access to snapd.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="auth_data" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-auth-data.c"
                 line="79">a #SnapdAuthData.</doc>
            <type name="AuthData" c:type="SnapdAuthData*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="discharges" writable="1" transfer-ownership="none">
        <array>
          <type name="utf8"/>
        </array>
      </property>
      <property name="macaroon" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
    </class>
    <record name="AuthDataClass"
            c:type="SnapdAuthDataClass"
            glib:is-gtype-struct-for="AuthData">
      <source-position filename="snapd-auth-data.h" line="23"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="Change"
           c:symbol-prefix="change"
           c:type="SnapdChange"
           version="1.5"
           parent="GObject.Object"
           glib:type-name="SnapdChange"
           glib:get-type="snapd_change_get_type"
           glib:type-struct="ChangeClass">
      <doc xml:space="preserve"
           filename="snapd-change.c"
           line="25">#SnapdChange contains information on a current Snap transaction.</doc>
      <source-position filename="snapd-change.h" line="23"/>
      <method name="get_error"
              c:identifier="snapd_change_get_error"
              version="1.30">
        <doc xml:space="preserve"
             filename="snapd-change.c"
             line="200">Gets the error string associated with this change.</doc>
        <source-position filename="snapd-change.h" line="41"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="snapd-change.c"
               line="206">an error string or %NULL.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="change" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-change.c"
                 line="202">a #SnapdChange.</doc>
            <type name="Change" c:type="SnapdChange*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_id" c:identifier="snapd_change_get_id" version="1.5">
        <doc xml:space="preserve"
             filename="snapd-change.c"
             line="64">Get the unique ID for this change.</doc>
        <source-position filename="snapd-change.h" line="25"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-change.c"
               line="70">an ID.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="change" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-change.c"
                 line="66">a #SnapdChange.</doc>
            <type name="Change" c:type="SnapdChange*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_kind"
              c:identifier="snapd_change_get_kind"
              version="1.5">
        <doc xml:space="preserve"
             filename="snapd-change.c"
             line="81">Gets the kind of change this is.</doc>
        <source-position filename="snapd-change.h" line="27"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-change.c"
               line="87">the kind of change.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="change" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-change.c"
                 line="83">a #SnapdChange.</doc>
            <type name="Change" c:type="SnapdChange*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_ready"
              c:identifier="snapd_change_get_ready"
              version="1.5">
        <doc xml:space="preserve"
             filename="snapd-change.c"
             line="149">Get if this change is completed.</doc>
        <source-position filename="snapd-change.h" line="33"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-change.c"
               line="155">%TRUE if this change is complete.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="change" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-change.c"
                 line="151">a #SnapdChange.</doc>
            <type name="Change" c:type="SnapdChange*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_ready_time"
              c:identifier="snapd_change_get_ready_time"
              version="1.5">
        <doc xml:space="preserve"
             filename="snapd-change.c"
             line="183">Get the time this task completed or %NULL if not yet completed.</doc>
        <source-position filename="snapd-change.h" line="39"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="snapd-change.c"
               line="189">a #GDateTime or %NULL.</doc>
          <type name="GLib.DateTime" c:type="GDateTime*"/>
        </return-value>
        <parameters>
          <instance-parameter name="change" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-change.c"
                 line="185">a #SnapdChange.</doc>
            <type name="Change" c:type="SnapdChange*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_spawn_time"
              c:identifier="snapd_change_get_spawn_time"
              version="1.5">
        <doc xml:space="preserve"
             filename="snapd-change.c"
             line="166">Get the time this change started.</doc>
        <source-position filename="snapd-change.h" line="37"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-change.c"
               line="172">a #GDateTime.</doc>
          <type name="GLib.DateTime" c:type="GDateTime*"/>
        </return-value>
        <parameters>
          <instance-parameter name="change" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-change.c"
                 line="168">a #SnapdChange.</doc>
            <type name="Change" c:type="SnapdChange*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_status"
              c:identifier="snapd_change_get_status"
              version="1.5">
        <doc xml:space="preserve"
             filename="snapd-change.c"
             line="115">Get the status of the change.</doc>
        <source-position filename="snapd-change.h" line="31"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-change.c"
               line="121">a status string.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="change" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-change.c"
                 line="117">a #SnapdChange.</doc>
            <type name="Change" c:type="SnapdChange*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_summary"
              c:identifier="snapd_change_get_summary"
              version="1.5">
        <doc xml:space="preserve"
             filename="snapd-change.c"
             line="98">Get a human readable description of the change.</doc>
        <source-position filename="snapd-change.h" line="29"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-change.c"
               line="104">a string describing the change.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="change" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-change.c"
                 line="100">a #SnapdChange.</doc>
            <type name="Change" c:type="SnapdChange*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_tasks"
              c:identifier="snapd_change_get_tasks"
              version="1.5">
        <doc xml:space="preserve"
             filename="snapd-change.c"
             line="132">Get the tasks that are in this change.</doc>
        <source-position filename="snapd-change.h" line="35"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-change.c"
               line="138">an array of #SnapdTask.</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="Task"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="change" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-change.c"
                 line="134">a #SnapdChange.</doc>
            <type name="Change" c:type="SnapdChange*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="error"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="id"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="kind"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="ready"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="ready-time"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="GLib.DateTime"/>
      </property>
      <property name="spawn-time"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="GLib.DateTime"/>
      </property>
      <property name="status"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="summary"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="tasks"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <array name="GLib.PtrArray">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </property>
    </class>
    <record name="ChangeClass"
            c:type="SnapdChangeClass"
            glib:is-gtype-struct-for="Change">
      <source-position filename="snapd-change.h" line="23"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <enumeration name="ChangeFilter"
                 version="1.29"
                 glib:type-name="SnapdChangeFilter"
                 glib:get-type="snapd_change_filter_get_type"
                 c:type="SnapdChangeFilter">
      <doc xml:space="preserve"
           filename="snapd-client.h"
           line="47">Filter to apply to changes.</doc>
      <member name="all"
              value="0"
              c:identifier="SNAPD_CHANGE_FILTER_ALL"
              glib:nick="all">
        <doc xml:space="preserve"
             filename="snapd-client.h"
             line="49">Return all changes.</doc>
      </member>
      <member name="in_progress"
              value="1"
              c:identifier="SNAPD_CHANGE_FILTER_IN_PROGRESS"
              glib:nick="in-progress">
        <doc xml:space="preserve"
             filename="snapd-client.h"
             line="51">Return only changes that are in-progress.</doc>
      </member>
      <member name="ready"
              value="2"
              c:identifier="SNAPD_CHANGE_FILTER_READY"
              glib:nick="ready">
        <doc xml:space="preserve"
             filename="snapd-client.h"
             line="50">Return only changes that are ready.</doc>
      </member>
    </enumeration>
    <class name="Channel"
           c:symbol-prefix="channel"
           c:type="SnapdChannel"
           version="1.22"
           parent="GObject.Object"
           glib:type-name="SnapdChannel"
           glib:get-type="snapd_channel_get_type"
           glib:type-struct="ChannelClass">
      <doc xml:space="preserve"
           filename="snapd-channel.c"
           line="24">#SnapdChannel is an opaque data structure and can only be accessed
using the provided functions.</doc>
      <source-position filename="snapd-channel.h" line="23"/>
      <method name="get_branch"
              c:identifier="snapd_channel_get_branch"
              version="1.31">
        <doc xml:space="preserve"
             filename="snapd-channel.c"
             line="63">Get the branch this channel is tracking.</doc>
        <source-position filename="snapd-channel.h" line="44"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="snapd-channel.c"
               line="69">a branch name or %NULL if not a branch.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="channel" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-channel.c"
                 line="65">a #SnapdChannel.</doc>
            <type name="Channel" c:type="SnapdChannel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_confinement"
              c:identifier="snapd_channel_get_confinement"
              version="1.22">
        <doc xml:space="preserve"
             filename="snapd-channel.c"
             line="80">Get the confinement this snap is using, e.g. %SNAPD_CONFINEMENT_STRICT.</doc>
        <source-position filename="snapd-channel.h" line="46"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-channel.c"
               line="86">a #SnapdConfinement.</doc>
          <type name="Confinement" c:type="SnapdConfinement"/>
        </return-value>
        <parameters>
          <instance-parameter name="channel" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-channel.c"
                 line="82">a #SnapdChannel.</doc>
            <type name="Channel" c:type="SnapdChannel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_epoch"
              c:identifier="snapd_channel_get_epoch"
              version="1.22">
        <doc xml:space="preserve"
             filename="snapd-channel.c"
             line="97">Get the epoch used on this channel, e.g. "1".</doc>
        <source-position filename="snapd-channel.h" line="48"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-channel.c"
               line="103">an epoch.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="channel" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-channel.c"
                 line="99">a #SnapdChannel.</doc>
            <type name="Channel" c:type="SnapdChannel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_name"
              c:identifier="snapd_channel_get_name"
              version="1.22">
        <doc xml:space="preserve"
             filename="snapd-channel.c"
             line="114">Get the name of this channel, e.g. "stable".

Channel names are in the form `track/risk/branch`

`track` is the name of the feature track. Defaults to `latest` and is implied
        if the track is not present.
`risk` is the risk of the channel, one of `stable`, `candidate`, `beta` or `edge`.
`branch` is an optional branch name.

Example names:
`beta` (alias to `latest/beta`)
`xenial/stable` (stable release on xenial track)
`latest/stable/red-button` (red button feature branch)</doc>
        <source-position filename="snapd-channel.h" line="50"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-channel.c"
               line="132">a name.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="channel" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-channel.c"
                 line="116">a #SnapdChannel.</doc>
            <type name="Channel" c:type="SnapdChannel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_released_at"
              c:identifier="snapd_channel_get_released_at"
              version="1.46">
        <doc xml:space="preserve"
             filename="snapd-channel.c"
             line="143">Get the date this revision was released into the channel or %NULL if unknown.</doc>
        <source-position filename="snapd-channel.h" line="54"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="snapd-channel.c"
               line="149">a #GDateTime.</doc>
          <type name="GLib.DateTime" c:type="GDateTime*"/>
        </return-value>
        <parameters>
          <instance-parameter name="channel" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-channel.c"
                 line="145">a #SnapdChannel.</doc>
            <type name="Channel" c:type="SnapdChannel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_revision"
              c:identifier="snapd_channel_get_revision"
              version="1.22">
        <doc xml:space="preserve"
             filename="snapd-channel.c"
             line="160">Get the revision for this snap. The format of the string is undefined.
See also snapd_channel_get_version().</doc>
        <source-position filename="snapd-channel.h" line="52"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-channel.c"
               line="167">a revision string.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="channel" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-channel.c"
                 line="162">a #SnapdChannel.</doc>
            <type name="Channel" c:type="SnapdChannel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_risk"
              c:identifier="snapd_channel_get_risk"
              version="1.31">
        <doc xml:space="preserve"
             filename="snapd-channel.c"
             line="178">Get the risk this channel is on, one of `stable`, `candidate`, `beta` or `edge`.</doc>
        <source-position filename="snapd-channel.h" line="56"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-channel.c"
               line="184">a risk name.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="channel" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-channel.c"
                 line="180">a #SnapdChannel.</doc>
            <type name="Channel" c:type="SnapdChannel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_size"
              c:identifier="snapd_channel_get_size"
              version="1.22">
        <doc xml:space="preserve"
             filename="snapd-channel.c"
             line="195">Get the download size of this snap.</doc>
        <source-position filename="snapd-channel.h" line="58"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-channel.c"
               line="201">a byte count.</doc>
          <type name="gint64" c:type="gint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="channel" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-channel.c"
                 line="197">a #SnapdChannel.</doc>
            <type name="Channel" c:type="SnapdChannel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_track"
              c:identifier="snapd_channel_get_track"
              version="1.31">
        <doc xml:space="preserve"
             filename="snapd-channel.c"
             line="212">Get the track this channel is on.</doc>
        <source-position filename="snapd-channel.h" line="60"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-channel.c"
               line="218">a track name.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="channel" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-channel.c"
                 line="214">a #SnapdChannel.</doc>
            <type name="Channel" c:type="SnapdChannel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_version"
              c:identifier="snapd_channel_get_version"
              version="1.22">
        <doc xml:space="preserve"
             filename="snapd-channel.c"
             line="229">Get the version for this snap. The format of the string is undefined.
See also snapd_channel_get_revision().</doc>
        <source-position filename="snapd-channel.h" line="62"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-channel.c"
               line="236">a version string.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="channel" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-channel.c"
                 line="231">a #SnapdChannel.</doc>
            <type name="Channel" c:type="SnapdChannel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="confinement"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="Confinement"/>
      </property>
      <property name="epoch"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="name"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="released-at"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="GLib.DateTime"/>
      </property>
      <property name="revision"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="size"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gint64" c:type="gint64"/>
      </property>
      <property name="version"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
    </class>
    <record name="ChannelClass"
            c:type="SnapdChannelClass"
            glib:is-gtype-struct-for="Channel">
      <source-position filename="snapd-channel.h" line="23"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="Client"
           c:symbol-prefix="client"
           c:type="SnapdClient"
           version="1.0"
           parent="GObject.Object"
           glib:type-name="SnapdClient"
           glib:get-type="snapd_client_get_type"
           glib:type-struct="ClientClass">
      <doc xml:space="preserve"
           filename="snapd-client.c"
           line="62">#SnapdClient contains connection state with snapd.</doc>
      <source-position filename="snapd-client.h" line="45"/>
      <constructor name="new" c:identifier="snapd_client_new" version="1.0">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="3639">Create a new client to talk to snapd.</doc>
        <source-position filename="snapd-client.h" line="176"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="snapd-client.c"
               line="3644">a new #SnapdClient</doc>
          <type name="Client" c:type="SnapdClient*"/>
        </return-value>
      </constructor>
      <constructor name="new_from_socket"
                   c:identifier="snapd_client_new_from_socket"
                   version="1.5">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="3654">Create a new client to talk on an existing socket.</doc>
        <source-position filename="snapd-client.h" line="178"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="snapd-client.c"
               line="3660">a new #SnapdClient</doc>
          <type name="Client" c:type="SnapdClient*"/>
        </return-value>
        <parameters>
          <parameter name="socket" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3656">A #GSocket that is connected to snapd.</doc>
            <type name="Gio.Socket" c:type="GSocket*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="abort_change_async"
              c:identifier="snapd_client_abort_change_async"
              version="1.30">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="1377">Asynchronously abort a change.
See snapd_client_abort_change_sync() for more information.</doc>
        <source-position filename="snapd-client.h" line="285"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1379">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1380">a change ID to abort.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1381">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1382">a #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1383">the data to pass to callback function.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="abort_change_finish"
              c:identifier="snapd_client_abort_change_finish"
              version="1.30"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="1404">Complete request started with snapd_client_abort_change_async().
See snapd_client_abort_change_sync() for more information.</doc>
        <source-position filename="snapd-client.h" line="291"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="snapd-client.c"
               line="1413">a #SnapdChange or %NULL on error.</doc>
          <type name="Change" c:type="SnapdChange*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1406">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1407">a #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="abort_change_sync"
              c:identifier="snapd_client_abort_change_sync"
              version="1.30"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client-sync.c"
             line="206">Get information on a change.</doc>
        <source-position filename="snapd-client.h" line="280"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="snapd-client-sync.c"
               line="215">a #SnapdChange or %NULL on error.</doc>
          <type name="Change" c:type="SnapdChange*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="208">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="209">a change ID to abort.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="210">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_assertions_async"
              c:identifier="snapd_client_add_assertions_async"
              version="1.8">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="1887">Asynchronously add an assertion.
See snapd_client_add_assertions_sync() for more information.</doc>
        <source-position filename="snapd-client.h" line="416"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1889">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="assertions" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1890">assertions to add.</doc>
            <array c:type="GStrv">
              <type name="utf8"/>
            </array>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1891">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1892">a #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1893">the data to pass to callback function.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_assertions_finish"
              c:identifier="snapd_client_add_assertions_finish"
              version="1.8"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="1914">Complete request started with snapd_client_add_assertions_async().
See snapd_client_add_assertions_sync() for more information.</doc>
        <source-position filename="snapd-client.h" line="421"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-client.c"
               line="1923">%TRUE on success or %FALSE on error.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1916">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1917">a #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_assertions_sync"
              c:identifier="snapd_client_add_assertions_sync"
              version="1.8"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client-sync.c"
             line="488">Add an assertion.</doc>
        <source-position filename="snapd-client.h" line="412"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-client-sync.c"
               line="497">%TRUE on success or %FALSE on error.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="490">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="assertions" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="491">assertions to add.</doc>
            <array c:type="GStrv">
              <type name="utf8"/>
            </array>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="492">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="alias_async"
              c:identifier="snapd_client_alias_async"
              version="1.25">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="3258">Asynchronously create an alias to an app.
See snapd_client_alias_sync() for more information.</doc>
        <source-position filename="snapd-client.h" line="810"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3260">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="snap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3261">the name of the snap to modify.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="app" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3262">an app in the snap to make the alias to.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="alias" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3263">the name of the alias (i.e. the command that will run this app).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="call"
                     closure="4">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3264">function to callback with progress.</doc>
            <type name="ProgressCallback" c:type="SnapdProgressCallback"/>
          </parameter>
          <parameter name="progress_callback_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3265">user data to pass to @progress_callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3266">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="7">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3267">a #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3268">the data to pass to callback function.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="alias_finish"
              c:identifier="snapd_client_alias_finish"
              version="1.25"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="3288">Complete request started with snapd_client_alias_async().
See snapd_client_alias_sync() for more information.</doc>
        <source-position filename="snapd-client.h" line="819"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-client.c"
               line="3297">%TRUE on success or %FALSE on error.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3290">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3291">a #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="alias_sync"
              c:identifier="snapd_client_alias_sync"
              version="1.25"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client-sync.c"
             line="1233">Create an alias to an app.</doc>
        <source-position filename="snapd-client.h" line="802"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="1235">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="snap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="1236">the name of the snap to modify.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="app" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="1237">an app in the snap to make the alias to.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="alias" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="1238">the name of the alias (i.e. the command that will run this app).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="call"
                     closure="4">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="1239">function to callback with progress.</doc>
            <type name="ProgressCallback" c:type="SnapdProgressCallback"/>
          </parameter>
          <parameter name="progress_callback_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="1240">user data to pass to @progress_callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="1241">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="buy_async"
              c:identifier="snapd_client_buy_async"
              version="1.3">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="2925">Asynchronously buy a snap from the store.
See snapd_client_buy_sync() for more information.</doc>
        <source-position filename="snapd-client.h" line="732"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2927">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2928">id of snap to buy.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="amount" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2929">amount of currency to spend, e.g. 0.99.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="currency" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2930">the currency to buy with as an ISO 4217 currency code, e.g. "NZD".</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2931">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="5">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2932">a #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2933">the data to pass to callback function.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="buy_finish"
              c:identifier="snapd_client_buy_finish"
              version="1.3"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="2955">Complete request started with snapd_client_buy_async().
See snapd_client_buy_sync() for more information.</doc>
        <source-position filename="snapd-client.h" line="739"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-client.c"
               line="2964">%TRUE on success or %FALSE on error.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2957">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2958">a #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="buy_sync"
              c:identifier="snapd_client_buy_sync"
              version="1.3"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client-sync.c"
             line="1060">Buy a snap from the store. Once purchased, this snap can be installed with
snapd_client_install2_sync().</doc>
        <source-position filename="snapd-client.h" line="726"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-client-sync.c"
               line="1073">%TRUE on success or %FALSE on error.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="1062">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="1063">id of snap to buy.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="amount" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="1064">amount of currency to spend, e.g. 0.99.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="currency" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="1065">the currency to buy with as an ISO 4217 currency code, e.g. "NZD".</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="1066">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="check_buy_async"
              c:identifier="snapd_client_check_buy_async"
              version="1.3">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="2879">Asynchronously check if able to buy snaps.
See snapd_client_check_buy_sync() for more information.</doc>
        <source-position filename="snapd-client.h" line="718"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2881">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2882">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2883">a #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2884">the data to pass to callback function.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="check_buy_finish"
              c:identifier="snapd_client_check_buy_finish"
              version="1.3"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="2903">Complete request started with snapd_client_check_buy_async().
See snapd_client_check_buy_sync() for more information.</doc>
        <source-position filename="snapd-client.h" line="722"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-client.c"
               line="2912">%TRUE on success or %FALSE on error.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2905">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2906">a #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="check_buy_sync"
              c:identifier="snapd_client_check_buy_sync"
              version="1.3"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client-sync.c"
             line="1033">Check if able to buy snaps.</doc>
        <source-position filename="snapd-client.h" line="715"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-client-sync.c"
               line="1042">%TRUE if able to buy snaps or %FALSE on error.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="1035">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="1036">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="connect_async"
              c:identifier="snapd_client_connect_async"
              version="1.3"
              deprecated="1"
              deprecated-version="1.24">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="919">This method is no longer required and does nothing, snapd-glib now connects on demand.</doc>
        <source-position filename="snapd-client.h" line="184"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="921">a #SnapdClient</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="922">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="923">a #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="924">the data to pass to callback function.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="connect_finish"
              c:identifier="snapd_client_connect_finish"
              version="1.3"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="944">Complete request started with snapd_client_connect_async().
See snapd_client_connect_sync() for more information.</doc>
        <source-position filename="snapd-client.h" line="189"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-client.c"
               line="953">%TRUE if successfully connected to snapd.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="946">a #SnapdClient</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="947">a #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="connect_interface_async"
              c:identifier="snapd_client_connect_interface_async"
              version="1.0">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="1996">Asynchronously connect two interfaces together.
See snapd_client_connect_interface_sync() for more information.</doc>
        <source-position filename="snapd-client.h" line="449"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1998">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="plug_snap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1999">name of snap containing plug.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="plug_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2000">name of plug to connect.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="slot_snap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2001">name of snap containing socket.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="slot_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2002">name of slot to connect.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="call"
                     closure="5">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2003">function to callback with progress.</doc>
            <type name="ProgressCallback" c:type="SnapdProgressCallback"/>
          </parameter>
          <parameter name="progress_callback_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2004">user data to pass to @progress_callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2005">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="8">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2006">a #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2007">the data to pass to callback function.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="connect_interface_finish"
              c:identifier="snapd_client_connect_interface_finish"
              version="1.0"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="2029">Complete request started with snapd_client_connect_interface_async().
See snapd_client_connect_interface_sync() for more information.</doc>
        <source-position filename="snapd-client.h" line="459"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-client.c"
               line="2038">%TRUE on success or %FALSE on error.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2031">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2032">a #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="connect_interface_sync"
              c:identifier="snapd_client_connect_interface_sync"
              version="1.0"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client-sync.c"
             line="546">Connect two interfaces together.
An asynchronous version of this function is snapd_client_connect_interface_async().</doc>
        <source-position filename="snapd-client.h" line="440"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-client-sync.c"
               line="561">%TRUE on success or %FALSE on error.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="548">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="plug_snap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="549">name of snap containing plug.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="plug_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="550">name of plug to connect.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="slot_snap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="551">name of snap containing socket.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="slot_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="552">name of slot to connect.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="call"
                     closure="5">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="553">function to callback with progress.</doc>
            <type name="ProgressCallback" c:type="SnapdProgressCallback"/>
          </parameter>
          <parameter name="progress_callback_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="554">user data to pass to @progress_callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="555">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="connect_sync"
              c:identifier="snapd_client_connect_sync"
              version="1.0"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client-sync.c"
             line="56">This method is no longer required and does nothing, snapd-glib now connects on demand.</doc>
        <source-position filename="snapd-client.h" line="180"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-client-sync.c"
               line="64">%TRUE if successfully connected to snapd.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="58">a #SnapdClient</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="59">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="create_user_async"
              c:identifier="snapd_client_create_user_async"
              version="1.3">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="2977">Asynchronously create a local user account.
See snapd_client_create_user_sync() for more information.</doc>
        <source-position filename="snapd-client.h" line="748"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2979">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="email" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2980">the email of the user to create.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2981">a set of #SnapdCreateUserFlags to control how the user account is created.</doc>
            <type name="CreateUserFlags" c:type="SnapdCreateUserFlags"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2982">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2983">a #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2984">the data to pass to callback function.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="create_user_finish"
              c:identifier="snapd_client_create_user_finish"
              version="1.3"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="3009">Complete request started with snapd_client_create_user_async().
See snapd_client_create_user_sync() for more information.</doc>
        <source-position filename="snapd-client.h" line="754"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="snapd-client.c"
               line="3018">a #SnapdUserInformation or %NULL on error.</doc>
          <type name="UserInformation" c:type="SnapdUserInformation*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3011">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3012">a #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="create_user_sync"
              c:identifier="snapd_client_create_user_sync"
              version="1.3"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client-sync.c"
             line="1094">Create a local user account for the given user.</doc>
        <source-position filename="snapd-client.h" line="743"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="snapd-client-sync.c"
               line="1105">a #SnapdUserInformation or %NULL on error.</doc>
          <type name="UserInformation" c:type="SnapdUserInformation*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="1096">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="email" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="1097">the email of the user to create.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="1098">a set of #SnapdCreateUserFlags to control how the user account is created.</doc>
            <type name="CreateUserFlags" c:type="SnapdCreateUserFlags"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="1099">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="create_users_async"
              c:identifier="snapd_client_create_users_async"
              version="1.3">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="3037">Asynchronously create local user accounts using the system-user assertions that are valid for this device.
See snapd_client_create_users_sync() for more information.</doc>
        <source-position filename="snapd-client.h" line="761"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3039">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3040">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3041">a #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3042">the data to pass to callback function.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="create_users_finish"
              c:identifier="snapd_client_create_users_finish"
              version="1.3"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="3061">Complete request started with snapd_client_create_users_async().
See snapd_client_create_users_sync() for more information.</doc>
        <source-position filename="snapd-client.h" line="765"/>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve"
               filename="snapd-client.c"
               line="3070">an array of #SnapdUserInformation or %NULL on error.</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="UserInformation"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3063">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3064">a #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="create_users_sync"
              c:identifier="snapd_client_create_users_sync"
              version="1.3"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client-sync.c"
             line="1125">Create local user accounts using the system-user assertions that are valid for this device.</doc>
        <source-position filename="snapd-client.h" line="758"/>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve"
               filename="snapd-client-sync.c"
               line="1134">an array of #SnapdUserInformation or %NULL on error.</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="UserInformation"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="1127">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="1128">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="disable_aliases_async"
              c:identifier="snapd_client_disable_aliases_async"
              version="1.8"
              deprecated="1"
              deprecated-version="1.25">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="3462">Asynchronously change the state of aliases.
See snapd_client_disable_aliases_sync() for more information.</doc>
        <doc-deprecated xml:space="preserve">Use snapd_client_unalias_async()</doc-deprecated>
        <source-position filename="snapd-client.h" line="885"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3464">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="snap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3465">the name of the snap to modify.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="aliases" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3466">the aliases to modify.</doc>
            <array c:type="GStrv">
              <type name="utf8"/>
            </array>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="call"
                     closure="3">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3467">function to callback with progress.</doc>
            <type name="ProgressCallback" c:type="SnapdProgressCallback"/>
          </parameter>
          <parameter name="progress_callback_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3468">user data to pass to @progress_callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3469">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3470">a #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3471">the data to pass to callback function.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="disable_aliases_finish"
              c:identifier="snapd_client_disable_aliases_finish"
              version="1.8"
              deprecated="1"
              deprecated-version="1.25"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="3494">Complete request started with snapd_client_disable_aliases_async().
See snapd_client_disable_aliases_sync() for more information.</doc>
        <doc-deprecated xml:space="preserve">Use snapd_client_unalias_finish()</doc-deprecated>
        <source-position filename="snapd-client.h" line="893"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-client.c"
               line="3503">%TRUE on success or %FALSE on error.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3496">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3497">a #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="disable_aliases_sync"
              c:identifier="snapd_client_disable_aliases_sync"
              version="1.8"
              deprecated="1"
              deprecated-version="1.25"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client-sync.c"
             line="1359">Change the state of aliases.</doc>
        <doc-deprecated xml:space="preserve">Use snapd_client_unalias_sync()</doc-deprecated>
        <source-position filename="snapd-client.h" line="878"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-client-sync.c"
               line="1372">%TRUE on success or %FALSE on error.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="1361">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="snap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="1362">the name of the snap to modify.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="aliases" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="1363">the aliases to modify.</doc>
            <array c:type="GStrv">
              <type name="utf8"/>
            </array>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="call"
                     closure="3">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="1364">function to callback with progress.</doc>
            <type name="ProgressCallback" c:type="SnapdProgressCallback"/>
          </parameter>
          <parameter name="progress_callback_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="1365">user data to pass to @progress_callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="1366">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="disable_async"
              c:identifier="snapd_client_disable_async"
              version="1.0">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="2773">Asynchronously disable an installed snap.
See snapd_client_disable_sync() for more information.</doc>
        <source-position filename="snapd-client.h" line="685"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2775">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2776">name of snap to disable.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="call"
                     closure="2">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2777">function to callback with progress.</doc>
            <type name="ProgressCallback" c:type="SnapdProgressCallback"/>
          </parameter>
          <parameter name="progress_callback_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2778">user data to pass to @progress_callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2779">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="5">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2780">a #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2781">the data to pass to callback function.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="disable_finish"
              c:identifier="snapd_client_disable_finish"
              version="1.0"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="2803">Complete request started with snapd_client_disable_async().
See snapd_client_disable_sync() for more information.</doc>
        <source-position filename="snapd-client.h" line="692"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-client.c"
               line="2812">%TRUE on success or %FALSE on error.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2805">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2806">a #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="disable_sync"
              c:identifier="snapd_client_disable_sync"
              version="1.0"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client-sync.c"
             line="968">Disable an installed snap.</doc>
        <source-position filename="snapd-client.h" line="679"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-client-sync.c"
               line="979">%TRUE on success or %FALSE on error.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="970">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="971">name of snap to disable.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="call"
                     closure="2">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="972">function to callback with progress.</doc>
            <type name="ProgressCallback" c:type="SnapdProgressCallback"/>
          </parameter>
          <parameter name="progress_callback_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="973">user data to pass to @progress_callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="974">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="disconnect_interface_async"
              c:identifier="snapd_client_disconnect_interface_async"
              version="1.0">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="2052">Asynchronously disconnect two interfaces.
See snapd_client_disconnect_interface_sync() for more information.</doc>
        <source-position filename="snapd-client.h" line="472"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2054">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="plug_snap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2055">name of snap containing plug.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="plug_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2056">name of plug to disconnect.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="slot_snap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2057">name of snap containing socket.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="slot_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2058">name of slot to disconnect.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="call"
                     closure="5">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2059">function to callback with progress.</doc>
            <type name="ProgressCallback" c:type="SnapdProgressCallback"/>
          </parameter>
          <parameter name="progress_callback_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2060">user data to pass to @progress_callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2061">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="8">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2062">a #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2063">the data to pass to callback function.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="disconnect_interface_finish"
              c:identifier="snapd_client_disconnect_interface_finish"
              version="1.0"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="2085">Complete request started with snapd_client_disconnect_interface_async().
See snapd_client_disconnect_interface_sync() for more information.</doc>
        <source-position filename="snapd-client.h" line="482"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-client.c"
               line="2094">%TRUE on success or %FALSE on error.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2087">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2088">a #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="disconnect_interface_sync"
              c:identifier="snapd_client_disconnect_interface_sync"
              version="1.0"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client-sync.c"
             line="582">Disconnect two interfaces.</doc>
        <source-position filename="snapd-client.h" line="463"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-client-sync.c"
               line="596">%TRUE on success or %FALSE on error.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="584">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="plug_snap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="585">name of snap containing plug.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="plug_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="586">name of plug to disconnect.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="slot_snap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="587">name of snap containing socket.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="slot_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="588">name of slot to disconnect.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="call"
                     closure="5">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="589">function to callback with progress.</doc>
            <type name="ProgressCallback" c:type="SnapdProgressCallback"/>
          </parameter>
          <parameter name="progress_callback_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="590">user data to pass to @progress_callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="591">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="enable_aliases_async"
              c:identifier="snapd_client_enable_aliases_async"
              version="1.8"
              deprecated="1"
              deprecated-version="1.25">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="3407">Asynchronously change the state of aliases.
See snapd_client_enable_aliases_sync() for more information.</doc>
        <doc-deprecated xml:space="preserve">Use snapd_client_alias_async()</doc-deprecated>
        <source-position filename="snapd-client.h" line="866"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3409">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="snap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3410">the name of the snap to modify.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="aliases" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3411">the aliases to modify.</doc>
            <array c:type="GStrv">
              <type name="utf8"/>
            </array>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="call"
                     closure="3">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3412">function to callback with progress.</doc>
            <type name="ProgressCallback" c:type="SnapdProgressCallback"/>
          </parameter>
          <parameter name="progress_callback_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3413">user data to pass to @progress_callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3414">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3415">a #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3416">the data to pass to callback function.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="enable_aliases_finish"
              c:identifier="snapd_client_enable_aliases_finish"
              version="1.8"
              deprecated="1"
              deprecated-version="1.25"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="3439">Complete request started with snapd_client_enable_aliases_async().
See snapd_client_enable_aliases_sync() for more information.</doc>
        <doc-deprecated xml:space="preserve">Use snapd_client_unalias_finish()</doc-deprecated>
        <source-position filename="snapd-client.h" line="874"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-client.c"
               line="3448">%TRUE on success or %FALSE on error.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3441">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3442">a #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="enable_aliases_sync"
              c:identifier="snapd_client_enable_aliases_sync"
              version="1.8"
              deprecated="1"
              deprecated-version="1.25"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client-sync.c"
             line="1331">Change the state of aliases.</doc>
        <doc-deprecated xml:space="preserve">Use snapd_client_alias_sync()</doc-deprecated>
        <source-position filename="snapd-client.h" line="859"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-client-sync.c"
               line="1344">%TRUE on success or %FALSE on error.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="1333">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="snap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="1334">the name of the snap to modify.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="aliases" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="1335">the aliases to modify.</doc>
            <array c:type="GStrv">
              <type name="utf8"/>
            </array>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="call"
                     closure="3">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="1336">function to callback with progress.</doc>
            <type name="ProgressCallback" c:type="SnapdProgressCallback"/>
          </parameter>
          <parameter name="progress_callback_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="1337">user data to pass to @progress_callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="1338">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="enable_async"
              c:identifier="snapd_client_enable_async"
              version="1.0">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="2721">Asynchronously enable an installed snap.
See snapd_client_enable_sync() for more information.</doc>
        <source-position filename="snapd-client.h" line="668"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2723">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2724">name of snap to enable.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="call"
                     closure="2">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2725">function to callback with progress.</doc>
            <type name="ProgressCallback" c:type="SnapdProgressCallback"/>
          </parameter>
          <parameter name="progress_callback_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2726">user data to pass to @progress_callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2727">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="5">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2728">a #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2729">the data to pass to callback function.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="enable_finish"
              c:identifier="snapd_client_enable_finish"
              version="1.0"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="2751">Complete request started with snapd_client_enable_async().
See snapd_client_enable_sync() for more information.</doc>
        <source-position filename="snapd-client.h" line="675"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-client.c"
               line="2760">%TRUE on success or %FALSE on error.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2753">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2754">a #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="enable_sync"
              c:identifier="snapd_client_enable_sync"
              version="1.0"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client-sync.c"
             line="936">Enable an installed snap.</doc>
        <source-position filename="snapd-client.h" line="662"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-client-sync.c"
               line="947">%TRUE on success or %FALSE on error.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="938">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="939">name of snap to enable.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="call"
                     closure="2">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="940">function to callback with progress.</doc>
            <type name="ProgressCallback" c:type="SnapdProgressCallback"/>
          </parameter>
          <parameter name="progress_callback_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="941">user data to pass to @progress_callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="942">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="find_async"
              c:identifier="snapd_client_find_async"
              version="1.0">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="2108">Asynchronously find snaps in the store.
See snapd_client_find_sync() for more information.</doc>
        <source-position filename="snapd-client.h" line="492"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2110">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2111">a set of #SnapdFindFlags to control how the find is performed.</doc>
            <type name="FindFlags" c:type="SnapdFindFlags"/>
          </parameter>
          <parameter name="query" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2112">query string to send.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2113">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2114">a #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2115">the data to pass to callback function.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="find_finish"
              c:identifier="snapd_client_find_finish"
              version="1.0"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="2131">Complete request started with snapd_client_find_async().
See snapd_client_find_sync() for more information.</doc>
        <source-position filename="snapd-client.h" line="498"/>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve"
               filename="snapd-client.c"
               line="2141">an array of #SnapdSnap or %NULL on error.</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="Snap"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2133">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2134">a #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
          <parameter name="suggested_currency"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2135">location to store the ISO 4217 currency that is suggested to purchase with.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
        </parameters>
      </method>
      <method name="find_refreshable_async"
              c:identifier="snapd_client_find_refreshable_async"
              version="1.8">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="2223">Asynchronously find snaps in store that are newer revisions than locally installed versions.
See snapd_client_find_refreshable_sync() for more information.</doc>
        <source-position filename="snapd-client.h" line="525"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2225">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2226">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2227">a #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2228">the data to pass to callback function.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="find_refreshable_finish"
              c:identifier="snapd_client_find_refreshable_finish"
              version="1.5"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="2248">Complete request started with snapd_client_find_refreshable_async().
See snapd_client_find_refreshable_sync() for more information.</doc>
        <source-position filename="snapd-client.h" line="529"/>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve"
               filename="snapd-client.c"
               line="2257">an array of #SnapdSnap or %NULL on error.</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="Snap"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2250">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2251">a #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="find_refreshable_sync"
              c:identifier="snapd_client_find_refreshable_sync"
              version="1.8"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client-sync.c"
             line="674">Find snaps in store that are newer revisions than locally installed versions.</doc>
        <source-position filename="snapd-client.h" line="522"/>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve"
               filename="snapd-client-sync.c"
               line="682">an array of #SnapdSnap or %NULL on error.</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="Snap"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="676">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="677">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="find_section_async"
              c:identifier="snapd_client_find_section_async"
              version="1.7">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="2151">Asynchronously find snaps in the store.
See snapd_client_find_section_sync() for more information.</doc>
        <source-position filename="snapd-client.h" line="510"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2153">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2154">a set of #SnapdFindFlags to control how the find is performed.</doc>
            <type name="FindFlags" c:type="SnapdFindFlags"/>
          </parameter>
          <parameter name="section"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2155">store section to search in or %NULL to search in all sections.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="query"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2156">query string to send or %NULL to get all snaps from the given section.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2157">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="5">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2158">a #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2159">the data to pass to callback function.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="find_section_finish"
              c:identifier="snapd_client_find_section_finish"
              version="1.7"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="2191">Complete request started with snapd_client_find_async().
See snapd_client_find_sync() for more information.</doc>
        <source-position filename="snapd-client.h" line="517"/>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve"
               filename="snapd-client.c"
               line="2201">an array of #SnapdSnap or %NULL on error.</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="Snap"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2193">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2194">a #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
          <parameter name="suggested_currency"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2195">location to store the ISO 4217 currency that is suggested to purchase with.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
        </parameters>
      </method>
      <method name="find_section_sync"
              c:identifier="snapd_client_find_section_sync"
              version="1.7"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client-sync.c"
             line="642">Find snaps in the store.</doc>
        <source-position filename="snapd-client.h" line="503"/>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve"
               filename="snapd-client-sync.c"
               line="654">an array of #SnapdSnap or %NULL on error.</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="Snap"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="644">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="645">a set of #SnapdFindFlags to control how the find is performed.</doc>
            <type name="FindFlags" c:type="SnapdFindFlags"/>
          </parameter>
          <parameter name="section"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="646">store section to search in or %NULL to search in all sections.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="query"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="647">query string to send or %NULL to get all snaps from the given section.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="suggested_currency"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="648">location to store the ISO 4217 currency that is suggested to purchase with.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="649">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="find_sync"
              c:identifier="snapd_client_find_sync"
              version="1.0"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client-sync.c"
             line="617">Find snaps in the store.</doc>
        <source-position filename="snapd-client.h" line="486"/>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve"
               filename="snapd-client-sync.c"
               line="628">an array of #SnapdSnap or %NULL on error.</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="Snap"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="619">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="620">a set of #SnapdFindFlags to control how the find is performed.</doc>
            <type name="FindFlags" c:type="SnapdFindFlags"/>
          </parameter>
          <parameter name="query" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="621">query string to send.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="suggested_currency"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="622">location to store the ISO 4217 currency that is suggested to purchase with.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="623">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_aliases_async"
              c:identifier="snapd_client_get_aliases_async"
              version="1.8">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="3193">Asynchronously get the available aliases.
See snapd_client_get_aliases_sync() for more information.</doc>
        <source-position filename="snapd-client.h" line="794"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3195">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3196">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3197">a #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3198">the data to pass to callback function.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_aliases_finish"
              c:identifier="snapd_client_get_aliases_finish"
              version="1.8"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="3217">Complete request started with snapd_client_get_aliases_async().
See snapd_client_get_aliases_sync() for more information.</doc>
        <source-position filename="snapd-client.h" line="798"/>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve"
               filename="snapd-client.c"
               line="3226">an array of #SnapdAlias or %NULL on error.</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="Alias"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3219">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3220">a #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_aliases_sync"
              c:identifier="snapd_client_get_aliases_sync"
              version="1.8"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client-sync.c"
             line="1206">Get the available aliases.</doc>
        <source-position filename="snapd-client.h" line="791"/>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve"
               filename="snapd-client-sync.c"
               line="1215">an array of #SnapdAlias or %NULL on error.</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="Alias"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="1208">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="1209">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_allow_interaction"
              c:identifier="snapd_client_get_allow_interaction"
              version="1.19">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="1085">Get whether snapd operations are allowed to interact with the user.</doc>
        <source-position filename="snapd-client.h" line="206"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-client.c"
               line="1091">%TRUE if interaction is allowed.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1087">a #SnapdClient</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_apps2_async"
              c:identifier="snapd_client_get_apps2_async"
              version="1.45">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="1622">Asynchronously get information on installed apps.
See snapd_client_get_apps2_sync() for more information.</doc>
        <source-position filename="snapd-client.h" line="376"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1624">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1625">a set of #SnapdGetAppsFlags to control what results are returned.</doc>
            <type name="GetAppsFlags" c:type="SnapdGetAppsFlags"/>
          </parameter>
          <parameter name="snaps"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1626">A list of snap names to return results for. If %NULL or empty then apps for all installed snaps are returned.</doc>
            <array c:type="GStrv">
              <type name="utf8"/>
            </array>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1627">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1628">a #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1629">the data to pass to callback function.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_apps2_finish"
              c:identifier="snapd_client_get_apps2_finish"
              version="1.45"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="1652">Complete request started with snapd_client_get_apps2_async().
See snapd_client_get_apps2_sync() for more information.</doc>
        <source-position filename="snapd-client.h" line="382"/>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve"
               filename="snapd-client.c"
               line="1661">an array of #SnapdApp or %NULL on error.</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="App"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1654">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1655">a #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_apps2_sync"
              c:identifier="snapd_client_get_apps2_sync"
              version="1.45"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client-sync.c"
             line="336">Get information on installed apps.</doc>
        <source-position filename="snapd-client.h" line="371"/>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve"
               filename="snapd-client-sync.c"
               line="346">an array of #SnapdApp or %NULL on error.</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="App"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="338">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="339">a set of #SnapdGetAppsFlags to control what results are returned.</doc>
            <type name="GetAppsFlags" c:type="SnapdGetAppsFlags"/>
          </parameter>
          <parameter name="snaps"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="340">A list of snap names to return results for. If %NULL or empty then apps for all installed snaps are returned.</doc>
            <array c:type="GStrv">
              <type name="utf8"/>
            </array>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="341">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_apps_async"
              c:identifier="snapd_client_get_apps_async"
              version="1.25"
              deprecated="1"
              deprecated-version="1.45">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="1580">Asynchronously get information on installed apps.
See snapd_client_get_apps_sync() for more information.</doc>
        <doc-deprecated xml:space="preserve">Use snapd_client_get_apps2_async()</doc-deprecated>
        <source-position filename="snapd-client.h" line="362"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1582">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1583">a set of #SnapdGetAppsFlags to control what results are returned.</doc>
            <type name="GetAppsFlags" c:type="SnapdGetAppsFlags"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1584">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1585">a #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1586">the data to pass to callback function.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_apps_finish"
              c:identifier="snapd_client_get_apps_finish"
              version="1.25"
              deprecated="1"
              deprecated-version="1.45"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="1602">Complete request started with snapd_client_get_apps_async().
See snapd_client_get_apps_sync() for more information.</doc>
        <doc-deprecated xml:space="preserve">Use snapd_client_get_apps2_finish()</doc-deprecated>
        <source-position filename="snapd-client.h" line="367"/>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve"
               filename="snapd-client.c"
               line="1611">an array of #SnapdApp or %NULL on error.</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="App"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1604">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1605">a #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_apps_sync"
              c:identifier="snapd_client_get_apps_sync"
              version="1.25"
              deprecated="1"
              deprecated-version="1.45"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client-sync.c"
             line="314">Get information on installed apps.</doc>
        <doc-deprecated xml:space="preserve">Use snapd_client_get_apps2_sync()</doc-deprecated>
        <source-position filename="snapd-client.h" line="358"/>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve"
               filename="snapd-client-sync.c"
               line="323">an array of #SnapdApp or %NULL on error.</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="App"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="316">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="317">a set of #SnapdGetAppsFlags to control what results are returned.</doc>
            <type name="GetAppsFlags" c:type="SnapdGetAppsFlags"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="318">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_assertions_async"
              c:identifier="snapd_client_get_assertions_async"
              version="1.8">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="1832">Asynchronously get assertions.
See snapd_client_get_assertions_sync() for more information.</doc>
        <source-position filename="snapd-client.h" line="403"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1834">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1835">assertion type to get.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1836">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1837">a #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1838">the data to pass to callback function.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_assertions_finish"
              c:identifier="snapd_client_get_assertions_finish"
              version="1.8"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="1859">Complete request started with snapd_client_get_assertions_async().
See snapd_client_get_assertions_sync() for more information.</doc>
        <source-position filename="snapd-client.h" line="408"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="snapd-client.c"
               line="1868">an array of assertions or %NULL on error.</doc>
          <array c:type="GStrv">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1861">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1862">a #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_assertions_sync"
              c:identifier="snapd_client_get_assertions_sync"
              version="1.8"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client-sync.c"
             line="460">Get assertions.</doc>
        <source-position filename="snapd-client.h" line="399"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="snapd-client-sync.c"
               line="469">an array of assertions or %NULL on error.</doc>
          <array c:type="GStrv">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="462">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="463">assertion type to get.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="464">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_auth_data"
              c:identifier="snapd_client_get_auth_data"
              version="1.0">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="1235">Get the authorization data that is used for requests.</doc>
        <source-position filename="snapd-client.h" line="246"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="snapd-client.c"
               line="1241">a #SnapdAuthData or %NULL.</doc>
          <type name="AuthData" c:type="SnapdAuthData*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1237">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_change_async"
              c:identifier="snapd_client_get_change_async"
              version="1.29">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="1322">Asynchronously get information on a change.
See snapd_client_get_change_sync() for more information.</doc>
        <source-position filename="snapd-client.h" line="270"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1324">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1325">a change ID to get information on.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1326">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1327">a #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1328">the data to pass to callback function.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_change_finish"
              c:identifier="snapd_client_get_change_finish"
              version="1.29"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="1349">Complete request started with snapd_client_get_change_async().
See snapd_client_get_change_sync() for more information.</doc>
        <source-position filename="snapd-client.h" line="276"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="snapd-client.c"
               line="1358">a #SnapdChange or %NULL on error.</doc>
          <type name="Change" c:type="SnapdChange*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1351">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1352">a #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_change_sync"
              c:identifier="snapd_client_get_change_sync"
              version="1.29"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client-sync.c"
             line="176">Get information on a change.</doc>
        <source-position filename="snapd-client.h" line="265"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="snapd-client-sync.c"
               line="185">a #SnapdChange or %NULL on error.</doc>
          <type name="Change" c:type="SnapdChange*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="178">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="179">a change ID to get information on.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="180">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_changes_async"
              c:identifier="snapd_client_get_changes_async"
              version="1.29">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="1253">Asynchronously get changes that have occurred / are occurring on the snap daemon.
See snapd_client_get_changes_sync() for more information.</doc>
        <source-position filename="snapd-client.h" line="254"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1255">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="filter" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1256">changes to filter on.</doc>
            <type name="ChangeFilter" c:type="SnapdChangeFilter"/>
          </parameter>
          <parameter name="snap_name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1257">name of snap to filter on or %NULL for changes for any snap.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1258">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1259">a #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1260">the data to pass to callback function.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_changes_finish"
              c:identifier="snapd_client_get_changes_finish"
              version="1.29"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="1294">Complete request started with snapd_client_get_changes_async().
See snapd_client_get_changes_sync() for more information.</doc>
        <source-position filename="snapd-client.h" line="261"/>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve"
               filename="snapd-client.c"
               line="1303">an array of #SnapdChange or %NULL on error.</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="Change"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1296">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1297">a #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_changes_sync"
              c:identifier="snapd_client_get_changes_sync"
              version="1.29"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client-sync.c"
             line="146">Get changes that have occurred / are occurring on the snap daemon.</doc>
        <source-position filename="snapd-client.h" line="248"/>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve"
               filename="snapd-client-sync.c"
               line="156">an array of #SnapdChange or %NULL on error.</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="Change"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="148">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="filter" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="149">changes to filter on.</doc>
            <type name="ChangeFilter" c:type="SnapdChangeFilter"/>
          </parameter>
          <parameter name="snap_name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="150">name of snap to filter on or %NULL for changes for any snap.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="151">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_icon_async"
              c:identifier="snapd_client_get_icon_async"
              version="1.0">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="1680">Asynchronously get the icon for an installed snap.
See snapd_client_get_icon_sync() for more information.</doc>
        <source-position filename="snapd-client.h" line="390"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1682">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1683">name of snap to get icon for.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1684">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1685">a #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1686">the data to pass to callback function.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_icon_finish"
              c:identifier="snapd_client_get_icon_finish"
              version="1.0"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="1706">Complete request started with snapd_client_get_icon_async().
See snapd_client_get_icon_sync() for more information.</doc>
        <source-position filename="snapd-client.h" line="395"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="snapd-client.c"
               line="1715">a #SnapdIcon or %NULL on error.</doc>
          <type name="Icon" c:type="SnapdIcon*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1708">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1709">a #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_icon_sync"
              c:identifier="snapd_client_get_icon_sync"
              version="1.0"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client-sync.c"
             line="366">Get the icon for an installed snap.</doc>
        <source-position filename="snapd-client.h" line="386"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="snapd-client-sync.c"
               line="375">a #SnapdIcon or %NULL on error.</doc>
          <type name="Icon" c:type="SnapdIcon*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="368">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="369">name of snap to get icon for.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="370">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_interfaces_async"
              c:identifier="snapd_client_get_interfaces_async"
              version="1.0">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="1936">Asynchronously get the installed snap interfaces.
See snapd_client_get_interfaces_sync() for more information.</doc>
        <source-position filename="snapd-client.h" line="430"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1938">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1939">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1940">a #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1941">the data to pass to callback function.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_interfaces_finish"
              c:identifier="snapd_client_get_interfaces_finish"
              version="1.0"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="1960">Complete request started with snapd_client_get_interfaces_async().
See snapd_client_get_interfaces_sync() for more information.</doc>
        <source-position filename="snapd-client.h" line="434"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-client.c"
               line="1971">%TRUE on success or %FALSE on error.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1962">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1963">a #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
          <parameter name="plugs"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="container"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1964">the location to store the array of #SnapdPlug or %NULL.</doc>
            <array name="GLib.PtrArray" c:type="GPtrArray**">
              <type name="Plug"/>
            </array>
          </parameter>
          <parameter name="slots"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="container"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1965">the location to store the array of #SnapdSlot or %NULL.</doc>
            <array name="GLib.PtrArray" c:type="GPtrArray**">
              <type name="Slot"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="get_interfaces_sync"
              c:identifier="snapd_client_get_interfaces_sync"
              version="1.0"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client-sync.c"
             line="517">Get the installed snap interfaces.</doc>
        <source-position filename="snapd-client.h" line="425"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-client-sync.c"
               line="527">%TRUE on success or %FALSE on error.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="519">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="plugs"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="container"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="520">the location to store the array of #SnapdPlug or %NULL.</doc>
            <array name="GLib.PtrArray" c:type="GPtrArray**">
              <type name="Plug"/>
            </array>
          </parameter>
          <parameter name="slots"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="container"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="521">the location to store the array of #SnapdSlot or %NULL.</doc>
            <array name="GLib.PtrArray" c:type="GPtrArray**">
              <type name="Slot"/>
            </array>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="522">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_maintenance"
              c:identifier="snapd_client_get_maintenance"
              version="1.45">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="1066">Get the maintenance information reported by snapd or %NULL if no maintenance is in progress.
This information is updated after every request.</doc>
        <source-position filename="snapd-client.h" line="208"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="snapd-client.c"
               line="1073">a #SnapdMaintenance or %NULL.</doc>
          <type name="Maintenance" c:type="SnapdMaintenance*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1068">a #SnapdClient</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_sections_async"
              c:identifier="snapd_client_get_sections_async"
              version="1.7">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="3141">Asynchronously get the store sections.
See snapd_client_get_sections_sync() for more information.</doc>
        <source-position filename="snapd-client.h" line="783"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3143">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3144">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3145">a #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3146">the data to pass to callback function.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_sections_finish"
              c:identifier="snapd_client_get_sections_finish"
              version="1.7"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="3165">Complete request started with snapd_client_get_sections_async().
See snapd_client_get_sections_sync() for more information.</doc>
        <source-position filename="snapd-client.h" line="787"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="snapd-client.c"
               line="3174">an array of section names or %NULL on error.</doc>
          <array c:type="GStrv">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3167">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3168">a #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_sections_sync"
              c:identifier="snapd_client_get_sections_sync"
              version="1.7"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client-sync.c"
             line="1179">Get the store sections.</doc>
        <source-position filename="snapd-client.h" line="780"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="snapd-client-sync.c"
               line="1188">an array of section names or %NULL on error.</doc>
          <array c:type="GStrv">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="1181">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="1182">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_snap_async"
              c:identifier="snapd_client_get_snap_async"
              version="1.42">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="1526">Asynchronously get information of a single installed snap.
See snapd_client_get_snap_sync() for more information.</doc>
        <source-position filename="snapd-client.h" line="349"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1528">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1529">name of snap to get.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1530">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1531">a #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1532">the data to pass to callback function.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_snap_finish"
              c:identifier="snapd_client_get_snap_finish"
              version="1.42"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="1552">Complete request started with snapd_client_get_snap_async().
See snapd_client_get_snap_sync() for more information.</doc>
        <source-position filename="snapd-client.h" line="354"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="snapd-client.c"
               line="1561">a #SnapdSnap or %NULL on error.</doc>
          <type name="Snap" c:type="SnapdSnap*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1554">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1555">a #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_snap_sync"
              c:identifier="snapd_client_get_snap_sync"
              version="1.42"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client-sync.c"
             line="286">Get information of a single installed snap. If the snap does not exist an error occurs.</doc>
        <source-position filename="snapd-client.h" line="345"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="snapd-client-sync.c"
               line="295">a #SnapdSnap or %NULL on error.</doc>
          <type name="Snap" c:type="SnapdSnap*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="288">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="289">name of snap to get.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="290">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_snaps_async"
              c:identifier="snapd_client_get_snaps_async"
              version="1.42">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="1774">Asynchronously get information on installed snaps.
See snapd_client_get_snaps_sync() for more information.</doc>
        <source-position filename="snapd-client.h" line="322"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1776">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1777">a set of #SnapdGetSnapsFlags to control what results are returned.</doc>
            <type name="GetSnapsFlags" c:type="SnapdGetSnapsFlags"/>
          </parameter>
          <parameter name="names"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1778">A list of snap names to return results for. If %NULL or empty then all installed snaps are returned.</doc>
            <array c:type="GStrv">
              <type name="utf8"/>
            </array>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1779">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1780">a #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1781">the data to pass to callback function.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_snaps_finish"
              c:identifier="snapd_client_get_snaps_finish"
              version="1.42"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="1804">Complete request started with snapd_client_get_snaps_async().
See snapd_client_get_snaps_sync() for more information.</doc>
        <source-position filename="snapd-client.h" line="328"/>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve"
               filename="snapd-client.c"
               line="1813">an array of #SnapdSnap or %NULL on error.</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="Snap"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1806">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1807">a #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_snaps_sync"
              c:identifier="snapd_client_get_snaps_sync"
              version="1.42"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client-sync.c"
             line="426">Get information on installed snaps (snaps with status %SNAPD_SNAP_STATUS_ACTIVE).
If @flags contains %SNAPD_GET_SNAPS_FLAGS_INCLUDE_INACTIVE then also return snaps
with status %SNAPD_SNAP_STATUS_INSTALLED.

If @names is not %NULL and contains at least one name only snaps that match these names are
returned. If a snap is not installed it is not returned (no error is generated).</doc>
        <source-position filename="snapd-client.h" line="317"/>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve"
               filename="snapd-client-sync.c"
               line="441">an array of #SnapdSnap or %NULL on error.</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="Snap"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="428">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="429">a set of #SnapdGetSnapsFlags to control what results are returned.</doc>
            <type name="GetSnapsFlags" c:type="SnapdGetSnapsFlags"/>
          </parameter>
          <parameter name="names"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="430">A list of snap names or %NULL.</doc>
            <array c:type="GStrv">
              <type name="utf8"/>
            </array>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="431">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_socket_path"
              c:identifier="snapd_client_get_socket_path"
              version="1.24">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="990">Get the unix socket path to connect to snapd with.</doc>
        <source-position filename="snapd-client.h" line="196"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-client.c"
               line="996">socket path.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="992">a #SnapdClient</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_system_information_async"
              c:identifier="snapd_client_get_system_information_async"
              version="1.0">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="1432">Request system information asynchronously from snapd.
See snapd_client_get_system_information_sync() for more information.</doc>
        <source-position filename="snapd-client.h" line="298"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1434">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1435">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1436">a #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1437">the data to pass to callback function.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_system_information_finish"
              c:identifier="snapd_client_get_system_information_finish"
              version="1.0"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="1456">Complete request started with snapd_client_get_system_information_async().
See snapd_client_get_system_information_sync() for more information.</doc>
        <source-position filename="snapd-client.h" line="302"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="snapd-client.c"
               line="1465">a #SnapdSystemInformation or %NULL on error.</doc>
          <type name="SystemInformation" c:type="SnapdSystemInformation*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1458">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1459">a #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_system_information_sync"
              c:identifier="snapd_client_get_system_information_sync"
              version="1.0"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client-sync.c"
             line="236">Request system information from snapd.
While this blocks, snapd is expected to return the information quickly.</doc>
        <source-position filename="snapd-client.h" line="295"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="snapd-client-sync.c"
               line="245">a #SnapdSystemInformation or %NULL on error.</doc>
          <type name="SystemInformation" c:type="SnapdSystemInformation*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="238">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="239">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_user_agent"
              c:identifier="snapd_client_get_user_agent"
              version="1.16">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="1029">Get the HTTP user-agent that is sent with each request to snapd.</doc>
        <source-position filename="snapd-client.h" line="201"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="snapd-client.c"
               line="1035">user agent or %NULL if none set.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1031">a #SnapdClient</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_users_async"
              c:identifier="snapd_client_get_users_async"
              version="1.26">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="3089">Asynchronously get user accounts that are valid for this device.
See snapd_client_get_users_sync() for more information.</doc>
        <source-position filename="snapd-client.h" line="772"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3091">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3092">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3093">a #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3094">the data to pass to callback function.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_users_finish"
              c:identifier="snapd_client_get_users_finish"
              version="1.26"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="3113">Complete request started with snapd_client_get_users_async().
See snapd_client_get_users_sync() for more information.</doc>
        <source-position filename="snapd-client.h" line="776"/>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve"
               filename="snapd-client.c"
               line="3122">an array of #SnapdUserInformation or %NULL on error.</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="UserInformation"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3115">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3116">a #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_users_sync"
              c:identifier="snapd_client_get_users_sync"
              version="1.26"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client-sync.c"
             line="1152">Get user accounts that are valid for this device.</doc>
        <source-position filename="snapd-client.h" line="769"/>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve"
               filename="snapd-client-sync.c"
               line="1161">an array of #SnapdUserInformation or %NULL on error.</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="UserInformation"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="1154">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="1155">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="install2_async"
              c:identifier="snapd_client_install2_async"
              version="1.12">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="2323">Asynchronously install a snap from the store.
See snapd_client_install2_sync() for more information.</doc>
        <source-position filename="snapd-client.h" line="561"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2325">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2326">a set of #SnapdInstallFlags to control install options.</doc>
            <type name="InstallFlags" c:type="SnapdInstallFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2327">name of snap to install.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="channel"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2328">channel to install from or %NULL for default.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="revision"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2329">revision to install or %NULL for default.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="call"
                     closure="5">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2330">function to callback with progress.</doc>
            <type name="ProgressCallback" c:type="SnapdProgressCallback"/>
          </parameter>
          <parameter name="progress_callback_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2331">user data to pass to @progress_callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2332">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="8">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2333">a #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2334">the data to pass to callback function.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="install2_finish"
              c:identifier="snapd_client_install2_finish"
              version="1.12"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="2367">Complete request started with snapd_client_install2_async().
See snapd_client_install2_sync() for more information.</doc>
        <source-position filename="snapd-client.h" line="571"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-client.c"
               line="2376">%TRUE on success or %FALSE on error.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2369">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2370">a #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="install2_sync"
              c:identifier="snapd_client_install2_sync"
              version="1.12"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client-sync.c"
             line="726">Install a snap from the store.</doc>
        <source-position filename="snapd-client.h" line="552"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-client-sync.c"
               line="740">%TRUE on success or %FALSE on error.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="728">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="729">a set of #SnapdInstallFlags to control install options.</doc>
            <type name="InstallFlags" c:type="SnapdInstallFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="730">name of snap to install.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="channel"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="731">channel to install from or %NULL for default.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="revision"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="732">revision to install or %NULL for default.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="call"
                     closure="5">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="733">function to callback with progress.</doc>
            <type name="ProgressCallback" c:type="SnapdProgressCallback"/>
          </parameter>
          <parameter name="progress_callback_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="734">user data to pass to @progress_callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="735">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="install_async"
              c:identifier="snapd_client_install_async"
              version="1.0"
              deprecated="1"
              deprecated-version="1.12">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="2277">Asynchronously install a snap from the store.
See snapd_client_install_sync() for more information.</doc>
        <doc-deprecated xml:space="preserve">Use snapd_client_install2_async()</doc-deprecated>
        <source-position filename="snapd-client.h" line="540"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2279">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2280">name of snap to install.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="channel"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2281">channel to install from or %NULL for default.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="call"
                     closure="3">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2282">function to callback with progress.</doc>
            <type name="ProgressCallback" c:type="SnapdProgressCallback"/>
          </parameter>
          <parameter name="progress_callback_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2283">user data to pass to @progress_callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2284">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2285">a #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2286">the data to pass to callback function.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="install_finish"
              c:identifier="snapd_client_install_finish"
              version="1.0"
              deprecated="1"
              deprecated-version="1.12"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="2303">Complete request started with snapd_client_install_async().
See snapd_client_install_sync() for more information.</doc>
        <doc-deprecated xml:space="preserve">Use snapd_client_install2_finish()</doc-deprecated>
        <source-position filename="snapd-client.h" line="548"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-client.c"
               line="2312">%TRUE on success or %FALSE on error.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2305">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2306">a #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="install_stream_async"
              c:identifier="snapd_client_install_stream_async"
              version="1.9">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="2445">Asynchronously install a snap.
See snapd_client_install_stream_sync() for more information.</doc>
        <source-position filename="snapd-client.h" line="582"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2447">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2448">a set of #SnapdInstallFlags to control install options.</doc>
            <type name="InstallFlags" c:type="SnapdInstallFlags"/>
          </parameter>
          <parameter name="stream" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2449">a #GInputStream containing the snap file contents to install.</doc>
            <type name="Gio.InputStream" c:type="GInputStream*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="call"
                     closure="3">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2450">function to callback with progress.</doc>
            <type name="ProgressCallback" c:type="SnapdProgressCallback"/>
          </parameter>
          <parameter name="progress_callback_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2451">user data to pass to @progress_callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2452">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2453">a #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2454">the data to pass to callback function.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="install_stream_finish"
              c:identifier="snapd_client_install_stream_finish"
              version="1.9"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="2485">Complete request started with snapd_client_install_stream_async().
See snapd_client_install_stream_sync() for more information.</doc>
        <source-position filename="snapd-client.h" line="590"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-client.c"
               line="2494">%TRUE on success or %FALSE on error.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2487">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2488">a #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="install_stream_sync"
              c:identifier="snapd_client_install_stream_sync"
              version="1.9"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client-sync.c"
             line="762">Install a snap. The snap contents are provided in the form of an input stream.
To install from a local file, do the following:

|[
g_autoptr(GFile) file = g_file_new_for_path (path_to_snap_file);
g_autoptr(GInputStream) stream = g_file_read (file, cancellable, &amp;error);
snapd_client_install_stream_sync (client, stream, progress_cb, NULL, cancellable, &amp;error);
\]

Or if you have the file in memory you can use:

|[
g_autoptr(GInputStream) stream = g_memory_input_stream_new_from_data (data, data_length, free_data);
snapd_client_install_stream_sync (client, stream, progress_cb, NULL, cancellable, &amp;error);
\]</doc>
        <source-position filename="snapd-client.h" line="575"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-client-sync.c"
               line="788">%TRUE on success or %FALSE on error.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="764">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="765">a set of #SnapdInstallFlags to control install options.</doc>
            <type name="InstallFlags" c:type="SnapdInstallFlags"/>
          </parameter>
          <parameter name="stream" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="766">a #GInputStream containing the snap file contents to install.</doc>
            <type name="Gio.InputStream" c:type="GInputStream*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="call"
                     closure="3">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="767">function to callback with progress.</doc>
            <type name="ProgressCallback" c:type="SnapdProgressCallback"/>
          </parameter>
          <parameter name="progress_callback_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="768">user data to pass to @progress_callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="769">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="install_sync"
              c:identifier="snapd_client_install_sync"
              version="1.0"
              deprecated="1"
              deprecated-version="1.12"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client-sync.c"
             line="700">Install a snap from the store.</doc>
        <doc-deprecated xml:space="preserve">Use snapd_client_install2_sync()</doc-deprecated>
        <source-position filename="snapd-client.h" line="533"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-client-sync.c"
               line="712">%TRUE on success or %FALSE on error.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="702">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="703">name of snap to install.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="channel"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="704">channel to install from or %NULL for default.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="call"
                     closure="3">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="705">function to callback with progress.</doc>
            <type name="ProgressCallback" c:type="SnapdProgressCallback"/>
          </parameter>
          <parameter name="progress_callback_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="706">user data to pass to @progress_callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="707">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="list_async"
              c:identifier="snapd_client_list_async"
              version="1.0"
              deprecated="1"
              deprecated-version="1.42">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="1734">Asynchronously get information on all installed snaps.
See snapd_client_list_sync() for more information.</doc>
        <doc-deprecated xml:space="preserve">Use snapd_client_get_snaps_async()</doc-deprecated>
        <source-position filename="snapd-client.h" line="309"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1736">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1737">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1738">a #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1739">the data to pass to callback function.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="list_finish"
              c:identifier="snapd_client_list_finish"
              version="1.0"
              deprecated="1"
              deprecated-version="1.42"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="1754">Complete request started with snapd_client_list_async().
See snapd_client_list_sync() for more information.</doc>
        <doc-deprecated xml:space="preserve">Use snapd_client_get_snaps_finish()</doc-deprecated>
        <source-position filename="snapd-client.h" line="313"/>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve"
               filename="snapd-client.c"
               line="1763">an array of #SnapdSnap or %NULL on error.</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="Snap"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1756">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1757">a #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="list_one_async"
              c:identifier="snapd_client_list_one_async"
              version="1.0"
              deprecated="1"
              deprecated-version="1.42">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="1484">Asynchronously get information of a single installed snap.
See snapd_client_list_one_sync() for more information.</doc>
        <doc-deprecated xml:space="preserve">Use snapd_client_get_snap_async()</doc-deprecated>
        <source-position filename="snapd-client.h" line="336"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1486">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1487">name of snap to get.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1488">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1489">a #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1490">the data to pass to callback function.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="list_one_finish"
              c:identifier="snapd_client_list_one_finish"
              version="1.0"
              deprecated="1"
              deprecated-version="1.42"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="1506">Complete request started with snapd_client_list_one_async().
See snapd_client_list_one_sync() for more information.</doc>
        <doc-deprecated xml:space="preserve">Use snapd_client_get_snap_finish()</doc-deprecated>
        <source-position filename="snapd-client.h" line="341"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="snapd-client.c"
               line="1515">a #SnapdSnap or %NULL on error.</doc>
          <type name="Snap" c:type="SnapdSnap*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1508">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1509">a #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="list_one_sync"
              c:identifier="snapd_client_list_one_sync"
              version="1.0"
              deprecated="1"
              deprecated-version="1.42"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client-sync.c"
             line="264">Get information of a single installed snap.</doc>
        <doc-deprecated xml:space="preserve">Use snapd_client_get_snap_sync()</doc-deprecated>
        <source-position filename="snapd-client.h" line="332"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="snapd-client-sync.c"
               line="273">a #SnapdSnap or %NULL on error.</doc>
          <type name="Snap" c:type="SnapdSnap*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="266">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="267">name of snap to get.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="268">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="list_sync"
              c:identifier="snapd_client_list_sync"
              version="1.0"
              deprecated="1"
              deprecated-version="1.42"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client-sync.c"
             line="394">Get information on all installed snaps.</doc>
        <doc-deprecated xml:space="preserve">Use snapd_client_get_snaps_sync()</doc-deprecated>
        <source-position filename="snapd-client.h" line="306"/>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve"
               filename="snapd-client-sync.c"
               line="402">an array of #SnapdSnap or %NULL on error.</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="Snap"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="396">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="397">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="login2_async"
              c:identifier="snapd_client_login2_async"
              version="1.26">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="1155">Asynchronously get authorization to install/remove snaps.
See snapd_client_login2_sync() for more information.</doc>
        <source-position filename="snapd-client.h" line="233"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1157">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="email" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1158">email address to log in with.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="password" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1159">password to log in with.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="otp"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1160">response to one-time password challenge.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1161">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="5">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1162">a #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1163">the data to pass to callback function.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="login2_finish"
              c:identifier="snapd_client_login2_finish"
              version="1.26"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="1183">Complete request started with snapd_client_login2_async().
See snapd_client_login2_sync() for more information.</doc>
        <source-position filename="snapd-client.h" line="240"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="snapd-client.c"
               line="1192">a #SnapdUserInformation or %NULL on error.</doc>
          <type name="UserInformation" c:type="SnapdUserInformation*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1185">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1186">a #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="login2_sync"
              c:identifier="snapd_client_login2_sync"
              version="1.26"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client-sync.c"
             line="113">Log in to snapd and get authorization to install/remove snaps.</doc>
        <source-position filename="snapd-client.h" line="227"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="snapd-client-sync.c"
               line="124">a #SnapdUserInformation or %NULL on error.</doc>
          <type name="UserInformation" c:type="SnapdUserInformation*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="115">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="email" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="116">email address to log in with.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="password" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="117">password to log in with.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="otp"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="118">response to one-time password challenge.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="119">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="login_async"
              c:identifier="snapd_client_login_async"
              version="1.0"
              deprecated="1"
              deprecated-version="1.26">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="1103">Asynchronously get authorization to install/remove snaps.
See snapd_client_login_sync() for more information.</doc>
        <doc-deprecated xml:space="preserve">Use snapd_client_login2_async()</doc-deprecated>
        <source-position filename="snapd-client.h" line="216"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1105">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="email" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1106">email address to log in with.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="password" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1107">password to log in with.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="otp"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1108">response to one-time password challenge.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1109">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="5">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1110">a #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1111">the data to pass to callback function.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="login_finish"
              c:identifier="snapd_client_login_finish"
              version="1.0"
              deprecated="1"
              deprecated-version="1.26"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="1127">Complete request started with snapd_client_login_async().
See snapd_client_login_sync() for more information.</doc>
        <doc-deprecated xml:space="preserve">Use snapd_client_login2_finish()</doc-deprecated>
        <source-position filename="snapd-client.h" line="223"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="snapd-client.c"
               line="1136">a #SnapdAuthData or %NULL on error.</doc>
          <type name="AuthData" c:type="SnapdAuthData*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1129">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1130">a #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="login_sync"
              c:identifier="snapd_client_login_sync"
              version="1.0"
              deprecated="1"
              deprecated-version="1.26"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client-sync.c"
             line="75">Log in to snapd and get authorization to install/remove snaps.</doc>
        <doc-deprecated xml:space="preserve">Use snapd_client_login2_sync()</doc-deprecated>
        <source-position filename="snapd-client.h" line="210"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="snapd-client-sync.c"
               line="86">a #SnapdAuthData or %NULL on error.</doc>
          <type name="AuthData" c:type="SnapdAuthData*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="77">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="email" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="78">email address to log in with.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="password" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="79">password to log in with.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="otp"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="80">response to one-time password challenge.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="81">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="prefer_async"
              c:identifier="snapd_client_prefer_async"
              version="1.25">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="3359">Asynchronously ???.
See snapd_client_prefer_sync() for more information.</doc>
        <source-position filename="snapd-client.h" line="848"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3361">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="snap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3362">the name of the snap to modify.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="call"
                     closure="2">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3363">function to callback with progress.</doc>
            <type name="ProgressCallback" c:type="SnapdProgressCallback"/>
          </parameter>
          <parameter name="progress_callback_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3364">user data to pass to @progress_callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3365">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="5">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3366">a #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3367">the data to pass to callback function.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="prefer_finish"
              c:identifier="snapd_client_prefer_finish"
              version="1.25"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="3385">Complete request started with snapd_client_prefer_async().
See snapd_client_prefer_sync() for more information.</doc>
        <source-position filename="snapd-client.h" line="855"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-client.c"
               line="3394">%TRUE on success or %FALSE on error.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3387">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3388">a #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="prefer_sync"
              c:identifier="snapd_client_prefer_sync"
              version="1.25"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client-sync.c"
             line="1300">???</doc>
        <source-position filename="snapd-client.h" line="842"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="1302">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="snap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="1303">the name of the snap to modify.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="call"
                     closure="2">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="1304">function to callback with progress.</doc>
            <type name="ProgressCallback" c:type="SnapdProgressCallback"/>
          </parameter>
          <parameter name="progress_callback_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="1305">user data to pass to @progress_callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="1306">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="refresh_all_async"
              c:identifier="snapd_client_refresh_all_async"
              version="1.5">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="2613">Asynchronously ensure all snaps are updated to their latest versions.
See snapd_client_refresh_all_sync() for more information.</doc>
        <source-position filename="snapd-client.h" line="635"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2615">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="call"
                     closure="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2616">function to callback with progress.</doc>
            <type name="ProgressCallback" c:type="SnapdProgressCallback"/>
          </parameter>
          <parameter name="progress_callback_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2617">user data to pass to @progress_callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2618">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2619">a #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2620">the data to pass to callback function.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="refresh_all_finish"
              c:identifier="snapd_client_refresh_all_finish"
              version="1.5"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="2640">Complete request started with snapd_client_refresh_all_async().
See snapd_client_refresh_all_sync() for more information.</doc>
        <source-position filename="snapd-client.h" line="641"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="snapd-client.c"
               line="2649">a %NULL-terminated array of the snap names refreshed or %NULL on error.</doc>
          <array c:type="GStrv">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2642">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2643">a #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="refresh_all_sync"
              c:identifier="snapd_client_refresh_all_sync"
              version="1.5"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client-sync.c"
             line="875">Update all installed snaps to their latest version.</doc>
        <source-position filename="snapd-client.h" line="630"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="snapd-client-sync.c"
               line="885">a %NULL-terminated array of the snap names refreshed or %NULL on error.</doc>
          <array c:type="GStrv">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="877">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="call"
                     closure="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="878">function to callback with progress.</doc>
            <type name="ProgressCallback" c:type="SnapdProgressCallback"/>
          </parameter>
          <parameter name="progress_callback_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="879">user data to pass to @progress_callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="880">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="refresh_async"
              c:identifier="snapd_client_refresh_async"
              version="1.0">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="2559">Asynchronously ensure an installed snap is at the latest version.
See snapd_client_refresh_sync() for more information.</doc>
        <source-position filename="snapd-client.h" line="618"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2561">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2562">name of snap to refresh.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="channel"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2563">channel to refresh from or %NULL for default.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="call"
                     closure="3">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2564">function to callback with progress.</doc>
            <type name="ProgressCallback" c:type="SnapdProgressCallback"/>
          </parameter>
          <parameter name="progress_callback_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2565">user data to pass to @progress_callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2566">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2567">a #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2568">the data to pass to callback function.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="refresh_finish"
              c:identifier="snapd_client_refresh_finish"
              version="1.0"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="2591">Complete request started with snapd_client_refresh_async().
See snapd_client_refresh_sync() for more information.</doc>
        <source-position filename="snapd-client.h" line="626"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-client.c"
               line="2600">%TRUE on success or %FALSE on error.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2593">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2594">a #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="refresh_sync"
              c:identifier="snapd_client_refresh_sync"
              version="1.0"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client-sync.c"
             line="842">Ensure an installed snap is at the latest version.</doc>
        <source-position filename="snapd-client.h" line="611"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-client-sync.c"
               line="854">%TRUE on success or %FALSE on error.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="844">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="845">name of snap to refresh.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="channel"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="846">channel to refresh from or %NULL for default.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="call"
                     closure="3">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="847">function to callback with progress.</doc>
            <type name="ProgressCallback" c:type="SnapdProgressCallback"/>
          </parameter>
          <parameter name="progress_callback_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="848">user data to pass to @progress_callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="849">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_async"
              c:identifier="snapd_client_remove_async"
              version="1.0">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="2669">Asynchronously uninstall a snap.
See snapd_client_remove_sync() for more information.</doc>
        <source-position filename="snapd-client.h" line="651"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2671">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2672">name of snap to remove.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="call"
                     closure="2">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2673">function to callback with progress.</doc>
            <type name="ProgressCallback" c:type="SnapdProgressCallback"/>
          </parameter>
          <parameter name="progress_callback_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2674">user data to pass to @progress_callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2675">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="5">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2676">a #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2677">the data to pass to callback function.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_finish"
              c:identifier="snapd_client_remove_finish"
              version="1.0"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="2699">Complete request started with snapd_client_remove_async().
See snapd_client_remove_sync() for more information.</doc>
        <source-position filename="snapd-client.h" line="658"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-client.c"
               line="2708">%TRUE on success or %FALSE on error.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2701">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2702">a #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_sync"
              c:identifier="snapd_client_remove_sync"
              version="1.0"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client-sync.c"
             line="904">Uninstall a snap.</doc>
        <source-position filename="snapd-client.h" line="645"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-client-sync.c"
               line="915">%TRUE on success or %FALSE on error.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="906">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="907">name of snap to remove.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="call"
                     closure="2">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="908">function to callback with progress.</doc>
            <type name="ProgressCallback" c:type="SnapdProgressCallback"/>
          </parameter>
          <parameter name="progress_callback_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="909">user data to pass to @progress_callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="910">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="reset_aliases_async"
              c:identifier="snapd_client_reset_aliases_async"
              version="1.8"
              deprecated="1"
              deprecated-version="1.25">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="3517">Asynchronously change the state of aliases.
See snapd_client_reset_aliases_sync() for more information.</doc>
        <doc-deprecated xml:space="preserve">Use snapd_client_disable_aliases_async()</doc-deprecated>
        <source-position filename="snapd-client.h" line="904"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3519">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="snap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3520">the name of the snap to modify.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="aliases" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3521">the aliases to modify.</doc>
            <array c:type="GStrv">
              <type name="utf8"/>
            </array>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="call"
                     closure="3">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3522">function to callback with progress.</doc>
            <type name="ProgressCallback" c:type="SnapdProgressCallback"/>
          </parameter>
          <parameter name="progress_callback_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3523">user data to pass to @progress_callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3524">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3525">a #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3526">the data to pass to callback function.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="reset_aliases_finish"
              c:identifier="snapd_client_reset_aliases_finish"
              version="1.8"
              deprecated="1"
              deprecated-version="1.25"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="3549">Complete request started with snapd_client_reset_aliases_async().
See snapd_client_reset_aliases_sync() for more information.</doc>
        <doc-deprecated xml:space="preserve">Use snapd_client_disable_aliases_finish()</doc-deprecated>
        <source-position filename="snapd-client.h" line="912"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-client.c"
               line="3558">%TRUE on success or %FALSE on error.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3551">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3552">a #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="reset_aliases_sync"
              c:identifier="snapd_client_reset_aliases_sync"
              version="1.8"
              deprecated="1"
              deprecated-version="1.25"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client-sync.c"
             line="1387">Change the state of aliases.</doc>
        <doc-deprecated xml:space="preserve">Use snapd_client_disable_aliases_sync()</doc-deprecated>
        <source-position filename="snapd-client.h" line="897"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-client-sync.c"
               line="1400">%TRUE on success or %FALSE on error.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="1389">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="snap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="1390">the name of the snap to modify.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="aliases" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="1391">the aliases to modify.</doc>
            <array c:type="GStrv">
              <type name="utf8"/>
            </array>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="call"
                     closure="3">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="1392">function to callback with progress.</doc>
            <type name="ProgressCallback" c:type="SnapdProgressCallback"/>
          </parameter>
          <parameter name="progress_callback_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="1393">user data to pass to @progress_callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="1394">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="run_snapctl_async"
              c:identifier="snapd_client_run_snapctl_async"
              version="1.8">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="3572">Asynchronously run a snapctl command.
See snapd_client_run_snapctl_sync() for more information.</doc>
        <source-position filename="snapd-client.h" line="923"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3574">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="context_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3575">context for this call.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="args" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3576">the arguments to pass to snapctl.</doc>
            <array c:type="GStrv">
              <type name="utf8"/>
            </array>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3577">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3578">a #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3579">the data to pass to callback function.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="run_snapctl_finish"
              c:identifier="snapd_client_run_snapctl_finish"
              version="1.8"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="3601">Complete request started with snapd_client_run_snapctl_async().
See snapd_client_run_snapctl_sync() for more information.</doc>
        <source-position filename="snapd-client.h" line="929"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-client.c"
               line="3612">%TRUE on success or %FALSE on error.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3603">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3604">a #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
          <parameter name="stdout_output"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3605">the location to write the stdout from the command or %NULL.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="stderr_output"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3606">the location to write the stderr from the command or %NULL.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
        </parameters>
      </method>
      <method name="run_snapctl_sync"
              c:identifier="snapd_client_run_snapctl_sync"
              version="1.8"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client-sync.c"
             line="1415">Run a snapctl command.</doc>
        <source-position filename="snapd-client.h" line="916"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-client-sync.c"
               line="1428">%TRUE on success or %FALSE on error.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="1417">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="context_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="1418">context for this call.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="args" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="1419">the arguments to pass to snapctl.</doc>
            <array c:type="GStrv">
              <type name="utf8"/>
            </array>
          </parameter>
          <parameter name="stdout_output"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="1420">the location to write the stdout from the command or %NULL.</doc>
            <array c:type="GStrv">
              <type name="utf8"/>
            </array>
          </parameter>
          <parameter name="stderr_output"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="1421">the location to write the stderr from the command or %NULL.</doc>
            <array c:type="GStrv">
              <type name="utf8"/>
            </array>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="1422">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_allow_interaction"
              c:identifier="snapd_client_set_allow_interaction"
              version="1.19">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="1047">Set whether snapd operations are allowed to interact with the user.
This affects operations that use polkit authorisation.
Defaults to TRUE.</doc>
        <source-position filename="snapd-client.h" line="203"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1049">a #SnapdClient</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="allow_interaction" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1050">whether to allow interaction.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_auth_data"
              c:identifier="snapd_client_set_auth_data"
              version="1.0">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="1211">Set the authorization data to use for requests. Authorization data can be
obtained by:

- Logging into snapd using snapd_client_login_sync()

- Using an existing authorization with snapd_auth_data_new().</doc>
        <source-position filename="snapd-client.h" line="244"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1213">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="auth_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1214">a #SnapdAuthData or %NULL.</doc>
            <type name="AuthData" c:type="SnapdAuthData*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_socket_path"
              c:identifier="snapd_client_set_socket_path"
              version="1.24">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="966">Set the Unix socket path to connect to snapd with.
Defaults to the system socket.</doc>
        <source-position filename="snapd-client.h" line="193"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="968">a #SnapdClient</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="socket_path"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="969">a socket path or %NULL to reset to the default.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_user_agent"
              c:identifier="snapd_client_set_user_agent"
              version="1.16">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="1008">Set the HTTP user-agent that is sent with each request to snapd.
Defaults to "snapd-glib/VERSION".</doc>
        <source-position filename="snapd-client.h" line="198"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1010">a #SnapdClient</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="user_agent"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1011">a user agent or %NULL.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="switch_async"
              c:identifier="snapd_client_switch_async"
              version="1.26">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="2825">Asynchronously set the tracking channel on an installed snap.
See snapd_client_switch_sync() for more information.</doc>
        <source-position filename="snapd-client.h" line="703"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2827">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2828">name of snap to switch channel.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="channel" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2829">channel to track.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="call"
                     closure="3">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2830">function to callback with progress.</doc>
            <type name="ProgressCallback" c:type="SnapdProgressCallback"/>
          </parameter>
          <parameter name="progress_callback_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2831">user data to pass to @progress_callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2832">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2833">a #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2834">the data to pass to callback function.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="switch_finish"
              c:identifier="snapd_client_switch_finish"
              version="1.26"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="2857">Complete request started with snapd_client_switch_async().
See snapd_client_switch_sync() for more information.</doc>
        <source-position filename="snapd-client.h" line="711"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-client.c"
               line="2866">%TRUE on success or %FALSE on error.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2859">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2860">a #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="switch_sync"
              c:identifier="snapd_client_switch_sync"
              version="1.26"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client-sync.c"
             line="1000">Set the tracking channel on an installed snap.</doc>
        <source-position filename="snapd-client.h" line="696"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-client-sync.c"
               line="1012">%TRUE on success or %FALSE on error.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="1002">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="1003">name of snap to switch channel.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="channel" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="1004">channel to track.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="call"
                     closure="3">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="1005">function to callback with progress.</doc>
            <type name="ProgressCallback" c:type="SnapdProgressCallback"/>
          </parameter>
          <parameter name="progress_callback_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="1006">user data to pass to @progress_callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="1007">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="try_async"
              c:identifier="snapd_client_try_async"
              version="1.9">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="2507">Asynchronously try a snap.
See snapd_client_try_sync() for more information.</doc>
        <source-position filename="snapd-client.h" line="600"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2509">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2510">path to snap directory to try.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="call"
                     closure="2">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2511">function to callback with progress.</doc>
            <type name="ProgressCallback" c:type="SnapdProgressCallback"/>
          </parameter>
          <parameter name="progress_callback_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2512">user data to pass to @progress_callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2513">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="5">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2514">a #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2515">the data to pass to callback function.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="try_finish"
              c:identifier="snapd_client_try_finish"
              version="1.9"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="2537">Complete request started with snapd_client_try_async().
See snapd_client_try_sync() for more information.</doc>
        <source-position filename="snapd-client.h" line="607"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-client.c"
               line="2546">%TRUE on success or %FALSE on error.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2539">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2540">a #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="try_sync"
              c:identifier="snapd_client_try_sync"
              version="1.9"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client-sync.c"
             line="810">Try a snap.</doc>
        <source-position filename="snapd-client.h" line="594"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-client-sync.c"
               line="821">%TRUE on success or %FALSE on error.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="812">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="813">path to snap directory to try.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="call"
                     closure="2">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="814">function to callback with progress.</doc>
            <type name="ProgressCallback" c:type="SnapdProgressCallback"/>
          </parameter>
          <parameter name="progress_callback_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="815">user data to pass to @progress_callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="816">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="unalias_async"
              c:identifier="snapd_client_unalias_async"
              version="1.25">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="3310">Asynchronously remove an alias from an app.
See snapd_client_unalias_sync() for more information.</doc>
        <source-position filename="snapd-client.h" line="830"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3312">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="snap"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3313">the name of the snap to modify or %NULL.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="alias"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3314">the name of the alias to remove or %NULL to remove all aliases for the given snap.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="call"
                     closure="3">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3315">function to callback with progress.</doc>
            <type name="ProgressCallback" c:type="SnapdProgressCallback"/>
          </parameter>
          <parameter name="progress_callback_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3316">user data to pass to @progress_callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3317">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3318">a #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3319">the data to pass to callback function.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="unalias_finish"
              c:identifier="snapd_client_unalias_finish"
              version="1.25"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="3337">Complete request started with snapd_client_unalias_async().
See snapd_client_unalias_sync() for more information.</doc>
        <source-position filename="snapd-client.h" line="838"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-client.c"
               line="3346">%TRUE on success or %FALSE on error.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3339">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3340">a #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="unalias_sync"
              c:identifier="snapd_client_unalias_sync"
              version="1.25"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client-sync.c"
             line="1268">Remove an alias from an app.</doc>
        <source-position filename="snapd-client.h" line="823"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="1270">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="snap"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="1271">the name of the snap to modify or %NULL.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="alias"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="1272">the name of the alias to remove or %NULL to remove all aliases for the given snap.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="call"
                     closure="3">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="1273">function to callback with progress.</doc>
            <type name="ProgressCallback" c:type="SnapdProgressCallback"/>
          </parameter>
          <parameter name="progress_callback_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="1274">user data to pass to @progress_callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="1275">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <record name="ClientClass"
            c:type="SnapdClientClass"
            glib:is-gtype-struct-for="Client">
      <doc xml:space="preserve"
           filename="snapd-client.c"
           line="70">Class structure for #SnapdClient.</doc>
      <source-position filename="snapd-client.h" line="45"/>
      <field name="parent_class" readable="0" private="1">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="_snapd_reserved1" introspectable="0">
        <callback name="_snapd_reserved1">
          <source-position filename="snapd-client.h" line="41"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_snapd_reserved2" introspectable="0">
        <callback name="_snapd_reserved2">
          <source-position filename="snapd-client.h" line="42"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_snapd_reserved3" introspectable="0">
        <callback name="_snapd_reserved3">
          <source-position filename="snapd-client.h" line="43"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_snapd_reserved4" introspectable="0">
        <callback name="_snapd_reserved4">
          <source-position filename="snapd-client.h" line="44"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <enumeration name="Confinement"
                 version="1.0"
                 glib:type-name="SnapdConfinement"
                 glib:get-type="snapd_confinement_get_type"
                 c:type="SnapdConfinement">
      <doc xml:space="preserve"
           filename="snapd-channel.h"
           line="25">Confinement used by a snap.</doc>
      <member name="unknown"
              value="0"
              c:identifier="SNAPD_CONFINEMENT_UNKNOWN"
              glib:nick="unknown">
        <doc xml:space="preserve"
             filename="snapd-channel.h"
             line="27">the confinement of the snap is unknown.</doc>
      </member>
      <member name="strict"
              value="1"
              c:identifier="SNAPD_CONFINEMENT_STRICT"
              glib:nick="strict">
        <doc xml:space="preserve"
             filename="snapd-channel.h"
             line="28">the snap is using confinement.</doc>
      </member>
      <member name="devmode"
              value="2"
              c:identifier="SNAPD_CONFINEMENT_DEVMODE"
              glib:nick="devmode">
        <doc xml:space="preserve"
             filename="snapd-channel.h"
             line="29">the snap is in dev mode (i.e. unconfined).</doc>
      </member>
      <member name="classic"
              value="3"
              c:identifier="SNAPD_CONFINEMENT_CLASSIC"
              glib:nick="classic">
        <doc xml:space="preserve"
             filename="snapd-channel.h"
             line="30">the snap is using classic confinement.</doc>
      </member>
    </enumeration>
    <class name="Connection"
           c:symbol-prefix="connection"
           c:type="SnapdConnection"
           version="1.0"
           parent="GObject.Object"
           glib:type-name="SnapdConnection"
           glib:get-type="snapd_connection_get_type"
           glib:type-struct="ConnectionClass">
      <doc xml:space="preserve"
           filename="snapd-connection.c"
           line="26">#SnapdConnection contains the state of Snap a interface connection.</doc>
      <source-position filename="snapd-connection.h" line="23"/>
      <method name="get_name"
              c:identifier="snapd_connection_get_name"
              version="1.0">
        <doc xml:space="preserve"
             filename="snapd-connection.c"
             line="51">Get the name of this connection (i.e. a slot or plug name).</doc>
        <source-position filename="snapd-connection.h" line="25"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-connection.c"
               line="57">a name.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-connection.c"
                 line="53">a #SnapdConnection.</doc>
            <type name="Connection" c:type="SnapdConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_snap"
              c:identifier="snapd_connection_get_snap"
              version="1.0">
        <doc xml:space="preserve"
             filename="snapd-connection.c"
             line="68">Get the snap this connection is on.</doc>
        <source-position filename="snapd-connection.h" line="27"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-connection.c"
               line="74">a snap name.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-connection.c"
                 line="70">a #SnapdConnection.</doc>
            <type name="Connection" c:type="SnapdConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="name"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="snap"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
    </class>
    <record name="ConnectionClass"
            c:type="SnapdConnectionClass"
            glib:is-gtype-struct-for="Connection">
      <source-position filename="snapd-connection.h" line="23"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <bitfield name="CreateUserFlags"
              version="1.3"
              glib:type-name="SnapdCreateUserFlags"
              glib:get-type="snapd_create_user_flags_get_type"
              c:type="SnapdCreateUserFlags">
      <doc xml:space="preserve"
           filename="snapd-client.h"
           line="139">Flag to control when a user accounts is created.</doc>
      <member name="none"
              value="0"
              c:identifier="SNAPD_CREATE_USER_FLAGS_NONE"
              glib:nick="none">
        <doc xml:space="preserve"
             filename="snapd-client.h"
             line="141">No flags, default behaviour.</doc>
      </member>
      <member name="sudo"
              value="1"
              c:identifier="SNAPD_CREATE_USER_FLAGS_SUDO"
              glib:nick="sudo">
        <doc xml:space="preserve"
             filename="snapd-client.h"
             line="142">Gives sudo access to created user.</doc>
      </member>
      <member name="known"
              value="2"
              c:identifier="SNAPD_CREATE_USER_FLAGS_KNOWN"
              glib:nick="known">
        <doc xml:space="preserve"
             filename="snapd-client.h"
             line="143">Use the local system-user assertions to create the user.</doc>
      </member>
    </bitfield>
    <enumeration name="DaemonType"
                 version="1.9"
                 glib:type-name="SnapdDaemonType"
                 glib:get-type="snapd_daemon_type_get_type"
                 c:type="SnapdDaemonType">
      <doc xml:space="preserve"
           filename="snapd-app.h"
           line="26">Type of daemon.</doc>
      <member name="none"
              value="0"
              c:identifier="SNAPD_DAEMON_TYPE_NONE"
              glib:nick="none">
        <doc xml:space="preserve"
             filename="snapd-app.h"
             line="28">Not a daemon</doc>
      </member>
      <member name="unknown"
              value="1"
              c:identifier="SNAPD_DAEMON_TYPE_UNKNOWN"
              glib:nick="unknown">
        <doc xml:space="preserve"
             filename="snapd-app.h"
             line="29">Unknown daemon type</doc>
      </member>
      <member name="simple"
              value="2"
              c:identifier="SNAPD_DAEMON_TYPE_SIMPLE"
              glib:nick="simple">
        <doc xml:space="preserve"
             filename="snapd-app.h"
             line="30">Simple daemon</doc>
      </member>
      <member name="forking"
              value="3"
              c:identifier="SNAPD_DAEMON_TYPE_FORKING"
              glib:nick="forking">
        <doc xml:space="preserve"
             filename="snapd-app.h"
             line="31">Forking daemon</doc>
      </member>
      <member name="oneshot"
              value="4"
              c:identifier="SNAPD_DAEMON_TYPE_ONESHOT"
              glib:nick="oneshot">
        <doc xml:space="preserve"
             filename="snapd-app.h"
             line="32">One-shot daemon</doc>
      </member>
      <member name="dbus"
              value="5"
              c:identifier="SNAPD_DAEMON_TYPE_DBUS"
              glib:nick="dbus">
        <doc xml:space="preserve"
             filename="snapd-app.h"
             line="33">D-Bus daemon</doc>
      </member>
      <member name="notify"
              value="6"
              c:identifier="SNAPD_DAEMON_TYPE_NOTIFY"
              glib:nick="notify">
        <doc xml:space="preserve"
             filename="snapd-app.h"
             line="34">Notify daemon</doc>
      </member>
    </enumeration>
    <enumeration name="Error"
                 version="1.0"
                 glib:type-name="SnapdError"
                 glib:get-type="snapd_error_get_type"
                 c:type="SnapdError"
                 glib:error-domain="snapd-error-quark">
      <doc xml:space="preserve"
           filename="snapd-error.h"
           line="21">Error codes returned by snapd operations.</doc>
      <member name="connection_failed"
              value="0"
              c:identifier="SNAPD_ERROR_CONNECTION_FAILED"
              glib:nick="connection-failed">
        <doc xml:space="preserve"
             filename="snapd-error.h"
             line="23">not able to connect to snapd.</doc>
      </member>
      <member name="write_failed"
              value="1"
              c:identifier="SNAPD_ERROR_WRITE_FAILED"
              glib:nick="write-failed">
        <doc xml:space="preserve"
             filename="snapd-error.h"
             line="24">an error occurred while writing to snapd.</doc>
      </member>
      <member name="read_failed"
              value="2"
              c:identifier="SNAPD_ERROR_READ_FAILED"
              glib:nick="read-failed">
        <doc xml:space="preserve"
             filename="snapd-error.h"
             line="25">an error occurred while reading from snapd.</doc>
      </member>
      <member name="bad_request"
              value="3"
              c:identifier="SNAPD_ERROR_BAD_REQUEST"
              glib:nick="bad-request">
        <doc xml:space="preserve"
             filename="snapd-error.h"
             line="26">snapd did not understand the request that was sent.</doc>
      </member>
      <member name="bad_response"
              value="4"
              c:identifier="SNAPD_ERROR_BAD_RESPONSE"
              glib:nick="bad-response">
        <doc xml:space="preserve"
             filename="snapd-error.h"
             line="27">the response received from snapd was not
    understood.</doc>
      </member>
      <member name="auth_data_required"
              value="5"
              c:identifier="SNAPD_ERROR_AUTH_DATA_REQUIRED"
              glib:nick="auth-data-required">
        <doc xml:space="preserve"
             filename="snapd-error.h"
             line="29">the requested operation requires
    authorization data.</doc>
      </member>
      <member name="auth_data_invalid"
              value="6"
              c:identifier="SNAPD_ERROR_AUTH_DATA_INVALID"
              glib:nick="auth-data-invalid">
        <doc xml:space="preserve"
             filename="snapd-error.h"
             line="31">the provided authorization data is invalid.</doc>
      </member>
      <member name="two_factor_required"
              value="7"
              c:identifier="SNAPD_ERROR_TWO_FACTOR_REQUIRED"
              glib:nick="two-factor-required">
        <doc xml:space="preserve"
             filename="snapd-error.h"
             line="32">login requires a two factor code.</doc>
      </member>
      <member name="two_factor_invalid"
              value="8"
              c:identifier="SNAPD_ERROR_TWO_FACTOR_INVALID"
              glib:nick="two-factor-invalid">
        <doc xml:space="preserve"
             filename="snapd-error.h"
             line="33">the two factor code provided at login is
    invalid.</doc>
      </member>
      <member name="permission_denied"
              value="9"
              c:identifier="SNAPD_ERROR_PERMISSION_DENIED"
              glib:nick="permission-denied">
        <doc xml:space="preserve"
             filename="snapd-error.h"
             line="35">this user account is not permitted to perform
    the requested operation.</doc>
      </member>
      <member name="failed"
              value="10"
              c:identifier="SNAPD_ERROR_FAILED"
              glib:nick="failed">
        <doc xml:space="preserve"
             filename="snapd-error.h"
             line="37">an unspecified error occurred while communicating
    with snapd.</doc>
      </member>
      <member name="terms_not_accepted"
              value="11"
              c:identifier="SNAPD_ERROR_TERMS_NOT_ACCEPTED"
              glib:nick="terms-not-accepted">
        <doc xml:space="preserve"
             filename="snapd-error.h"
             line="39">this user has not accepted the store's terms
    of service.</doc>
      </member>
      <member name="payment_not_setup"
              value="12"
              c:identifier="SNAPD_ERROR_PAYMENT_NOT_SETUP"
              glib:nick="payment-not-setup">
        <doc xml:space="preserve"
             filename="snapd-error.h"
             line="41">this user has not configured a payment
    method.</doc>
      </member>
      <member name="payment_declined"
              value="13"
              c:identifier="SNAPD_ERROR_PAYMENT_DECLINED"
              glib:nick="payment-declined">
        <doc xml:space="preserve"
             filename="snapd-error.h"
             line="43">this user has had their payment method
    declined by the payment provider.</doc>
      </member>
      <member name="already_installed"
              value="14"
              c:identifier="SNAPD_ERROR_ALREADY_INSTALLED"
              glib:nick="already-installed">
        <doc xml:space="preserve"
             filename="snapd-error.h"
             line="45">the requested snap is already installed.</doc>
      </member>
      <member name="not_installed"
              value="15"
              c:identifier="SNAPD_ERROR_NOT_INSTALLED"
              glib:nick="not-installed">
        <doc xml:space="preserve"
             filename="snapd-error.h"
             line="46">the requested snap is not installed.</doc>
      </member>
      <member name="no_update_available"
              value="16"
              c:identifier="SNAPD_ERROR_NO_UPDATE_AVAILABLE"
              glib:nick="no-update-available">
        <doc xml:space="preserve"
             filename="snapd-error.h"
             line="47">no update is available for this snap.</doc>
      </member>
      <member name="password_policy_error"
              value="17"
              c:identifier="SNAPD_ERROR_PASSWORD_POLICY_ERROR"
              glib:nick="password-policy-error">
        <doc xml:space="preserve"
             filename="snapd-error.h"
             line="48">provided password is not valid.</doc>
      </member>
      <member name="needs_devmode"
              value="18"
              c:identifier="SNAPD_ERROR_NEEDS_DEVMODE"
              glib:nick="needs-devmode">
        <doc xml:space="preserve"
             filename="snapd-error.h"
             line="49">this snap needs to be installed using devmode.</doc>
      </member>
      <member name="needs_classic"
              value="19"
              c:identifier="SNAPD_ERROR_NEEDS_CLASSIC"
              glib:nick="needs-classic">
        <doc xml:space="preserve"
             filename="snapd-error.h"
             line="50">this snap needs to be installed using classic
    mode.</doc>
      </member>
      <member name="needs_classic_system"
              value="20"
              c:identifier="SNAPD_ERROR_NEEDS_CLASSIC_SYSTEM"
              glib:nick="needs-classic-system">
        <doc xml:space="preserve"
             filename="snapd-error.h"
             line="52">a classic system is required to install
   this snap.</doc>
      </member>
      <member name="bad_query"
              value="21"
              c:identifier="SNAPD_ERROR_BAD_QUERY"
              glib:nick="bad-query">
        <doc xml:space="preserve"
             filename="snapd-error.h"
             line="54">a bad query was provided.</doc>
      </member>
      <member name="network_timeout"
              value="22"
              c:identifier="SNAPD_ERROR_NETWORK_TIMEOUT"
              glib:nick="network-timeout">
        <doc xml:space="preserve"
             filename="snapd-error.h"
             line="55">A timeout occurred during the request.</doc>
      </member>
      <member name="not_found"
              value="23"
              c:identifier="SNAPD_ERROR_NOT_FOUND"
              glib:nick="not-found">
        <doc xml:space="preserve"
             filename="snapd-error.h"
             line="56">the requested snap couldn't be found.</doc>
      </member>
      <member name="not_in_store"
              value="24"
              c:identifier="SNAPD_ERROR_NOT_IN_STORE"
              glib:nick="not-in-store">
        <doc xml:space="preserve"
             filename="snapd-error.h"
             line="57">the requested snap is not in the store.</doc>
      </member>
      <member name="auth_cancelled"
              value="25"
              c:identifier="SNAPD_ERROR_AUTH_CANCELLED"
              glib:nick="auth-cancelled">
        <doc xml:space="preserve"
             filename="snapd-error.h"
             line="58">authentication was cancelled by the user.</doc>
      </member>
      <member name="not_classic"
              value="26"
              c:identifier="SNAPD_ERROR_NOT_CLASSIC"
              glib:nick="not-classic">
        <doc xml:space="preserve"
             filename="snapd-error.h"
             line="59">snap not compatible with classic mode.</doc>
      </member>
      <member name="revision_not_available"
              value="27"
              c:identifier="SNAPD_ERROR_REVISION_NOT_AVAILABLE"
              glib:nick="revision-not-available">
        <doc xml:space="preserve"
             filename="snapd-error.h"
             line="60">requested snap revision not available.</doc>
      </member>
      <member name="channel_not_available"
              value="28"
              c:identifier="SNAPD_ERROR_CHANNEL_NOT_AVAILABLE"
              glib:nick="channel-not-available">
        <doc xml:space="preserve"
             filename="snapd-error.h"
             line="61">requested snap channel not available.</doc>
      </member>
      <member name="not_a_snap"
              value="29"
              c:identifier="SNAPD_ERROR_NOT_A_SNAP"
              glib:nick="not-a-snap">
        <doc xml:space="preserve"
             filename="snapd-error.h"
             line="62">the given snap or directory does not look like a snap.</doc>
      </member>
      <member name="dns_failure"
              value="30"
              c:identifier="SNAPD_ERROR_DNS_FAILURE"
              glib:nick="dns-failure">
        <doc xml:space="preserve"
             filename="snapd-error.h"
             line="63">A hostname failed to resolve during the request.</doc>
      </member>
      <function name="quark" c:identifier="snapd_error_quark" version="1.0">
        <doc xml:space="preserve"
             filename="snapd-error.c"
             line="22">Gets the Snapd Error Quark.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-error.c"
               line="27">a #GQuark.</doc>
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
    </enumeration>
    <bitfield name="FindFlags"
              version="1.0"
              glib:type-name="SnapdFindFlags"
              glib:get-type="snapd_find_flags_get_type"
              c:type="SnapdFindFlags">
      <doc xml:space="preserve"
           filename="snapd-client.h"
           line="94">Flag to change how a find is performed.</doc>
      <member name="none"
              value="0"
              c:identifier="SNAPD_FIND_FLAGS_NONE"
              glib:nick="none">
        <doc xml:space="preserve"
             filename="snapd-client.h"
             line="96">No flags, default behaviour.</doc>
      </member>
      <member name="match_name"
              value="1"
              c:identifier="SNAPD_FIND_FLAGS_MATCH_NAME"
              glib:nick="match-name">
        <doc xml:space="preserve"
             filename="snapd-client.h"
             line="97">Search for snaps whose name matches the given
    string. The match is exact unless the string ends in *.</doc>
      </member>
      <member name="select_private"
              value="2"
              c:identifier="SNAPD_FIND_FLAGS_SELECT_PRIVATE"
              glib:nick="select-private">
        <doc xml:space="preserve"
             filename="snapd-client.h"
             line="99">Search private snaps.</doc>
      </member>
      <member name="select_refresh"
              value="4"
              c:identifier="SNAPD_FIND_FLAGS_SELECT_REFRESH"
              glib:nick="select-refresh">
        <doc xml:space="preserve"
             filename="snapd-client.h"
             line="100">Deprecated, do not use.</doc>
      </member>
      <member name="scope_wide"
              value="8"
              c:identifier="SNAPD_FIND_FLAGS_SCOPE_WIDE"
              glib:nick="scope-wide">
        <doc xml:space="preserve"
             filename="snapd-client.h"
             line="101">Search for snaps from any architecture or branch.</doc>
      </member>
    </bitfield>
    <bitfield name="GetAppsFlags"
              version="1.25"
              glib:type-name="SnapdGetAppsFlags"
              glib:get-type="snapd_get_apps_flags_get_type"
              c:type="SnapdGetAppsFlags">
      <doc xml:space="preserve"
           filename="snapd-client.h"
           line="79">Flag to change which apps are returned.</doc>
      <member name="none"
              value="0"
              c:identifier="SNAPD_GET_APPS_FLAGS_NONE"
              glib:nick="none">
        <doc xml:space="preserve"
             filename="snapd-client.h"
             line="81">No flags, default behaviour.</doc>
      </member>
      <member name="select_services"
              value="1"
              c:identifier="SNAPD_GET_APPS_FLAGS_SELECT_SERVICES"
              glib:nick="select-services">
        <doc xml:space="preserve"
             filename="snapd-client.h"
             line="82">Select services only.</doc>
      </member>
    </bitfield>
    <bitfield name="GetSnapsFlags"
              version="1.42"
              glib:type-name="SnapdGetSnapsFlags"
              glib:get-type="snapd_get_snaps_flags_get_type"
              c:type="SnapdGetSnapsFlags">
      <doc xml:space="preserve"
           filename="snapd-client.h"
           line="64">Flag to change which snaps are returned.</doc>
      <member name="none"
              value="0"
              c:identifier="SNAPD_GET_SNAPS_FLAGS_NONE"
              glib:nick="none">
        <doc xml:space="preserve"
             filename="snapd-client.h"
             line="66">No flags, default behaviour.</doc>
      </member>
      <member name="include_inactive"
              value="1"
              c:identifier="SNAPD_GET_SNAPS_FLAGS_INCLUDE_INACTIVE"
              glib:nick="include-inactive">
        <doc xml:space="preserve"
             filename="snapd-client.h"
             line="67">Return snaps that are installed but not active.</doc>
      </member>
    </bitfield>
    <class name="Icon"
           c:symbol-prefix="icon"
           c:type="SnapdIcon"
           version="1.0"
           parent="GObject.Object"
           glib:type-name="SnapdIcon"
           glib:get-type="snapd_icon_get_type"
           glib:type-struct="IconClass">
      <doc xml:space="preserve"
           filename="snapd-icon.c"
           line="25">#SnapdIcon contains icon data.</doc>
      <source-position filename="snapd-icon.h" line="23"/>
      <method name="get_data" c:identifier="snapd_icon_get_data" version="1.0">
        <doc xml:space="preserve"
             filename="snapd-icon.c"
             line="67">Get the binary data for this icon.</doc>
        <source-position filename="snapd-icon.h" line="27"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-icon.c"
               line="73">the binary data.</doc>
          <type name="GLib.Bytes" c:type="GBytes*"/>
        </return-value>
        <parameters>
          <instance-parameter name="icon" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-icon.c"
                 line="69">a #SnapdIcon.</doc>
            <type name="Icon" c:type="SnapdIcon*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_mime_type"
              c:identifier="snapd_icon_get_mime_type"
              version="1.0">
        <doc xml:space="preserve"
             filename="snapd-icon.c"
             line="50">Get the mime-type for this icon, e.g. "image/png".</doc>
        <source-position filename="snapd-icon.h" line="25"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-icon.c"
               line="56">a MIME type.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="icon" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-icon.c"
                 line="52">a #SnapdIcon.</doc>
            <type name="Icon" c:type="SnapdIcon*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="data"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="GLib.Bytes"/>
      </property>
      <property name="mime-type"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
    </class>
    <record name="IconClass"
            c:type="SnapdIconClass"
            glib:is-gtype-struct-for="Icon">
      <source-position filename="snapd-icon.h" line="23"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <bitfield name="InstallFlags"
              version="1.12"
              glib:type-name="SnapdInstallFlags"
              glib:get-type="snapd_install_flags_get_type"
              c:type="SnapdInstallFlags">
      <doc xml:space="preserve"
           filename="snapd-client.h"
           line="116">Flags to control install options.</doc>
      <member name="none"
              value="0"
              c:identifier="SNAPD_INSTALL_FLAGS_NONE"
              glib:nick="none">
        <doc xml:space="preserve"
             filename="snapd-client.h"
             line="118">No flags, default behaviour.</doc>
      </member>
      <member name="classic"
              value="1"
              c:identifier="SNAPD_INSTALL_FLAGS_CLASSIC"
              glib:nick="classic">
        <doc xml:space="preserve"
             filename="snapd-client.h"
             line="119">Put snap in classic mode and disable security confinement.</doc>
      </member>
      <member name="dangerous"
              value="2"
              c:identifier="SNAPD_INSTALL_FLAGS_DANGEROUS"
              glib:nick="dangerous">
        <doc xml:space="preserve"
             filename="snapd-client.h"
             line="120">Install the given snap file even if there are
   no pre-acknowledged signatures for it, meaning it was not verified and
   could be dangerous (implied by #SNAPD_INSTALL_FLAGS_DEVMODE).</doc>
      </member>
      <member name="devmode"
              value="4"
              c:identifier="SNAPD_INSTALL_FLAGS_DEVMODE"
              glib:nick="devmode">
        <doc xml:space="preserve"
             filename="snapd-client.h"
             line="123">Put snap in development mode and disable security confinement.</doc>
      </member>
      <member name="jailmode"
              value="8"
              c:identifier="SNAPD_INSTALL_FLAGS_JAILMODE"
              glib:nick="jailmode">
        <doc xml:space="preserve"
             filename="snapd-client.h"
             line="124">Put snap in enforced confinement mode.</doc>
      </member>
    </bitfield>
    <class name="Maintenance"
           c:symbol-prefix="maintenance"
           c:type="SnapdMaintenance"
           version="1.45"
           parent="GObject.Object"
           glib:type-name="SnapdMaintenance"
           glib:get-type="snapd_maintenance_get_type"
           glib:type-struct="MaintenanceClass">
      <doc xml:space="preserve"
           filename="snapd-maintenance.c"
           line="26">#SnapdMaintenance contains maintenance information.</doc>
      <source-position filename="snapd-maintenance.h" line="23"/>
      <method name="get_kind"
              c:identifier="snapd_maintenance_get_kind"
              version="1.45">
        <doc xml:space="preserve"
             filename="snapd-maintenance.c"
             line="51">Get the kind of maintenance kind, e.g. %SNAPD_MAINTENANCE_KIND_DAEMON_RESTART.</doc>
        <source-position filename="snapd-maintenance.h" line="42"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-maintenance.c"
               line="57">a #SnapdMaintenanceKind.</doc>
          <type name="MaintenanceKind" c:type="SnapdMaintenanceKind"/>
        </return-value>
        <parameters>
          <instance-parameter name="maintenance" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-maintenance.c"
                 line="53">a #SnapdMaintenance.</doc>
            <type name="Maintenance" c:type="SnapdMaintenance*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_message"
              c:identifier="snapd_maintenance_get_message"
              version="1.45">
        <doc xml:space="preserve"
             filename="snapd-maintenance.c"
             line="68">Get the user readable message associate with the maintenance state.</doc>
        <source-position filename="snapd-maintenance.h" line="44"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-maintenance.c"
               line="74">message text.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="maintenance" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-maintenance.c"
                 line="70">a #SnapdMaintenance.</doc>
            <type name="Maintenance" c:type="SnapdMaintenance*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="kind"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="MaintenanceKind"/>
      </property>
      <property name="message"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
    </class>
    <record name="MaintenanceClass"
            c:type="SnapdMaintenanceClass"
            glib:is-gtype-struct-for="Maintenance">
      <source-position filename="snapd-maintenance.h" line="23"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <enumeration name="MaintenanceKind"
                 version="1.45"
                 glib:type-name="SnapdMaintenanceKind"
                 glib:get-type="snapd_maintenance_kind_get_type"
                 c:type="SnapdMaintenanceKind">
      <doc xml:space="preserve"
           filename="snapd-maintenance.h"
           line="25">Type of snap.</doc>
      <member name="unknown"
              value="0"
              c:identifier="SNAPD_MAINTENANCE_KIND_UNKNOWN"
              glib:nick="unknown">
        <doc xml:space="preserve"
             filename="snapd-maintenance.h"
             line="27">an unknown maintenance kind is occurring.</doc>
      </member>
      <member name="daemon_restart"
              value="1"
              c:identifier="SNAPD_MAINTENANCE_KIND_DAEMON_RESTART"
              glib:nick="daemon-restart">
        <doc xml:space="preserve"
             filename="snapd-maintenance.h"
             line="28">the daemon is restarting.</doc>
      </member>
      <member name="system_restart"
              value="2"
              c:identifier="SNAPD_MAINTENANCE_KIND_SYSTEM_RESTART"
              glib:nick="system-restart">
        <doc xml:space="preserve"
             filename="snapd-maintenance.h"
             line="29">the system is restarting.</doc>
      </member>
    </enumeration>
    <class name="Media"
           c:symbol-prefix="media"
           c:type="SnapdMedia"
           version="1.45"
           parent="GObject.Object"
           glib:type-name="SnapdMedia"
           glib:get-type="snapd_media_get_type"
           glib:type-struct="MediaClass">
      <doc xml:space="preserve"
           filename="snapd-media.c"
           line="23">#SnapdMedia contains media information.</doc>
      <source-position filename="snapd-media.h" line="23"/>
      <method name="get_height"
              c:identifier="snapd_media_get_height"
              version="1.45">
        <doc xml:space="preserve"
             filename="snapd-media.c"
             line="109">Get the height of the media in pixels or 0 if unknown.</doc>
        <source-position filename="snapd-media.h" line="31"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-media.c"
               line="115">a height</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="media" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-media.c"
                 line="111">a #SnapdMedia.</doc>
            <type name="Media" c:type="SnapdMedia*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_media_type"
              c:identifier="snapd_media_get_media_type"
              version="1.45">
        <doc xml:space="preserve"
             filename="snapd-media.c"
             line="58">Get the type for this media, e.g. "icon" or "screenshot".</doc>
        <source-position filename="snapd-media.h" line="25"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-media.c"
               line="64">a type name</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="media" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-media.c"
                 line="60">a #SnapdMedia.</doc>
            <type name="Media" c:type="SnapdMedia*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_url" c:identifier="snapd_media_get_url" version="1.45">
        <doc xml:space="preserve"
             filename="snapd-media.c"
             line="75">Get the URL for this media, e.g. "http://example.com/media.png"</doc>
        <source-position filename="snapd-media.h" line="27"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-media.c"
               line="81">a URL</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="media" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-media.c"
                 line="77">a #SnapdMedia.</doc>
            <type name="Media" c:type="SnapdMedia*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_width"
              c:identifier="snapd_media_get_width"
              version="1.45">
        <doc xml:space="preserve"
             filename="snapd-media.c"
             line="92">Get the width of the media in pixels or 0 if unknown.</doc>
        <source-position filename="snapd-media.h" line="29"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-media.c"
               line="98">a width</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="media" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-media.c"
                 line="94">a #SnapdMedia.</doc>
            <type name="Media" c:type="SnapdMedia*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="height"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="type"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="url"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="width"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
    </class>
    <record name="MediaClass"
            c:type="SnapdMediaClass"
            glib:is-gtype-struct-for="Media">
      <source-position filename="snapd-media.h" line="23"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="Plug"
           c:symbol-prefix="plug"
           c:type="SnapdPlug"
           version="1.0"
           parent="GObject.Object"
           glib:type-name="SnapdPlug"
           glib:get-type="snapd_plug_get_type"
           glib:type-struct="PlugClass">
      <doc xml:space="preserve"
           filename="snapd-plug.c"
           line="28">#SnapdPlug contains information about a Snap plug.</doc>
      <source-position filename="snapd-plug.h" line="24"/>
      <method name="get_attribute"
              c:identifier="snapd_plug_get_attribute"
              version="1.3">
        <doc xml:space="preserve"
             filename="snapd-plug.c"
             line="163">Get an attribute for this interface.</doc>
        <source-position filename="snapd-plug.h" line="38"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="snapd-plug.c"
               line="170">an attribute value or %NULL if not set.</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="plug" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-plug.c"
                 line="165">a #SnapdPlug.</doc>
            <type name="Plug" c:type="SnapdPlug*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-plug.c"
                 line="166">an attribute name.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_attribute_names"
              c:identifier="snapd_plug_get_attribute_names"
              version="1.3">
        <doc xml:space="preserve"
             filename="snapd-plug.c"
             line="112">Get the names of the attributes this plug has.</doc>
        <source-position filename="snapd-plug.h" line="32"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="snapd-plug.c"
               line="119">a string array of attribute names. Free with g_strfreev().</doc>
          <array c:type="GStrv">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="plug" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-plug.c"
                 line="114">a #SnapdPlug.</doc>
            <type name="Plug" c:type="SnapdPlug*"/>
          </instance-parameter>
          <parameter name="length"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-plug.c"
                 line="115">location to write number of attributes or %NULL if not required.</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_connections"
              c:identifier="snapd_plug_get_connections"
              version="1.0">
        <doc xml:space="preserve"
             filename="snapd-plug.c"
             line="198">Get the connections being made with this plug.</doc>
        <source-position filename="snapd-plug.h" line="43"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-plug.c"
               line="204">an array of #SnapdConnection.</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="Connection"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="plug" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-plug.c"
                 line="200">a #SnapdPlug.</doc>
            <type name="Plug" c:type="SnapdPlug*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_interface"
              c:identifier="snapd_plug_get_interface"
              version="1.0">
        <doc xml:space="preserve"
             filename="snapd-plug.c"
             line="95">Get the name of the interface this plug provides.</doc>
        <source-position filename="snapd-plug.h" line="30"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-plug.c"
               line="101">an interface name.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="plug" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-plug.c"
                 line="97">a #SnapdPlug.</doc>
            <type name="Plug" c:type="SnapdPlug*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_label"
              c:identifier="snapd_plug_get_label"
              version="1.0">
        <doc xml:space="preserve"
             filename="snapd-plug.c"
             line="181">Get a human readable label for this plug.</doc>
        <source-position filename="snapd-plug.h" line="41"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-plug.c"
               line="187">a label.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="plug" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-plug.c"
                 line="183">a #SnapdPlug.</doc>
            <type name="Plug" c:type="SnapdPlug*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_name" c:identifier="snapd_plug_get_name" version="1.0">
        <doc xml:space="preserve"
             filename="snapd-plug.c"
             line="61">Get the name of this plug.</doc>
        <source-position filename="snapd-plug.h" line="26"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-plug.c"
               line="67">a name.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="plug" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-plug.c"
                 line="63">a #SnapdPlug.</doc>
            <type name="Plug" c:type="SnapdPlug*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_snap" c:identifier="snapd_plug_get_snap" version="1.0">
        <doc xml:space="preserve"
             filename="snapd-plug.c"
             line="78">Get the snap this plug is on.</doc>
        <source-position filename="snapd-plug.h" line="28"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-plug.c"
               line="84">a snap name.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="plug" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-plug.c"
                 line="80">a #SnapdPlug.</doc>
            <type name="Plug" c:type="SnapdPlug*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="has_attribute"
              c:identifier="snapd_plug_has_attribute"
              version="1.3">
        <doc xml:space="preserve"
             filename="snapd-plug.c"
             line="145">Check if this plug has an attribute.</doc>
        <source-position filename="snapd-plug.h" line="35"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-plug.c"
               line="152">%TRUE if this attribute exists.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="plug" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-plug.c"
                 line="147">a #SnapdPlug.</doc>
            <type name="Plug" c:type="SnapdPlug*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-plug.c"
                 line="148">an attribute name.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="attributes"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="GLib.HashTable">
          <type name="gpointer" c:type="gpointer"/>
          <type name="gpointer" c:type="gpointer"/>
        </type>
      </property>
      <property name="connections"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <array name="GLib.PtrArray">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </property>
      <property name="interface"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="label"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="name"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="snap"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
    </class>
    <record name="PlugClass"
            c:type="SnapdPlugClass"
            glib:is-gtype-struct-for="Plug">
      <source-position filename="snapd-plug.h" line="24"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="Price"
           c:symbol-prefix="price"
           c:type="SnapdPrice"
           version="1.0"
           parent="GObject.Object"
           glib:type-name="SnapdPrice"
           glib:get-type="snapd_price_get_type"
           glib:type-struct="PriceClass">
      <doc xml:space="preserve"
           filename="snapd-price.c"
           line="24">#SnapdPrice contains pricing information.</doc>
      <source-position filename="snapd-price.h" line="23"/>
      <method name="get_amount"
              c:identifier="snapd_price_get_amount"
              version="1.0">
        <doc xml:space="preserve"
             filename="snapd-price.c"
             line="49">Get the currency amount for this price, e.g. 0.99.</doc>
        <source-position filename="snapd-price.h" line="25"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-price.c"
               line="55">a currency amount.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="price" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-price.c"
                 line="51">a #SnapdPrice.</doc>
            <type name="Price" c:type="SnapdPrice*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_currency"
              c:identifier="snapd_price_get_currency"
              version="1.0">
        <doc xml:space="preserve"
             filename="snapd-price.c"
             line="66">Get the currency this price is in, e.g. "NZD".</doc>
        <source-position filename="snapd-price.h" line="27"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-price.c"
               line="72">an ISO 4217 currency code.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="price" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-price.c"
                 line="68">a #SnapdPrice.</doc>
            <type name="Price" c:type="SnapdPrice*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="amount"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="currency"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
    </class>
    <record name="PriceClass"
            c:type="SnapdPriceClass"
            glib:is-gtype-struct-for="Price">
      <source-position filename="snapd-price.h" line="23"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <callback name="ProgressCallback"
              c:type="SnapdProgressCallback"
              version="1.0">
      <doc xml:space="preserve"
           filename="snapd-client.h"
           line="156">Signature for callback function used in
snapd_client_connect_interface_sync(),
snapd_client_disconnect_interface_async(),
snapd_client_install2_sync(),
snapd_client_refresh_sync(),
snapd_client_remove_sync(),
snapd_client_enable_sync() and
snapd_client_disable_sync().</doc>
      <source-position filename="snapd-client.h" line="174"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="client" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-client.h"
               line="158">a #SnapdClient</doc>
          <type name="Client" c:type="SnapdClient*"/>
        </parameter>
        <parameter name="change" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-client.h"
               line="159">a #SnapdChange describing the change in progress</doc>
          <type name="Change" c:type="SnapdChange*"/>
        </parameter>
        <parameter name="deprecated"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="snapd-client.h"
               line="160">A deprecated field that is no longer used.</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="3">
          <doc xml:space="preserve"
               filename="snapd-client.h"
               line="161">user data passed to the callback</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <enumeration name="PublisherValidation"
                 version="1.42"
                 glib:type-name="SnapdPublisherValidation"
                 glib:get-type="snapd_publisher_validation_get_type"
                 c:type="SnapdPublisherValidation">
      <doc xml:space="preserve"
           filename="snapd-snap.h"
           line="69">State of validation for a publisher.</doc>
      <member name="unknown"
              value="0"
              c:identifier="SNAPD_PUBLISHER_VALIDATION_UNKNOWN"
              glib:nick="unknown">
        <doc xml:space="preserve"
             filename="snapd-snap.h"
             line="71">the validation state of the publisher is unknown.</doc>
      </member>
      <member name="unproven"
              value="1"
              c:identifier="SNAPD_PUBLISHER_VALIDATION_UNPROVEN"
              glib:nick="unproven">
        <doc xml:space="preserve"
             filename="snapd-snap.h"
             line="72">the publisher has not proven their identity.</doc>
      </member>
      <member name="verified"
              value="2"
              c:identifier="SNAPD_PUBLISHER_VALIDATION_VERIFIED"
              glib:nick="verified">
        <doc xml:space="preserve"
             filename="snapd-snap.h"
             line="73">the publisher has had their identity verified.</doc>
      </member>
    </enumeration>
    <class name="Screenshot"
           c:symbol-prefix="screenshot"
           c:type="SnapdScreenshot"
           version="1.0"
           parent="GObject.Object"
           glib:type-name="SnapdScreenshot"
           glib:get-type="snapd_screenshot_get_type"
           glib:type-struct="ScreenshotClass">
      <doc xml:space="preserve"
           filename="snapd-screenshot.c"
           line="23">#SnapdScreenshot contains screenshot information.</doc>
      <source-position filename="snapd-screenshot.h" line="23"/>
      <method name="get_height"
              c:identifier="snapd_screenshot_get_height"
              version="1.0">
        <doc xml:space="preserve"
             filename="snapd-screenshot.c"
             line="90">Get the height of the screenshot in pixels or 0 if unknown.</doc>
        <source-position filename="snapd-screenshot.h" line="29"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-screenshot.c"
               line="96">a height</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="screenshot" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-screenshot.c"
                 line="92">a #SnapdScreenshot.</doc>
            <type name="Screenshot" c:type="SnapdScreenshot*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_url"
              c:identifier="snapd_screenshot_get_url"
              version="1.0">
        <doc xml:space="preserve"
             filename="snapd-screenshot.c"
             line="56">Get the URL for this screenshot, e.g. "http://example.com/screenshot.png"</doc>
        <source-position filename="snapd-screenshot.h" line="25"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-screenshot.c"
               line="62">a URL</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="screenshot" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-screenshot.c"
                 line="58">a #SnapdScreenshot.</doc>
            <type name="Screenshot" c:type="SnapdScreenshot*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_width"
              c:identifier="snapd_screenshot_get_width"
              version="1.0">
        <doc xml:space="preserve"
             filename="snapd-screenshot.c"
             line="73">Get the width of the screenshot in pixels or 0 if unknown.</doc>
        <source-position filename="snapd-screenshot.h" line="27"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-screenshot.c"
               line="79">a width</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="screenshot" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-screenshot.c"
                 line="75">a #SnapdScreenshot.</doc>
            <type name="Screenshot" c:type="SnapdScreenshot*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="height"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="url"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="width"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
    </class>
    <record name="ScreenshotClass"
            c:type="SnapdScreenshotClass"
            glib:is-gtype-struct-for="Screenshot">
      <source-position filename="snapd-screenshot.h" line="23"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="Slot"
           c:symbol-prefix="slot"
           c:type="SnapdSlot"
           version="1.0"
           parent="GObject.Object"
           glib:type-name="SnapdSlot"
           glib:get-type="snapd_slot_get_type"
           glib:type-struct="SlotClass">
      <doc xml:space="preserve"
           filename="snapd-slot.c"
           line="28">#SnapdSlot contains information about a Snap slot.</doc>
      <source-position filename="snapd-slot.h" line="24"/>
      <method name="get_attribute"
              c:identifier="snapd_slot_get_attribute"
              version="1.3">
        <doc xml:space="preserve"
             filename="snapd-slot.c"
             line="163">Get an attribute for this interface.</doc>
        <source-position filename="snapd-slot.h" line="38"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="snapd-slot.c"
               line="170">an attribute value or %NULL if not set.</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="slot" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-slot.c"
                 line="165">a #SnapdSlot.</doc>
            <type name="Slot" c:type="SnapdSlot*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-slot.c"
                 line="166">an attribute name.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_attribute_names"
              c:identifier="snapd_slot_get_attribute_names"
              version="1.3">
        <doc xml:space="preserve"
             filename="snapd-slot.c"
             line="112">Get the names of the attributes this slot has.</doc>
        <source-position filename="snapd-slot.h" line="32"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="snapd-slot.c"
               line="119">a string array of attribute names. Free with g_strfreev().</doc>
          <array c:type="GStrv">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="slot" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-slot.c"
                 line="114">a #SnapdSlot.</doc>
            <type name="Slot" c:type="SnapdSlot*"/>
          </instance-parameter>
          <parameter name="length"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-slot.c"
                 line="115">location to write number of attributes or %NULL if not required.</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_connections"
              c:identifier="snapd_slot_get_connections"
              version="1.0">
        <doc xml:space="preserve"
             filename="snapd-slot.c"
             line="198">Get the connections being made with this slot.</doc>
        <source-position filename="snapd-slot.h" line="43"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-slot.c"
               line="204">an array of #SnapdConnection.</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="Connection"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="slot" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-slot.c"
                 line="200">a #SnapdSlot.</doc>
            <type name="Slot" c:type="SnapdSlot*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_interface"
              c:identifier="snapd_slot_get_interface"
              version="1.0">
        <doc xml:space="preserve"
             filename="snapd-slot.c"
             line="95">Get the name of the interface this slot accepts.</doc>
        <source-position filename="snapd-slot.h" line="30"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-slot.c"
               line="101">an interface name.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="slot" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-slot.c"
                 line="97">a #SnapdSlot.</doc>
            <type name="Slot" c:type="SnapdSlot*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_label"
              c:identifier="snapd_slot_get_label"
              version="1.0">
        <doc xml:space="preserve"
             filename="snapd-slot.c"
             line="181">Get a human readable label for this slot.</doc>
        <source-position filename="snapd-slot.h" line="41"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-slot.c"
               line="187">a label.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="slot" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-slot.c"
                 line="183">a #SnapdSlot.</doc>
            <type name="Slot" c:type="SnapdSlot*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_name" c:identifier="snapd_slot_get_name" version="1.0">
        <doc xml:space="preserve"
             filename="snapd-slot.c"
             line="61">Get the name of this slot.</doc>
        <source-position filename="snapd-slot.h" line="26"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-slot.c"
               line="67">a name</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="slot" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-slot.c"
                 line="63">a #SnapdSlot.</doc>
            <type name="Slot" c:type="SnapdSlot*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_snap" c:identifier="snapd_slot_get_snap" version="1.0">
        <doc xml:space="preserve"
             filename="snapd-slot.c"
             line="78">Get the snap this slot is on.</doc>
        <source-position filename="snapd-slot.h" line="28"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-slot.c"
               line="84">a snap name.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="slot" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-slot.c"
                 line="80">a #SnapdSlot.</doc>
            <type name="Slot" c:type="SnapdSlot*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="has_attribute"
              c:identifier="snapd_slot_has_attribute"
              version="1.3">
        <doc xml:space="preserve"
             filename="snapd-slot.c"
             line="145">Check if this slot has an attribute.</doc>
        <source-position filename="snapd-slot.h" line="35"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-slot.c"
               line="152">%TRUE if this attribute exists.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="slot" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-slot.c"
                 line="147">a #SnapdSlot.</doc>
            <type name="Slot" c:type="SnapdSlot*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-slot.c"
                 line="148">an attribute name.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="attributes"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="GLib.HashTable">
          <type name="gpointer" c:type="gpointer"/>
          <type name="gpointer" c:type="gpointer"/>
        </type>
      </property>
      <property name="connections"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <array name="GLib.PtrArray">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </property>
      <property name="interface"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="label"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="name"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="snap"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
    </class>
    <record name="SlotClass"
            c:type="SnapdSlotClass"
            glib:is-gtype-struct-for="Slot">
      <source-position filename="snapd-slot.h" line="24"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="Snap"
           c:symbol-prefix="snap"
           c:type="SnapdSnap"
           version="1.0"
           parent="GObject.Object"
           glib:type-name="SnapdSnap"
           glib:get-type="snapd_snap_get_type"
           glib:type-struct="SnapClass">
      <doc xml:space="preserve"
           filename="snapd-snap.c"
           line="25">#SnapdSnap contains Snap metadata.</doc>
      <source-position filename="snapd-snap.h" line="25"/>
      <method name="get_apps" c:identifier="snapd_snap_get_apps" version="1.0">
        <doc xml:space="preserve"
             filename="snapd-snap.c"
             line="119">Get the apps this snap provides.</doc>
        <source-position filename="snapd-snap.h" line="86"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-snap.c"
               line="125">an array of #SnapdApp.</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="App"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="snap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-snap.c"
                 line="121">a #SnapdSnap.</doc>
            <type name="Snap" c:type="SnapdSnap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_base"
              c:identifier="snapd_snap_get_base"
              version="1.45">
        <doc xml:space="preserve"
             filename="snapd-snap.c"
             line="136">Get the base snap this snap uses.</doc>
        <source-position filename="snapd-snap.h" line="88"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="snapd-snap.c"
               line="142">a snap name or %NULL if not set.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="snap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-snap.c"
                 line="138">a #SnapdSnap.</doc>
            <type name="Snap" c:type="SnapdSnap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_broken"
              c:identifier="snapd_snap_get_broken"
              version="1.25">
        <doc xml:space="preserve"
             filename="snapd-snap.c"
             line="153">Get the reason this snap is broken.</doc>
        <source-position filename="snapd-snap.h" line="90"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="snapd-snap.c"
               line="159">an error string or %NULL if not broken.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="snap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-snap.c"
                 line="155">a #SnapdSnap.</doc>
            <type name="Snap" c:type="SnapdSnap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_channel"
              c:identifier="snapd_snap_get_channel"
              version="1.0">
        <doc xml:space="preserve"
             filename="snapd-snap.c"
             line="170">Get the channel this snap is from, e.g. "stable".</doc>
        <source-position filename="snapd-snap.h" line="92"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-snap.c"
               line="176">a channel name.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="snap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-snap.c"
                 line="172">a #SnapdSnap.</doc>
            <type name="Snap" c:type="SnapdSnap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_channels"
              c:identifier="snapd_snap_get_channels"
              version="1.22">
        <doc xml:space="preserve"
             filename="snapd-snap.c"
             line="187">Gets the available channels for this snap.</doc>
        <source-position filename="snapd-snap.h" line="94"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-snap.c"
               line="193">an array of #SnapdChannel.</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="Channel"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="snap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-snap.c"
                 line="189">a #SnapdSnap.</doc>
            <type name="Snap" c:type="SnapdSnap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_common_ids"
              c:identifier="snapd_snap_get_common_ids"
              version="1.41">
        <doc xml:space="preserve"
             filename="snapd-snap.c"
             line="269">Get common IDs associated with this snap.</doc>
        <source-position filename="snapd-snap.h" line="99"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-snap.c"
               line="275">an array of common ids.</doc>
          <array c:type="GStrv">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="snap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-snap.c"
                 line="271">a #SnapdSnap.</doc>
            <type name="Snap" c:type="SnapdSnap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_confinement"
              c:identifier="snapd_snap_get_confinement"
              version="1.0">
        <doc xml:space="preserve"
             filename="snapd-snap.c"
             line="286">Get the confinement this snap is using, e.g. %SNAPD_CONFINEMENT_STRICT.</doc>
        <source-position filename="snapd-snap.h" line="101"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-snap.c"
               line="292">a #SnapdConfinement.</doc>
          <type name="Confinement" c:type="SnapdConfinement"/>
        </return-value>
        <parameters>
          <instance-parameter name="snap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-snap.c"
                 line="288">a #SnapdSnap.</doc>
            <type name="Snap" c:type="SnapdSnap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_contact"
              c:identifier="snapd_snap_get_contact"
              version="1.13">
        <doc xml:space="preserve"
             filename="snapd-snap.c"
             line="303">Get the means of contacting the snap developer, e.g. "mailto:developer@example.com".</doc>
        <source-position filename="snapd-snap.h" line="103"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-snap.c"
               line="309">a contact URL.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="snap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-snap.c"
                 line="305">a #SnapdSnap.</doc>
            <type name="Snap" c:type="SnapdSnap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_description"
              c:identifier="snapd_snap_get_description"
              version="1.0">
        <doc xml:space="preserve"
             filename="snapd-snap.c"
             line="320">Get a multi-line description of this snap.</doc>
        <source-position filename="snapd-snap.h" line="105"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-snap.c"
               line="326">description text.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="snap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-snap.c"
                 line="322">a #SnapdSnap.</doc>
            <type name="Snap" c:type="SnapdSnap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_developer"
              c:identifier="snapd_snap_get_developer"
              version="1.0"
              deprecated="1"
              deprecated-version="1.42">
        <doc xml:space="preserve"
             filename="snapd-snap.c"
             line="337">Get the developer who created this snap.</doc>
        <doc-deprecated xml:space="preserve">Use snapd_snap_get_publisher_username()</doc-deprecated>
        <source-position filename="snapd-snap.h" line="107"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-snap.c"
               line="343">a developer name.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="snap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-snap.c"
                 line="339">a #SnapdSnap.</doc>
            <type name="Snap" c:type="SnapdSnap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_devmode"
              c:identifier="snapd_snap_get_devmode"
              version="1.0">
        <doc xml:space="preserve"
             filename="snapd-snap.c"
             line="355">Get if this snap is running in developer mode.</doc>
        <source-position filename="snapd-snap.h" line="109"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-snap.c"
               line="361">%TRUE if this snap is running in devmode.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="snap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-snap.c"
                 line="357">a #SnapdSnap.</doc>
            <type name="Snap" c:type="SnapdSnap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_download_size"
              c:identifier="snapd_snap_get_download_size"
              version="1.0">
        <doc xml:space="preserve"
             filename="snapd-snap.c"
             line="372">Get the download size of this snap or 0 if unknown.</doc>
        <source-position filename="snapd-snap.h" line="111"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-snap.c"
               line="378">a byte count.</doc>
          <type name="gint64" c:type="gint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="snap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-snap.c"
                 line="374">a #SnapdSnap.</doc>
            <type name="Snap" c:type="SnapdSnap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_icon" c:identifier="snapd_snap_get_icon" version="1.0">
        <doc xml:space="preserve"
             filename="snapd-snap.c"
             line="389">Get the icon for this Snap, either a URL or an absolute path to retrieve it
from snapd directly.</doc>
        <source-position filename="snapd-snap.h" line="113"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-snap.c"
               line="396">a URL or path.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="snap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-snap.c"
                 line="391">a #SnapdSnap.</doc>
            <type name="Snap" c:type="SnapdSnap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_id" c:identifier="snapd_snap_get_id" version="1.0">
        <doc xml:space="preserve"
             filename="snapd-snap.c"
             line="407">Gets the unique ID for this snap.</doc>
        <source-position filename="snapd-snap.h" line="115"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-snap.c"
               line="413">an ID.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="snap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-snap.c"
                 line="409">a #SnapdSnap.</doc>
            <type name="Snap" c:type="SnapdSnap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_install_date"
              c:identifier="snapd_snap_get_install_date"
              version="1.0">
        <doc xml:space="preserve"
             filename="snapd-snap.c"
             line="424">Get the date this snap was installed or %NULL if unknown.</doc>
        <source-position filename="snapd-snap.h" line="117"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="snapd-snap.c"
               line="430">a #GDateTime or %NULL.</doc>
          <type name="GLib.DateTime" c:type="GDateTime*"/>
        </return-value>
        <parameters>
          <instance-parameter name="snap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-snap.c"
                 line="426">a #SnapdSnap.</doc>
            <type name="Snap" c:type="SnapdSnap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_installed_size"
              c:identifier="snapd_snap_get_installed_size"
              version="1.0">
        <doc xml:space="preserve"
             filename="snapd-snap.c"
             line="441">Get the installed size of this snap or 0 if unknown.</doc>
        <source-position filename="snapd-snap.h" line="119"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-snap.c"
               line="447">a byte count.</doc>
          <type name="gint64" c:type="gint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="snap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-snap.c"
                 line="443">a #SnapdSnap.</doc>
            <type name="Snap" c:type="SnapdSnap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_jailmode"
              c:identifier="snapd_snap_get_jailmode"
              version="1.8">
        <doc xml:space="preserve"
             filename="snapd-snap.c"
             line="458">Get if this snap is running in enforced confinement (jail) mode.</doc>
        <source-position filename="snapd-snap.h" line="121"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-snap.c"
               line="464">%TRUE if this snap is running in jailmode.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="snap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-snap.c"
                 line="460">a #SnapdSnap.</doc>
            <type name="Snap" c:type="SnapdSnap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_license"
              c:identifier="snapd_snap_get_license"
              version="1.19">
        <doc xml:space="preserve"
             filename="snapd-snap.c"
             line="475">Gets the SPDX license expression for this snap, e.g. "GPL-3.0+".</doc>
        <source-position filename="snapd-snap.h" line="123"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="snapd-snap.c"
               line="481">an SPDX license expression or %NULL.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="snap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-snap.c"
                 line="477">a #SnapdSnap.</doc>
            <type name="Snap" c:type="SnapdSnap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_media"
              c:identifier="snapd_snap_get_media"
              version="1.45">
        <doc xml:space="preserve"
             filename="snapd-snap.c"
             line="492">Get media that is associated with this snap.</doc>
        <source-position filename="snapd-snap.h" line="125"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-snap.c"
               line="498">an array of #SnapdMedia.</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="Media"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="snap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-snap.c"
                 line="494">a #SnapdSnap.</doc>
            <type name="Snap" c:type="SnapdSnap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_mounted_from"
              c:identifier="snapd_snap_get_mounted_from"
              version="1.45">
        <doc xml:space="preserve"
             filename="snapd-snap.c"
             line="509">Gets the path this snap is mounted from, which is a .snap file for installed
snaps and a directory for snaps in try mode.</doc>
        <source-position filename="snapd-snap.h" line="127"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="snapd-snap.c"
               line="516">a file path or %NULL.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="snap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-snap.c"
                 line="511">a #SnapdSnap.</doc>
            <type name="Snap" c:type="SnapdSnap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_name" c:identifier="snapd_snap_get_name" version="1.0">
        <doc xml:space="preserve"
             filename="snapd-snap.c"
             line="544">Get the name of this snap. This is used to reference this snap, e.g. for
installing / removing.</doc>
        <source-position filename="snapd-snap.h" line="129"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-snap.c"
               line="551">a name.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="snap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-snap.c"
                 line="546">a #SnapdSnap.</doc>
            <type name="Snap" c:type="SnapdSnap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_prices"
              c:identifier="snapd_snap_get_prices"
              version="1.0">
        <doc xml:space="preserve"
             filename="snapd-snap.c"
             line="562">Get the prices that this snap can be purchased at.</doc>
        <source-position filename="snapd-snap.h" line="131"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-snap.c"
               line="568">an array of #SnapdPrice.</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="Price"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="snap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-snap.c"
                 line="564">a #SnapdSnap.</doc>
            <type name="Snap" c:type="SnapdSnap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_private"
              c:identifier="snapd_snap_get_private"
              version="1.0">
        <doc xml:space="preserve"
             filename="snapd-snap.c"
             line="579">Get if this snap is only available to the developer.</doc>
        <source-position filename="snapd-snap.h" line="133"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-snap.c"
               line="585">%TRUE if this is a private snap.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="snap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-snap.c"
                 line="581">a #SnapdSnap.</doc>
            <type name="Snap" c:type="SnapdSnap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_publisher_display_name"
              c:identifier="snapd_snap_get_publisher_display_name"
              version="1.42">
        <doc xml:space="preserve"
             filename="snapd-snap.c"
             line="596">Get the display name of the publisher who created this snap.</doc>
        <source-position filename="snapd-snap.h" line="135"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-snap.c"
               line="602">a publisher display name.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="snap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-snap.c"
                 line="598">a #SnapdSnap.</doc>
            <type name="Snap" c:type="SnapdSnap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_publisher_id"
              c:identifier="snapd_snap_get_publisher_id"
              version="1.42">
        <doc xml:space="preserve"
             filename="snapd-snap.c"
             line="613">Get the ID of the publisher who created this snap.</doc>
        <source-position filename="snapd-snap.h" line="137"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-snap.c"
               line="619">a publisher ID.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="snap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-snap.c"
                 line="615">a #SnapdSnap.</doc>
            <type name="Snap" c:type="SnapdSnap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_publisher_username"
              c:identifier="snapd_snap_get_publisher_username"
              version="1.42">
        <doc xml:space="preserve"
             filename="snapd-snap.c"
             line="630">Get the username of the publisher who created this snap.</doc>
        <source-position filename="snapd-snap.h" line="139"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-snap.c"
               line="636">a publisher username.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="snap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-snap.c"
                 line="632">a #SnapdSnap.</doc>
            <type name="Snap" c:type="SnapdSnap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_publisher_validation"
              c:identifier="snapd_snap_get_publisher_validation"
              version="1.42">
        <doc xml:space="preserve"
             filename="snapd-snap.c"
             line="647">Get the validation for the snap publisher, e.g. %SNAPD_PUBLISHER_VALIDATION_VERIFIED</doc>
        <source-position filename="snapd-snap.h" line="141"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-snap.c"
               line="653">a #SnapdPublisherValidation.</doc>
          <type name="PublisherValidation" c:type="SnapdPublisherValidation"/>
        </return-value>
        <parameters>
          <instance-parameter name="snap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-snap.c"
                 line="649">a #SnapdSnap.</doc>
            <type name="Snap" c:type="SnapdSnap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_revision"
              c:identifier="snapd_snap_get_revision"
              version="1.0">
        <doc xml:space="preserve"
             filename="snapd-snap.c"
             line="664">Get the revision for this snap. The format of the string is undefined.
See also snapd_snap_get_version().</doc>
        <source-position filename="snapd-snap.h" line="143"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-snap.c"
               line="671">a revision string.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="snap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-snap.c"
                 line="666">a #SnapdSnap.</doc>
            <type name="Snap" c:type="SnapdSnap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_screenshots"
              c:identifier="snapd_snap_get_screenshots"
              version="1.0"
              deprecated="1"
              deprecated-version="1.45">
        <doc xml:space="preserve"
             filename="snapd-snap.c"
             line="682">Get the screenshots that are available for this snap.</doc>
        <doc-deprecated xml:space="preserve">Use snapd_snap_get_media()</doc-deprecated>
        <source-position filename="snapd-snap.h" line="145"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-snap.c"
               line="688">an array of #SnapdScreenshot.</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="Screenshot"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="snap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-snap.c"
                 line="684">a #SnapdSnap.</doc>
            <type name="Snap" c:type="SnapdSnap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_snap_type"
              c:identifier="snapd_snap_get_snap_type"
              version="1.0">
        <doc xml:space="preserve"
             filename="snapd-snap.c"
             line="700">Get the type of snap, e.g. %SNAPD_SNAP_TYPE_APP</doc>
        <source-position filename="snapd-snap.h" line="147"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-snap.c"
               line="706">a #SnapdSnapType.</doc>
          <type name="SnapType" c:type="SnapdSnapType"/>
        </return-value>
        <parameters>
          <instance-parameter name="snap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-snap.c"
                 line="702">a #SnapdSnap.</doc>
            <type name="Snap" c:type="SnapdSnap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_status"
              c:identifier="snapd_snap_get_status"
              version="1.0">
        <doc xml:space="preserve"
             filename="snapd-snap.c"
             line="717">Get the current status of this snap, e.g. SNAPD_SNAP_STATUS_INSTALLED.</doc>
        <source-position filename="snapd-snap.h" line="149"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-snap.c"
               line="723">a #SnapdSnapStatus.</doc>
          <type name="SnapStatus" c:type="SnapdSnapStatus"/>
        </return-value>
        <parameters>
          <instance-parameter name="snap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-snap.c"
                 line="719">a #SnapdSnap.</doc>
            <type name="Snap" c:type="SnapdSnap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_summary"
              c:identifier="snapd_snap_get_summary"
              version="1.0">
        <doc xml:space="preserve"
             filename="snapd-snap.c"
             line="734">Get a single line summary for this snap, e.g. "Best app ever!".</doc>
        <source-position filename="snapd-snap.h" line="151"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-snap.c"
               line="740">a summary string.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="snap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-snap.c"
                 line="736">a #SnapdSnap.</doc>
            <type name="Snap" c:type="SnapdSnap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_title"
              c:identifier="snapd_snap_get_title"
              version="1.14">
        <doc xml:space="preserve"
             filename="snapd-snap.c"
             line="527">Get the title for this snap. If not available use the snap name instead.</doc>
        <source-position filename="snapd-snap.h" line="153"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="snapd-snap.c"
               line="533">a title or %NULL.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="snap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-snap.c"
                 line="529">a #SnapdSnap.</doc>
            <type name="Snap" c:type="SnapdSnap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_tracking_channel"
              c:identifier="snapd_snap_get_tracking_channel"
              version="1.7">
        <doc xml:space="preserve"
             filename="snapd-snap.c"
             line="751">Get the channel that updates will be installed from, e.g. "stable".</doc>
        <source-position filename="snapd-snap.h" line="155"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-snap.c"
               line="757">a channel name.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="snap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-snap.c"
                 line="753">a #SnapdSnap.</doc>
            <type name="Snap" c:type="SnapdSnap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_tracks"
              c:identifier="snapd_snap_get_tracks"
              version="1.22">
        <doc xml:space="preserve"
             filename="snapd-snap.c"
             line="768">Get the tracks that are available.</doc>
        <source-position filename="snapd-snap.h" line="157"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-snap.c"
               line="774">an ordered array of track names.</doc>
          <array c:type="GStrv">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="snap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-snap.c"
                 line="770">a #SnapdSnap.</doc>
            <type name="Snap" c:type="SnapdSnap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_trymode"
              c:identifier="snapd_snap_get_trymode"
              version="1.0">
        <doc xml:space="preserve"
             filename="snapd-snap.c"
             line="785">Get if this snap is running in try mode (installed locally and able to be
directly modified).</doc>
        <source-position filename="snapd-snap.h" line="159"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-snap.c"
               line="792">%TRUE if using trymode.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="snap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-snap.c"
                 line="787">a #SnapdSnap.</doc>
            <type name="Snap" c:type="SnapdSnap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_version"
              c:identifier="snapd_snap_get_version"
              version="1.0">
        <doc xml:space="preserve"
             filename="snapd-snap.c"
             line="803">Get the version for this snap. The format of the string is undefined.
See also snapd_snap_get_revision().</doc>
        <source-position filename="snapd-snap.h" line="161"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-snap.c"
               line="810">a version string.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="snap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-snap.c"
                 line="805">a #SnapdSnap.</doc>
            <type name="Snap" c:type="SnapdSnap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="match_channel"
              c:identifier="snapd_snap_match_channel"
              version="1.22">
        <doc xml:space="preserve"
             filename="snapd-snap.c"
             line="219">Finds the available channel that best matches the given name.
If none matches %NULL is returned.</doc>
        <source-position filename="snapd-snap.h" line="96"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="snapd-snap.c"
               line="227">an #SnapdChannel or %NULL.</doc>
          <type name="Channel" c:type="SnapdChannel*"/>
        </return-value>
        <parameters>
          <instance-parameter name="snap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-snap.c"
                 line="221">a #SnapdSnap.</doc>
            <type name="Snap" c:type="SnapdSnap*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-snap.c"
                 line="222">a channel name.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="apps"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <array name="GLib.PtrArray">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </property>
      <property name="base"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="broken"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="channel"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="channels"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <array name="GLib.PtrArray">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </property>
      <property name="common-ids"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <array>
          <type name="utf8"/>
        </array>
      </property>
      <property name="confinement"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="Confinement"/>
      </property>
      <property name="contact"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="description"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="developer"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="devmode"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="download-size"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gint64" c:type="gint64"/>
      </property>
      <property name="icon"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="id"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="install-date"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="GLib.DateTime"/>
      </property>
      <property name="installed-size"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gint64" c:type="gint64"/>
      </property>
      <property name="jailmode"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="license"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="media"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <array name="GLib.PtrArray">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </property>
      <property name="mounted-from"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="name"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="prices"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <array name="GLib.PtrArray">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </property>
      <property name="private"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="publisher-display-name"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="publisher-id"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="publisher-username"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="publisher-validation"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="PublisherValidation"/>
      </property>
      <property name="revision"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="screenshots"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <array name="GLib.PtrArray">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </property>
      <property name="snap-type"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="SnapType"/>
      </property>
      <property name="status"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="SnapStatus"/>
      </property>
      <property name="summary"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="title"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="tracking-channel"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="tracks"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <array>
          <type name="utf8"/>
        </array>
      </property>
      <property name="trymode"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="version"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
    </class>
    <record name="SnapClass"
            c:type="SnapdSnapClass"
            glib:is-gtype-struct-for="Snap">
      <source-position filename="snapd-snap.h" line="25"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <enumeration name="SnapStatus"
                 version="1.0"
                 glib:type-name="SnapdSnapStatus"
                 glib:get-type="snapd_snap_status_get_type"
                 c:type="SnapdSnapStatus">
      <doc xml:space="preserve"
           filename="snapd-snap.h"
           line="48">The current state of a snap.</doc>
      <member name="unknown"
              value="0"
              c:identifier="SNAPD_SNAP_STATUS_UNKNOWN"
              glib:nick="unknown">
        <doc xml:space="preserve"
             filename="snapd-snap.h"
             line="50">the snap state is unknown.</doc>
      </member>
      <member name="available"
              value="1"
              c:identifier="SNAPD_SNAP_STATUS_AVAILABLE"
              glib:nick="available">
        <doc xml:space="preserve"
             filename="snapd-snap.h"
             line="51">the snap is available for installation.</doc>
      </member>
      <member name="priced"
              value="2"
              c:identifier="SNAPD_SNAP_STATUS_PRICED"
              glib:nick="priced">
        <doc xml:space="preserve"
             filename="snapd-snap.h"
             line="52">the snap is available for purchase.</doc>
      </member>
      <member name="installed"
              value="3"
              c:identifier="SNAPD_SNAP_STATUS_INSTALLED"
              glib:nick="installed">
        <doc xml:space="preserve"
             filename="snapd-snap.h"
             line="53">the snap is installed but not active.</doc>
      </member>
      <member name="active"
              value="4"
              c:identifier="SNAPD_SNAP_STATUS_ACTIVE"
              glib:nick="active">
        <doc xml:space="preserve"
             filename="snapd-snap.h"
             line="54">the snap is installed and active.</doc>
      </member>
    </enumeration>
    <enumeration name="SnapType"
                 version="1.0"
                 glib:type-name="SnapdSnapType"
                 glib:get-type="snapd_snap_type_get_type"
                 c:type="SnapdSnapType">
      <doc xml:space="preserve"
           filename="snapd-snap.h"
           line="27">Type of snap.</doc>
      <member name="unknown"
              value="0"
              c:identifier="SNAPD_SNAP_TYPE_UNKNOWN"
              glib:nick="unknown">
        <doc xml:space="preserve"
             filename="snapd-snap.h"
             line="29">the type of snap is unknown.</doc>
      </member>
      <member name="app"
              value="1"
              c:identifier="SNAPD_SNAP_TYPE_APP"
              glib:nick="app">
        <doc xml:space="preserve"
             filename="snapd-snap.h"
             line="30">the snap is an application.</doc>
      </member>
      <member name="kernel"
              value="2"
              c:identifier="SNAPD_SNAP_TYPE_KERNEL"
              glib:nick="kernel">
        <doc xml:space="preserve"
             filename="snapd-snap.h"
             line="31">the snap is a kernel.</doc>
      </member>
      <member name="gadget"
              value="3"
              c:identifier="SNAPD_SNAP_TYPE_GADGET"
              glib:nick="gadget">
        <doc xml:space="preserve"
             filename="snapd-snap.h"
             line="32">the snapd is a gadget.</doc>
      </member>
      <member name="os"
              value="4"
              c:identifier="SNAPD_SNAP_TYPE_OS"
              glib:nick="os">
        <doc xml:space="preserve"
             filename="snapd-snap.h"
             line="33">the snap is an operating system.</doc>
      </member>
    </enumeration>
    <enumeration name="SystemConfinement"
                 version="1.15"
                 glib:type-name="SnapdSystemConfinement"
                 glib:get-type="snapd_system_confinement_get_type"
                 c:type="SnapdSystemConfinement">
      <doc xml:space="preserve"
           filename="snapd-system-information.h"
           line="25">Confinement used by a snap.</doc>
      <member name="unknown"
              value="0"
              c:identifier="SNAPD_SYSTEM_CONFINEMENT_UNKNOWN"
              glib:nick="unknown">
        <doc xml:space="preserve"
             filename="snapd-system-information.h"
             line="27">the confinement of the system is unknown.</doc>
      </member>
      <member name="strict"
              value="1"
              c:identifier="SNAPD_SYSTEM_CONFINEMENT_STRICT"
              glib:nick="strict">
        <doc xml:space="preserve"
             filename="snapd-system-information.h"
             line="28">the system supports strict confinement.</doc>
      </member>
      <member name="partial"
              value="2"
              c:identifier="SNAPD_SYSTEM_CONFINEMENT_PARTIAL"
              glib:nick="partial">
        <doc xml:space="preserve"
             filename="snapd-system-information.h"
             line="29">the system supports partial confinement.</doc>
      </member>
    </enumeration>
    <class name="SystemInformation"
           c:symbol-prefix="system_information"
           c:type="SnapdSystemInformation"
           version="1.0"
           parent="GObject.Object"
           glib:type-name="SnapdSystemInformation"
           glib:get-type="snapd_system_information_get_type"
           glib:type-struct="SystemInformationClass">
      <doc xml:space="preserve"
           filename="snapd-system-information.c"
           line="24">#SnapdSystemInformation contains information about the system snapd is running on.</doc>
      <source-position filename="snapd-system-information.h" line="23"/>
      <method name="get_binaries_directory"
              c:identifier="snapd_system_information_get_binaries_directory"
              version="1.11">
        <doc xml:space="preserve"
             filename="snapd-system-information.c"
             line="81">Get the directory snap binaries are stored, e.g. "/snap/bin".</doc>
        <source-position filename="snapd-system-information.h" line="42"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-system-information.c"
               line="87">a directory.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="system_information"
                              transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-system-information.c"
                 line="83">a #SnapdSystemInformation.</doc>
            <type name="SystemInformation" c:type="SnapdSystemInformation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_build_id"
              c:identifier="snapd_system_information_get_build_id"
              version="1.40">
        <doc xml:space="preserve"
             filename="snapd-system-information.c"
             line="98">Gets the unique build ID for the snap build, e.g. "efdd0b5e69b0742fa5e5bad0771df4d1df2459d1"</doc>
        <source-position filename="snapd-system-information.h" line="44"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-system-information.c"
               line="104">a build ID.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="system_information"
                              transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-system-information.c"
                 line="100">a #SnapdSystemInformation.</doc>
            <type name="SystemInformation" c:type="SnapdSystemInformation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_confinement"
              c:identifier="snapd_system_information_get_confinement"
              version="1.15">
        <doc xml:space="preserve"
             filename="snapd-system-information.c"
             line="115">Get the level of confinement the system supports, e.g. %SNAPD_SYSTEM_CONFINEMENT_STRICT.</doc>
        <source-position filename="snapd-system-information.h" line="46"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-system-information.c"
               line="121">a #SnapdSystemConfinement.</doc>
          <type name="SystemConfinement" c:type="SnapdSystemConfinement"/>
        </return-value>
        <parameters>
          <instance-parameter name="system_information"
                              transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-system-information.c"
                 line="117">a #SnapdSystemInformation.</doc>
            <type name="SystemInformation" c:type="SnapdSystemInformation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_kernel_version"
              c:identifier="snapd_system_information_get_kernel_version"
              version="1.11">
        <doc xml:space="preserve"
             filename="snapd-system-information.c"
             line="132">Get the version of the kernel snapd is running on, e.g. "4.10.0-15-generic".</doc>
        <source-position filename="snapd-system-information.h" line="48"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-system-information.c"
               line="138">a version string.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="system_information"
                              transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-system-information.c"
                 line="134">a #SnapdSystemInformation.</doc>
            <type name="SystemInformation" c:type="SnapdSystemInformation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_managed"
              c:identifier="snapd_system_information_get_managed"
              version="1.7">
        <doc xml:space="preserve"
             filename="snapd-system-information.c"
             line="149">Get if snapd is running on a managed system.</doc>
        <source-position filename="snapd-system-information.h" line="50"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-system-information.c"
               line="155">%TRUE if running on a managed system.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="system_information"
                              transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-system-information.c"
                 line="151">a #SnapdSystemInformation.</doc>
            <type name="SystemInformation" c:type="SnapdSystemInformation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_mount_directory"
              c:identifier="snapd_system_information_get_mount_directory"
              version="1.11">
        <doc xml:space="preserve"
             filename="snapd-system-information.c"
             line="166">Get the directory snaps are mounted, e.g. "/snap".</doc>
        <source-position filename="snapd-system-information.h" line="52"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-system-information.c"
               line="172">a directory.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="system_information"
                              transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-system-information.c"
                 line="168">a #SnapdSystemInformation.</doc>
            <type name="SystemInformation" c:type="SnapdSystemInformation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_on_classic"
              c:identifier="snapd_system_information_get_on_classic"
              version="1.0">
        <doc xml:space="preserve"
             filename="snapd-system-information.c"
             line="183">Get if this system is a classic system.</doc>
        <source-position filename="snapd-system-information.h" line="54"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-system-information.c"
               line="189">%TRUE if running on a classic system.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="system_information"
                              transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-system-information.c"
                 line="185">a #SnapdSystemInformation.</doc>
            <type name="SystemInformation" c:type="SnapdSystemInformation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_os_id"
              c:identifier="snapd_system_information_get_os_id"
              version="1.0">
        <doc xml:space="preserve"
             filename="snapd-system-information.c"
             line="200">Get the operating system ID, e.g. "ubuntu".</doc>
        <source-position filename="snapd-system-information.h" line="56"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-system-information.c"
               line="206">an operating system ID.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="system_information"
                              transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-system-information.c"
                 line="202">a #SnapdSystemInformation.</doc>
            <type name="SystemInformation" c:type="SnapdSystemInformation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_os_version"
              c:identifier="snapd_system_information_get_os_version"
              version="1.0">
        <doc xml:space="preserve"
             filename="snapd-system-information.c"
             line="217">Get the operating system version, e.g. "16.04".</doc>
        <source-position filename="snapd-system-information.h" line="58"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-system-information.c"
               line="223">a version string.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="system_information"
                              transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-system-information.c"
                 line="219">a #SnapdSystemInformation.</doc>
            <type name="SystemInformation" c:type="SnapdSystemInformation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_refresh_hold"
              c:identifier="snapd_system_information_get_refresh_hold"
              version="1.42">
        <doc xml:space="preserve"
             filename="snapd-system-information.c"
             line="234">Get the time refreshes will be applied at, or %NULL if they are applied immediately.</doc>
        <source-position filename="snapd-system-information.h" line="60"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="snapd-system-information.c"
               line="240">a #GDateTime.</doc>
          <type name="GLib.DateTime" c:type="GDateTime*"/>
        </return-value>
        <parameters>
          <instance-parameter name="system_information"
                              transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-system-information.c"
                 line="236">a #SnapdSystemInformation.</doc>
            <type name="SystemInformation" c:type="SnapdSystemInformation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_refresh_last"
              c:identifier="snapd_system_information_get_refresh_last"
              version="1.42">
        <doc xml:space="preserve"
             filename="snapd-system-information.c"
             line="251">Get the time the last refresh occurred, or %NULL if has not occurred.</doc>
        <source-position filename="snapd-system-information.h" line="62"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="snapd-system-information.c"
               line="257">a #GDateTime.</doc>
          <type name="GLib.DateTime" c:type="GDateTime*"/>
        </return-value>
        <parameters>
          <instance-parameter name="system_information"
                              transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-system-information.c"
                 line="253">a #SnapdSystemInformation.</doc>
            <type name="SystemInformation" c:type="SnapdSystemInformation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_refresh_next"
              c:identifier="snapd_system_information_get_refresh_next"
              version="1.42">
        <doc xml:space="preserve"
             filename="snapd-system-information.c"
             line="268">Get the time the next refresh is scheduled for, or %NULL if none has been scheduled.</doc>
        <source-position filename="snapd-system-information.h" line="64"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="snapd-system-information.c"
               line="274">a #GDateTime.</doc>
          <type name="GLib.DateTime" c:type="GDateTime*"/>
        </return-value>
        <parameters>
          <instance-parameter name="system_information"
                              transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-system-information.c"
                 line="270">a #SnapdSystemInformation.</doc>
            <type name="SystemInformation" c:type="SnapdSystemInformation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_refresh_schedule"
              c:identifier="snapd_system_information_get_refresh_schedule"
              version="1.42">
        <doc xml:space="preserve"
             filename="snapd-system-information.c"
             line="285">Get the schedule when snap refreshes will occur.</doc>
        <source-position filename="snapd-system-information.h" line="66"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="snapd-system-information.c"
               line="291">a Snap refresh schedule string.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="system_information"
                              transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-system-information.c"
                 line="287">a #SnapdSystemInformation.</doc>
            <type name="SystemInformation" c:type="SnapdSystemInformation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_refresh_timer"
              c:identifier="snapd_system_information_get_refresh_timer"
              version="1.42">
        <doc xml:space="preserve"
             filename="snapd-system-information.c"
             line="302">Get the timer that refreshes are running to.</doc>
        <source-position filename="snapd-system-information.h" line="68"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="snapd-system-information.c"
               line="308">a Snap refresh timer string.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="system_information"
                              transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-system-information.c"
                 line="304">a #SnapdSystemInformation.</doc>
            <type name="SystemInformation" c:type="SnapdSystemInformation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_sandbox_features"
              c:identifier="snapd_system_information_get_sandbox_features"
              version="1.42">
        <doc xml:space="preserve"
             filename="snapd-system-information.c"
             line="319">Gets the sandbox features that snapd provides. Each backend in snapd provides
a list of features that it supports. For example, the "confinement-options"
backend may provide "classic", "devmode" and "strict".</doc>
        <source-position filename="snapd-system-information.h" line="70"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-system-information.c"
               line="327">a hash table of string arrays keyed by backend name.</doc>
          <type name="GLib.HashTable" c:type="GHashTable*">
            <type name="utf8"/>
            <array>
              <type name="utf8"/>
            </array>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="system_information"
                              transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-system-information.c"
                 line="321">a #SnapdSystemInformation.</doc>
            <type name="SystemInformation" c:type="SnapdSystemInformation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_series"
              c:identifier="snapd_system_information_get_series"
              version="1.0">
        <doc xml:space="preserve"
             filename="snapd-system-information.c"
             line="338">Get the series of snapd running, e.g. "16".</doc>
        <source-position filename="snapd-system-information.h" line="72"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-system-information.c"
               line="344">a series string.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="system_information"
                              transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-system-information.c"
                 line="340">a #SnapdSystemInformation.</doc>
            <type name="SystemInformation" c:type="SnapdSystemInformation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_store"
              c:identifier="snapd_system_information_get_store"
              version="1.7">
        <doc xml:space="preserve"
             filename="snapd-system-information.c"
             line="355">Get the store being used by snapd, e.g. "Ubuntu"</doc>
        <source-position filename="snapd-system-information.h" line="74"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="snapd-system-information.c"
               line="361">a store id or %NULL.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="system_information"
                              transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-system-information.c"
                 line="357">a #SnapdSystemInformation.</doc>
            <type name="SystemInformation" c:type="SnapdSystemInformation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_version"
              c:identifier="snapd_system_information_get_version"
              version="1.0">
        <doc xml:space="preserve"
             filename="snapd-system-information.c"
             line="372">Get the version of snapd running, e.g. "2.11+ppa174-1".</doc>
        <source-position filename="snapd-system-information.h" line="76"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-system-information.c"
               line="378">a version string.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="system_information"
                              transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-system-information.c"
                 line="374">a #SnapdSystemInformation.</doc>
            <type name="SystemInformation" c:type="SnapdSystemInformation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="binaries-directory"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="build-id"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="confinement"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="SystemConfinement"/>
      </property>
      <property name="kernel-version"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="managed"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="mount-directory"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="on-classic"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="os-id"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="os-version"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="refresh-hold"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="GLib.DateTime"/>
      </property>
      <property name="refresh-last"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="GLib.DateTime"/>
      </property>
      <property name="refresh-next"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="GLib.DateTime"/>
      </property>
      <property name="refresh-schedule"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="refresh-timer"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="sandbox-features"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gpointer" c:type="gpointer"/>
      </property>
      <property name="series"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="store"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="version"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
    </class>
    <record name="SystemInformationClass"
            c:type="SnapdSystemInformationClass"
            glib:is-gtype-struct-for="SystemInformation">
      <source-position filename="snapd-system-information.h" line="23"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="Task"
           c:symbol-prefix="task"
           c:type="SnapdTask"
           version="1.0"
           parent="GObject.Object"
           glib:type-name="SnapdTask"
           glib:get-type="snapd_task_get_type"
           glib:type-struct="TaskClass">
      <doc xml:space="preserve"
           filename="snapd-task.c"
           line="25">#SnapdTask contains progress information for a task in a Snap transaction.</doc>
      <source-position filename="snapd-task.h" line="23"/>
      <method name="get_id" c:identifier="snapd_task_get_id" version="1.0">
        <doc xml:space="preserve"
             filename="snapd-task.c"
             line="65">Get the unique ID for this task.</doc>
        <source-position filename="snapd-task.h" line="25"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-task.c"
               line="71">an ID.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="task" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-task.c"
                 line="67">a #SnapdTask.</doc>
            <type name="Task" c:type="SnapdTask*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_kind" c:identifier="snapd_task_get_kind" version="1.0">
        <doc xml:space="preserve"
             filename="snapd-task.c"
             line="86">Gets the kind of task this is.</doc>
        <source-position filename="snapd-task.h" line="27"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-task.c"
               line="92">the kind of task.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="task" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-task.c"
                 line="88">a #SnapdTask.</doc>
            <type name="Task" c:type="SnapdTask*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_progress_done"
              c:identifier="snapd_task_get_progress_done"
              version="1.0">
        <doc xml:space="preserve"
             filename="snapd-task.c"
             line="192">Get the the number of items completed in this task.</doc>
        <source-position filename="snapd-task.h" line="38"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-task.c"
               line="198">a count.</doc>
          <type name="gint64" c:type="gint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="task" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-task.c"
                 line="194">a #SnapdTask.</doc>
            <type name="Task" c:type="SnapdTask*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_progress_label"
              c:identifier="snapd_task_get_progress_label"
              version="1.5">
        <doc xml:space="preserve"
             filename="snapd-task.c"
             line="171">Get the the label associated with the progress.</doc>
        <source-position filename="snapd-task.h" line="36"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-task.c"
               line="177">a label string.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="task" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-task.c"
                 line="173">a #SnapdTask.</doc>
            <type name="Task" c:type="SnapdTask*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_progress_total"
              c:identifier="snapd_task_get_progress_total"
              version="1.0">
        <doc xml:space="preserve"
             filename="snapd-task.c"
             line="213">Get the the total number of items to be completed in this task.</doc>
        <source-position filename="snapd-task.h" line="40"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-task.c"
               line="219">a count.</doc>
          <type name="gint64" c:type="gint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="task" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-task.c"
                 line="215">a #SnapdTask.</doc>
            <type name="Task" c:type="SnapdTask*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_ready"
              c:identifier="snapd_task_get_ready"
              version="1.0"
              deprecated="1"
              deprecated-version="1.5">
        <doc xml:space="preserve"
             filename="snapd-task.c"
             line="149">Get if this task is completed.</doc>
        <doc-deprecated xml:space="preserve">Use snapd_change_get_ready() instead.</doc-deprecated>
        <source-position filename="snapd-task.h" line="34"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-task.c"
               line="157">%TRUE if this task is complete.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="task" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-task.c"
                 line="151">a #SnapdTask.</doc>
            <type name="Task" c:type="SnapdTask*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_ready_time"
              c:identifier="snapd_task_get_ready_time"
              version="1.0">
        <doc xml:space="preserve"
             filename="snapd-task.c"
             line="255">Get the time this task completed or %NULL if not yet completed.</doc>
        <source-position filename="snapd-task.h" line="44"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="snapd-task.c"
               line="261">a #GDateTime or %NULL.</doc>
          <type name="GLib.DateTime" c:type="GDateTime*"/>
        </return-value>
        <parameters>
          <instance-parameter name="task" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-task.c"
                 line="257">a #SnapdTask.</doc>
            <type name="Task" c:type="SnapdTask*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_spawn_time"
              c:identifier="snapd_task_get_spawn_time"
              version="1.0">
        <doc xml:space="preserve"
             filename="snapd-task.c"
             line="234">Get the time this task started.</doc>
        <source-position filename="snapd-task.h" line="42"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-task.c"
               line="240">a #GDateTime.</doc>
          <type name="GLib.DateTime" c:type="GDateTime*"/>
        </return-value>
        <parameters>
          <instance-parameter name="task" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-task.c"
                 line="236">a #SnapdTask.</doc>
            <type name="Task" c:type="SnapdTask*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_status"
              c:identifier="snapd_task_get_status"
              version="1.0">
        <doc xml:space="preserve"
             filename="snapd-task.c"
             line="128">Get the status of the task.</doc>
        <source-position filename="snapd-task.h" line="31"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-task.c"
               line="134">a status string.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="task" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-task.c"
                 line="130">a #SnapdTask.</doc>
            <type name="Task" c:type="SnapdTask*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_summary"
              c:identifier="snapd_task_get_summary"
              version="1.0">
        <doc xml:space="preserve"
             filename="snapd-task.c"
             line="107">Get a human readable description of the task.</doc>
        <source-position filename="snapd-task.h" line="29"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-task.c"
               line="113">a string describing the task.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="task" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-task.c"
                 line="109">a #SnapdTask.</doc>
            <type name="Task" c:type="SnapdTask*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="id"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="kind"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="progress-done"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gint64" c:type="gint64"/>
      </property>
      <property name="progress-label"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="progress-total"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gint64" c:type="gint64"/>
      </property>
      <property name="ready"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="ready-time"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="GLib.DateTime"/>
      </property>
      <property name="spawn-time"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="GLib.DateTime"/>
      </property>
      <property name="status"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="summary"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
    </class>
    <record name="TaskClass"
            c:type="SnapdTaskClass"
            glib:is-gtype-struct-for="Task">
      <source-position filename="snapd-task.h" line="23"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="UserInformation"
           c:symbol-prefix="user_information"
           c:type="SnapdUserInformation"
           version="1.3"
           parent="GObject.Object"
           glib:type-name="SnapdUserInformation"
           glib:get-type="snapd_user_information_get_type"
           glib:type-struct="UserInformationClass">
      <doc xml:space="preserve"
           filename="snapd-user-information.c"
           line="24">#SnapdUserInformation contains information about a user account on the system
snapd is running on.</doc>
      <source-position filename="snapd-user-information.h" line="25"/>
      <method name="get_auth_data"
              c:identifier="snapd_user_information_get_auth_data"
              version="1.26">
        <doc xml:space="preserve"
             filename="snapd-user-information.c"
             line="124">Get the email address for this account.</doc>
        <source-position filename="snapd-user-information.h" line="35"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="snapd-user-information.c"
               line="130">a #SnapdAuthData or %NULL if not set.</doc>
          <type name="AuthData" c:type="SnapdAuthData*"/>
        </return-value>
        <parameters>
          <instance-parameter name="user_information"
                              transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-user-information.c"
                 line="126">a #SnapdUserInformation.</doc>
            <type name="UserInformation" c:type="SnapdUserInformation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_email"
              c:identifier="snapd_user_information_get_email"
              version="1.26">
        <doc xml:space="preserve"
             filename="snapd-user-information.c"
             line="90">Get the email address for this account.</doc>
        <source-position filename="snapd-user-information.h" line="31"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-user-information.c"
               line="96">a email address.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="user_information"
                              transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-user-information.c"
                 line="92">a #SnapdUserInformation.</doc>
            <type name="UserInformation" c:type="SnapdUserInformation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_id"
              c:identifier="snapd_user_information_get_id"
              version="1.26">
        <doc xml:space="preserve"
             filename="snapd-user-information.c"
             line="56">Get the id for this account.</doc>
        <source-position filename="snapd-user-information.h" line="27"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-user-information.c"
               line="62">a user id.</doc>
          <type name="gint64" c:type="gint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="user_information"
                              transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-user-information.c"
                 line="58">a #SnapdUserInformation.</doc>
            <type name="UserInformation" c:type="SnapdUserInformation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_ssh_keys"
              c:identifier="snapd_user_information_get_ssh_keys"
              version="1.3">
        <doc xml:space="preserve"
             filename="snapd-user-information.c"
             line="107">Get the SSH keys added to this account.</doc>
        <source-position filename="snapd-user-information.h" line="33"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-user-information.c"
               line="113">the names of the SSH keys.</doc>
          <array c:type="GStrv">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="user_information"
                              transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-user-information.c"
                 line="109">a #SnapdUserInformation.</doc>
            <type name="UserInformation" c:type="SnapdUserInformation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_username"
              c:identifier="snapd_user_information_get_username"
              version="1.3">
        <doc xml:space="preserve"
             filename="snapd-user-information.c"
             line="73">Get the local username for this account.</doc>
        <source-position filename="snapd-user-information.h" line="29"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-user-information.c"
               line="79">a username.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="user_information"
                              transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-user-information.c"
                 line="75">a #SnapdUserInformation.</doc>
            <type name="UserInformation" c:type="SnapdUserInformation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="auth-data"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="AuthData"/>
      </property>
      <property name="email"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="id"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gint64" c:type="gint64"/>
      </property>
      <property name="ssh-keys"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <array>
          <type name="utf8"/>
        </array>
      </property>
      <property name="username"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
    </class>
    <record name="UserInformationClass"
            c:type="SnapdUserInformationClass"
            glib:is-gtype-struct-for="UserInformation">
      <source-position filename="snapd-user-information.h" line="25"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <function name="error_quark"
              c:identifier="snapd_error_quark"
              moved-to="Error.quark"
              version="1.0">
      <doc xml:space="preserve"
           filename="snapd-error.c"
           line="22">Gets the Snapd Error Quark.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="snapd-error.c"
             line="27">a #GQuark.</doc>
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="login_async"
              c:identifier="snapd_login_async"
              version="1.0"
              deprecated="1"
              deprecated-version="1.34">
      <doc xml:space="preserve"
           filename="snapd-login.c"
           line="75">Asynchronously get authorization to install/remove snaps.
See snapd_login_sync() for more information.</doc>
      <doc-deprecated xml:space="preserve">Use snapd_client_login2_async()</doc-deprecated>
      <source-position filename="snapd-login.h" line="31"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="username" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-login.c"
               line="77">username to log in with.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="password" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-login.c"
               line="78">password to log in with.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="otp"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="snapd-login.c"
               line="79">response to one-time password challenge.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="cancellable"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="snapd-login.c"
               line="80">a #GCancellable or %NULL.</doc>
          <type name="Gio.Cancellable" c:type="GCancellable*"/>
        </parameter>
        <parameter name="callback"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   scope="async"
                   closure="5">
          <doc xml:space="preserve"
               filename="snapd-login.c"
               line="81">a #GAsyncReadyCallback to call when the request is satisfied.</doc>
          <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="snapd-login.c"
               line="82">the data to pass to callback function.</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="login_finish"
              c:identifier="snapd_login_finish"
              version="1.0"
              deprecated="1"
              deprecated-version="1.34"
              throws="1">
      <doc xml:space="preserve"
           filename="snapd-login.c"
           line="105">Complete login started with snapd_login_async().
See snapd_login_sync() for more information.</doc>
      <doc-deprecated xml:space="preserve">Use snapd_client_login2_finish()</doc-deprecated>
      <source-position filename="snapd-login.h" line="38"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="snapd-login.c"
             line="113">a #SnapdAuthData or %NULL on error.</doc>
        <type name="AuthData" c:type="SnapdAuthData*"/>
      </return-value>
      <parameters>
        <parameter name="result" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-login.c"
               line="107">a #GAsyncResult.</doc>
          <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
        </parameter>
      </parameters>
    </function>
    <function name="login_sync"
              c:identifier="snapd_login_sync"
              version="1.0"
              deprecated="1"
              deprecated-version="1.34"
              throws="1">
      <doc xml:space="preserve"
           filename="snapd-login.c"
           line="26">This call used to contact a D-Bus service to perform snapd authentication using
Polkit. This now just creates a #SnapdClient and does the call directly.</doc>
      <doc-deprecated xml:space="preserve">Use snapd_client_login2_sync()</doc-deprecated>
      <source-position filename="snapd-login.h" line="25"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="snapd-login.c"
             line="38">a #SnapdAuthData or %NULL on error.</doc>
        <type name="AuthData" c:type="SnapdAuthData*"/>
      </return-value>
      <parameters>
        <parameter name="username" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-login.c"
               line="28">username to log in with.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="password" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-login.c"
               line="29">password to log in with.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="otp"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="snapd-login.c"
               line="30">response to one-time password challenge.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="cancellable"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="snapd-login.c"
               line="31">a #GCancellable or %NULL.</doc>
          <type name="Gio.Cancellable" c:type="GCancellable*"/>
        </parameter>
      </parameters>
    </function>
  </namespace>
</repository>
