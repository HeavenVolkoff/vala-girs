<?xml version="1.0"?>
<!-- This file was automatically generated from C sources - DO NOT EDIT!
To affect the contents of this file, edit the original C definitions,
and/or use gtk-doc annotations.  -->
<repository version="1.2"
            xmlns="http://www.gtk.org/introspection/core/1.0"
            xmlns:c="http://www.gtk.org/introspection/c/1.0"
            xmlns:glib="http://www.gtk.org/introspection/glib/1.0">
  <include name="Atk" version="1.0"/>
  <include name="Clutter" version="1.0"/>
  <include name="Cogl" version="1.0"/>
  <include name="CoglPango" version="1.0"/>
  <include name="GL" version="1.0"/>
  <include name="GLib" version="2.0"/>
  <include name="GModule" version="2.0"/>
  <include name="GObject" version="2.0"/>
  <include name="Gdk" version="3.0"/>
  <include name="GdkPixbuf" version="2.0"/>
  <include name="Gio" version="2.0"/>
  <include name="Json" version="1.0"/>
  <include name="Pango" version="1.0"/>
  <include name="PangoCairo" version="1.0"/>
  <include name="PangoFT2" version="1.0"/>
  <include name="cairo" version="1.0"/>
  <include name="fontconfig" version="2.0"/>
  <include name="freetype2" version="2.0"/>
  <package name="clutter-gdk-1.0"/>
  <c:include name="clutter/gdk/clutter-gdk.h"/>
  <namespace name="ClutterGdk"
             version="1.0"
             shared-library="libclutter-1.0.so.0"
             c:identifier-prefixes="ClutterGdk"
             c:symbol-prefixes="clutter_gdk">
    <function name="disable_event_retrieval"
              c:identifier="clutter_gdk_disable_event_retrieval">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
    </function>
    <function name="get_stage_from_window"
              c:identifier="clutter_gdk_get_stage_from_window"
              version="1.10">
      <doc xml:whitespace="preserve">Gets the stage for a particular X window.  

does not exist for the window</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">A #ClutterStage, or% NULL if a stage</doc>
        <type name="Clutter.Stage" c:type="ClutterStage*"/>
      </return-value>
      <parameters>
        <parameter name="window" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GtkWindow</doc>
          <type name="Gdk.Window" c:type="GdkWindow*"/>
        </parameter>
      </parameters>
    </function>
    <function name="get_stage_window"
              c:identifier="clutter_gdk_get_stage_window"
              version="1.10">
      <doc xml:whitespace="preserve">Gets the stages GdkWindow.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">A GdkWindow* for the stage window.</doc>
        <type name="Gdk.Window" c:type="GdkWindow*"/>
      </return-value>
      <parameters>
        <parameter name="stage" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #ClutterStage</doc>
          <type name="Clutter.Stage" c:type="ClutterStage*"/>
        </parameter>
      </parameters>
    </function>
    <function name="handle_event" c:identifier="clutter_gdk_handle_event">
      <doc xml:whitespace="preserve">This function processes a single GDK event; it can be used to hook
into external event processing

Clutter has internally handled the event and the caller should do
no further processing. %GDK_FILTER_CONTINUE indicates that Clutter
is either not interested in the event, or has used the event to
update internal state without taking any exclusive action.
%GDK_FILTER_TRANSLATE will not occur.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">#GdkFilterReturn. %GDK_FILTER_REMOVE indicates that</doc>
        <type name="Gdk.FilterReturn" c:type="GdkFilterReturn"/>
      </return-value>
      <parameters>
        <parameter name="event" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GdkEvent</doc>
          <type name="Gdk.Event" c:type="GdkEvent*"/>
        </parameter>
      </parameters>
    </function>
    <function name="set_display"
              c:identifier="clutter_gdk_set_display"
              version="0.8">
      <doc xml:whitespace="preserve">Sets the display connection Clutter should use; must be called
before clutter_init(), clutter_init_with_args() or other functions
pertaining Clutter's initialization process.

If you are parsing the command line arguments by retrieving Clutter's
#GOptionGroup with clutter_get_option_group() and calling
g_option_context_parse() yourself, you should also call
clutter_gdk_set_display() before g_option_context_parse().</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="display" transfer-ownership="none">
          <doc xml:whitespace="preserve">pointer to a GDK display connection.</doc>
          <type name="Gdk.Display" c:type="GdkDisplay*"/>
        </parameter>
      </parameters>
    </function>
    <function name="set_stage_foreign"
              c:identifier="clutter_gdk_set_stage_foreign"
              version="1.10">
      <doc xml:whitespace="preserve">Target the #ClutterStage to use an existing external #GdkWindow</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">%TRUE if foreign window is valid</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="stage" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #ClutterStage</doc>
          <type name="Clutter.Stage" c:type="ClutterStage*"/>
        </parameter>
        <parameter name="window" transfer-ownership="none">
          <doc xml:whitespace="preserve">an existing #GdkWindow</doc>
          <type name="Gdk.Window" c:type="GdkWindow*"/>
        </parameter>
      </parameters>
    </function>
  </namespace>
</repository>
