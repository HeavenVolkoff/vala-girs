<?xml version="1.0"?>
<!-- This file was automatically generated from C sources - DO NOT EDIT!
To affect the contents of this file, edit the original C definitions,
and/or use gtk-doc annotations.  -->
<repository version="1.2"
            xmlns="http://www.gtk.org/introspection/core/1.0"
            xmlns:c="http://www.gtk.org/introspection/c/1.0"
            xmlns:glib="http://www.gtk.org/introspection/glib/1.0">
  <include name="GObject" version="2.0"/>
  <include name="Gio" version="2.0"/>
  <package name="gck-1"/>
  <c:include name="gck/gck.h"/>
  <namespace name="Gck"
             version="1"
             shared-library="libgck-1.so.0"
             c:identifier-prefixes="Gck"
             c:symbol-prefixes="gck">
    <callback name="Allocator" c:type="GckAllocator">
      <doc xml:space="preserve"
           filename="../gck/gck-attributes.c"
           line="2052">An allocator used to allocate data for the attributes in this GckAttributes set.

This is a function that acts like g_realloc. Specifically it frees when length is
set to zero, it allocates when data is set to %NULL, and it reallocates when both
are valid.</doc>
      <source-position filename="../gck/gck.h" line="78"/>
      <return-value transfer-ownership="none" nullable="1">
        <doc xml:space="preserve"
             filename="../gck/gck-attributes.c"
             line="2063">The allocated memory, or %NULL when freeing.</doc>
        <type name="gpointer" c:type="gpointer"/>
      </return-value>
      <parameters>
        <parameter name="data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="../gck/gck-attributes.c"
               line="2054">Memory to allocate or deallocate.</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="length" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../gck/gck-attributes.c"
               line="2055">New length of memory.</doc>
          <type name="gsize" c:type="gsize"/>
        </parameter>
      </parameters>
    </callback>
    <record name="Attribute"
            c:type="GckAttribute"
            glib:type-name="GckAttribute"
            glib:get-type="gck_attribute_get_type"
            c:symbol-prefix="attribute">
      <doc xml:space="preserve"
           filename="../gck/gck-attributes.c"
           line="1380">This structure represents a PKCS11 CK_ATTRIBUTE.</doc>
      <source-position filename="../gck/gck.h" line="101"/>
      <field name="type" writable="1">
        <doc xml:space="preserve"
             filename="../gck/gck-attributes.c"
             line="1382">The attribute type, such as CKA_LABEL.</doc>
        <type name="gulong" c:type="gulong"/>
      </field>
      <field name="value" writable="1">
        <doc xml:space="preserve"
             filename="../gck/gck-attributes.c"
             line="1383">The value of the attribute. May be %NULL.</doc>
        <array length="2" zero-terminated="0" c:type="guchar*">
          <type name="guint8" c:type="guchar"/>
        </array>
      </field>
      <field name="length" writable="1">
        <doc xml:space="preserve"
             filename="../gck/gck-attributes.c"
             line="1384">The length of the attribute. May be GCK_INVALID if the attribute is invalid.</doc>
        <type name="gulong" c:type="gulong"/>
      </field>
      <constructor name="new" c:identifier="gck_attribute_new">
        <doc xml:space="preserve"
             filename="../gck/gck-attributes.c"
             line="1742">Create a new PKCS\#11 attribute. The value will be copied
into the new attribute.</doc>
        <source-position filename="../gck/gck.h" line="147"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../gck/gck-attributes.c"
               line="1751">the new attribute; when done with the attribute
         use gck_attribute_free() to free it</doc>
          <type name="Attribute" c:type="GckAttribute*"/>
        </return-value>
        <parameters>
          <parameter name="attr_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-attributes.c"
                 line="1744">the PKCS\#11 attribute type to set on the attribute</doc>
            <type name="gulong" c:type="gulong"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-attributes.c"
                 line="1745">the raw value of the attribute</doc>
            <type name="guint8" c:type="const guchar*"/>
          </parameter>
          <parameter name="length" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-attributes.c"
                 line="1746">the length of the attribute</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_boolean" c:identifier="gck_attribute_new_boolean">
        <doc xml:space="preserve"
             filename="../gck/gck-attributes.c"
             line="1800">Initialize a PKCS\#11 attribute to boolean. This will result
in a CK_BBOOL attribute from the PKCS\#11 specs.</doc>
        <source-position filename="../gck/gck.h" line="155"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../gck/gck-attributes.c"
               line="1808">the new attribute; when done with the attribute u
         gck_attribute_free() to free it</doc>
          <type name="Attribute" c:type="GckAttribute*"/>
        </return-value>
        <parameters>
          <parameter name="attr_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-attributes.c"
                 line="1802">the PKCS\#11 attribute type to set on the attribute</doc>
            <type name="gulong" c:type="gulong"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-attributes.c"
                 line="1803">the boolean value of the attribute</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_date" c:identifier="gck_attribute_new_date">
        <doc xml:space="preserve"
             filename="../gck/gck-attributes.c"
             line="1820">Initialize a PKCS\#11 attribute to a date. This will result
in a CK_DATE attribute from the PKCS\#11 specs.</doc>
        <source-position filename="../gck/gck.h" line="158"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../gck/gck-attributes.c"
               line="1828">the new attribute; when done with the attribute u
         gck_attribute_free() to free it</doc>
          <type name="Attribute" c:type="GckAttribute*"/>
        </return-value>
        <parameters>
          <parameter name="attr_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-attributes.c"
                 line="1822">the PKCS\#11 attribute type to set on the attribute</doc>
            <type name="gulong" c:type="gulong"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-attributes.c"
                 line="1823">the date value of the attribute</doc>
            <type name="GLib.Date" c:type="const GDate*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_empty" c:identifier="gck_attribute_new_empty">
        <doc xml:space="preserve"
             filename="../gck/gck-attributes.c"
             line="1783">Create a new PKCS\#11 attribute with empty data.</doc>
        <source-position filename="../gck/gck.h" line="153"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../gck/gck-attributes.c"
               line="1789">the new attribute; when done with the attribute
         use gck_attribute_free() to free it</doc>
          <type name="Attribute" c:type="GckAttribute*"/>
        </return-value>
        <parameters>
          <parameter name="attr_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-attributes.c"
                 line="1785">the PKCS\#11 attribute type to set on the attribute</doc>
            <type name="gulong" c:type="gulong"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_invalid" c:identifier="gck_attribute_new_invalid">
        <doc xml:space="preserve"
             filename="../gck/gck-attributes.c"
             line="1764">Create a new PKCS\#11 attribute as 'invalid' or 'not found'
state. Specifically this sets the value length to (CK_ULONG)-1
as specified in the PKCS\#11 specification.</doc>
        <source-position filename="../gck/gck.h" line="151"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../gck/gck-attributes.c"
               line="1772">the new attribute; when done with the attribute
         use gck_attribute_free() to free it</doc>
          <type name="Attribute" c:type="GckAttribute*"/>
        </return-value>
        <parameters>
          <parameter name="attr_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-attributes.c"
                 line="1766">the PKCS\#11 attribute type to set on the attribute</doc>
            <type name="gulong" c:type="gulong"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_string" c:identifier="gck_attribute_new_string">
        <doc xml:space="preserve"
             filename="../gck/gck-attributes.c"
             line="1860">Initialize a PKCS\#11 attribute to a string. This will result
in an attribute containing the text, but not the null terminator.
The text in the attribute will be of the same encoding as you pass
to this function.</doc>
        <source-position filename="../gck/gck.h" line="164"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../gck/gck-attributes.c"
               line="1870">the new attribute; when done with the attribute u
         gck_attribute_free() to free it</doc>
          <type name="Attribute" c:type="GckAttribute*"/>
        </return-value>
        <parameters>
          <parameter name="attr_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-attributes.c"
                 line="1862">the PKCS\#11 attribute type to set on the attribute</doc>
            <type name="gulong" c:type="gulong"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-attributes.c"
                 line="1863">the null-terminated string value of the attribute</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_ulong" c:identifier="gck_attribute_new_ulong">
        <doc xml:space="preserve"
             filename="../gck/gck-attributes.c"
             line="1840">Initialize a PKCS\#11 attribute to a unsigned long. This will result
in a CK_ULONG attribute from the PKCS\#11 specs.</doc>
        <source-position filename="../gck/gck.h" line="161"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../gck/gck-attributes.c"
               line="1848">the new attribute; when done with the attribute u
         gck_attribute_free() to free it</doc>
          <type name="Attribute" c:type="GckAttribute*"/>
        </return-value>
        <parameters>
          <parameter name="attr_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-attributes.c"
                 line="1842">the PKCS\#11 attribute type to set on the attribute</doc>
            <type name="gulong" c:type="gulong"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-attributes.c"
                 line="1843">the ulong value of the attribute</doc>
            <type name="gulong" c:type="gulong"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="clear" c:identifier="gck_attribute_clear">
        <doc xml:space="preserve"
             filename="../gck/gck-attributes.c"
             line="1939">Clear allocated memory held by a #GckAttribute.

This attribute must have been allocated by a Gck library function, or
the results of this method are undefined.

The type of the attribute will remain set.</doc>
        <source-position filename="../gck/gck.h" line="188"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="attr" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-attributes.c"
                 line="1941">Attribute to clear.</doc>
            <type name="Attribute" c:type="GckAttribute*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dump" c:identifier="gck_attribute_dump">
        <doc xml:space="preserve"
             filename="../gck/gck-dump.c"
             line="325">Dump the specified attribute using g_printerr().</doc>
        <source-position filename="../gck/gck.h" line="192"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="attr" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-dump.c"
                 line="327">The attribute</doc>
            <type name="Attribute" c:type="const GckAttribute*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup" c:identifier="gck_attribute_dup">
        <doc xml:space="preserve"
             filename="../gck/gck-attributes.c"
             line="1882">Duplicate the PKCS\#11 attribute. All value memory is
also copied.

The @attr must have been allocated or initialized by a Gck function or
the results of this function are undefined.</doc>
        <source-position filename="../gck/gck.h" line="186"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../gck/gck-attributes.c"
               line="1892">the duplicated attribute; use gck_attribute_free()
         to free it</doc>
          <type name="Attribute" c:type="GckAttribute*"/>
        </return-value>
        <parameters>
          <instance-parameter name="attr" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-attributes.c"
                 line="1884">the attribute to duplicate</doc>
            <type name="Attribute" c:type="const GckAttribute*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="equal" c:identifier="gck_attribute_equal">
        <doc xml:space="preserve"
             filename="../gck/gck-attributes.c"
             line="1979">Compare two attributes. Useful with &lt;code&gt;GHashTable&lt;/code&gt;.</doc>
        <source-position filename="../gck/gck.h" line="181"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../gck/gck-attributes.c"
               line="1986">%TRUE if the attributes are equal.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="attr1" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-attributes.c"
                 line="1981">first attribute to compare</doc>
            <type name="Attribute" c:type="gconstpointer"/>
          </instance-parameter>
          <parameter name="attr2" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-attributes.c"
                 line="1982">second attribute to compare</doc>
            <type name="Attribute" c:type="gconstpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="free" c:identifier="gck_attribute_free">
        <doc xml:space="preserve"
             filename="../gck/gck-attributes.c"
             line="1961">Free an attribute and its allocated memory. These is usually
used with attributes that are allocated by gck_attribute_new()
or a similar function.</doc>
        <source-position filename="../gck/gck.h" line="190"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="attr" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-attributes.c"
                 line="1963">attribute to free</doc>
            <type name="Attribute" c:type="gpointer"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_boolean" c:identifier="gck_attribute_get_boolean">
        <doc xml:space="preserve"
             filename="../gck/gck-attributes.c"
             line="1406">Get the CK_BBOOL of a PKCS\#11 attribute. No conversion
is performed. It is an error to pass an attribute to this
function unless you're know it's supposed to contain a
boolean value.</doc>
        <source-position filename="../gck/gck.h" line="169"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../gck/gck-attributes.c"
               line="1415">The boolean value of the attribute.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="attr" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-attributes.c"
                 line="1408">The attribute to retrieve value from.</doc>
            <type name="Attribute" c:type="const GckAttribute*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_data" c:identifier="gck_attribute_get_data">
        <doc xml:space="preserve"
             filename="../gck/gck-attributes.c"
             line="1527">Get the raw value in the attribute.

This is useful from scripting languages. C callers will generally
access the #GckAttribute struct directly.

This function will %NULL if the attribute contains empty or invalid
data. The returned data must not be modified and is only valid
as long as this @attribute.</doc>
        <source-position filename="../gck/gck.h" line="178"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../gck/gck-attributes.c"
               line="1541">the value data or %NULL</doc>
          <array length="0" zero-terminated="0" c:type="const guchar*">
            <type name="guint8" c:type="guchar"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="attr" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-attributes.c"
                 line="1529">an attribute</doc>
            <type name="Attribute" c:type="const GckAttribute*"/>
          </instance-parameter>
          <parameter name="length"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../gck/gck-attributes.c"
                 line="1530">the length of the returned data</doc>
            <type name="gsize" c:type="gsize*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_date" c:identifier="gck_attribute_get_date">
        <doc xml:space="preserve"
             filename="../gck/gck-attributes.c"
             line="1479">Get the CK_DATE of a PKCS\#11 attribute. No
conversion is performed. It is an error to pass an attribute
to this function unless you're know it's supposed to contain
a value of the right type.</doc>
        <source-position filename="../gck/gck.h" line="175"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="attr" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-attributes.c"
                 line="1481">The attribute to retrieve value from.</doc>
            <type name="Attribute" c:type="const GckAttribute*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-attributes.c"
                 line="1482">The date value to fill in with the parsed date.</doc>
            <type name="GLib.Date" c:type="GDate*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_string" c:identifier="gck_attribute_get_string">
        <doc xml:space="preserve"
             filename="../gck/gck-attributes.c"
             line="1454">Get the string value of a PKCS\#11 attribute. No
conversion is performed. It is an error to pass an attribute
to this function unless you're know it's supposed to contain
a value of the right type.</doc>
        <source-position filename="../gck/gck.h" line="173"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="../gck/gck-attributes.c"
               line="1463">a null terminated string, to be freed with
              g_free(), or %NULL if the value was invalid</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="attr" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-attributes.c"
                 line="1456">The attribute to retrieve value from.</doc>
            <type name="Attribute" c:type="const GckAttribute*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_ulong" c:identifier="gck_attribute_get_ulong">
        <doc xml:space="preserve"
             filename="../gck/gck-attributes.c"
             line="1430">Get the CK_ULONG value of a PKCS\#11 attribute. No
conversion is performed. It is an error to pass an attribute
to this function unless you're know it's supposed to contain
a value of the right type.</doc>
        <source-position filename="../gck/gck.h" line="171"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../gck/gck-attributes.c"
               line="1439">The ulong value of the attribute.</doc>
          <type name="gulong" c:type="gulong"/>
        </return-value>
        <parameters>
          <instance-parameter name="attr" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-attributes.c"
                 line="1432">The attribute to retrieve value from.</doc>
            <type name="Attribute" c:type="const GckAttribute*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="hash" c:identifier="gck_attribute_hash">
        <doc xml:space="preserve"
             filename="../gck/gck-attributes.c"
             line="2011">Hash an attribute for use in &lt;code&gt;GHashTable&lt;/code&gt; keys.</doc>
        <source-position filename="../gck/gck.h" line="184"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../gck/gck-attributes.c"
               line="2017">the hash code</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="attr" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-attributes.c"
                 line="2013">attribute to hash</doc>
            <type name="Attribute" c:type="gconstpointer"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="init" c:identifier="gck_attribute_init" introspectable="0">
        <doc xml:space="preserve"
             filename="../gck/gck-attributes.c"
             line="1557">Initialize a PKCS\#11 attribute. This copies the value memory
into an internal buffer.

When done with the attribute you should use gck_attribute_clear()
to free the internal memory.</doc>
        <source-position filename="../gck/gck.h" line="113"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="attr" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-attributes.c"
                 line="1559">an uninitialized attribute</doc>
            <type name="Attribute" c:type="GckAttribute*"/>
          </instance-parameter>
          <parameter name="attr_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-attributes.c"
                 line="1560">the PKCS\#11 attribute type to set on the attribute</doc>
            <type name="gulong" c:type="gulong"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-attributes.c"
                 line="1561">The raw value of the attribute.</doc>
            <array length="2" zero-terminated="0" c:type="const guchar*">
              <type name="guint8" c:type="guchar"/>
            </array>
          </parameter>
          <parameter name="length" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-attributes.c"
                 line="1562">The length of the raw value.</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
        </parameters>
      </method>
      <method name="init_boolean"
              c:identifier="gck_attribute_init_boolean"
              introspectable="0">
        <doc xml:space="preserve"
             filename="../gck/gck-attributes.c"
             line="1634">Initialize a PKCS\#11 attribute to boolean. This will result
in a CK_BBOOL attribute from the PKCS\#11 specs.

When done with the attribute you should use gck_attribute_clear()
to free the internal memory.</doc>
        <source-position filename="../gck/gck.h" line="124"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="attr" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-attributes.c"
                 line="1636">an uninitialized attribute</doc>
            <type name="Attribute" c:type="GckAttribute*"/>
          </instance-parameter>
          <parameter name="attr_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-attributes.c"
                 line="1637">the PKCS\#11 attribute type to set on the attribute</doc>
            <type name="gulong" c:type="gulong"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-attributes.c"
                 line="1638">the boolean value of the attribute</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="init_copy" c:identifier="gck_attribute_init_copy">
        <doc xml:space="preserve"
             filename="../gck/gck-attributes.c"
             line="1908">Initialize a PKCS\#11 attribute as a copy of another attribute.
This copies the value memory as well.

When done with the copied attribute you should use
gck_attribute_clear() to free the internal memory.</doc>
        <source-position filename="../gck/gck.h" line="140"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="dest" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-attributes.c"
                 line="1910">An uninitialized attribute.</doc>
            <type name="Attribute" c:type="GckAttribute*"/>
          </instance-parameter>
          <parameter name="src" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-attributes.c"
                 line="1911">An attribute to copy.</doc>
            <type name="Attribute" c:type="const GckAttribute*"/>
          </parameter>
        </parameters>
      </method>
      <method name="init_date"
              c:identifier="gck_attribute_init_date"
              introspectable="0">
        <doc xml:space="preserve"
             filename="../gck/gck-attributes.c"
             line="1656">Initialize a PKCS\#11 attribute to a date. This will result
in a CK_DATE attribute from the PKCS\#11 specs.

When done with the attribute you should use gck_attribute_clear()
to free the internal memory.</doc>
        <source-position filename="../gck/gck.h" line="128"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="attr" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-attributes.c"
                 line="1658">an uninitialized attribute</doc>
            <type name="Attribute" c:type="GckAttribute*"/>
          </instance-parameter>
          <parameter name="attr_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-attributes.c"
                 line="1659">the PKCS\#11 attribute type to set on the attribute</doc>
            <type name="gulong" c:type="gulong"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-attributes.c"
                 line="1660">the date value of the attribute</doc>
            <type name="GLib.Date" c:type="const GDate*"/>
          </parameter>
        </parameters>
      </method>
      <method name="init_empty"
              c:identifier="gck_attribute_init_empty"
              introspectable="0">
        <doc xml:space="preserve"
             filename="../gck/gck-attributes.c"
             line="1613">Initialize a PKCS\#11 attribute to an empty state. The attribute
type will be set, but no data will be set.

When done with the attribute you should use gck_attribute_clear()
to free the internal memory.</doc>
        <source-position filename="../gck/gck.h" line="121"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="attr" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-attributes.c"
                 line="1615">an uninitialized attribute</doc>
            <type name="Attribute" c:type="GckAttribute*"/>
          </instance-parameter>
          <parameter name="attr_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-attributes.c"
                 line="1616">the PKCS\#11 attribute type to set on the attribute</doc>
            <type name="gulong" c:type="gulong"/>
          </parameter>
        </parameters>
      </method>
      <method name="init_invalid"
              c:identifier="gck_attribute_init_invalid"
              introspectable="0">
        <doc xml:space="preserve"
             filename="../gck/gck-attributes.c"
             line="1591">Initialize a PKCS\#11 attribute to an 'invalid' or 'not found'
state. Specifically this sets the value length to (CK_ULONG)-1
as specified in the PKCS\#11 specification.

When done with the attribute you should use gck_attribute_clear()
to free the internal memory.</doc>
        <source-position filename="../gck/gck.h" line="118"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="attr" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-attributes.c"
                 line="1593">an uninitialized attribute</doc>
            <type name="Attribute" c:type="GckAttribute*"/>
          </instance-parameter>
          <parameter name="attr_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-attributes.c"
                 line="1594">the PKCS\#11 attribute type to set on the attribute</doc>
            <type name="gulong" c:type="gulong"/>
          </parameter>
        </parameters>
      </method>
      <method name="init_string"
              c:identifier="gck_attribute_init_string"
              introspectable="0">
        <doc xml:space="preserve"
             filename="../gck/gck-attributes.c"
             line="1704">Initialize a PKCS\#11 attribute to a string. This will result
in an attribute containing the text, but not the null terminator.
The text in the attribute will be of the same encoding as you pass
to this function.

When done with the attribute you should use gck_attribute_clear()
to free the internal memory.</doc>
        <source-position filename="../gck/gck.h" line="136"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="attr" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-attributes.c"
                 line="1706">an uninitialized attribute</doc>
            <type name="Attribute" c:type="GckAttribute*"/>
          </instance-parameter>
          <parameter name="attr_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-attributes.c"
                 line="1707">the PKCS\#11 attribute type to set on the attribute</doc>
            <type name="gulong" c:type="gulong"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-attributes.c"
                 line="1708">the null terminated string value of the attribute</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="init_ulong"
              c:identifier="gck_attribute_init_ulong"
              introspectable="0">
        <doc xml:space="preserve"
             filename="../gck/gck-attributes.c"
             line="1682">Initialize a PKCS\#11 attribute to a unsigned long. This will result
in a CK_ULONG attribute from the PKCS\#11 specs.

When done with the attribute you should use gck_attribute_clear()
to free the internal memory.</doc>
        <source-position filename="../gck/gck.h" line="132"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="attr" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-attributes.c"
                 line="1684">an uninitialized attribute</doc>
            <type name="Attribute" c:type="GckAttribute*"/>
          </instance-parameter>
          <parameter name="attr_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-attributes.c"
                 line="1685">the PKCS\#11 attribute type to set on the attribute</doc>
            <type name="gulong" c:type="gulong"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-attributes.c"
                 line="1686">the ulong value of the attribute</doc>
            <type name="gulong" c:type="gulong"/>
          </parameter>
        </parameters>
      </method>
      <method name="is_invalid" c:identifier="gck_attribute_is_invalid">
        <doc xml:space="preserve"
             filename="../gck/gck-attributes.c"
             line="1389">Check if the PKCS\#11 attribute represents 'invalid' or 'not found'
according to the PKCS\#11 spec. That is, having length
of (CK_ULONG)-1.</doc>
        <source-position filename="../gck/gck.h" line="167"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../gck/gck-attributes.c"
               line="1397">Whether the attribute represents invalid or not.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="attr" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-attributes.c"
                 line="1391">The attribute to check.</doc>
            <type name="Attribute" c:type="const GckAttribute*"/>
          </instance-parameter>
        </parameters>
      </method>
    </record>
    <record name="Attributes"
            c:type="GckAttributes"
            glib:type-name="GckAttributes"
            glib:get-type="gck_attributes_get_type"
            c:symbol-prefix="attributes">
      <doc xml:space="preserve"
           filename="../gck/gck-attributes.c"
           line="2046">A set of GckAttribute structures.</doc>
      <source-position filename="../gck/gck.h" line="208"/>
      <constructor name="new" c:identifier="gck_attributes_new">
        <doc xml:space="preserve"
             filename="../gck/gck-attributes.c"
             line="2856">Create a new empty GckAttributes array.

The returned set of attributes is floating, and should either be passed to
another gck library function which consumes this floating reference, or if
you wish to keep these attributes around you should ref them with
gck_attributes_ref_sink() and unref them later with gck_attributes_unref().</doc>
        <source-position filename="../gck/gck.h" line="348"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../gck/gck-attributes.c"
               line="2867">a floating reference to the new attributes array;
         when done with the array release it with gck_attributes_unref().</doc>
          <type name="Attributes" c:type="GckAttributes*"/>
        </return-value>
        <parameters>
          <parameter name="reserved" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-attributes.c"
                 line="2858">Should be set to always be GCK_INVALID</doc>
            <type name="gulong" c:type="gulong"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_empty"
                   c:identifier="gck_attributes_new_empty"
                   introspectable="0">
        <doc xml:space="preserve"
             filename="../gck/gck-attributes.c"
             line="2087">Creates an GckAttributes array with empty attributes

Terminate the argument list with %GCK_INVALID.

The returned set of attributes is floating, and should either be passed to
another gck library function which consumes this floating reference, or if
you wish to keep these attributes around you should ref them with
gck_attributes_ref_sink() and unref them later with gck_attributes_unref().</doc>
        <source-position filename="../gck/gck.h" line="350"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../gck/gck-attributes.c"
               line="2101">a floating reference to an empty set of attributes</doc>
          <type name="Attributes" c:type="GckAttributes*"/>
        </return-value>
        <parameters>
          <parameter name="first_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-attributes.c"
                 line="2089">the first empty attribute type</doc>
            <type name="gulong" c:type="gulong"/>
          </parameter>
          <parameter name="..." transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-attributes.c"
                 line="2090">the other empty attribute types</doc>
            <varargs/>
          </parameter>
        </parameters>
      </constructor>
      <method name="at" c:identifier="gck_attributes_at">
        <doc xml:space="preserve"
             filename="../gck/gck-attributes.c"
             line="2121">Get attribute at the specified index in the attribute array.

Use gck_attributes_count() to determine how many attributes are
in the array.</doc>
        <source-position filename="../gck/gck.h" line="353"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../gck/gck-attributes.c"
               line="2131">the specified attribute</doc>
          <type name="Attribute" c:type="const GckAttribute*"/>
        </return-value>
        <parameters>
          <instance-parameter name="attrs" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-attributes.c"
                 line="2123">The attributes array.</doc>
            <type name="Attributes" c:type="GckAttributes*"/>
          </instance-parameter>
          <parameter name="index" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-attributes.c"
                 line="2124">The attribute index to retrieve.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="contains" c:identifier="gck_attributes_contains">
        <doc xml:space="preserve"
             filename="../gck/gck-attributes.c"
             line="2352">Check whether the attributes contain a certain attribute.</doc>
        <source-position filename="../gck/gck.h" line="383"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../gck/gck-attributes.c"
               line="2359">%TRUE if the attributes contain the attribute.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="attrs" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-attributes.c"
                 line="2354">The attributes to check</doc>
            <type name="Attributes" c:type="GckAttributes*"/>
          </instance-parameter>
          <parameter name="match" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-attributes.c"
                 line="2355">The attribute to find</doc>
            <type name="Attribute" c:type="const GckAttribute*"/>
          </parameter>
        </parameters>
      </method>
      <method name="count" c:identifier="gck_attributes_count">
        <doc xml:space="preserve"
             filename="../gck/gck-attributes.c"
             line="2142">Get the number of attributes in this attribute array.</doc>
        <source-position filename="../gck/gck.h" line="375"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../gck/gck-attributes.c"
               line="2148">The number of contained attributes.</doc>
          <type name="gulong" c:type="gulong"/>
        </return-value>
        <parameters>
          <instance-parameter name="attrs" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-attributes.c"
                 line="2144">The attributes array to count.</doc>
            <type name="Attributes" c:type="GckAttributes*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dump" c:identifier="gck_attributes_dump">
        <doc xml:space="preserve"
             filename="../gck/gck-dump.c"
             line="344">Dump the attributes using g_printerr().</doc>
        <source-position filename="../gck/gck.h" line="386"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="attrs" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-dump.c"
                 line="346">The attributes</doc>
            <type name="Attributes" c:type="GckAttributes*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="find" c:identifier="gck_attributes_find">
        <doc xml:space="preserve"
             filename="../gck/gck-attributes.c"
             line="2157">Find an attribute with the specified type in the array.</doc>
        <source-position filename="../gck/gck.h" line="356"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../gck/gck-attributes.c"
               line="2164">the first attribute found with the specified type,
         or %NULL</doc>
          <type name="Attribute" c:type="const GckAttribute*"/>
        </return-value>
        <parameters>
          <instance-parameter name="attrs" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-attributes.c"
                 line="2159">The attributes array to search.</doc>
            <type name="Attributes" c:type="GckAttributes*"/>
          </instance-parameter>
          <parameter name="attr_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-attributes.c"
                 line="2160">The type of attribute to find.</doc>
            <type name="gulong" c:type="gulong"/>
          </parameter>
        </parameters>
      </method>
      <method name="find_boolean" c:identifier="gck_attributes_find_boolean">
        <doc xml:space="preserve"
             filename="../gck/gck-attributes.c"
             line="2176">Find an attribute with the specified type in the array.

The attribute (if found) must be of the right size to store
a boolean value (ie: CK_BBOOL). If the attribute is marked invalid
then it will be treated as not found.</doc>
        <source-position filename="../gck/gck.h" line="359"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../gck/gck-attributes.c"
               line="2188">Whether a value was found or not.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="attrs" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-attributes.c"
                 line="2178">The attributes array to search.</doc>
            <type name="Attributes" c:type="GckAttributes*"/>
          </instance-parameter>
          <parameter name="attr_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-attributes.c"
                 line="2179">The type of attribute to find.</doc>
            <type name="gulong" c:type="gulong"/>
          </parameter>
          <parameter name="value"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../gck/gck-attributes.c"
                 line="2180">The resulting gboolean value.</doc>
            <type name="gboolean" c:type="gboolean*"/>
          </parameter>
        </parameters>
      </method>
      <method name="find_date" c:identifier="gck_attributes_find_date">
        <doc xml:space="preserve"
             filename="../gck/gck-attributes.c"
             line="2245">Find an attribute with the specified type in the array.

The attribute (if found) must be of the right size to store
a date value (ie: CK_DATE). If the attribute is marked invalid
then it will be treated as not found.</doc>
        <source-position filename="../gck/gck.h" line="371"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../gck/gck-attributes.c"
               line="2257">Whether a value was found or not.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="attrs" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-attributes.c"
                 line="2247">The attributes array to search.</doc>
            <type name="Attributes" c:type="GckAttributes*"/>
          </instance-parameter>
          <parameter name="attr_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-attributes.c"
                 line="2248">The type of attribute to find.</doc>
            <type name="gulong" c:type="gulong"/>
          </parameter>
          <parameter name="value"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-attributes.c"
                 line="2249">The resulting GDate value.</doc>
            <type name="GLib.Date" c:type="GDate*"/>
          </parameter>
        </parameters>
      </method>
      <method name="find_string" c:identifier="gck_attributes_find_string">
        <doc xml:space="preserve"
             filename="../gck/gck-attributes.c"
             line="2222">Find an attribute with the specified type in the array.

If the attribute is marked invalid then it will be treated as not found.
The resulting string will be null-terminated, and must be freed by the caller
using g_free().</doc>
        <source-position filename="../gck/gck.h" line="367"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../gck/gck-attributes.c"
               line="2234">Whether a value was found or not.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="attrs" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-attributes.c"
                 line="2224">The attributes array to search.</doc>
            <type name="Attributes" c:type="GckAttributes*"/>
          </instance-parameter>
          <parameter name="attr_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-attributes.c"
                 line="2225">The type of attribute to find.</doc>
            <type name="gulong" c:type="gulong"/>
          </parameter>
          <parameter name="value"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../gck/gck-attributes.c"
                 line="2226">The resulting string value.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
        </parameters>
      </method>
      <method name="find_ulong" c:identifier="gck_attributes_find_ulong">
        <doc xml:space="preserve"
             filename="../gck/gck-attributes.c"
             line="2199">Find an attribute with the specified type in the array.

The attribute (if found) must be of the right size to store
a unsigned long value (ie: CK_ULONG). If the attribute is marked invalid
then it will be treated as not found.</doc>
        <source-position filename="../gck/gck.h" line="363"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../gck/gck-attributes.c"
               line="2211">Whether a value was found or not.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="attrs" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-attributes.c"
                 line="2201">The attributes array to search.</doc>
            <type name="Attributes" c:type="GckAttributes*"/>
          </instance-parameter>
          <parameter name="attr_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-attributes.c"
                 line="2202">The type of attribute to find.</doc>
            <type name="gulong" c:type="gulong"/>
          </parameter>
          <parameter name="value"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../gck/gck-attributes.c"
                 line="2203">The resulting gulong value.</doc>
            <type name="gulong" c:type="gulong*"/>
          </parameter>
        </parameters>
      </method>
      <method name="ref" c:identifier="gck_attributes_ref">
        <doc xml:space="preserve"
             filename="../gck/gck-attributes.c"
             line="2268">Reference this attributes array.</doc>
        <source-position filename="../gck/gck.h" line="377"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../gck/gck-attributes.c"
               line="2274">the attributes</doc>
          <type name="Attributes" c:type="GckAttributes*"/>
        </return-value>
        <parameters>
          <instance-parameter name="attrs" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-attributes.c"
                 line="2270">An attribute array</doc>
            <type name="Attributes" c:type="GckAttributes*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="ref_sink" c:identifier="gck_attributes_ref_sink">
        <doc xml:space="preserve"
             filename="../gck/gck-attributes.c"
             line="2284">#GckAttributes uses a floating reference count system. gck_builder_end()
and gck_attributes_new_empty() both return floating references.

Calling gck_attributes_ref_sink() on a #GckAttributes with a floating
reference will convert the floating reference into a full reference.
Calling gck_attributes_ref_sink() on a non-floating #GckAttributes results
in an additional normal reference being added.

In other words, if the @attrs is floating, then this call "assumes
ownership" of the floating reference, converting it to a normal
reference.  If the @attrs is not floating, then this call adds a
new normal reference increasing the reference count by one.

All Gck library functions that assume ownership of floating references
are documented as such. Essentially any Gck function that performs
an operation using a #GckAttributes argument rather than operating on the
atributes themselves, will accept a floating reference.</doc>
        <source-position filename="../gck/gck.h" line="379"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../gck/gck-attributes.c"
               line="2306">the referenced attributes</doc>
          <type name="Attributes" c:type="GckAttributes*"/>
        </return-value>
        <parameters>
          <instance-parameter name="attrs" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-attributes.c"
                 line="2286">an attribute array</doc>
            <type name="Attributes" c:type="GckAttributes*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="to_string" c:identifier="gck_attributes_to_string">
        <doc xml:space="preserve"
             filename="../gck/gck-attributes.c"
             line="2837">Print out attributes to a string in aform that's useful for debugging
or logging.

The format of the string returned may change in the future.</doc>
        <source-position filename="../gck/gck.h" line="388"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../gck/gck-attributes.c"
               line="2846">a newly allocated string</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="attrs" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-attributes.c"
                 line="2839">the attributes</doc>
            <type name="Attributes" c:type="GckAttributes*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="unref" c:identifier="gck_attributes_unref">
        <doc xml:space="preserve"
             filename="../gck/gck-attributes.c"
             line="2323">Unreference this attribute array.

When all outstanding references are gone, the array will be freed.</doc>
        <source-position filename="../gck/gck.h" line="381"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="attrs"
                              transfer-ownership="none"
                              nullable="1"
                              allow-none="1">
            <doc xml:space="preserve"
                 filename="../gck/gck-attributes.c"
                 line="2325">An attribute array</doc>
            <type name="Attributes" c:type="gpointer"/>
          </instance-parameter>
        </parameters>
      </method>
    </record>
    <record name="Builder"
            c:type="GckBuilder"
            glib:type-name="GckBuilder"
            glib:get-type="gck_builder_get_type"
            c:symbol-prefix="builder">
      <doc xml:space="preserve"
           filename="../gck/gck-attributes.c"
           line="166">A builder for a set of attributes. Add attributes to a builder, and then use
gck_builder_end() to get the completed #GckAttributes.

The fields of #GckBuilder are private and not to be accessed directly.</doc>
      <source-position filename="../gck/gck.h" line="201"/>
      <field name="x" readable="0" private="1">
        <array zero-terminated="0" fixed-size="16">
          <type name="gsize" c:type="gsize"/>
        </array>
      </field>
      <constructor name="new" c:identifier="gck_builder_new">
        <doc xml:space="preserve"
             filename="../gck/gck-attributes.c"
             line="193">Create a new #GckBuilder not allocated on the stack, so it can be shared
across a single scope, and referenced / unreferenced.

Normally a #GckBuilder is created on the stack, and simply initialized.

If the %GCK_BUILDER_SECURE_MEMORY flag is specified then non-pageable memory
will be used for the various values of the attributes in the builder</doc>
        <source-position filename="../gck/gck.h" line="210"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../gck/gck-attributes.c"
               line="205">a new builder, to be freed with gck_builder_unref()</doc>
          <type name="Builder" c:type="GckBuilder*"/>
        </return-value>
        <parameters>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-attributes.c"
                 line="195">flags for the new builder</doc>
            <type name="BuilderFlags" c:type="GckBuilderFlags"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="add_all" c:identifier="gck_builder_add_all">
        <doc xml:space="preserve"
             filename="../gck/gck-attributes.c"
             line="840">Add all the @attrs attributes to the builder. The attributes are added
uncondititionally whether or not attributes with the same types already
exist in the builder.

As an optimization, the attribute memory values are automatically shared
between the attributes and the builder.</doc>
        <source-position filename="../gck/gck.h" line="262"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="builder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-attributes.c"
                 line="842">the builder</doc>
            <type name="Builder" c:type="GckBuilder*"/>
          </instance-parameter>
          <parameter name="attrs" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-attributes.c"
                 line="843">the attributes to add</doc>
            <type name="Attributes" c:type="GckAttributes*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_attribute" c:identifier="gck_builder_add_attribute">
        <doc xml:space="preserve"
             filename="../gck/gck-attributes.c"
             line="815">Add an attribute to the builder. The attribute is added unconditionally whether
or not an attribute with the same type already exists on the builder.

The @attr attribute must have been created or owned by the Gck library.
If you call this function on an arbitrary #GckAttribute that is allocated on
the stack or elsewhere, then this will result in undefined behavior.

As an optimization, the attribute memory value is automatically shared
between the attribute and the builder.</doc>
        <source-position filename="../gck/gck.h" line="259"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="builder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-attributes.c"
                 line="817">the builder</doc>
            <type name="Builder" c:type="GckBuilder*"/>
          </instance-parameter>
          <parameter name="attr" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-attributes.c"
                 line="818">the attribute to add</doc>
            <type name="Attribute" c:type="const GckAttribute*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_boolean" c:identifier="gck_builder_add_boolean">
        <doc xml:space="preserve"
             filename="../gck/gck-attributes.c"
             line="675">Add a new attribute to the builder for the boolean @value.
Unconditionally adds a new attribute, even if one with the same @attr_type
already exists.</doc>
        <source-position filename="../gck/gck.h" line="247"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="builder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-attributes.c"
                 line="677">the builder</doc>
            <type name="Builder" c:type="GckBuilder*"/>
          </instance-parameter>
          <parameter name="attr_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-attributes.c"
                 line="678">the new attribute type</doc>
            <type name="gulong" c:type="gulong"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-attributes.c"
                 line="679">the attribute value</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_data" c:identifier="gck_builder_add_data">
        <doc xml:space="preserve"
             filename="../gck/gck-attributes.c"
             line="475">Add a new attribute to the builder with an arbitrary value. Unconditionally
adds a new attribute, even if one with the same @attr_type already exists.

The memory in @value is copied by the builder.

%NULL may be specified for the @value argument, in which case an empty
attribute is created. GCK_INVALID may be specified for the length, in
which case an invalid attribute is created in the PKCS\#11 style.</doc>
        <source-position filename="../gck/gck.h" line="232"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="builder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-attributes.c"
                 line="477">the builder</doc>
            <type name="Builder" c:type="GckBuilder*"/>
          </instance-parameter>
          <parameter name="attr_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-attributes.c"
                 line="478">the new attribute type</doc>
            <type name="gulong" c:type="gulong"/>
          </parameter>
          <parameter name="value"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../gck/gck-attributes.c"
                 line="479">the new attribute memory</doc>
            <array length="2" zero-terminated="0" c:type="const guchar*">
              <type name="guint8" c:type="guchar"/>
            </array>
          </parameter>
          <parameter name="length" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-attributes.c"
                 line="480">the length of the memory</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_date" c:identifier="gck_builder_add_date">
        <doc xml:space="preserve"
             filename="../gck/gck-attributes.c"
             line="729">Add a new attribute to the builder for the date @value.
Unconditionally adds a new attribute, even if one with the same @attr_type
already exists.</doc>
        <source-position filename="../gck/gck.h" line="251"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="builder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-attributes.c"
                 line="731">the builder</doc>
            <type name="Builder" c:type="GckBuilder*"/>
          </instance-parameter>
          <parameter name="attr_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-attributes.c"
                 line="732">the new attribute type</doc>
            <type name="gulong" c:type="gulong"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-attributes.c"
                 line="733">the attribute value</doc>
            <type name="GLib.Date" c:type="const GDate*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_empty" c:identifier="gck_builder_add_empty">
        <doc xml:space="preserve"
             filename="../gck/gck-attributes.c"
             line="558">Add a new attribute to the builder that is empty. Unconditionally
adds a new attribute, even if one with the same @attr_type already exists.</doc>
        <source-position filename="../gck/gck.h" line="237"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="builder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-attributes.c"
                 line="560">the builder</doc>
            <type name="Builder" c:type="GckBuilder*"/>
          </instance-parameter>
          <parameter name="attr_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-attributes.c"
                 line="561">the new attribute type</doc>
            <type name="gulong" c:type="gulong"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_except"
              c:identifier="gck_builder_add_except"
              introspectable="0">
        <doc xml:space="preserve"
             filename="../gck/gck-attributes.c"
             line="951">Add the attributes in @attrs to the builder, with the exception of those
in the argument list. The attributes are added uncondititionally whether or
not attributes with the same types already exist in the builder.

The variable arguments must be unsigned longs.

&lt;informalexample&gt;&lt;programlisting&gt;
/&lt;!-- --&gt;* Add all attributes in attrs except CKA_CLASS to the builder *&lt;!-- --&gt;/
gck_builder_add_except (builder, attrs, CKA_CLASS, GCK_INVALID);
&lt;/programlisting&gt;&lt;/informalexample&gt;

As an optimization, the attribute memory values are automatically shared
between the attributes and the builder.</doc>
        <source-position filename="../gck/gck.h" line="275"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="builder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-attributes.c"
                 line="953">the builder</doc>
            <type name="Builder" c:type="GckBuilder*"/>
          </instance-parameter>
          <parameter name="attrs" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-attributes.c"
                 line="954">the attributes to add</doc>
            <type name="Attributes" c:type="GckAttributes*"/>
          </parameter>
          <parameter name="except_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-attributes.c"
                 line="955">the first type of attribute to to exclude</doc>
            <type name="gulong" c:type="gulong"/>
          </parameter>
          <parameter name="..." transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-attributes.c"
                 line="956">the remaining attribute types to exclude, ending with %GCK_INVALID</doc>
            <varargs/>
          </parameter>
        </parameters>
      </method>
      <method name="add_exceptv"
              c:identifier="gck_builder_add_exceptv"
              introspectable="0">
        <doc xml:space="preserve"
             filename="../gck/gck-attributes.c"
             line="997">Add the attributes in @attrs to the builder, with the exception of those
whose types are specified in @except_types. The attributes are added
uncondititionally whether or not attributes with the same types already
exist in the builder.

&lt;informalexample&gt;&lt;programlisting&gt;
/&lt;!-- --&gt;* Add all attributes in attrs except CKA_CLASS to the builder *&lt;!-- --&gt;/
gulong except_types[] = { CKA_CLASS };
gck_builder_add_exceptv (builder, attrs, except_types, 1);
&lt;/programlisting&gt;&lt;/informalexample&gt;

As an optimization, the attribute memory values are automatically shared
between the attributes and the builder.</doc>
        <source-position filename="../gck/gck.h" line="280"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="builder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-attributes.c"
                 line="999">the builder</doc>
            <type name="Builder" c:type="GckBuilder*"/>
          </instance-parameter>
          <parameter name="attrs" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-attributes.c"
                 line="1000">the attributes to add</doc>
            <type name="Attributes" c:type="GckAttributes*"/>
          </parameter>
          <parameter name="except_types" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-attributes.c"
                 line="1001">the except types</doc>
            <array length="2" zero-terminated="0" c:type="const gulong*">
              <type name="gulong" c:type="gulong"/>
            </array>
          </parameter>
          <parameter name="n_except_types" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-attributes.c"
                 line="1002">the number of except types</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_invalid" c:identifier="gck_builder_add_invalid">
        <doc xml:space="preserve"
             filename="../gck/gck-attributes.c"
             line="593">Add a new attribute to the builder that is invalid in the PKCS\#11 sense.
Unconditionally adds a new attribute, even if one with the same @attr_type
already exists.</doc>
        <source-position filename="../gck/gck.h" line="240"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="builder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-attributes.c"
                 line="595">the builder</doc>
            <type name="Builder" c:type="GckBuilder*"/>
          </instance-parameter>
          <parameter name="attr_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-attributes.c"
                 line="596">the new attribute type</doc>
            <type name="gulong" c:type="gulong"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_only"
              c:identifier="gck_builder_add_only"
              shadowed-by="add_onlyv"
              introspectable="0">
        <doc xml:space="preserve"
             filename="../gck/gck-attributes.c"
             line="865">Add the attributes specified in the argument list from @attrs to the
builder. The attributes are added uncondititionally whether or not
attributes with the same types already exist in the builder.

The variable arguments must be unsigned longs.

&lt;informalexample&gt;&lt;programlisting&gt;
/&lt;!-- --&gt;* Add the CKA_ID and CKA_CLASS attributes from attrs to builder *&lt;!-- --&gt;/
gck_builder_add_only (builder, attrs, CKA_ID, CKA_CLASS, GCK_INVALID);
&lt;/programlisting&gt;&lt;/informalexample&gt;

As an optimization, the attribute memory values are automatically shared
between the attributes and the builder.</doc>
        <source-position filename="../gck/gck.h" line="265"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="builder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-attributes.c"
                 line="867">the builder</doc>
            <type name="Builder" c:type="GckBuilder*"/>
          </instance-parameter>
          <parameter name="attrs" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-attributes.c"
                 line="868">the attributes to add</doc>
            <type name="Attributes" c:type="GckAttributes*"/>
          </parameter>
          <parameter name="only_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-attributes.c"
                 line="869">the first type of attribute to add</doc>
            <type name="gulong" c:type="gulong"/>
          </parameter>
          <parameter name="..." transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-attributes.c"
                 line="870">the remaining attribute types to add, ending with %GCK_INVALID</doc>
            <varargs/>
          </parameter>
        </parameters>
      </method>
      <method name="add_onlyv"
              c:identifier="gck_builder_add_onlyv"
              shadows="add_only">
        <doc xml:space="preserve"
             filename="../gck/gck-attributes.c"
             line="911">Add the attributes with the types in @only_types from @attrs to the
builder. The attributes are added uncondititionally whether or not
attributes with the same types already exist in the builder.

&lt;informalexample&gt;&lt;programlisting&gt;
/&lt;!-- --&gt;* Add the CKA_ID and CKA_CLASS attributes from attrs to builder *&lt;!-- --&gt;/
gulong only[] = { CKA_ID, CKA_CLASS };
gck_builder_add_onlyv (builder, attrs, only, 2);
&lt;/programlisting&gt;&lt;/informalexample&gt;

As an optimization, the attribute memory values are automatically shared
between the attributes and the builder.</doc>
        <source-position filename="../gck/gck.h" line="270"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="builder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-attributes.c"
                 line="913">the builder</doc>
            <type name="Builder" c:type="GckBuilder*"/>
          </instance-parameter>
          <parameter name="attrs" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-attributes.c"
                 line="914">the attributes to add</doc>
            <type name="Attributes" c:type="GckAttributes*"/>
          </parameter>
          <parameter name="only_types" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-attributes.c"
                 line="915">the types of attributes to add</doc>
            <array length="2" zero-terminated="0" c:type="const gulong*">
              <type name="gulong" c:type="gulong"/>
            </array>
          </parameter>
          <parameter name="n_only_types" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-attributes.c"
                 line="916">the number of attributes</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_string" c:identifier="gck_builder_add_string">
        <doc xml:space="preserve"
             filename="../gck/gck-attributes.c"
             line="777">Add a new attribute to the builder for the string @value or %NULL.
Unconditionally adds a new attribute, even if one with the same @attr_type
already exists.</doc>
        <source-position filename="../gck/gck.h" line="255"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="builder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-attributes.c"
                 line="779">the builder</doc>
            <type name="Builder" c:type="GckBuilder*"/>
          </instance-parameter>
          <parameter name="attr_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-attributes.c"
                 line="780">the new attribute type</doc>
            <type name="gulong" c:type="gulong"/>
          </parameter>
          <parameter name="value"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../gck/gck-attributes.c"
                 line="781">the attribute value</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_ulong" c:identifier="gck_builder_add_ulong">
        <doc xml:space="preserve"
             filename="../gck/gck-attributes.c"
             line="635">Add a new attribute to the builder for the unsigned long @value.
Unconditionally adds a new attribute, even if one with the same @attr_type
already exists.</doc>
        <source-position filename="../gck/gck.h" line="243"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="builder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-attributes.c"
                 line="637">the builder</doc>
            <type name="Builder" c:type="GckBuilder*"/>
          </instance-parameter>
          <parameter name="attr_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-attributes.c"
                 line="638">the new attribute type</doc>
            <type name="gulong" c:type="gulong"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-attributes.c"
                 line="639">the attribute value</doc>
            <type name="gulong" c:type="gulong"/>
          </parameter>
        </parameters>
      </method>
      <method name="clear" c:identifier="gck_builder_clear">
        <doc xml:space="preserve"
             filename="../gck/gck-attributes.c"
             line="1349">Clear the builder and release all allocated memory. The builder may be used
again to build another set of attributes after this function call.

If memory is shared between this builder and other attributes, then that
memory is only freed when both of them are cleared or unreferenced.</doc>
        <source-position filename="../gck/gck.h" line="340"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="builder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-attributes.c"
                 line="1351">the builder</doc>
            <type name="Builder" c:type="GckBuilder*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="copy" c:identifier="gck_builder_copy">
        <doc xml:space="preserve"
             filename="../gck/gck-attributes.c"
             line="396">Make a copy of the builder and its state. The new builder is allocated
with gck_builder_new() and should be freed with gck_builder_unref().

Attribute value memory is automatically shared between the two builders,
and is only freed when both are gone.</doc>
        <source-position filename="../gck/gck.h" line="338"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../gck/gck-attributes.c"
               line="406">the builder copy, which should be freed with
         gck_builder_unref().</doc>
          <type name="Builder" c:type="GckBuilder*"/>
        </return-value>
        <parameters>
          <instance-parameter name="builder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-attributes.c"
                 line="398">the builder to copy</doc>
            <type name="Builder" c:type="GckBuilder*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="end" c:identifier="gck_builder_end">
        <doc xml:space="preserve"
             filename="../gck/gck-attributes.c"
             line="1316">Complete the #GckBuilder, and return the attributes contained in the builder.
The #GckBuilder will be cleared after this function call, and it is no
longer necessary to use gck_builder_clear() on it, although it is also
permitted. The builder may be used again to build another set of attributes
after this function call.

The returned set of attributes is floating, and should either be passed to
another gck library function which consumes this floating reference, or if
you wish to keep these attributes around you should ref them with
gck_attributes_ref_sink() and unref them later with gck_attributes_unref().</doc>
        <source-position filename="../gck/gck.h" line="336"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../gck/gck-attributes.c"
               line="1331">a floating reference to the attributes created
         in the builder</doc>
          <type name="Attributes" c:type="GckAttributes*"/>
        </return-value>
        <parameters>
          <instance-parameter name="builder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-attributes.c"
                 line="1318">the builder</doc>
            <type name="Builder" c:type="GckBuilder*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="find" c:identifier="gck_builder_find">
        <doc xml:space="preserve"
             filename="../gck/gck-attributes.c"
             line="1065">Find an attribute in the builder. Both valid and invalid attributes (in
the PKCS\#11 sense) are returned. If multiple attributes exist for the given
attribute type, then the first one is returned.

The returned #GckAttribute is owned by the builder and may not be modified
in any way. It is only valid until another attribute is added to or set on
the builder, or until the builder is cleared or unreferenced.</doc>
        <source-position filename="../gck/gck.h" line="315"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../gck/gck-attributes.c"
               line="1078">the attribute or %NULL if not found</doc>
          <type name="Attribute" c:type="const GckAttribute*"/>
        </return-value>
        <parameters>
          <instance-parameter name="builder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-attributes.c"
                 line="1067">the builder</doc>
            <type name="Builder" c:type="GckBuilder*"/>
          </instance-parameter>
          <parameter name="attr_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-attributes.c"
                 line="1068">the type of attribute to find</doc>
            <type name="gulong" c:type="gulong"/>
          </parameter>
        </parameters>
      </method>
      <method name="find_boolean" c:identifier="gck_builder_find_boolean">
        <doc xml:space="preserve"
             filename="../gck/gck-attributes.c"
             line="1109">Find a boolean attribute in the builder that has the type @attr_type, is
of the correct boolean size, and is not invalid in the PKCS\#11 sense.
If multiple attributes exist for the given attribute type, then the first\
one is returned.</doc>
        <source-position filename="../gck/gck.h" line="318"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../gck/gck-attributes.c"
               line="1120">whether a valid boolean attribute was found</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="builder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-attributes.c"
                 line="1111">the builder</doc>
            <type name="Builder" c:type="GckBuilder*"/>
          </instance-parameter>
          <parameter name="attr_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-attributes.c"
                 line="1112">the type of attribute to find</doc>
            <type name="gulong" c:type="gulong"/>
          </parameter>
          <parameter name="value"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../gck/gck-attributes.c"
                 line="1113">the location to place the found value</doc>
            <type name="gboolean" c:type="gboolean*"/>
          </parameter>
        </parameters>
      </method>
      <method name="find_date" c:identifier="gck_builder_find_date">
        <doc xml:space="preserve"
             filename="../gck/gck-attributes.c"
             line="1247">Find a date attribute in the builder that has the type @attr_type, is of
the correct date size, and is not invalid in the PKCS\#11 sense.
If multiple attributes exist for the given attribute type, then the first
one is returned.</doc>
        <source-position filename="../gck/gck.h" line="330"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../gck/gck-attributes.c"
               line="1258">whether a valid date attribute was found</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="builder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-attributes.c"
                 line="1249">the builder</doc>
            <type name="Builder" c:type="GckBuilder*"/>
          </instance-parameter>
          <parameter name="attr_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-attributes.c"
                 line="1250">the type of attribute to find</doc>
            <type name="gulong" c:type="gulong"/>
          </parameter>
          <parameter name="value"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-attributes.c"
                 line="1251">the location to place the found value</doc>
            <type name="GLib.Date" c:type="GDate*"/>
          </parameter>
        </parameters>
      </method>
      <method name="find_string" c:identifier="gck_builder_find_string">
        <doc xml:space="preserve"
             filename="../gck/gck-attributes.c"
             line="1202">Find a string attribute in the builder that has the type @attr_type, has a
non %NULL value pointer, and is not invalid in the PKCS\#11 sense.
If multiple attributes exist for the given attribute type, then the first
one is returned.</doc>
        <source-position filename="../gck/gck.h" line="326"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../gck/gck-attributes.c"
               line="1213">whether a valid string attribute was found</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="builder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-attributes.c"
                 line="1204">the builder</doc>
            <type name="Builder" c:type="GckBuilder*"/>
          </instance-parameter>
          <parameter name="attr_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-attributes.c"
                 line="1205">the type of attribute to find</doc>
            <type name="gulong" c:type="gulong"/>
          </parameter>
          <parameter name="value"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../gck/gck-attributes.c"
                 line="1206">the location to place the found value</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
        </parameters>
      </method>
      <method name="find_ulong" c:identifier="gck_builder_find_ulong">
        <doc xml:space="preserve"
             filename="../gck/gck-attributes.c"
             line="1153">Find a unsigned long attribute in the builder that has the type @attr_type,
is of the correct unsigned long size, and is not invalid in the PKCS\#11 sense.
If multiple attributes exist for the given attribute type, then the first\
one is returned.</doc>
        <source-position filename="../gck/gck.h" line="322"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../gck/gck-attributes.c"
               line="1164">whether a valid unsigned long attribute was found</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="builder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-attributes.c"
                 line="1155">the builder</doc>
            <type name="Builder" c:type="GckBuilder*"/>
          </instance-parameter>
          <parameter name="attr_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-attributes.c"
                 line="1156">the type of attribute to find</doc>
            <type name="gulong" c:type="gulong"/>
          </parameter>
          <parameter name="value"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../gck/gck-attributes.c"
                 line="1157">the location to place the found value</doc>
            <type name="gulong" c:type="gulong*"/>
          </parameter>
        </parameters>
      </method>
      <method name="init" c:identifier="gck_builder_init">
        <doc xml:space="preserve"
             filename="../gck/gck-attributes.c"
             line="294">Initialize a stack allocated builder, with the default flags.

This is equivalent to initializing a builder variable with the
%GCK_BUILDER_INIT constant, or setting it to zeroed memory.

&lt;informalexample&gt;&lt;programlisting&gt;
/&lt;!-- --&gt;* Equivalent ways of initializing a GckBuilder *&lt;!-- --&gt;/
GckBuilder builder = GCK_BUILDER_INIT;
GckBuilder builder2;
GckBuilder builder3;

gck_builder_init (&amp;builder2);

memset (&amp;builder3, 0, sizeof (builder3));
&lt;/programlisting&gt;&lt;/informalexample&gt;</doc>
        <source-position filename="../gck/gck.h" line="218"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="builder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-attributes.c"
                 line="296">the builder</doc>
            <type name="Builder" c:type="GckBuilder*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="init_full" c:identifier="gck_builder_init_full">
        <doc xml:space="preserve"
             filename="../gck/gck-attributes.c"
             line="272">Initialize a stack allocated builder, with the appropriate flags.

If the %GCK_BUILDER_SECURE_MEMORY flag is specified then non-pageable memory
will be used for the various values of the attributes in the builder</doc>
        <source-position filename="../gck/gck.h" line="220"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="builder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-attributes.c"
                 line="274">the builder</doc>
            <type name="Builder" c:type="GckBuilder*"/>
          </instance-parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-attributes.c"
                 line="275">the flags for the new builder</doc>
            <type name="BuilderFlags" c:type="GckBuilderFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="ref" c:identifier="gck_builder_ref">
        <doc xml:space="preserve"
             filename="../gck/gck-attributes.c"
             line="219">Add a reference to a builder that was created with gck_builder_new(). The
builder must later be unreferenced again with gck_builder_unref().

It is an error to use this function on builders that were allocated on the
stack.</doc>
        <source-position filename="../gck/gck.h" line="214"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../gck/gck-attributes.c"
               line="229">the builder</doc>
          <type name="Builder" c:type="GckBuilder*"/>
        </return-value>
        <parameters>
          <instance-parameter name="builder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-attributes.c"
                 line="221">the builder</doc>
            <type name="Builder" c:type="GckBuilder*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_all" c:identifier="gck_builder_set_all">
        <doc xml:space="preserve"
             filename="../gck/gck-attributes.c"
             line="1040">Set all the @attrs attributes to the builder. If any attributes with the
same types are already present in the builder, then those attributes are
changed to the new values.

As an optimization, the attribute memory values are automatically shared
between the attributes and the builder.</doc>
        <source-position filename="../gck/gck.h" line="312"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="builder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-attributes.c"
                 line="1042">the builder</doc>
            <type name="Builder" c:type="GckBuilder*"/>
          </instance-parameter>
          <parameter name="attrs" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-attributes.c"
                 line="1043">the attributes to set</doc>
            <type name="Attributes" c:type="GckAttributes*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_boolean" c:identifier="gck_builder_set_boolean">
        <doc xml:space="preserve"
             filename="../gck/gck-attributes.c"
             line="695">Set an attribute on the builder for the boolean @value.
If an attribute with @attr_type already exists in the builder then it is
changed to the new value, otherwise an attribute is added.</doc>
        <source-position filename="../gck/gck.h" line="300"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="builder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-attributes.c"
                 line="697">the builder</doc>
            <type name="Builder" c:type="GckBuilder*"/>
          </instance-parameter>
          <parameter name="attr_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-attributes.c"
                 line="698">the new attribute type</doc>
            <type name="gulong" c:type="gulong"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-attributes.c"
                 line="699">the attribute value</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_data" c:identifier="gck_builder_set_data">
        <doc xml:space="preserve"
             filename="../gck/gck-attributes.c"
             line="516">Set a new attribute to the builder with an arbitrary value. If an attribute
with @attr_type already exists in the builder then it is changed to the new
value, otherwise an attribute is added.

The memory in @value is copied by the builder.

%NULL may be specified for the @value argument, in which case an empty
attribute is created. GCK_INVALID may be specified for the length, in
which case an invalid attribute is created in the PKCS\#11 style.</doc>
        <source-position filename="../gck/gck.h" line="285"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="builder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-attributes.c"
                 line="518">the builder</doc>
            <type name="Builder" c:type="GckBuilder*"/>
          </instance-parameter>
          <parameter name="attr_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-attributes.c"
                 line="519">the attribute type</doc>
            <type name="gulong" c:type="gulong"/>
          </parameter>
          <parameter name="value"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../gck/gck-attributes.c"
                 line="520">the new attribute memory</doc>
            <array length="2" zero-terminated="0" c:type="const guchar*">
              <type name="guint8" c:type="guchar"/>
            </array>
          </parameter>
          <parameter name="length" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-attributes.c"
                 line="521">the length of the memory</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_date" c:identifier="gck_builder_set_date">
        <doc xml:space="preserve"
             filename="../gck/gck-attributes.c"
             line="753">Set an attribute on the builder for the date @value.
If an attribute with @attr_type already exists in the builder then it is
changed to the new value, otherwise an attribute is added.</doc>
        <source-position filename="../gck/gck.h" line="304"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="builder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-attributes.c"
                 line="755">the builder</doc>
            <type name="Builder" c:type="GckBuilder*"/>
          </instance-parameter>
          <parameter name="attr_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-attributes.c"
                 line="756">the new attribute type</doc>
            <type name="gulong" c:type="gulong"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-attributes.c"
                 line="757">the attribute value</doc>
            <type name="GLib.Date" c:type="const GDate*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_empty" c:identifier="gck_builder_set_empty">
        <doc xml:space="preserve"
             filename="../gck/gck-attributes.c"
             line="575">Set an attribute on the builder that is empty. If an attribute
with @attr_type already exists in the builder then it is changed to the new
value, otherwise an attribute is added.</doc>
        <source-position filename="../gck/gck.h" line="290"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="builder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-attributes.c"
                 line="577">the builder</doc>
            <type name="Builder" c:type="GckBuilder*"/>
          </instance-parameter>
          <parameter name="attr_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-attributes.c"
                 line="578">the attribute type</doc>
            <type name="gulong" c:type="gulong"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_invalid" c:identifier="gck_builder_set_invalid">
        <doc xml:space="preserve"
             filename="../gck/gck-attributes.c"
             line="614">Set an attribute on the builder that is invalid in the PKCS\#11 sense.
If an attribute with @attr_type already exists in the builder then it is
changed to the new value, otherwise an attribute is added.</doc>
        <source-position filename="../gck/gck.h" line="293"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="builder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-attributes.c"
                 line="616">the builder</doc>
            <type name="Builder" c:type="GckBuilder*"/>
          </instance-parameter>
          <parameter name="attr_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-attributes.c"
                 line="617">the attribute type</doc>
            <type name="gulong" c:type="gulong"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_string" c:identifier="gck_builder_set_string">
        <doc xml:space="preserve"
             filename="../gck/gck-attributes.c"
             line="796">Set an attribute on the builder for the string @value or %NULL.
If an attribute with @attr_type already exists in the builder then it is
changed to the new value, otherwise an attribute is added.</doc>
        <source-position filename="../gck/gck.h" line="308"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="builder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-attributes.c"
                 line="798">the builder</doc>
            <type name="Builder" c:type="GckBuilder*"/>
          </instance-parameter>
          <parameter name="attr_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-attributes.c"
                 line="799">the new attribute type</doc>
            <type name="gulong" c:type="gulong"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-attributes.c"
                 line="800">the attribute value</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_ulong" c:identifier="gck_builder_set_ulong">
        <doc xml:space="preserve"
             filename="../gck/gck-attributes.c"
             line="655">Set an attribute on the builder for the unsigned long @value.
If an attribute with @attr_type already exists in the builder then it is
changed to the new value, otherwise an attribute is added.</doc>
        <source-position filename="../gck/gck.h" line="296"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="builder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-attributes.c"
                 line="657">the builder</doc>
            <type name="Builder" c:type="GckBuilder*"/>
          </instance-parameter>
          <parameter name="attr_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-attributes.c"
                 line="658">the new attribute type</doc>
            <type name="gulong" c:type="gulong"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-attributes.c"
                 line="659">the attribute value</doc>
            <type name="gulong" c:type="gulong"/>
          </parameter>
        </parameters>
      </method>
      <method name="steal" c:identifier="gck_builder_steal">
        <doc xml:space="preserve"
             filename="../gck/gck-attributes.c"
             line="1277">Take the attributes that have been built in the #GckBuilder. The builder
will no longer contain any attributes after this function call.

The returned set of attributes is a full reference, not floating.</doc>
        <source-position filename="../gck/gck.h" line="334"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../gck/gck-attributes.c"
               line="1286">the stolen attributes, which should be freed with
         gck_attributes_unref()</doc>
          <type name="Attributes" c:type="GckAttributes*"/>
        </return-value>
        <parameters>
          <instance-parameter name="builder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-attributes.c"
                 line="1279">the builder</doc>
            <type name="Builder" c:type="GckBuilder*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="take_data" c:identifier="gck_builder_take_data">
        <doc xml:space="preserve"
             filename="../gck/gck-attributes.c"
             line="426">Add a new attribute to the builder with an arbitrary value. Unconditionally
adds a new attribute, even if one with the same @attr_type already exists.

Ownership of the @value memory is taken by the builder, may be reallocated,
and is eventually freed with g_free(). The memory must have been allocated
using the standard GLib memory allocation routines.

%NULL may be specified for the @value argument, in which case an empty
attribute is created. GCK_INVALID may be specified for the length, in
which case an invalid attribute is created in the PKCS\#11 style.</doc>
        <source-position filename="../gck/gck.h" line="227"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="builder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-attributes.c"
                 line="428">the builder</doc>
            <type name="Builder" c:type="GckBuilder*"/>
          </instance-parameter>
          <parameter name="attr_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-attributes.c"
                 line="429">the new attribute type</doc>
            <type name="gulong" c:type="gulong"/>
          </parameter>
          <parameter name="value"
                     transfer-ownership="full"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../gck/gck-attributes.c"
                 line="430">the new
        attribute memory</doc>
            <array length="2" zero-terminated="0" c:type="guchar*">
              <type name="guint8" c:type="guchar"/>
            </array>
          </parameter>
          <parameter name="length" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-attributes.c"
                 line="432">the length of the memory</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
        </parameters>
      </method>
      <function name="unref" c:identifier="gck_builder_unref">
        <doc xml:space="preserve"
             filename="../gck/gck-attributes.c"
             line="248">Unreferences a builder. If this was the last reference then the builder
is freed.

It is an error to use this function on builders that were allocated on the
stack.</doc>
        <source-position filename="../gck/gck.h" line="216"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="builder"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../gck/gck-attributes.c"
                 line="250">the builder</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
    </record>
    <enumeration name="BuilderFlags"
                 glib:type-name="GckBuilderFlags"
                 glib:get-type="gck_builder_flags_get_type"
                 c:type="GckBuilderFlags">
      <doc xml:space="preserve"
           filename="../gck/gck-attributes.c"
           line="175">Flags to be used with a gck_builder_init_full() and gck_builder_new().</doc>
      <member name="none"
              value="0"
              c:identifier="GCK_BUILDER_NONE"
              glib:nick="none">
        <doc xml:space="preserve"
             filename="../gck/gck-attributes.c"
             line="177">no special flags</doc>
      </member>
      <member name="secure_memory"
              value="1"
              c:identifier="GCK_BUILDER_SECURE_MEMORY"
              glib:nick="secure-memory">
        <doc xml:space="preserve"
             filename="../gck/gck-attributes.c"
             line="178">use non-pageable memory for the values of the attributes</doc>
      </member>
    </enumeration>
    <function-macro name="CHECK_VERSION"
                    c:identifier="GCK_CHECK_VERSION"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="../gck/gck-misc.c"
           line="46">Checks the version of the Gck libarry that is being compiled
against.

&lt;example&gt;
&lt;title&gt;Checking the version of the Gck library&lt;/title&gt;
&lt;programlisting&gt;
#if !GCK_CHECK_VERSION (3, 0, 0)
#warning Old Gck version, disabling functionality
#endif
&lt;/programlisting&gt;
&lt;/example&gt;</doc>
      <source-position filename="../gck/gck-version.h" line="38"/>
      <parameters>
        <parameter name="major">
          <doc xml:space="preserve"
               filename="../gck/gck-misc.c"
               line="48">the major version to check for</doc>
        </parameter>
        <parameter name="minor">
          <doc xml:space="preserve"
               filename="../gck/gck-misc.c"
               line="49">the minor version to check for</doc>
        </parameter>
        <parameter name="micro">
          <doc xml:space="preserve"
               filename="../gck/gck-misc.c"
               line="50">the micro version to check for</doc>
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="ENUMERATOR"
                    c:identifier="GCK_ENUMERATOR"
                    introspectable="0">
      <source-position filename="../gck/gck.h" line="541"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="ENUMERATOR_CLASS"
                    c:identifier="GCK_ENUMERATOR_CLASS"
                    introspectable="0">
      <source-position filename="../gck/gck.h" line="542"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="ENUMERATOR_GET_CLASS"
                    c:identifier="GCK_ENUMERATOR_GET_CLASS"
                    introspectable="0">
      <source-position filename="../gck/gck.h" line="545"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <class name="Enumerator"
           c:symbol-prefix="enumerator"
           c:type="GckEnumerator"
           parent="GObject.Object"
           glib:type-name="GckEnumerator"
           glib:get-type="gck_enumerator_get_type"
           glib:type-struct="EnumeratorClass">
      <doc xml:space="preserve"
           filename="../gck/gck-enumerator.c"
           line="50">An object that allows enumerating of objects across modules, tokens.</doc>
      <source-position filename="../gck/gck.h" line="563"/>
      <method name="get_chained" c:identifier="gck_enumerator_get_chained">
        <doc xml:space="preserve"
             filename="../gck/gck-enumerator.c"
             line="917">Get the enumerator that will be run after all objects from this one
are seen.</doc>
        <source-position filename="../gck/gck.h" line="582"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="../gck/gck-enumerator.c"
               line="924">the chained enumerator or %NULL</doc>
          <type name="Enumerator" c:type="GckEnumerator*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-enumerator.c"
                 line="919">the enumerator</doc>
            <type name="Enumerator" c:type="GckEnumerator*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_interaction"
              c:identifier="gck_enumerator_get_interaction">
        <doc xml:space="preserve"
             filename="../gck/gck-enumerator.c"
             line="975">Get the interaction used when a pin is needed</doc>
        <source-position filename="../gck/gck.h" line="567"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="../gck/gck-enumerator.c"
               line="981">the interaction or %NULL</doc>
          <type name="Gio.TlsInteraction" c:type="GTlsInteraction*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-enumerator.c"
                 line="977">the enumerator</doc>
            <type name="Enumerator" c:type="GckEnumerator*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_object_type"
              c:identifier="gck_enumerator_get_object_type">
        <doc xml:space="preserve"
             filename="../gck/gck-enumerator.c"
             line="822">Get the type of objects created by this enumerator. The type will always
either be #GckObject or derived from it.</doc>
        <source-position filename="../gck/gck.h" line="572"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../gck/gck-enumerator.c"
               line="829">the type of objects created</doc>
          <type name="GType" c:type="GType"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-enumerator.c"
                 line="824">an enumerator</doc>
            <type name="Enumerator" c:type="GckEnumerator*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="next" c:identifier="gck_enumerator_next" throws="1">
        <doc xml:space="preserve"
             filename="../gck/gck-enumerator.c"
             line="1176">Get the next object in the enumerator, or %NULL if there are no more objects.

%NULL is also returned if the function fails. Use the @error to determine
whether a failure occurred or not.</doc>
        <source-position filename="../gck/gck.h" line="587"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="../gck/gck-enumerator.c"
               line="1187">The next object, which must be released
using g_object_unref, or %NULL.</doc>
          <type name="Object" c:type="GckObject*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-enumerator.c"
                 line="1178">The enumerator</doc>
            <type name="Enumerator" c:type="GckEnumerator*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../gck/gck-enumerator.c"
                 line="1179">A #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="next_async" c:identifier="gck_enumerator_next_async">
        <doc xml:space="preserve"
             filename="../gck/gck-enumerator.c"
             line="1280">Get the next set of objects from the enumerator. This operation completes
asynchronously.The maximum number of objects can be specified with
@max_objects. If -1 is specified, then all the remaining objects will be
enumerated.</doc>
        <source-position filename="../gck/gck.h" line="596"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-enumerator.c"
                 line="1282">An enumerator</doc>
            <type name="Enumerator" c:type="GckEnumerator*"/>
          </instance-parameter>
          <parameter name="max_objects" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-enumerator.c"
                 line="1283">The maximum number of objects to get</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../gck/gck-enumerator.c"
                 line="1284">A #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="../gck/gck-enumerator.c"
                 line="1285">Called when the result is ready</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../gck/gck-enumerator.c"
                 line="1286">Data to pass to the callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="next_finish"
              c:identifier="gck_enumerator_next_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="../gck/gck-enumerator.c"
             line="1318">Complete an operation to enumerate next objects.

%NULL is also returned if the function fails. Use the @error to determine
whether a failure occurred or not.</doc>
        <source-position filename="../gck/gck.h" line="602"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../gck/gck-enumerator.c"
               line="1329">The list of objects, which
should be freed with gck_list_unref_free()</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="Object"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-enumerator.c"
                 line="1320">An enumerator</doc>
            <type name="Enumerator" c:type="GckEnumerator*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-enumerator.c"
                 line="1321">The result passed to the callback</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="next_n" c:identifier="gck_enumerator_next_n" throws="1">
        <doc xml:space="preserve"
             filename="../gck/gck-enumerator.c"
             line="1222">Get the next set of objects from the enumerator. The maximum number of
objects can be specified with @max_objects. If -1 is specified, then all
the remaining objects will be returned.

%NULL is also returned if the function fails. Use the @error to determine
whether a failure occurred or not.</doc>
        <source-position filename="../gck/gck.h" line="591"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../gck/gck-enumerator.c"
               line="1236">A list of objects, which
should be freed using gck_list_unref_free().</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="Object"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-enumerator.c"
                 line="1224">An enumerator</doc>
            <type name="Enumerator" c:type="GckEnumerator*"/>
          </instance-parameter>
          <parameter name="max_objects" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-enumerator.c"
                 line="1225">The maximum amount of objects to enumerate</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../gck/gck-enumerator.c"
                 line="1226">A #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_chained" c:identifier="gck_enumerator_set_chained">
        <doc xml:space="preserve"
             filename="../gck/gck-enumerator.c"
             line="943">Set a chained enumerator that will be run after all objects from this one
are seen.</doc>
        <source-position filename="../gck/gck.h" line="584"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-enumerator.c"
                 line="945">the enumerator</doc>
            <type name="Enumerator" c:type="GckEnumerator*"/>
          </instance-parameter>
          <parameter name="chained"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../gck/gck-enumerator.c"
                 line="946">the chained enumerator or %NULL</doc>
            <type name="Enumerator" c:type="GckEnumerator*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_interaction"
              c:identifier="gck_enumerator_set_interaction">
        <doc xml:space="preserve"
             filename="../gck/gck-enumerator.c"
             line="1000">Set the interaction used when a pin is needed</doc>
        <source-position filename="../gck/gck.h" line="569"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-enumerator.c"
                 line="1002">the enumerator</doc>
            <type name="Enumerator" c:type="GckEnumerator*"/>
          </instance-parameter>
          <parameter name="interaction"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../gck/gck-enumerator.c"
                 line="1003">the interaction or %NULL</doc>
            <type name="Gio.TlsInteraction" c:type="GTlsInteraction*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_object_type"
              c:identifier="gck_enumerator_set_object_type"
              shadowed-by="set_object_type_full"
              introspectable="0">
        <doc xml:space="preserve"
             filename="../gck/gck-enumerator.c"
             line="847">Set the type of objects to be created by this enumerator. The type must
always be either #GckObject or derived from it.

If the #GckObjectCache interface is implemented on the derived class
and the default_types class field is set, then the enumerator will retrieve
attributes for each object.</doc>
        <source-position filename="../gck/gck.h" line="574"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-enumerator.c"
                 line="849">an enumerator</doc>
            <type name="Enumerator" c:type="GckEnumerator*"/>
          </instance-parameter>
          <parameter name="object_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-enumerator.c"
                 line="850">the type of objects to create</doc>
            <type name="GType" c:type="GType"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_object_type_full"
              c:identifier="gck_enumerator_set_object_type_full"
              shadows="set_object_type">
        <doc xml:space="preserve"
             filename="../gck/gck-enumerator.c"
             line="866">Set the type of objects to be created by this enumerator. The type must
always be either #GckObject or derived from it.

If @attr_types and @attr_count are non-NULL and non-zero respectively,
then the #GckObjectCache interface is expected to be implemented on the
derived class, then the enumerator will retrieve attributes for each object.</doc>
        <source-position filename="../gck/gck.h" line="577"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-enumerator.c"
                 line="868">an enumerator</doc>
            <type name="Enumerator" c:type="GckEnumerator*"/>
          </instance-parameter>
          <parameter name="object_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-enumerator.c"
                 line="869">the type of objects to create</doc>
            <type name="GType" c:type="GType"/>
          </parameter>
          <parameter name="attr_types" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-enumerator.c"
                 line="870">types of attributes to retrieve for objects</doc>
            <array length="2" zero-terminated="0" c:type="const gulong*">
              <type name="gulong" c:type="gulong"/>
            </array>
          </parameter>
          <parameter name="attr_count" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-enumerator.c"
                 line="871">the number of attributes to retrieve</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <property name="chained" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../gck/gck-enumerator.c"
             line="683">Chained enumerator, which will be enumerated when this enumerator
has enumerated all its objects.</doc>
        <type name="Enumerator"/>
      </property>
      <property name="interaction" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../gck/gck-enumerator.c"
             line="660">Interaction object used to ask the user for pins when opening
sessions. Used if the session_options of the enumerator have
%GCK_SESSION_LOGIN_USER</doc>
        <type name="Gio.TlsInteraction"/>
      </property>
      <property name="object-type"
                introspectable="0"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../gck/gck-enumerator.c"
             line="672">The type of objects that are created by the enumerator. Must be
GckObject or derived from it.</doc>
        <type name="GType" c:type="GType"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="pv" readable="0" private="1">
        <type name="EnumeratorPrivate" c:type="GckEnumeratorPrivate*"/>
      </field>
      <field name="reserved" readable="0" private="1">
        <array zero-terminated="0" fixed-size="2">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </class>
    <record name="EnumeratorClass"
            c:type="GckEnumeratorClass"
            glib:is-gtype-struct-for="Enumerator">
      <source-position filename="../gck/gck.h" line="563"/>
      <field name="parent">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="reserved" readable="0" private="1">
        <array zero-terminated="0" fixed-size="2">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <record name="EnumeratorPrivate"
            c:type="GckEnumeratorPrivate"
            disguised="1">
      <source-position filename="../gck/gck.h" line="548"/>
    </record>
    <enumeration name="Error"
                 glib:type-name="GckError"
                 glib:get-type="gck_error_get_type"
                 c:type="GckError">
      <doc xml:space="preserve"
           filename="../gck/gck-misc.c"
           line="116">Various error codes. All the CKR_XXX error codes from PKCS\#11 are also
relevant error codes.</doc>
      <member name="problem"
              value="-951891199"
              c:identifier="GCK_ERROR_MODULE_PROBLEM"
              glib:nick="problem">
        <doc xml:space="preserve"
             filename="../gck/gck-misc.c"
             line="118">a result code that signifies there was a problem
                           loading a PKCS\#11 module, usually a shared library</doc>
      </member>
      <function name="get_quark" c:identifier="gck_error_get_quark">
        <source-position filename="../gck/gck.h" line="59"/>
        <return-value transfer-ownership="none">
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
    </enumeration>
    <constant name="INVALID" value="-1" c:type="GCK_INVALID">
      <doc xml:space="preserve"
           filename="../gck/gck-misc.c"
           line="103">Used as a terminator at the end of variable argument lists.</doc>
      <source-position filename="../gck/gck.h" line="103"/>
      <type name="gulong" c:type="gulong"/>
    </constant>
    <function-macro name="IS_ENUMERATOR"
                    c:identifier="GCK_IS_ENUMERATOR"
                    introspectable="0">
      <source-position filename="../gck/gck.h" line="543"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_ENUMERATOR_CLASS"
                    c:identifier="GCK_IS_ENUMERATOR_CLASS"
                    introspectable="0">
      <source-position filename="../gck/gck.h" line="544"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_MODULE"
                    c:identifier="GCK_IS_MODULE"
                    introspectable="0">
      <source-position filename="../gck/gck.h" line="434"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_MODULE_CLASS"
                    c:identifier="GCK_IS_MODULE_CLASS"
                    introspectable="0">
      <source-position filename="../gck/gck.h" line="435"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_OBJECT"
                    c:identifier="GCK_IS_OBJECT"
                    introspectable="0">
      <source-position filename="../gck/gck.h" line="1275"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_OBJECT_CACHE"
                    c:identifier="GCK_IS_OBJECT_CACHE"
                    introspectable="0">
      <source-position filename="../gck/gck.h" line="1432"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_OBJECT_CLASS"
                    c:identifier="GCK_IS_OBJECT_CLASS"
                    introspectable="0">
      <source-position filename="../gck/gck.h" line="1276"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_PASSWORD"
                    c:identifier="GCK_IS_PASSWORD"
                    introspectable="0">
      <source-position filename="../gck/gck.h" line="1503"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_PASSWORD_CLASS"
                    c:identifier="GCK_IS_PASSWORD_CLASS"
                    introspectable="0">
      <source-position filename="../gck/gck.h" line="1504"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SESSION"
                    c:identifier="GCK_IS_SESSION"
                    introspectable="0">
      <source-position filename="../gck/gck.h" line="816"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SESSION_CLASS"
                    c:identifier="GCK_IS_SESSION_CLASS"
                    introspectable="0">
      <source-position filename="../gck/gck.h" line="817"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SLOT"
                    c:identifier="GCK_IS_SLOT"
                    introspectable="0">
      <source-position filename="../gck/gck.h" line="697"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SLOT_CLASS"
                    c:identifier="GCK_IS_SLOT_CLASS"
                    introspectable="0">
      <source-position filename="../gck/gck.h" line="698"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <constant name="MAJOR_VERSION" value="1" c:type="GCK_MAJOR_VERSION">
      <doc xml:space="preserve"
           filename="../gck/gck-misc.c"
           line="68">The major version number of the Gck library.</doc>
      <source-position filename="../gck/gck-version.h" line="31"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="MICRO_VERSION" value="0" c:type="GCK_MICRO_VERSION">
      <doc xml:space="preserve"
           filename="../gck/gck-misc.c"
           line="80">The micro version number of the Gck library.</doc>
      <source-position filename="../gck/gck-version.h" line="33"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="MINOR_VERSION" value="0" c:type="GCK_MINOR_VERSION">
      <doc xml:space="preserve"
           filename="../gck/gck-misc.c"
           line="74">The minor version number of the Gck library.</doc>
      <source-position filename="../gck/gck-version.h" line="32"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <function-macro name="MODULE" c:identifier="GCK_MODULE" introspectable="0">
      <source-position filename="../gck/gck.h" line="432"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MODULE_CLASS"
                    c:identifier="GCK_MODULE_CLASS"
                    introspectable="0">
      <source-position filename="../gck/gck.h" line="433"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MODULE_GET_CLASS"
                    c:identifier="GCK_MODULE_GET_CLASS"
                    introspectable="0">
      <source-position filename="../gck/gck.h" line="436"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <record name="Mechanism" c:type="GckMechanism">
      <doc xml:space="preserve"
           filename="../gck/gck-session.c"
           line="59">Represents a mechanism used with crypto operations.</doc>
      <source-position filename="../gck/gck.h" line="93"/>
      <field name="type" writable="1">
        <doc xml:space="preserve"
             filename="../gck/gck-session.c"
             line="61">The mechanism type</doc>
        <type name="gulong" c:type="gulong"/>
      </field>
      <field name="parameter" writable="1">
        <doc xml:space="preserve"
             filename="../gck/gck-session.c"
             line="62">Mechanism specific data.</doc>
        <type name="gpointer" c:type="gconstpointer"/>
      </field>
      <field name="n_parameter" writable="1">
        <doc xml:space="preserve"
             filename="../gck/gck-session.c"
             line="63">Length of mechanism specific data.</doc>
        <type name="gulong" c:type="gulong"/>
      </field>
    </record>
    <record name="MechanismInfo"
            c:type="GckMechanismInfo"
            glib:type-name="GckMechanismInfo"
            glib:get-type="gck_mechanism_info_get_type"
            c:symbol-prefix="mechanism_info">
      <doc xml:space="preserve"
           filename="../gck/gck-slot.c"
           line="317">Represents information about a PKCS11 mechanism.

This is analogous to a CK_MECHANISM_INFO structure.

When you're done with this structure it should be released with
gck_mechanism_info_free().</doc>
      <source-position filename="../gck/gck.h" line="675"/>
      <field name="min_key_size" writable="1">
        <doc xml:space="preserve"
             filename="../gck/gck-slot.c"
             line="319">The minimum key size that can be used with this mechanism.</doc>
        <type name="gulong" c:type="gulong"/>
      </field>
      <field name="max_key_size" writable="1">
        <doc xml:space="preserve"
             filename="../gck/gck-slot.c"
             line="320">The maximum key size that can be used with this mechanism.</doc>
        <type name="gulong" c:type="gulong"/>
      </field>
      <field name="flags" writable="1">
        <doc xml:space="preserve"
             filename="../gck/gck-slot.c"
             line="321">Various PKCS11 flags that apply to this mechanism.</doc>
        <type name="gulong" c:type="gulong"/>
      </field>
      <method name="copy" c:identifier="gck_mechanism_info_copy">
        <doc xml:space="preserve"
             filename="../gck/gck-slot.c"
             line="345">Make a copy of the mechanism info.</doc>
        <source-position filename="../gck/gck.h" line="681"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../gck/gck-slot.c"
               line="351">a newly allocated copy mechanism info</doc>
          <type name="MechanismInfo" c:type="GckMechanismInfo*"/>
        </return-value>
        <parameters>
          <instance-parameter name="mech_info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-slot.c"
                 line="347">a mechanism info</doc>
            <type name="MechanismInfo" c:type="GckMechanismInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="free" c:identifier="gck_mechanism_info_free">
        <doc xml:space="preserve"
             filename="../gck/gck-slot.c"
             line="359">Free the GckMechanismInfo and associated resources.</doc>
        <source-position filename="../gck/gck.h" line="683"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="mech_info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-slot.c"
                 line="361">The mechanism info to free, or %NULL.</doc>
            <type name="MechanismInfo" c:type="GckMechanismInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
    </record>
    <class name="Module"
           c:symbol-prefix="module"
           c:type="GckModule"
           parent="GObject.Object"
           glib:type-name="GckModule"
           glib:get-type="gck_module_get_type"
           glib:type-struct="ModuleClass">
      <doc xml:space="preserve"
           filename="../gck/gck-module.c"
           line="49">Holds a loaded and initialized PKCS\#11 module.</doc>
      <source-position filename="../gck/gck.h" line="458"/>
      <constructor name="new" c:identifier="gck_module_new" introspectable="0">
        <doc xml:space="preserve"
             filename="../gck/gck-module.c"
             line="474">Create a GckModule representing a PKCS\#11 module. It is assumed that
this the module is already initialized. In addition it will not be
finalized when complete.</doc>
        <source-position filename="../gck/gck.h" line="462"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../gck/gck-module.c"
               line="482">The new PKCS\#11 module.</doc>
          <type name="Module" c:type="GckModule*"/>
        </return-value>
        <parameters>
          <parameter name="funcs" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-module.c"
                 line="476">Initialized PKCS\#11 function list pointer</doc>
            <type c:type="CK_FUNCTION_LIST_PTR"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="initialize"
                c:identifier="gck_module_initialize"
                throws="1">
        <doc xml:space="preserve"
             filename="../gck/gck-module.c"
             line="377">Load and initialize a PKCS\#11 module represented by a GckModule object.</doc>
        <source-position filename="../gck/gck.h" line="464"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../gck/gck-module.c"
               line="385">The loaded PKCS\#11 module or %NULL if failed.</doc>
          <type name="Module" c:type="GckModule*"/>
        </return-value>
        <parameters>
          <parameter name="path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-module.c"
                 line="379">The file system path to the PKCS\#11 module to load.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../gck/gck-module.c"
                 line="380">optional cancellation object</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </function>
      <function name="initialize_async"
                c:identifier="gck_module_initialize_async">
        <doc xml:space="preserve"
             filename="../gck/gck-module.c"
             line="414">Asynchronously load and initialize a PKCS\#11 module represented by a
#GckModule object.</doc>
        <source-position filename="../gck/gck.h" line="468"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-module.c"
                 line="416">the file system path to the PKCS\#11 module to load</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../gck/gck-module.c"
                 line="417">optional cancellation object</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="../gck/gck-module.c"
                 line="418">a callback which will be called when the operation completes</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../gck/gck-module.c"
                 line="419">data to pass to the callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="initialize_finish"
                c:identifier="gck_module_initialize_finish"
                throws="1">
        <doc xml:space="preserve"
             filename="../gck/gck-module.c"
             line="441">Finishes the asynchronous initialize operation.</doc>
        <source-position filename="../gck/gck.h" line="473"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="../gck/gck-module.c"
               line="448">The initialized module, or %NULL</doc>
          <type name="Module" c:type="GckModule*"/>
        </return-value>
        <parameters>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-module.c"
                 line="443">the asynchronous result</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="authenticate_object">
        <source-position filename="../gck/gck.h" line="454"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Module" c:type="GckModule*"/>
          </instance-parameter>
          <parameter name="object" transfer-ownership="none">
            <type name="Object" c:type="GckObject*"/>
          </parameter>
          <parameter name="label" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="password" transfer-ownership="none">
            <type name="utf8" c:type="gchar**"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="authenticate_slot">
        <source-position filename="../gck/gck.h" line="452"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Module" c:type="GckModule*"/>
          </instance-parameter>
          <parameter name="slot" transfer-ownership="none">
            <type name="Slot" c:type="GckSlot*"/>
          </parameter>
          <parameter name="label" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="password" transfer-ownership="none">
            <type name="utf8" c:type="gchar**"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="equal" c:identifier="gck_module_equal">
        <doc xml:space="preserve"
             filename="../gck/gck-module.c"
             line="499">Checks equality of two modules. Two GckModule objects can point to the same
underlying PKCS\#11 module.</doc>
        <source-position filename="../gck/gck.h" line="476"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../gck/gck-module.c"
               line="507">%TRUE if module1 and module2 are equal.
              %FALSE if either is not a GckModule.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="module1" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-module.c"
                 line="501">a pointer to the first #GckModule</doc>
            <type name="Module" c:type="gconstpointer"/>
          </instance-parameter>
          <parameter name="module2" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-module.c"
                 line="502">a pointer to the second #GckModule</doc>
            <type name="Module" c:type="gconstpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_functions"
              c:identifier="gck_module_get_functions"
              introspectable="0">
        <doc xml:space="preserve"
             filename="../gck/gck-module.c"
             line="677">Get the PKCS\#11 function list for the module.</doc>
        <source-position filename="../gck/gck.h" line="486"/>
        <return-value>
          <doc xml:space="preserve"
               filename="../gck/gck-module.c"
               line="683">The function list, do not modify this structure.</doc>
          <type c:type="CK_FUNCTION_LIST_PTR"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-module.c"
                 line="679">The module for which to get the function list.</doc>
            <type name="Module" c:type="GckModule*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_info" c:identifier="gck_module_get_info">
        <doc xml:space="preserve"
             filename="../gck/gck-module.c"
             line="585">Get the info about a PKCS\#11 module.</doc>
        <source-position filename="../gck/gck.h" line="488"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../gck/gck-module.c"
               line="591">the module info; release this with gck_module_info_free()</doc>
          <type name="ModuleInfo" c:type="GckModuleInfo*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-module.c"
                 line="587">The module to get info for.</doc>
            <type name="Module" c:type="GckModule*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_path" c:identifier="gck_module_get_path">
        <doc xml:space="preserve"
             filename="../gck/gck-module.c"
             line="661">Get the file path of this module. This may not be an absolute path, and
usually reflects the path passed to gck_module_initialize().</doc>
        <source-position filename="../gck/gck.h" line="484"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../gck/gck-module.c"
               line="668">The path, do not modify or free this value.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-module.c"
                 line="663">The module for which to get the path.</doc>
            <type name="Module" c:type="GckModule*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_slots" c:identifier="gck_module_get_slots">
        <doc xml:space="preserve"
             filename="../gck/gck-module.c"
             line="612">Get the GckSlot objects for a given module.</doc>
        <source-position filename="../gck/gck.h" line="490"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../gck/gck-module.c"
               line="619">The possibly empty
              list of slots. Release this with gck_list_unref_free().</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="Slot"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-module.c"
                 line="614">The module for which to get the slots.</doc>
            <type name="Module" c:type="GckModule*"/>
          </instance-parameter>
          <parameter name="token_present" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-module.c"
                 line="615">Whether to limit only to slots with a token present.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="hash" c:identifier="gck_module_hash">
        <doc xml:space="preserve"
             filename="../gck/gck-module.c"
             line="526">Create a hash value for the GckModule.

This function is intended for easily hashing a GckModule to add to
a GHashTable or similar data structure.</doc>
        <source-position filename="../gck/gck.h" line="479"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../gck/gck-module.c"
               line="535">An integer that can be used as a hash value, or 0 if invalid.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="module" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-module.c"
                 line="528">a pointer to a #GckModule</doc>
            <type name="Module" c:type="gconstpointer"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="match" c:identifier="gck_module_match">
        <doc xml:space="preserve"
             filename="../gck/gck-module.c"
             line="692">Check whether the PKCS\#11 URI matches the module</doc>
        <source-position filename="../gck/gck.h" line="481"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../gck/gck-module.c"
               line="699">whether the URI matches or not</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-module.c"
                 line="694">the module to match</doc>
            <type name="Module" c:type="GckModule*"/>
          </instance-parameter>
          <parameter name="uri" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-module.c"
                 line="695">the uri to match against the module</doc>
            <type name="UriData" c:type="GckUriData*"/>
          </parameter>
        </parameters>
      </method>
      <property name="functions"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../gck/gck-module.c"
             line="231">The raw PKCS&amp;num;11 function list for the module.

This points to a CK_FUNCTION_LIST structure.</doc>
        <type name="gpointer" c:type="gpointer"/>
      </property>
      <property name="path"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../gck/gck-module.c"
             line="218">The PKCS&amp;num;11 module file path.

This may be set to NULL if this object was created from an already
initialized module via the gck_module_new() function.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="pv" readable="0" private="1">
        <type name="ModulePrivate" c:type="GckModulePrivate*"/>
      </field>
      <field name="reserved" readable="0" private="1">
        <array zero-terminated="0" fixed-size="4">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
      <glib:signal name="authenticate-object" when="last" deprecated="1">
        <doc xml:space="preserve"
             filename="../gck/gck-module.c"
             line="258">Use gck_session_set_interaction() instead of connecting to this signal.</doc>
        <doc-deprecated xml:space="preserve">Since 3.4</doc-deprecated>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-module.c"
                 line="261">The object to be authenticated.</doc>
            <type name="Object"/>
          </parameter>
          <parameter name="label" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-module.c"
                 line="262">A displayable label which describes the object.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="password"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../gck/gck-module.c"
                 line="263">A gchar** where a password should be returned.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="authenticate-slot" when="last" deprecated="1">
        <doc xml:space="preserve"
             filename="../gck/gck-module.c"
             line="242">Use gck_session_set_interaction() instead of connecting to this signal.</doc>
        <doc-deprecated xml:space="preserve">Since 3.4</doc-deprecated>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="slot" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-module.c"
                 line="245">The slot to be authenticated.</doc>
            <type name="Slot"/>
          </parameter>
          <parameter name="string" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-module.c"
                 line="246">A displayable label which describes the object.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="password"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../gck/gck-module.c"
                 line="247">A gchar** where a password should be returned.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="ModuleClass"
            c:type="GckModuleClass"
            glib:is-gtype-struct-for="Module">
      <source-position filename="../gck/gck.h" line="458"/>
      <field name="parent">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="authenticate_slot">
        <callback name="authenticate_slot">
          <source-position filename="../gck/gck.h" line="452"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Module" c:type="GckModule*"/>
            </parameter>
            <parameter name="slot" transfer-ownership="none">
              <type name="Slot" c:type="GckSlot*"/>
            </parameter>
            <parameter name="label" transfer-ownership="none">
              <type name="utf8" c:type="gchar*"/>
            </parameter>
            <parameter name="password" transfer-ownership="none">
              <type name="utf8" c:type="gchar**"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="authenticate_object">
        <callback name="authenticate_object">
          <source-position filename="../gck/gck.h" line="454"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Module" c:type="GckModule*"/>
            </parameter>
            <parameter name="object" transfer-ownership="none">
              <type name="Object" c:type="GckObject*"/>
            </parameter>
            <parameter name="label" transfer-ownership="none">
              <type name="utf8" c:type="gchar*"/>
            </parameter>
            <parameter name="password" transfer-ownership="none">
              <type name="utf8" c:type="gchar**"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="reserved" readable="0" private="1">
        <array zero-terminated="0" fixed-size="8">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <record name="ModuleInfo"
            c:type="GckModuleInfo"
            glib:type-name="GckModuleInfo"
            glib:get-type="gck_module_info_get_type"
            c:symbol-prefix="module_info">
      <doc xml:space="preserve"
           filename="../gck/gck-module.c"
           line="55">Holds information about the PKCS&amp;num;11 module.

This structure corresponds to CK_MODULE_INFO in the PKCS\#11 standard. The
strings are %NULL terminated for easier use.

Use gck_module_info_free() to release this structure when done with it.</doc>
      <source-position filename="../gck/gck.h" line="419"/>
      <field name="pkcs11_version_major" writable="1">
        <doc xml:space="preserve"
             filename="../gck/gck-module.c"
             line="57">The major version of the module.</doc>
        <type name="guint8" c:type="guint8"/>
      </field>
      <field name="pkcs11_version_minor" writable="1">
        <doc xml:space="preserve"
             filename="../gck/gck-module.c"
             line="58">The minor version of the module.</doc>
        <type name="guint8" c:type="guint8"/>
      </field>
      <field name="manufacturer_id" writable="1">
        <doc xml:space="preserve"
             filename="../gck/gck-module.c"
             line="59">The module manufacturer.</doc>
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="flags" writable="1">
        <doc xml:space="preserve"
             filename="../gck/gck-module.c"
             line="60">The module PKCS&amp;num;11 flags.</doc>
        <type name="gulong" c:type="gulong"/>
      </field>
      <field name="library_description" writable="1">
        <doc xml:space="preserve"
             filename="../gck/gck-module.c"
             line="61">The module description.</doc>
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="library_version_major" writable="1">
        <doc xml:space="preserve"
             filename="../gck/gck-module.c"
             line="62">The major version of the library.</doc>
        <type name="guint8" c:type="guint8"/>
      </field>
      <field name="library_version_minor" writable="1">
        <doc xml:space="preserve"
             filename="../gck/gck-module.c"
             line="63">The minor version of the library.</doc>
        <type name="guint8" c:type="guint8"/>
      </field>
      <method name="copy" c:identifier="gck_module_info_copy">
        <doc xml:space="preserve"
             filename="../gck/gck-module.c"
             line="289">Make a copy of the module info.</doc>
        <source-position filename="../gck/gck.h" line="425"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../gck/gck-module.c"
               line="295">a newly allocated copy module info</doc>
          <type name="ModuleInfo" c:type="GckModuleInfo*"/>
        </return-value>
        <parameters>
          <instance-parameter name="module_info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-module.c"
                 line="291">a module info</doc>
            <type name="ModuleInfo" c:type="GckModuleInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="free" c:identifier="gck_module_info_free">
        <doc xml:space="preserve"
             filename="../gck/gck-module.c"
             line="310">Free a GckModuleInfo structure.</doc>
        <source-position filename="../gck/gck.h" line="427"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="module_info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-module.c"
                 line="312">The module info to free, or %NULL.</doc>
            <type name="ModuleInfo" c:type="GckModuleInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
    </record>
    <record name="ModulePrivate" c:type="GckModulePrivate" disguised="1">
      <source-position filename="../gck/gck.h" line="439"/>
    </record>
    <function-macro name="OBJECT" c:identifier="GCK_OBJECT" introspectable="0">
      <source-position filename="../gck/gck.h" line="1273"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="OBJECT_CACHE"
                    c:identifier="GCK_OBJECT_CACHE"
                    introspectable="0">
      <source-position filename="../gck/gck.h" line="1431"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="OBJECT_CACHE_GET_INTERFACE"
                    c:identifier="GCK_OBJECT_CACHE_GET_INTERFACE"
                    introspectable="0">
      <source-position filename="../gck/gck.h" line="1433"/>
      <parameters>
        <parameter name="inst">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="OBJECT_CLASS"
                    c:identifier="GCK_OBJECT_CLASS"
                    introspectable="0">
      <source-position filename="../gck/gck.h" line="1274"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="OBJECT_GET_CLASS"
                    c:identifier="GCK_OBJECT_GET_CLASS"
                    introspectable="0">
      <source-position filename="../gck/gck.h" line="1277"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <class name="Object"
           c:symbol-prefix="object"
           c:type="GckObject"
           parent="GObject.Object"
           glib:type-name="GckObject"
           glib:get-type="gck_object_get_type"
           glib:type-struct="ObjectClass">
      <doc xml:space="preserve"
           filename="../gck/gck-object.c"
           line="39">Represents a PKCS11 object handle such as a key or certifiacte.</doc>
      <source-position filename="../gck/gck.h" line="1295"/>
      <function name="from_handle" c:identifier="gck_object_from_handle">
        <doc xml:space="preserve"
             filename="../gck/gck-object.c"
             line="204">Initialize a GckObject from a raw PKCS\#11 handle. Normally you would use
gck_session_create_object() or gck_session_find_objects() to access objects.</doc>
        <source-position filename="../gck/gck.h" line="1299"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../gck/gck-object.c"
               line="212">The new GckObject. You should use
              g_object_unref() when done with this object.</doc>
          <type name="Object" c:type="GckObject*"/>
        </return-value>
        <parameters>
          <parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-object.c"
                 line="206">The session through which this object is accessed or created.</doc>
            <type name="Session" c:type="GckSession*"/>
          </parameter>
          <parameter name="object_handle" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-object.c"
                 line="207">The raw CK_OBJECT_HANDLE of the object.</doc>
            <type name="gulong" c:type="gulong"/>
          </parameter>
        </parameters>
      </function>
      <method name="cache_lookup"
              c:identifier="gck_object_cache_lookup"
              throws="1">
        <doc xml:space="preserve"
             filename="../gck/gck-object-cache.c"
             line="324">Lookup attributes in the cache, or retrieve them from the object if necessary.

If @object is a #GckObjectCache then this will lookup the attributes there
first if available, otherwise will read them from the object and update
the cache.

If @object is not a #GckObjectCache, then the attributes will simply be
read from the object.

This may block, use the asynchronous version when this is not desirable</doc>
        <source-position filename="../gck/gck.h" line="1477"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../gck/gck-object-cache.c"
               line="343">the attributes retrieved or %NULL on failure</doc>
          <type name="Attributes" c:type="GckAttributes*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-object-cache.c"
                 line="326">the object</doc>
            <type name="Object" c:type="GckObject*"/>
          </instance-parameter>
          <parameter name="attr_types" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-object-cache.c"
                 line="327">the types of attributes to update</doc>
            <array length="1" zero-terminated="0" c:type="const gulong*">
              <type name="gulong" c:type="gulong"/>
            </array>
          </parameter>
          <parameter name="n_attr_types" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-object-cache.c"
                 line="328">the number of attribute types</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../gck/gck-object-cache.c"
                 line="329">optional cancellation object</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="cache_lookup_async"
              c:identifier="gck_object_cache_lookup_async">
        <doc xml:space="preserve"
             filename="../gck/gck-object-cache.c"
             line="379">Lookup attributes in the cache, or retrieve them from the object if necessary.

If @object is a #GckObjectCache then this will lookup the attributes there
first if available, otherwise will read them from the object and update
the cache.

If @object is not a #GckObjectCache, then the attributes will simply be
read from the object.

This will return immediately and complete asynchronously</doc>
        <source-position filename="../gck/gck.h" line="1483"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-object-cache.c"
                 line="381">the object</doc>
            <type name="Object" c:type="GckObject*"/>
          </instance-parameter>
          <parameter name="attr_types" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-object-cache.c"
                 line="382">the types of attributes to update</doc>
            <array length="1" zero-terminated="0" c:type="const gulong*">
              <type name="gulong" c:type="gulong"/>
            </array>
          </parameter>
          <parameter name="n_attr_types" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-object-cache.c"
                 line="383">the number of attribute types</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../gck/gck-object-cache.c"
                 line="384">optional cancellation object</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="../gck/gck-object-cache.c"
                 line="385">called when the operation completes</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../gck/gck-object-cache.c"
                 line="386">data to pass to the callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="cache_lookup_finish"
              c:identifier="gck_object_cache_lookup_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="../gck/gck-object-cache.c"
             line="437">Complete an operation to lookup attributes in the cache or retrieve them
from the object if necessary.</doc>
        <source-position filename="../gck/gck.h" line="1490"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../gck/gck-object-cache.c"
               line="446">the attributes retrieved or %NULL on failure</doc>
          <type name="Attributes" c:type="GckAttributes*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-object-cache.c"
                 line="439">the object</doc>
            <type name="Object" c:type="GckObject*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-object-cache.c"
                 line="440">the asynchrounous result passed to the callback</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="destroy" c:identifier="gck_object_destroy" throws="1">
        <doc xml:space="preserve"
             filename="../gck/gck-object.c"
             line="403">Destroy a PKCS\#11 object, deleting it from storage or the session.
This call may block for an indefinite period.</doc>
        <source-position filename="../gck/gck.h" line="1317"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../gck/gck-object.c"
               line="412">Whether the call was successful or not.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-object.c"
                 line="405">The object to destroy.</doc>
            <type name="Object" c:type="GckObject*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../gck/gck-object.c"
                 line="406">Optional cancellable object, or %NULL to ignore.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="destroy_async" c:identifier="gck_object_destroy_async">
        <doc xml:space="preserve"
             filename="../gck/gck-object.c"
             line="427">Destroy a PKCS\#11 object, deleting it from storage or the session.
This call will return immediately and complete asynchronously.</doc>
        <source-position filename="../gck/gck.h" line="1321"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-object.c"
                 line="429">The object to destroy.</doc>
            <type name="Object" c:type="GckObject*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../gck/gck-object.c"
                 line="430">Optional cancellable object, or %NULL to ignore.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="../gck/gck-object.c"
                 line="431">Callback which is called when operation completes.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../gck/gck-object.c"
                 line="432">Data to pass to the callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="destroy_finish"
              c:identifier="gck_object_destroy_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="../gck/gck-object.c"
             line="452">Get the status of the operation to destroy a PKCS\#11 object, begun with
gck_object_destroy_async().</doc>
        <source-position filename="../gck/gck.h" line="1326"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../gck/gck-object.c"
               line="461">Whether the object was destroyed successfully or not.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-object.c"
                 line="454">The object being destroyed.</doc>
            <type name="Object" c:type="GckObject*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-object.c"
                 line="455">The result of the destory operation passed to the callback.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="equal" c:identifier="gck_object_equal">
        <doc xml:space="preserve"
             filename="../gck/gck-object.c"
             line="264">Checks equality of two objects. Two GckObject objects can point to the same
underlying PKCS\#11 object.</doc>
        <source-position filename="../gck/gck.h" line="1306"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../gck/gck-object.c"
               line="272">%TRUE if object1 and object2 are equal.
              %FALSE if either is not a GckObject.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object1" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-object.c"
                 line="266">a pointer to the first #GckObject</doc>
            <type name="Object" c:type="gconstpointer"/>
          </instance-parameter>
          <parameter name="object2" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-object.c"
                 line="267">a pointer to the second #GckObject</doc>
            <type name="Object" c:type="gconstpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get" c:identifier="gck_object_get" introspectable="0">
        <doc xml:space="preserve"
             filename="../gck/gck-object.c"
             line="647">Get the specified attributes from the object. This call may
block for an indefinite period.</doc>
        <source-position filename="../gck/gck.h" line="1345"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../gck/gck-object.c"
               line="657">the resulting PKCS\#11 attributes, or %NULL if an
         error occurred; the result must be unreffed when you're finished
         with it</doc>
          <type name="Attributes" c:type="GckAttributes*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-object.c"
                 line="649">The object to get attributes from.</doc>
            <type name="Object" c:type="GckObject*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../gck/gck-object.c"
                 line="650">A #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="error" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-object.c"
                 line="651">A location to store an error.</doc>
            <type name="GLib.Error" c:type="GError**"/>
          </parameter>
          <parameter name="..." transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-object.c"
                 line="652">The attribute types to get.</doc>
            <varargs/>
          </parameter>
        </parameters>
      </method>
      <method name="get_async" c:identifier="gck_object_get_async">
        <doc xml:space="preserve"
             filename="../gck/gck-object.c"
             line="737">Get the specified attributes from the object. The attributes will be cleared
of their current values, and new attributes will be stored. The attributes
should not be accessed in any way except for referencing and unreferencing
them until gck_object_get_finish() is called.

This call returns immediately and completes asynchronously.</doc>
        <source-position filename="../gck/gck.h" line="1356"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-object.c"
                 line="739">The object to get attributes from.</doc>
            <type name="Object" c:type="GckObject*"/>
          </instance-parameter>
          <parameter name="attr_types" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-object.c"
                 line="740">the types of the attributes to get</doc>
            <array length="1" zero-terminated="0" c:type="const gulong*">
              <type name="gulong" c:type="gulong"/>
            </array>
          </parameter>
          <parameter name="n_attr_types" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-object.c"
                 line="741">the number of attr_types</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../gck/gck-object.c"
                 line="742">optional cancellation object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="../gck/gck-object.c"
                 line="743">A callback which is called when the operation completes.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../gck/gck-object.c"
                 line="744">Data to be passed to the callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_data" c:identifier="gck_object_get_data" throws="1">
        <doc xml:space="preserve"
             filename="../gck/gck-object.c"
             line="866">Get the data for the specified attribute from the object. For convenience
the returned data has a null terminator.

This call may block for an indefinite period.</doc>
        <source-position filename="../gck/gck.h" line="1367"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../gck/gck-object.c"
               line="879">the resulting PKCS\#11
         attribute data, or %NULL if an error occurred</doc>
          <array length="2" zero-terminated="0" c:type="guchar*">
            <type name="guint8" c:type="guchar"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-object.c"
                 line="868">The object to get attribute data from.</doc>
            <type name="Object" c:type="GckObject*"/>
          </instance-parameter>
          <parameter name="attr_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-object.c"
                 line="869">The attribute to get data for.</doc>
            <type name="gulong" c:type="gulong"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../gck/gck-object.c"
                 line="870">A #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="n_data"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../gck/gck-object.c"
                 line="871">The length of the resulting data.</doc>
            <type name="gsize" c:type="gsize*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_data_async" c:identifier="gck_object_get_data_async">
        <doc xml:space="preserve"
             filename="../gck/gck-object.c"
             line="945">Get the data for the specified attribute from the object.

This call will return immediately and complete asynchronously.</doc>
        <source-position filename="../gck/gck.h" line="1380"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-object.c"
                 line="947">The object to get attribute data from.</doc>
            <type name="Object" c:type="GckObject*"/>
          </instance-parameter>
          <parameter name="attr_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-object.c"
                 line="948">The attribute to get data for.</doc>
            <type name="gulong" c:type="gulong"/>
          </parameter>
          <parameter name="allocator" transfer-ownership="none" skip="1">
            <doc xml:space="preserve"
                 filename="../gck/gck-object.c"
                 line="949">An allocator with which to allocate memory for the data, or %NULL for default.</doc>
            <type name="Allocator" c:type="GckAllocator"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../gck/gck-object.c"
                 line="950">Optional cancellation object, or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="../gck/gck-object.c"
                 line="951">Called when the operation completes.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../gck/gck-object.c"
                 line="952">Data to be passed to the callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_data_finish"
              c:identifier="gck_object_get_data_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="../gck/gck-object.c"
             line="980">Get the result of an operation to get attribute data from
an object. For convenience the returned data has an extra null terminator,
not included in the returned length.</doc>
        <source-position filename="../gck/gck.h" line="1387"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../gck/gck-object.c"
               line="991">The PKCS\#11 attribute data
         or %NULL if an error occurred.</doc>
          <array length="1" zero-terminated="0" c:type="guchar*">
            <type name="guint8" c:type="guchar"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-object.c"
                 line="982">The object to get an attribute from.</doc>
            <type name="Object" c:type="GckObject*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-object.c"
                 line="983">The result passed to the callback.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
          <parameter name="n_data"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../gck/gck-object.c"
                 line="984">The length of the resulting data.</doc>
            <type name="gsize" c:type="gsize*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_data_full"
              c:identifier="gck_object_get_data_full"
              introspectable="0"
              throws="1">
        <doc xml:space="preserve"
             filename="../gck/gck-object.c"
             line="896">Get the data for the specified attribute from the object. For convenience
the returned data has an extra null terminator, not included in the returned length.

This call may block for an indefinite period.</doc>
        <source-position filename="../gck/gck.h" line="1373"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../gck/gck-object.c"
               line="910">The resulting PKCS\#11
         attribute data, or %NULL if an error occurred.</doc>
          <array length="3" zero-terminated="0" c:type="guchar*">
            <type name="guint8" c:type="guchar"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-object.c"
                 line="898">The object to get attribute data from.</doc>
            <type name="Object" c:type="GckObject*"/>
          </instance-parameter>
          <parameter name="attr_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-object.c"
                 line="899">The attribute to get data for.</doc>
            <type name="gulong" c:type="gulong"/>
          </parameter>
          <parameter name="allocator" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-object.c"
                 line="900">An allocator with which to allocate memory for the data, or %NULL for default.</doc>
            <type name="Allocator" c:type="GckAllocator"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../gck/gck-object.c"
                 line="901">Optional cancellation object, or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="n_data"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../gck/gck-object.c"
                 line="902">The length of the resulting data.</doc>
            <type name="gsize" c:type="gsize*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_finish"
              c:identifier="gck_object_get_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="../gck/gck-object.c"
             line="778">Get the result of a get operation and return specified attributes from
the object.

No extra references are added to the returned attributes pointer.</doc>
        <source-position filename="../gck/gck.h" line="1363"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../gck/gck-object.c"
               line="789">The filled in attributes structure if successful or
%NULL if not successful.</doc>
          <type name="Attributes" c:type="GckAttributes*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-object.c"
                 line="780">The object to get attributes from.</doc>
            <type name="Object" c:type="GckObject*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-object.c"
                 line="781">The result passed to the callback.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_full" c:identifier="gck_object_get_full" throws="1">
        <doc xml:space="preserve"
             filename="../gck/gck-object.c"
             line="688">Get the specified attributes from the object. This call may
block for an indefinite period.

No extra references are added to the returned attributes pointer.
During this call you may not access the attributes in any way.</doc>
        <source-position filename="../gck/gck.h" line="1350"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../gck/gck-object.c"
               line="702">a pointer to the filled in attributes if successful,
         or %NULL if not</doc>
          <type name="Attributes" c:type="GckAttributes*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-object.c"
                 line="690">The object to get attributes from.</doc>
            <type name="Object" c:type="GckObject*"/>
          </instance-parameter>
          <parameter name="attr_types" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-object.c"
                 line="691">the types of the attributes to get</doc>
            <array length="1" zero-terminated="0" c:type="const gulong*">
              <type name="gulong" c:type="gulong"/>
            </array>
          </parameter>
          <parameter name="n_attr_types" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-object.c"
                 line="692">the number of attr_types</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../gck/gck-object.c"
                 line="693">optional cancellation object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_handle" c:identifier="gck_object_get_handle">
        <doc xml:space="preserve"
             filename="../gck/gck-object.c"
             line="334">Get the raw PKCS\#11 handle of a GckObject.</doc>
        <source-position filename="../gck/gck.h" line="1313"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../gck/gck-object.c"
               line="340">the raw CK_OBJECT_HANDLE object handle</doc>
          <type name="gulong" c:type="gulong"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-object.c"
                 line="336">The object.</doc>
            <type name="Object" c:type="GckObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_module" c:identifier="gck_object_get_module">
        <doc xml:space="preserve"
             filename="../gck/gck-object.c"
             line="349">Get the PKCS\#11 module to which this object belongs.</doc>
        <source-position filename="../gck/gck.h" line="1311"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../gck/gck-object.c"
               line="355">the module, which should be unreffed after use</doc>
          <type name="Module" c:type="GckModule*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-object.c"
                 line="351">The object.</doc>
            <type name="Object" c:type="GckObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_session" c:identifier="gck_object_get_session">
        <doc xml:space="preserve"
             filename="../gck/gck-object.c"
             line="366">Get the PKCS\#11 session assigned to make calls on when operating
on this object.

This will only return a session if it was set explitly on this
object. By default an object will open and close sessions
appropriate for its calls.</doc>
        <source-position filename="../gck/gck.h" line="1315"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../gck/gck-object.c"
               line="377">the assigned session, which must be unreffed after use</doc>
          <type name="Session" c:type="GckSession*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-object.c"
                 line="368">The object</doc>
            <type name="Object" c:type="GckObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_template"
              c:identifier="gck_object_get_template"
              throws="1">
        <doc xml:space="preserve"
             filename="../gck/gck-object.c"
             line="1217">Get an attribute template from the object. The attr_type must be for
an attribute which returns a template.

This call may block for an indefinite period.</doc>
        <source-position filename="../gck/gck.h" line="1409"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../gck/gck-object.c"
               line="1229">the resulting PKCS\#11 attribute template, or %NULL
         if an error occurred</doc>
          <type name="Attributes" c:type="GckAttributes*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-object.c"
                 line="1219">The object to get an attribute template from.</doc>
            <type name="Object" c:type="GckObject*"/>
          </instance-parameter>
          <parameter name="attr_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-object.c"
                 line="1220">The template attribute type.</doc>
            <type name="gulong" c:type="gulong"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../gck/gck-object.c"
                 line="1221">Optional cancellation object, or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_template_async"
              c:identifier="gck_object_get_template_async">
        <doc xml:space="preserve"
             filename="../gck/gck-object.c"
             line="1257">Get an attribute template from the object. The attr_type must be for
an attribute which returns a template.

This call will return immediately and complete asynchronously.</doc>
        <source-position filename="../gck/gck.h" line="1414"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-object.c"
                 line="1259">The object to get an attribute template from.</doc>
            <type name="Object" c:type="GckObject*"/>
          </instance-parameter>
          <parameter name="attr_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-object.c"
                 line="1260">The template attribute type.</doc>
            <type name="gulong" c:type="gulong"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../gck/gck-object.c"
                 line="1261">Optional cancellation object, or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="../gck/gck-object.c"
                 line="1262">Called when the operation completes.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../gck/gck-object.c"
                 line="1263">Data to be passed to the callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_template_finish"
              c:identifier="gck_object_get_template_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="../gck/gck-object.c"
             line="1288">Get the result of an operation to get attribute template from
an object.</doc>
        <source-position filename="../gck/gck.h" line="1420"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../gck/gck-object.c"
               line="1297">the resulting PKCS\#11 attribute template, or %NULL
         if an error occurred</doc>
          <type name="Attributes" c:type="GckAttributes*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-object.c"
                 line="1290">The object to get an attribute from.</doc>
            <type name="Object" c:type="GckObject*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-object.c"
                 line="1291">The result passed to the callback.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="hash" c:identifier="gck_object_hash">
        <doc xml:space="preserve"
             filename="../gck/gck-object.c"
             line="302">Create a hash value for the GckObject.

This function is intended for easily hashing a GckObject to add to
a GHashTable or similar data structure.</doc>
        <source-position filename="../gck/gck.h" line="1309"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../gck/gck-object.c"
               line="311">An integer that can be used as a hash value, or 0 if invalid.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-object.c"
                 line="304">a pointer to a #GckObject</doc>
            <type name="Object" c:type="gconstpointer"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set" c:identifier="gck_object_set" throws="1">
        <doc xml:space="preserve"
             filename="../gck/gck-object.c"
             line="502">Set PKCS\#11 attributes on an object. This call may block for an indefinite period.

If the @attrs #GckAttributes is floating, it is consumed.</doc>
        <source-position filename="../gck/gck.h" line="1330"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../gck/gck-object.c"
               line="513">Whether the call was successful or not.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-object.c"
                 line="504">The object to set attributes on.</doc>
            <type name="Object" c:type="GckObject*"/>
          </instance-parameter>
          <parameter name="attrs" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-object.c"
                 line="505">The attributes to set on the object.</doc>
            <type name="Attributes" c:type="GckAttributes*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../gck/gck-object.c"
                 line="506">Optional cancellable object, or %NULL to ignore.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_async" c:identifier="gck_object_set_async">
        <doc xml:space="preserve"
             filename="../gck/gck-object.c"
             line="539">Set PKCS\#11 attributes on an object. This call will return
immediately and completes asynchronously.

If the @attrs #GckAttributes is floating, it is consumed.</doc>
        <source-position filename="../gck/gck.h" line="1335"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-object.c"
                 line="541">The object to set attributes on.</doc>
            <type name="Object" c:type="GckObject*"/>
          </instance-parameter>
          <parameter name="attrs" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-object.c"
                 line="542">The attributes to set on the object.</doc>
            <type name="Attributes" c:type="GckAttributes*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../gck/gck-object.c"
                 line="543">Optional cancellable object, or %NULL to ignore.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="../gck/gck-object.c"
                 line="544">Callback which is called when operation completes.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../gck/gck-object.c"
                 line="545">Data to pass to the callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_finish"
              c:identifier="gck_object_set_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="../gck/gck-object.c"
             line="570">Get the status of the operation to set attributes on a PKCS\#11 object,
begun with gck_object_set_async().</doc>
        <source-position filename="../gck/gck.h" line="1341"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../gck/gck-object.c"
               line="579">Whether the attributes were successfully set on the object or not.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-object.c"
                 line="572">The object to set attributes on.</doc>
            <type name="Object" c:type="GckObject*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-object.c"
                 line="573">The result of the destory operation passed to the callback.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_template"
              c:identifier="gck_object_set_template"
              throws="1">
        <doc xml:space="preserve"
             filename="../gck/gck-object.c"
             line="1054">Set an attribute template on the object. The attr_type must be for
an attribute which contains a template.

If the @attrs #GckAttributes is floating, it is consumed.

This call may block for an indefinite period.</doc>
        <source-position filename="../gck/gck.h" line="1392"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../gck/gck-object.c"
               line="1069">%TRUE if the operation succeeded.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-object.c"
                 line="1056">The object to set an attribute template on.</doc>
            <type name="Object" c:type="GckObject*"/>
          </instance-parameter>
          <parameter name="attr_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-object.c"
                 line="1057">The attribute template type.</doc>
            <type name="gulong" c:type="gulong"/>
          </parameter>
          <parameter name="attrs" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-object.c"
                 line="1058">The attribute template.</doc>
            <type name="Attributes" c:type="GckAttributes*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../gck/gck-object.c"
                 line="1059">Optional cancellation object, or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_template_async"
              c:identifier="gck_object_set_template_async">
        <doc xml:space="preserve"
             filename="../gck/gck-object.c"
             line="1096">Set an attribute template on the object. The attr_type must be for
an attribute which contains a template.

If the @attrs #GckAttributes is floating, it is consumed.

This call will return immediately and complete asynchronously.</doc>
        <source-position filename="../gck/gck.h" line="1398"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-object.c"
                 line="1098">The object to set an attribute template on.</doc>
            <type name="Object" c:type="GckObject*"/>
          </instance-parameter>
          <parameter name="attr_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-object.c"
                 line="1099">The attribute template type.</doc>
            <type name="gulong" c:type="gulong"/>
          </parameter>
          <parameter name="attrs" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-object.c"
                 line="1100">The attribute template.</doc>
            <type name="Attributes" c:type="GckAttributes*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../gck/gck-object.c"
                 line="1101">Optional cancellation object, or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="../gck/gck-object.c"
                 line="1102">Called when the operation completes.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../gck/gck-object.c"
                 line="1103">Data to be passed to the callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_template_finish"
              c:identifier="gck_object_set_template_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="../gck/gck-object.c"
             line="1132">Get the result of an operation to set attribute template on
an object.</doc>
        <source-position filename="../gck/gck.h" line="1405"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../gck/gck-object.c"
               line="1141">%TRUE if the operation succeeded.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-object.c"
                 line="1134">The object to set an attribute template on.</doc>
            <type name="Object" c:type="GckObject*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-object.c"
                 line="1135">The result passed to the callback.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <property name="handle"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../gck/gck-object.c"
             line="175">The raw PKCS11 handle for this object.</doc>
        <type name="gulong" c:type="gulong"/>
      </property>
      <property name="module"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../gck/gck-object.c"
             line="165">The GckModule that this object belongs to.</doc>
        <type name="Module"/>
      </property>
      <property name="session"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../gck/gck-object.c"
             line="185">The PKCS11 session to make calls on when this object needs to
perform operations on itself.

If this is NULL then a new session is opened for each operation,
such as gck_object_get(), gck_object_set() or gck_object_destroy().</doc>
        <type name="Session"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="pv" readable="0" private="1">
        <type name="ObjectPrivate" c:type="GckObjectPrivate*"/>
      </field>
      <field name="reserved" readable="0" private="1">
        <array zero-terminated="0" fixed-size="4">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </class>
    <interface name="ObjectCache"
               c:symbol-prefix="object_cache"
               c:type="GckObjectCache"
               glib:type-name="GckObjectCache"
               glib:get-type="gck_object_cache_get_type"
               glib:type-struct="ObjectCacheIface">
      <doc xml:space="preserve"
           filename="../gck/gck-object-cache.c"
           line="41">An interface implemented on an #GckObject which contains a cache of attributes.</doc>
      <source-position filename="../gck/gck.h" line="1448"/>
      <prerequisite name="Object"/>
      <virtual-method name="fill" invoker="fill">
        <doc xml:space="preserve"
             filename="../gck/gck-object-cache.c"
             line="123">Adds the attributes to the set cached on this object. If an attribute is
already present in the cache it will be overridden by this value.

This will be done in a thread-safe manner.

If the @attrs #GckAttributes is floating, it is consumed.</doc>
        <source-position filename="../gck/gck.h" line="1443"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-object-cache.c"
                 line="125">an object with the cache</doc>
            <type name="ObjectCache" c:type="GckObjectCache*"/>
          </instance-parameter>
          <parameter name="attrs" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-object-cache.c"
                 line="126">the attributes to cache</doc>
            <type name="Attributes" c:type="GckAttributes*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="fill" c:identifier="gck_object_cache_fill">
        <doc xml:space="preserve"
             filename="../gck/gck-object-cache.c"
             line="123">Adds the attributes to the set cached on this object. If an attribute is
already present in the cache it will be overridden by this value.

This will be done in a thread-safe manner.

If the @attrs #GckAttributes is floating, it is consumed.</doc>
        <source-position filename="../gck/gck.h" line="1457"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-object-cache.c"
                 line="125">an object with the cache</doc>
            <type name="ObjectCache" c:type="GckObjectCache*"/>
          </instance-parameter>
          <parameter name="attrs" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-object-cache.c"
                 line="126">the attributes to cache</doc>
            <type name="Attributes" c:type="GckAttributes*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_attributes"
              c:identifier="gck_object_cache_get_attributes"
              introspectable="0">
        <doc xml:space="preserve"
             filename="../gck/gck-object-cache.c"
             line="85">Gets the attributes cached on this object.</doc>
        <source-position filename="../gck/gck.h" line="1452"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="../gck/gck-object-cache.c"
               line="91">the attributes</doc>
          <type name="Attributes" c:type="GckAttributes*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-object-cache.c"
                 line="87">an object with an attribute cache</doc>
            <type name="ObjectCache" c:type="GckObjectCache*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_attributes"
              c:identifier="gck_object_cache_set_attributes">
        <doc xml:space="preserve"
             filename="../gck/gck-object-cache.c"
             line="102">Sets the attributes cached on this object.

If the @attrs #GckAttributes is floating, it is consumed.</doc>
        <source-position filename="../gck/gck.h" line="1454"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-object-cache.c"
                 line="104">an object with an attribute cache</doc>
            <type name="ObjectCache" c:type="GckObjectCache*"/>
          </instance-parameter>
          <parameter name="attrs"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../gck/gck-object-cache.c"
                 line="105">the attributes to set</doc>
            <type name="Attributes" c:type="GckAttributes*"/>
          </parameter>
        </parameters>
      </method>
      <method name="update" c:identifier="gck_object_cache_update" throws="1">
        <doc xml:space="preserve"
             filename="../gck/gck-object-cache.c"
             line="152">Update the object cache with given attributes. If an attribute already
exists in the cache, it will be updated, and if it doesn't it will be added.

This may block, use the asynchronous version when this is not desirable</doc>
        <source-position filename="../gck/gck.h" line="1460"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../gck/gck-object-cache.c"
               line="165">whether the cache update was successful</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-object-cache.c"
                 line="154">the object with the cache</doc>
            <type name="ObjectCache" c:type="GckObjectCache*"/>
          </instance-parameter>
          <parameter name="attr_types" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-object-cache.c"
                 line="155">the types of attributes to update</doc>
            <array length="1" zero-terminated="0" c:type="const gulong*">
              <type name="gulong" c:type="gulong"/>
            </array>
          </parameter>
          <parameter name="n_attr_types" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-object-cache.c"
                 line="156">the number of attribute types</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../gck/gck-object-cache.c"
                 line="157">optional cancellation object</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="update_async" c:identifier="gck_object_cache_update_async">
        <doc xml:space="preserve"
             filename="../gck/gck-object-cache.c"
             line="228">Update the object cache with given attributes. If an attribute already
exists in the cache, it will be updated, and if it doesn't it will be added.

This call will return immediately and complete asynchronously.</doc>
        <source-position filename="../gck/gck.h" line="1466"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-object-cache.c"
                 line="230">the object with the cache</doc>
            <type name="ObjectCache" c:type="GckObjectCache*"/>
          </instance-parameter>
          <parameter name="attr_types" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-object-cache.c"
                 line="231">the types of attributes to update</doc>
            <array length="1" zero-terminated="0" c:type="const gulong*">
              <type name="gulong" c:type="gulong"/>
            </array>
          </parameter>
          <parameter name="n_attr_types" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-object-cache.c"
                 line="232">the number of attribute types</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../gck/gck-object-cache.c"
                 line="233">optional cancellation object</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="../gck/gck-object-cache.c"
                 line="234">called when the operation completes</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../gck/gck-object-cache.c"
                 line="235">data to be passed to the callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="update_finish"
              c:identifier="gck_object_cache_update_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="../gck/gck-object-cache.c"
             line="279">Complete an asynchronous operation to update the object cache with given
attributes.</doc>
        <source-position filename="../gck/gck.h" line="1473"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../gck/gck-object-cache.c"
               line="288">whether the cache update was successful</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-object-cache.c"
                 line="281">the object with the cache</doc>
            <type name="ObjectCache" c:type="GckObjectCache*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-object-cache.c"
                 line="282">the asynchronous result passed to the callback</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <property name="attributes" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../gck/gck-object-cache.c"
             line="72">The attributes cached on this object.</doc>
        <type name="Attributes"/>
      </property>
    </interface>
    <record name="ObjectCacheIface"
            c:type="GckObjectCacheIface"
            glib:is-gtype-struct-for="ObjectCache">
      <doc xml:space="preserve"
           filename="../gck/gck-object-cache.c"
           line="47">Interface for #GckObjectCache. If the @default_types field is set by
a implementing class, then the a #GckEnumerator which has been setup using
gck_enumerator_set_object_type()

The implementation for @populate should add the attributes to the
cache. It must be thread safe.</doc>
      <source-position filename="../gck/gck.h" line="1448"/>
      <field name="interface">
        <doc xml:space="preserve"
             filename="../gck/gck-object-cache.c"
             line="49">parent interface</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="default_types">
        <doc xml:space="preserve"
             filename="../gck/gck-object-cache.c"
             line="50">attribute types that an
                  enumerator should retrieve</doc>
        <array length="2" zero-terminated="0" c:type="const gulong*">
          <type name="gulong" c:type="gulong"/>
        </array>
      </field>
      <field name="n_default_types">
        <doc xml:space="preserve"
             filename="../gck/gck-object-cache.c"
             line="52">number of attribute types to be retrieved</doc>
        <type name="gint" c:type="gint"/>
      </field>
      <field name="fill">
        <callback name="fill">
          <source-position filename="../gck/gck.h" line="1443"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../gck/gck-object-cache.c"
                   line="125">an object with the cache</doc>
              <type name="ObjectCache" c:type="GckObjectCache*"/>
            </parameter>
            <parameter name="attrs" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../gck/gck-object-cache.c"
                   line="126">the attributes to cache</doc>
              <type name="Attributes" c:type="GckAttributes*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="reserved" readable="0" private="1">
        <array zero-terminated="0" fixed-size="6">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <record name="ObjectClass"
            c:type="GckObjectClass"
            glib:is-gtype-struct-for="Object">
      <doc xml:space="preserve"
           filename="../gck/gck-object.c"
           line="45">The class for a #GckObject.

If the @attribute_types field is set by a derived class, then the a
#GckEnumerator which has been setup using gck_enumerator_set_object_type()
with this derived type will retrieve these attributes when enumerating. In
this case the class must implement an 'attributes' property of boxed type
GCK_TYPE_ATTRIBUTES.</doc>
      <source-position filename="../gck/gck.h" line="1295"/>
      <field name="parent">
        <doc xml:space="preserve"
             filename="../gck/gck-object.c"
             line="47">derived from this</doc>
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="reserved" readable="0" private="1">
        <array zero-terminated="0" fixed-size="8">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <record name="ObjectPrivate" c:type="GckObjectPrivate" disguised="1">
      <source-position filename="../gck/gck.h" line="1280"/>
    </record>
    <function-macro name="PASSWORD"
                    c:identifier="GCK_PASSWORD"
                    introspectable="0">
      <source-position filename="../gck/gck.h" line="1501"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="PASSWORD_CLASS"
                    c:identifier="GCK_PASSWORD_CLASS"
                    introspectable="0">
      <source-position filename="../gck/gck.h" line="1502"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="PASSWORD_GET_CLASS"
                    c:identifier="GCK_PASSWORD_GET_CLASS"
                    introspectable="0">
      <source-position filename="../gck/gck.h" line="1505"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <class name="Password"
           c:symbol-prefix="password"
           c:type="GckPassword"
           parent="Gio.TlsPassword"
           glib:type-name="GckPassword"
           glib:get-type="gck_password_get_type"
           glib:type-struct="PasswordClass">
      <doc xml:space="preserve"
           filename="../gck/gck-password.c"
           line="42">A #GTlsPasswordClass that contains information about the PKCS\#11 token
or key the password is being requested for.</doc>
      <source-position filename="../gck/gck.h" line="1524"/>
      <method name="get_key" c:identifier="gck_password_get_key">
        <doc xml:space="preserve"
             filename="../gck/gck-password.c"
             line="233">If the password request is to unlock a PKCS\#11 key, then this is the
the object representing that key.</doc>
        <source-position filename="../gck/gck.h" line="1532"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../gck/gck-password.c"
               line="240">the password is for this key, or %NULL if not
         being requested for a key; must be unreferenced after use</doc>
          <type name="Object" c:type="GckObject*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-password.c"
                 line="235">the password object</doc>
            <type name="Password" c:type="GckPassword*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_module" c:identifier="gck_password_get_module">
        <doc xml:space="preserve"
             filename="../gck/gck-password.c"
             line="194">Get the PKCS\#11 module that is requesting the password.</doc>
        <source-position filename="../gck/gck.h" line="1528"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../gck/gck-password.c"
               line="200">the module that is requesting the password, which
         must be unreferenced after use</doc>
          <type name="Module" c:type="GckModule*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-password.c"
                 line="196">the password object</doc>
            <type name="Password" c:type="GckPassword*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_token" c:identifier="gck_password_get_token">
        <doc xml:space="preserve"
             filename="../gck/gck-password.c"
             line="213">If the password request is to unlock a PKCS\#11 token, then this is the
slot containing that token.</doc>
        <source-position filename="../gck/gck.h" line="1530"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../gck/gck-password.c"
               line="220">the slot that contains the token, or %NULL if not
         being requested for a token; must be unreferenced after use</doc>
          <type name="Slot" c:type="GckSlot*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-password.c"
                 line="215">the password object</doc>
            <type name="Password" c:type="GckPassword*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="key"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../gck/gck-password.c"
             line="183">The PKCS\#11 key that the password is being requested for. If this
is set then the GckPassword:token property will be %NULL</doc>
        <type name="Object"/>
      </property>
      <property name="module" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../gck/gck-password.c"
             line="164">The PKCS\#11 module that is requesting the password</doc>
        <type name="Module"/>
      </property>
      <property name="token"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../gck/gck-password.c"
             line="173">The PKCS\#11 token the password is for, if this is set then
the GckPassword:object property will be %NULL</doc>
        <type name="Slot"/>
      </property>
      <field name="parent">
        <type name="Gio.TlsPassword" c:type="GTlsPassword"/>
      </field>
      <field name="pv" readable="0" private="1">
        <type name="PasswordPrivate" c:type="GckPasswordPrivate*"/>
      </field>
      <field name="reserved" readable="0" private="1">
        <array zero-terminated="0" fixed-size="4">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </class>
    <record name="PasswordClass"
            c:type="GckPasswordClass"
            glib:is-gtype-struct-for="Password">
      <doc xml:space="preserve"
           filename="../gck/gck-password.c"
           line="49">The class for #GTlsPassword.</doc>
      <source-position filename="../gck/gck.h" line="1524"/>
      <field name="parent">
        <doc xml:space="preserve"
             filename="../gck/gck-password.c"
             line="51">parent class</doc>
        <type name="Gio.TlsPasswordClass" c:type="GTlsPasswordClass"/>
      </field>
      <field name="reserved" readable="0" private="1">
        <array zero-terminated="0" fixed-size="4">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <record name="PasswordPrivate" c:type="GckPasswordPrivate" disguised="1">
      <source-position filename="../gck/gck.h" line="1509"/>
    </record>
    <function-macro name="SESSION"
                    c:identifier="GCK_SESSION"
                    introspectable="0">
      <source-position filename="../gck/gck.h" line="814"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SESSION_CLASS"
                    c:identifier="GCK_SESSION_CLASS"
                    introspectable="0">
      <source-position filename="../gck/gck.h" line="815"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SESSION_GET_CLASS"
                    c:identifier="GCK_SESSION_GET_CLASS"
                    introspectable="0">
      <source-position filename="../gck/gck.h" line="818"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SLOT" c:identifier="GCK_SLOT" introspectable="0">
      <source-position filename="../gck/gck.h" line="695"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SLOT_CLASS"
                    c:identifier="GCK_SLOT_CLASS"
                    introspectable="0">
      <source-position filename="../gck/gck.h" line="696"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SLOT_GET_CLASS"
                    c:identifier="GCK_SLOT_GET_CLASS"
                    introspectable="0">
      <source-position filename="../gck/gck.h" line="699"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <class name="Session"
           c:symbol-prefix="session"
           c:type="GckSession"
           parent="GObject.Object"
           glib:type-name="GckSession"
           glib:get-type="gck_session_get_type"
           glib:type-struct="SessionClass">
      <doc xml:space="preserve"
           filename="../gck/gck-session.c"
           line="43">Represents an open PKCS11 session.</doc>
      <source-position filename="../gck/gck.h" line="838"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.Initable"/>
      <function name="from_handle" c:identifier="gck_session_from_handle">
        <doc xml:space="preserve"
             filename="../gck/gck-session.c"
             line="597">Initialize a GckSession object from a raw PKCS\#11 session handle.
Usually one would use the gck_slot_open_session() function to
create a session.</doc>
        <source-position filename="../gck/gck.h" line="842"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../gck/gck-session.c"
               line="607">the new GckSession object</doc>
          <type name="Session" c:type="GckSession*"/>
        </return-value>
        <parameters>
          <parameter name="slot" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="599">The slot which the session belongs to.</doc>
            <type name="Slot" c:type="GckSlot*"/>
          </parameter>
          <parameter name="session_handle" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="600">the raw PKCS\#11 handle of the session</doc>
            <type name="gulong" c:type="gulong"/>
          </parameter>
          <parameter name="options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="601">Session options. Those which are used during opening a session have no effect.</doc>
            <type name="SessionOptions" c:type="GckSessionOptions"/>
          </parameter>
        </parameters>
      </function>
      <function name="open" c:identifier="gck_session_open" throws="1">
        <doc xml:space="preserve"
             filename="../gck/gck-session.c"
             line="820">Open a session on the slot. This call may block for an indefinite period.</doc>
        <source-position filename="../gck/gck.h" line="863"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../gck/gck-session.c"
               line="830">the new session</doc>
          <type name="Session" c:type="GckSession*"/>
        </return-value>
        <parameters>
          <parameter name="slot" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="822">the slot to open session on</doc>
            <type name="Slot" c:type="GckSlot*"/>
          </parameter>
          <parameter name="options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="823">session options</doc>
            <type name="SessionOptions" c:type="GckSessionOptions"/>
          </parameter>
          <parameter name="interaction"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="824">optional interaction for logins or object authentication</doc>
            <type name="Gio.TlsInteraction" c:type="GTlsInteraction*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="825">optional cancellation object</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </function>
      <function name="open_async" c:identifier="gck_session_open_async">
        <doc xml:space="preserve"
             filename="../gck/gck-session.c"
             line="846">Open a session on the slot. This call will return immediately and complete
asynchronously.</doc>
        <source-position filename="../gck/gck.h" line="869"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="slot" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="848">the slot to open session on</doc>
            <type name="Slot" c:type="GckSlot*"/>
          </parameter>
          <parameter name="options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="849">session options</doc>
            <type name="SessionOptions" c:type="GckSessionOptions"/>
          </parameter>
          <parameter name="interaction"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="850">optional interaction for logins or object authentication</doc>
            <type name="Gio.TlsInteraction" c:type="GTlsInteraction*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="851">optional cancellation object</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="5">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="852">called when the operation completes</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="853">data to pass to callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="open_finish"
                c:identifier="gck_session_open_finish"
                throws="1">
        <doc xml:space="preserve"
             filename="../gck/gck-session.c"
             line="874">Get the result of an open session operation.</doc>
        <source-position filename="../gck/gck.h" line="876"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../gck/gck-session.c"
               line="881">the new session</doc>
          <type name="Session" c:type="GckSession*"/>
        </return-value>
        <parameters>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="876">the result passed to the callback</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="discard_handle" introspectable="0">
        <source-position filename="../gck/gck.h" line="834"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <type name="Session" c:type="GckSession*"/>
          </instance-parameter>
          <parameter name="handle" transfer-ownership="none">
            <type c:type="CK_SESSION_HANDLE"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="create_object"
              c:identifier="gck_session_create_object"
              throws="1">
        <doc xml:space="preserve"
             filename="../gck/gck-session.c"
             line="1404">Create a new PKCS\#11 object. This call may block for an
indefinite period.

If the @attrs #GckAttributes is floating, it is consumed.</doc>
        <source-position filename="../gck/gck.h" line="966"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../gck/gck-session.c"
               line="1416">the newly created object or %NULL if an error occurred</doc>
          <type name="Object" c:type="GckObject*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="1406">The session to create the object on.</doc>
            <type name="Session" c:type="GckSession*"/>
          </instance-parameter>
          <parameter name="attrs" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="1407">The attributes to create the object with.</doc>
            <type name="Attributes" c:type="GckAttributes*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="1408">Optional cancellation object, or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="create_object_async"
              c:identifier="gck_session_create_object_async">
        <doc xml:space="preserve"
             filename="../gck/gck-session.c"
             line="1438">Create a new PKCS\#11 object. This call will return immediately
and complete asynchronously.

If the @attrs #GckAttributes is floating, it is consumed.</doc>
        <source-position filename="../gck/gck.h" line="971"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="1440">The session to create the object on.</doc>
            <type name="Session" c:type="GckSession*"/>
          </instance-parameter>
          <parameter name="attrs" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="1441">The attributes to create the object with.</doc>
            <type name="Attributes" c:type="GckAttributes*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="1442">Optional cancellation object or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="1443">Called when the operation completes.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="1444">Data to pass to the callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="create_object_finish"
              c:identifier="gck_session_create_object_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="../gck/gck-session.c"
             line="1466">Get the result of creating a new PKCS\#11 object.</doc>
        <source-position filename="../gck/gck.h" line="977"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../gck/gck-session.c"
               line="1474">the newly created object or %NULL if an error occurred</doc>
          <type name="Object" c:type="GckObject*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="1468">The session to create the object on.</doc>
            <type name="Session" c:type="GckSession*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="1469">The result passed to the callback.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="decrypt" c:identifier="gck_session_decrypt" throws="1">
        <doc xml:space="preserve"
             filename="../gck/gck-session.c"
             line="2857">Decrypt data in a mechanism specific manner. This call may
block for an indefinite period.</doc>
        <source-position filename="../gck/gck.h" line="1080"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../gck/gck-session.c"
               line="2871">the data that was decrypted,
         or %NULL if an error occured</doc>
          <array length="4" zero-terminated="0" c:type="guchar*">
            <type name="guint8" c:type="guchar"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="2859">The session.</doc>
            <type name="Session" c:type="GckSession*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="2860">The key to decrypt with.</doc>
            <type name="Object" c:type="GckObject*"/>
          </parameter>
          <parameter name="mech_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="2861">The mechanism type to use for decryption.</doc>
            <type name="gulong" c:type="gulong"/>
          </parameter>
          <parameter name="input" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="2862">data to decrypt</doc>
            <array length="3" zero-terminated="0" c:type="const guchar*">
              <type name="guint8" c:type="guchar"/>
            </array>
          </parameter>
          <parameter name="n_input" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="2863">length of the data to decrypt</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
          <parameter name="n_result"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="2864">location to store the length of the result data</doc>
            <type name="gsize" c:type="gsize*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="2865">Optional cancellation object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="decrypt_async" c:identifier="gck_session_decrypt_async">
        <doc xml:space="preserve"
             filename="../gck/gck-session.c"
             line="2920">Decrypt data in a mechanism specific manner. This call will
return immediately and complete asynchronously.</doc>
        <source-position filename="../gck/gck.h" line="1098"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="2922">The session.</doc>
            <type name="Session" c:type="GckSession*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="2923">The key to decrypt with.</doc>
            <type name="Object" c:type="GckObject*"/>
          </parameter>
          <parameter name="mechanism" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="2924">The mechanism type and parameters to use for decryption.</doc>
            <type name="Mechanism" c:type="GckMechanism*"/>
          </parameter>
          <parameter name="input" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="2925">data to decrypt</doc>
            <array length="3" zero-terminated="0" c:type="const guchar*">
              <type name="guint8" c:type="guchar"/>
            </array>
          </parameter>
          <parameter name="n_input" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="2926">length of the data to decrypt</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="2927">A GCancellable which can be used to cancel the operation.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="2928">Called when the operation completes.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="2929">A pointer to pass to the callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="decrypt_finish"
              c:identifier="gck_session_decrypt_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="../gck/gck-session.c"
             line="2953">Get the result of an decryption operation.</doc>
        <source-position filename="../gck/gck.h" line="1107"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../gck/gck-session.c"
               line="2962">the data that was decrypted,
         or %NULL if an error occurred</doc>
          <array length="1" zero-terminated="0" c:type="guchar*">
            <type name="guint8" c:type="guchar"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="2955">The session.</doc>
            <type name="Session" c:type="GckSession*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="2956">The result object passed to the callback.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
          <parameter name="n_result"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="2957">A location to store the length of the result data.</doc>
            <type name="gsize" c:type="gsize*"/>
          </parameter>
        </parameters>
      </method>
      <method name="decrypt_full"
              c:identifier="gck_session_decrypt_full"
              throws="1">
        <doc xml:space="preserve"
             filename="../gck/gck-session.c"
             line="2882">Decrypt data in a mechanism specific manner. This call may
block for an indefinite period.</doc>
        <source-position filename="../gck/gck.h" line="1089"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../gck/gck-session.c"
               line="2896">the data that was decrypted,
         or %NULL if an error occured</doc>
          <array length="4" zero-terminated="0" c:type="guchar*">
            <type name="guint8" c:type="guchar"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="2884">The session.</doc>
            <type name="Session" c:type="GckSession*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="2885">The key to decrypt with.</doc>
            <type name="Object" c:type="GckObject*"/>
          </parameter>
          <parameter name="mechanism" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="2886">The mechanism type and parameters to use for decryption.</doc>
            <type name="Mechanism" c:type="GckMechanism*"/>
          </parameter>
          <parameter name="input" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="2887">data to decrypt</doc>
            <array length="3" zero-terminated="0" c:type="const guchar*">
              <type name="guint8" c:type="guchar"/>
            </array>
          </parameter>
          <parameter name="n_input" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="2888">length of the data to decrypt</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
          <parameter name="n_result"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="2889">location to store the length of the result data</doc>
            <type name="gsize" c:type="gsize*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="2890">A GCancellable which can be used to cancel the operation.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="derive_key"
              c:identifier="gck_session_derive_key"
              throws="1">
        <doc xml:space="preserve"
             filename="../gck/gck-session.c"
             line="2428">Derive a key from another key. This call may block for an
indefinite period.

If the @attrs #GckAttributes is floating, it is consumed.</doc>
        <source-position filename="../gck/gck.h" line="1240"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../gck/gck-session.c"
               line="2442">the new derived key or %NULL if the operation
         failed</doc>
          <type name="Object" c:type="GckObject*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="2430">The session to use.</doc>
            <type name="Session" c:type="GckSession*"/>
          </instance-parameter>
          <parameter name="base" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="2431">The key to derive from.</doc>
            <type name="Object" c:type="GckObject*"/>
          </parameter>
          <parameter name="mech_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="2432">The mechanism to use for derivation.</doc>
            <type name="gulong" c:type="gulong"/>
          </parameter>
          <parameter name="attrs" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="2433">Additional attributes for the derived key.</doc>
            <type name="Attributes" c:type="GckAttributes*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="2434">Optional cancellation object, or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="derive_key_async"
              c:identifier="gck_session_derive_key_async">
        <doc xml:space="preserve"
             filename="../gck/gck-session.c"
             line="2500">Derive a key from another key. This call will
return immediately and complete asynchronously.

If the @attrs #GckAttributes is floating, it is consumed.</doc>
        <source-position filename="../gck/gck.h" line="1254"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="2502">The session to use.</doc>
            <type name="Session" c:type="GckSession*"/>
          </instance-parameter>
          <parameter name="base" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="2503">The key to derive from.</doc>
            <type name="Object" c:type="GckObject*"/>
          </parameter>
          <parameter name="mechanism" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="2504">The mechanism to use for derivation.</doc>
            <type name="Mechanism" c:type="GckMechanism*"/>
          </parameter>
          <parameter name="attrs" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="2505">Additional attributes for the derived key.</doc>
            <type name="Attributes" c:type="GckAttributes*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="2506">Optional cancellation object or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="5">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="2507">Called when the operation completes.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="2508">Data to pass to the callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="derive_key_finish"
              c:identifier="gck_session_derive_key_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="../gck/gck-session.c"
             line="2538">Get the result of a derive key operation.</doc>
        <source-position filename="../gck/gck.h" line="1262"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../gck/gck-session.c"
               line="2546">the new derived key or %NULL if the operation
         failed</doc>
          <type name="Object" c:type="GckObject*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="2540">The session to use.</doc>
            <type name="Session" c:type="GckSession*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="2541">The async result passed to the callback.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="derive_key_full"
              c:identifier="gck_session_derive_key_full"
              throws="1">
        <doc xml:space="preserve"
             filename="../gck/gck-session.c"
             line="2453">Derive a key from another key. This call may block for an
indefinite period.

If the @attrs #GckAttributes is floating, it is consumed.</doc>
        <source-position filename="../gck/gck.h" line="1247"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../gck/gck-session.c"
               line="2467">the new derived key or %NULL if the operation
         failed</doc>
          <type name="Object" c:type="GckObject*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="2455">The session to use.</doc>
            <type name="Session" c:type="GckSession*"/>
          </instance-parameter>
          <parameter name="base" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="2456">The key to derive from.</doc>
            <type name="Object" c:type="GckObject*"/>
          </parameter>
          <parameter name="mechanism" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="2457">The mechanism to use for derivation.</doc>
            <type name="Mechanism" c:type="GckMechanism*"/>
          </parameter>
          <parameter name="attrs" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="2458">Additional attributes for the derived key.</doc>
            <type name="Attributes" c:type="GckAttributes*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="2459">Optional cancellation object, or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="encrypt" c:identifier="gck_session_encrypt" throws="1">
        <doc xml:space="preserve"
             filename="../gck/gck-session.c"
             line="2736">Encrypt data in a mechanism specific manner. This call may
block for an indefinite period.</doc>
        <source-position filename="../gck/gck.h" line="1048"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../gck/gck-session.c"
               line="2750">the data that was encrypted,
         or %NULL if an error occured.</doc>
          <array length="4" zero-terminated="0" c:type="guchar*">
            <type name="guint8" c:type="guchar"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="2738">The session.</doc>
            <type name="Session" c:type="GckSession*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="2739">The key to encrypt with.</doc>
            <type name="Object" c:type="GckObject*"/>
          </parameter>
          <parameter name="mech_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="2740">The mechanism type to use for encryption.</doc>
            <type name="gulong" c:type="gulong"/>
          </parameter>
          <parameter name="input" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="2741">the data to encrypt</doc>
            <array length="3" zero-terminated="0" c:type="const guchar*">
              <type name="guint8" c:type="guchar"/>
            </array>
          </parameter>
          <parameter name="n_input" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="2742">the length of the data to encrypt</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
          <parameter name="n_result"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="2743">location to store the length of the result data</doc>
            <type name="gsize" c:type="gsize*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="2744">Optional cancellation object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="encrypt_async" c:identifier="gck_session_encrypt_async">
        <doc xml:space="preserve"
             filename="../gck/gck-session.c"
             line="2800">Encrypt data in a mechanism specific manner. This call will
return immediately and complete asynchronously.</doc>
        <source-position filename="../gck/gck.h" line="1066"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="2802">The session.</doc>
            <type name="Session" c:type="GckSession*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="2803">The key to encrypt with.</doc>
            <type name="Object" c:type="GckObject*"/>
          </parameter>
          <parameter name="mechanism" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="2804">The mechanism type and parameters to use for encryption.</doc>
            <type name="Mechanism" c:type="GckMechanism*"/>
          </parameter>
          <parameter name="input" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="2805">the data to encrypt</doc>
            <array length="3" zero-terminated="0" c:type="const guchar*">
              <type name="guint8" c:type="guchar"/>
            </array>
          </parameter>
          <parameter name="n_input" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="2806">length of the data to encrypt</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="2807">A GCancellable which can be used to cancel the operation.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="2808">Called when the operation completes.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="2809">A pointer to pass to the callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="encrypt_finish"
              c:identifier="gck_session_encrypt_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="../gck/gck-session.c"
             line="2834">Get the result of an encryption operation.</doc>
        <source-position filename="../gck/gck.h" line="1075"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../gck/gck-session.c"
               line="2843">the data that was encrypted,
         or %NULL if an error occurred.</doc>
          <array length="1" zero-terminated="0" c:type="guchar*">
            <type name="guint8" c:type="guchar"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="2836">The session.</doc>
            <type name="Session" c:type="GckSession*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="2837">The result object passed to the callback.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
          <parameter name="n_result"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="2838">A location to store the length of the result data.</doc>
            <type name="gsize" c:type="gsize*"/>
          </parameter>
        </parameters>
      </method>
      <method name="encrypt_full"
              c:identifier="gck_session_encrypt_full"
              throws="1">
        <doc xml:space="preserve"
             filename="../gck/gck-session.c"
             line="2761">Encrypt data in a mechanism specific manner. This call may
block for an indefinite period.</doc>
        <source-position filename="../gck/gck.h" line="1057"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../gck/gck-session.c"
               line="2775">the data that was encrypted,
         or %NULL if an error occured</doc>
          <array length="4" zero-terminated="0" c:type="guchar*">
            <type name="guint8" c:type="guchar"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="2763">The session.</doc>
            <type name="Session" c:type="GckSession*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="2764">The key to encrypt with.</doc>
            <type name="Object" c:type="GckObject*"/>
          </parameter>
          <parameter name="mechanism" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="2765">The mechanism type and parameters to use for encryption.</doc>
            <type name="Mechanism" c:type="GckMechanism*"/>
          </parameter>
          <parameter name="input" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="2766">the data to encrypt</doc>
            <array length="3" zero-terminated="0" c:type="const guchar*">
              <type name="guint8" c:type="guchar"/>
            </array>
          </parameter>
          <parameter name="n_input" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="2767">the length of the data to encrypt</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
          <parameter name="n_result"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="2768">location to store the length of the result data</doc>
            <type name="gsize" c:type="gsize*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="2769">A GCancellable which can be used to cancel the operation.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="enumerate_objects"
              c:identifier="gck_session_enumerate_objects">
        <doc xml:space="preserve"
             filename="../gck/gck-session.c"
             line="1778">Setup an enumerator for listing matching objects available via this session.

If the @match #GckAttributes is floating, it is consumed.

This call will not block but will return an enumerator immediately.</doc>
        <source-position filename="../gck/gck.h" line="1013"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../gck/gck-session.c"
               line="1789">a new enumerator</doc>
          <type name="Enumerator" c:type="GckEnumerator*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="1780">session to enumerate objects on</doc>
            <type name="Session" c:type="GckSession*"/>
          </instance-parameter>
          <parameter name="match" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="1781">attributes that the objects must match, or empty for all objects</doc>
            <type name="Attributes" c:type="GckAttributes*"/>
          </parameter>
        </parameters>
      </method>
      <method name="find_handles"
              c:identifier="gck_session_find_handles"
              throws="1">
        <doc xml:space="preserve"
             filename="../gck/gck-session.c"
             line="1568">Find the objects matching the passed attributes. This call may
block for an indefinite period.

If the @match #GckAttributes is floating, it is consumed.</doc>
        <source-position filename="../gck/gck.h" line="996"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="../gck/gck-session.c"
               line="1581">a list of
         the matching objects, which may be empty</doc>
          <array length="2" zero-terminated="0" c:type="gulong*">
            <type name="gulong" c:type="gulong"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="1570">the session to find objects on</doc>
            <type name="Session" c:type="GckSession*"/>
          </instance-parameter>
          <parameter name="match" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="1571">the attributes to match against objects</doc>
            <type name="Attributes" c:type="GckAttributes*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="1572">optional cancellation object or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="n_handles"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="1573">location to return number of handles</doc>
            <type name="gulong" c:type="gulong*"/>
          </parameter>
        </parameters>
      </method>
      <method name="find_handles_async"
              c:identifier="gck_session_find_handles_async">
        <doc xml:space="preserve"
             filename="../gck/gck-session.c"
             line="1612">Find the objects matching the passed attributes. This call will
return immediately and complete asynchronously.

If the @match #GckAttributes is floating, it is consumed.</doc>
        <source-position filename="../gck/gck.h" line="1002"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="1614">the session to find objects on</doc>
            <type name="Session" c:type="GckSession*"/>
          </instance-parameter>
          <parameter name="match" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="1615">the attributes to match against the objects</doc>
            <type name="Attributes" c:type="GckAttributes*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="1616">optional cancellation object or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="1617">called when the operation completes</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="1618">data to pass to the callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="find_handles_finish"
              c:identifier="gck_session_find_handles_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="../gck/gck-session.c"
             line="1644">Get the result of a find handles operation.</doc>
        <source-position filename="../gck/gck.h" line="1008"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="../gck/gck-session.c"
               line="1653">an array of
         handles that matched, which may be empty, or %NULL on failure</doc>
          <array length="1" zero-terminated="0" c:type="gulong*">
            <type name="gulong" c:type="gulong"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="1646">the session</doc>
            <type name="Session" c:type="GckSession*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="1647">the asynchronous result</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
          <parameter name="n_handles"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="1648">location to store number of handles returned</doc>
            <type name="gulong" c:type="gulong*"/>
          </parameter>
        </parameters>
      </method>
      <method name="find_objects"
              c:identifier="gck_session_find_objects"
              throws="1">
        <doc xml:space="preserve"
             filename="../gck/gck-session.c"
             line="1679">Find the objects matching the passed attributes. This call may
block for an indefinite period.

If the @match #GckAttributes is floating, it is consumed.</doc>
        <source-position filename="../gck/gck.h" line="981"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../gck/gck-session.c"
               line="1691">a list of the matching
         objects, which may be empty</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="Object"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="1681">The session to find objects on.</doc>
            <type name="Session" c:type="GckSession*"/>
          </instance-parameter>
          <parameter name="match" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="1682">the attributes to match</doc>
            <type name="Attributes" c:type="GckAttributes*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="1683">Optional cancellation object or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="find_objects_async"
              c:identifier="gck_session_find_objects_async">
        <doc xml:space="preserve"
             filename="../gck/gck-session.c"
             line="1718">Find the objects matching the passed attributes. This call will
return immediately and complete asynchronously.

If the @match #GckAttributes is floating, it is consumed.</doc>
        <source-position filename="../gck/gck.h" line="986"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="1720">The session to find objects on.</doc>
            <type name="Session" c:type="GckSession*"/>
          </instance-parameter>
          <parameter name="match" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="1721">The attributes to match.</doc>
            <type name="Attributes" c:type="GckAttributes*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="1722">Optional cancellation object or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="1723">Called when the operation completes.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="1724">Data to pass to the callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="find_objects_finish"
              c:identifier="gck_session_find_objects_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="../gck/gck-session.c"
             line="1745">Get the result of a find operation.</doc>
        <source-position filename="../gck/gck.h" line="992"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../gck/gck-session.c"
               line="1753">a list of the matching
         objects, which may be empty</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="Object"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="1747">The session to find objects on.</doc>
            <type name="Session" c:type="GckSession*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="1748">The attributes to match.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="generate_key_pair"
              c:identifier="gck_session_generate_key_pair"
              throws="1">
        <doc xml:space="preserve"
             filename="../gck/gck-session.c"
             line="1845">Generate a new key pair of public and private keys. This call may block for an
indefinite period.

If the @public_attrs and/or @private_attrs #GckAttributes is floating, it is
consumed.</doc>
        <source-position filename="../gck/gck.h" line="1016"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../gck/gck-session.c"
               line="1862">%TRUE if the operation succeeded.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="1847">The session to use.</doc>
            <type name="Session" c:type="GckSession*"/>
          </instance-parameter>
          <parameter name="mech_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="1848">The mechanism type to use for key generation.</doc>
            <type name="gulong" c:type="gulong"/>
          </parameter>
          <parameter name="public_attrs" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="1849">Additional attributes for the generated public key.</doc>
            <type name="Attributes" c:type="GckAttributes*"/>
          </parameter>
          <parameter name="private_attrs" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="1850">Additional attributes for the generated private key.</doc>
            <type name="Attributes" c:type="GckAttributes*"/>
          </parameter>
          <parameter name="public_key"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="1851">location to return the resulting public key</doc>
            <type name="Object" c:type="GckObject**"/>
          </parameter>
          <parameter name="private_key"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="1852">location to return the resulting private key.</doc>
            <type name="Object" c:type="GckObject**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="1853">Optional cancellation object, or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="generate_key_pair_async"
              c:identifier="gck_session_generate_key_pair_async">
        <doc xml:space="preserve"
             filename="../gck/gck-session.c"
             line="1932">Generate a new key pair of public and private keys. This call will
return immediately and complete asynchronously.

If the @public_attrs and/or @private_attrs #GckAttributes is floating, it is
consumed.</doc>
        <source-position filename="../gck/gck.h" line="1034"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="1934">The session to use.</doc>
            <type name="Session" c:type="GckSession*"/>
          </instance-parameter>
          <parameter name="mechanism" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="1935">The mechanism to use for key generation.</doc>
            <type name="Mechanism" c:type="GckMechanism*"/>
          </parameter>
          <parameter name="public_attrs" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="1936">Additional attributes for the generated public key.</doc>
            <type name="Attributes" c:type="GckAttributes*"/>
          </parameter>
          <parameter name="private_attrs" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="1937">Additional attributes for the generated private key.</doc>
            <type name="Attributes" c:type="GckAttributes*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="1938">Optional cancellation object or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="5">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="1939">Called when the operation completes.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="1940">Data to pass to the callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="generate_key_pair_finish"
              c:identifier="gck_session_generate_key_pair_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="../gck/gck-session.c"
             line="1971">Get the result of a generate key pair operation.</doc>
        <source-position filename="../gck/gck.h" line="1042"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../gck/gck-session.c"
               line="1981">%TRUE if the operation succeeded.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="1973">The session to use.</doc>
            <type name="Session" c:type="GckSession*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="1974">The async result passed to the callback.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
          <parameter name="public_key"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="1975">a location to return the resulting public key</doc>
            <type name="Object" c:type="GckObject**"/>
          </parameter>
          <parameter name="private_key"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="1976">a location to return the resulting private key</doc>
            <type name="Object" c:type="GckObject**"/>
          </parameter>
        </parameters>
      </method>
      <method name="generate_key_pair_full"
              c:identifier="gck_session_generate_key_pair_full"
              throws="1">
        <doc xml:space="preserve"
             filename="../gck/gck-session.c"
             line="1874">Generate a new key pair of public and private keys. This call may block for an
indefinite period.

If the @public_attrs and/or @private_attrs #GckAttributes is floating, it is
consumed.</doc>
        <source-position filename="../gck/gck.h" line="1025"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../gck/gck-session.c"
               line="1891">%TRUE if the operation succeeded.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="1876">The session to use.</doc>
            <type name="Session" c:type="GckSession*"/>
          </instance-parameter>
          <parameter name="mechanism" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="1877">The mechanism to use for key generation.</doc>
            <type name="Mechanism" c:type="GckMechanism*"/>
          </parameter>
          <parameter name="public_attrs" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="1878">Additional attributes for the generated public key.</doc>
            <type name="Attributes" c:type="GckAttributes*"/>
          </parameter>
          <parameter name="private_attrs" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="1879">Additional attributes for the generated private key.</doc>
            <type name="Attributes" c:type="GckAttributes*"/>
          </parameter>
          <parameter name="public_key"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="1880">a location to return the resulting public key</doc>
            <type name="Object" c:type="GckObject**"/>
          </parameter>
          <parameter name="private_key"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="1881">a location to return the resulting private key</doc>
            <type name="Object" c:type="GckObject**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="1882">Optional cancellation object, or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_handle" c:identifier="gck_session_get_handle">
        <doc xml:space="preserve"
             filename="../gck/gck-session.c"
             line="627">Get the raw PKCS\#11 session handle from a GckSession object.</doc>
        <source-position filename="../gck/gck.h" line="850"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../gck/gck-session.c"
               line="633">The raw session handle.</doc>
          <type name="gulong" c:type="gulong"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="629">The session object.</doc>
            <type name="Session" c:type="GckSession*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_info" c:identifier="gck_session_get_info">
        <doc xml:space="preserve"
             filename="../gck/gck-session.c"
             line="673">Get information about the session.</doc>
        <source-position filename="../gck/gck.h" line="852"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../gck/gck-session.c"
               line="679">the session info. Use the gck_session_info_free()
         to release when done</doc>
          <type name="SessionInfo" c:type="GckSessionInfo*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="675">The session object.</doc>
            <type name="Session" c:type="GckSession*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_interaction"
              c:identifier="gck_session_get_interaction">
        <doc xml:space="preserve"
             filename="../gck/gck-session.c"
             line="770">Get the interaction object set on this session, which is used to prompt
for pins and the like.</doc>
        <source-position filename="../gck/gck.h" line="858"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="../gck/gck-session.c"
               line="777">the interaction object, or %NULL</doc>
          <type name="Gio.TlsInteraction" c:type="GTlsInteraction*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="772">the session</doc>
            <type name="Session" c:type="GckSession*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_module" c:identifier="gck_session_get_module">
        <doc xml:space="preserve"
             filename="../gck/gck-session.c"
             line="642">Get the PKCS\#11 module to which this session belongs.</doc>
        <source-position filename="../gck/gck.h" line="846"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../gck/gck-session.c"
               line="648">the module, which should be unreffed after use</doc>
          <type name="Module" c:type="GckModule*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="644">The session object.</doc>
            <type name="Session" c:type="GckSession*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_options" c:identifier="gck_session_get_options">
        <doc xml:space="preserve"
             filename="../gck/gck-session.c"
             line="755">Get the options this session was opened with.</doc>
        <source-position filename="../gck/gck.h" line="856"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../gck/gck-session.c"
               line="761">The session options.</doc>
          <type name="SessionOptions" c:type="GckSessionOptions"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="757">The session to get options from.</doc>
            <type name="Session" c:type="GckSession*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_slot" c:identifier="gck_session_get_slot">
        <doc xml:space="preserve"
             filename="../gck/gck-session.c"
             line="657">Get the PKCS\#11 slot to which this session belongs.</doc>
        <source-position filename="../gck/gck.h" line="848"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../gck/gck-session.c"
               line="663">The slot, which should be unreffed after use.</doc>
          <type name="Slot" c:type="GckSlot*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="659">The session object.</doc>
            <type name="Session" c:type="GckSession*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_state" c:identifier="gck_session_get_state">
        <doc xml:space="preserve"
             filename="../gck/gck-session.c"
             line="718">Get the session state. The state is the various PKCS\#11 CKS_XXX flags.</doc>
        <source-position filename="../gck/gck.h" line="854"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../gck/gck-session.c"
               line="724">the session state</doc>
          <type name="gulong" c:type="gulong"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="720">the session</doc>
            <type name="Session" c:type="GckSession*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="init_pin" c:identifier="gck_session_init_pin" throws="1">
        <doc xml:space="preserve"
             filename="../gck/gck-session.c"
             line="922">Initialize the user's pin on this slot that this session is opened on.
According to the PKCS\#11 standards, the session must be logged in with
the CKU_SO user type.

This call may block for an indefinite period.</doc>
        <source-position filename="../gck/gck.h" line="879"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../gck/gck-session.c"
               line="937">Whether successful or not.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="924">Initialize PIN for this session's slot.</doc>
            <type name="Session" c:type="GckSession*"/>
          </instance-parameter>
          <parameter name="pin"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="925">the user's PIN, or %NULL for
      protected authentication path</doc>
            <array length="1" zero-terminated="0" c:type="const guchar*">
              <type name="guint8" c:type="guchar"/>
            </array>
          </parameter>
          <parameter name="n_pin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="927">the length of the PIN</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="928">Optional cancellation object, or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="init_pin_async" c:identifier="gck_session_init_pin_async">
        <doc xml:space="preserve"
             filename="../gck/gck-session.c"
             line="948">Initialize the user's pin on this slot that this session is opened on.
According to the PKCS\#11 standards, the session must be logged in with
the CKU_SO user type.

This call will return immediately and completes asynchronously.</doc>
        <source-position filename="../gck/gck.h" line="885"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="950">Initialize PIN for this session's slot.</doc>
            <type name="Session" c:type="GckSession*"/>
          </instance-parameter>
          <parameter name="pin"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="951">the user's PIN, or %NULL for protected authentication path</doc>
            <array length="1" zero-terminated="0" c:type="const guchar*">
              <type name="guint8" c:type="guchar"/>
            </array>
          </parameter>
          <parameter name="n_pin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="952">the length of the PIN</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="953">Optional cancellation object, or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="954">Called when the operation completes.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="955">Data to pass to the callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="init_pin_finish"
              c:identifier="gck_session_init_pin_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="../gck/gck-session.c"
             line="976">Get the result of initializing a user's PIN.</doc>
        <source-position filename="../gck/gck.h" line="892"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../gck/gck-session.c"
               line="984">Whether the operation was successful or not.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="978">The session.</doc>
            <type name="Session" c:type="GckSession*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="979">The result passed to the callback.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="login" c:identifier="gck_session_login" throws="1">
        <doc xml:space="preserve"
             filename="../gck/gck-session.c"
             line="1121">Login the user on the session. This call may block for
an indefinite period.</doc>
        <source-position filename="../gck/gck.h" line="917"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../gck/gck-session.c"
               line="1134">Whether successful or not.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="1123">Log in to this session.</doc>
            <type name="Session" c:type="GckSession*"/>
          </instance-parameter>
          <parameter name="user_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="1124">The type of login user.</doc>
            <type name="gulong" c:type="gulong"/>
          </parameter>
          <parameter name="pin"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="1125">the user's PIN, or %NULL for
      protected authentication path</doc>
            <array length="2" zero-terminated="0" c:type="const guchar*">
              <type name="guint8" c:type="guchar"/>
            </array>
          </parameter>
          <parameter name="n_pin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="1127">The length of the PIN.</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="1128">Optional cancellation object, or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="login_async" c:identifier="gck_session_login_async">
        <doc xml:space="preserve"
             filename="../gck/gck-session.c"
             line="1145">Login the user on the session. This call will return
immediately and completes asynchronously.</doc>
        <source-position filename="../gck/gck.h" line="924"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="1147">Log in to this session.</doc>
            <type name="Session" c:type="GckSession*"/>
          </instance-parameter>
          <parameter name="user_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="1148">The type of login user.</doc>
            <type name="gulong" c:type="gulong"/>
          </parameter>
          <parameter name="pin"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="1149">the user's PIN, or %NULL for
      protected authentication path</doc>
            <array length="2" zero-terminated="0" c:type="const guchar*">
              <type name="guint8" c:type="guchar"/>
            </array>
          </parameter>
          <parameter name="n_pin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="1151">The length of the PIN.</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="1152">Optional cancellation object, or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="5">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="1153">Called when the operation completes.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="1154">Data to pass to the callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="login_finish"
              c:identifier="gck_session_login_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="../gck/gck-session.c"
             line="1173">Get the result of a login operation.</doc>
        <source-position filename="../gck/gck.h" line="932"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../gck/gck-session.c"
               line="1181">Whether the operation was successful or not.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="1175">The session logged into.</doc>
            <type name="Session" c:type="GckSession*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="1176">The result passed to the callback.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="login_interactive"
              c:identifier="gck_session_login_interactive"
              throws="1">
        <doc xml:space="preserve"
             filename="../gck/gck-session.c"
             line="1212">Login the user on the session requesting the password interactively
when necessary. This call may block for an indefinite period.</doc>
        <source-position filename="../gck/gck.h" line="936"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../gck/gck-session.c"
               line="1223">Whether successful or not.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="1214">session to use for login</doc>
            <type name="Session" c:type="GckSession*"/>
          </instance-parameter>
          <parameter name="user_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="1215">the type of login user</doc>
            <type name="gulong" c:type="gulong"/>
          </parameter>
          <parameter name="interaction"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="1216">interaction to request PIN when necessary</doc>
            <type name="Gio.TlsInteraction" c:type="GTlsInteraction*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="1217">optional cancellation object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="login_interactive_async"
              c:identifier="gck_session_login_interactive_async">
        <doc xml:space="preserve"
             filename="../gck/gck-session.c"
             line="1247">Login the user on the session prompting for passwords interactively when
necessary. This call will return immediately and completes asynchronously.</doc>
        <source-position filename="../gck/gck.h" line="942"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="1249">session to use for login</doc>
            <type name="Session" c:type="GckSession*"/>
          </instance-parameter>
          <parameter name="user_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="1250">the type of login user</doc>
            <type name="gulong" c:type="gulong"/>
          </parameter>
          <parameter name="interaction"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="1251">interaction to request PIN when necessary</doc>
            <type name="Gio.TlsInteraction" c:type="GTlsInteraction*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="1252">optional cancellation object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="1253">called when the operation completes</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="1254">data to pass to the callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="login_interactive_finish"
              c:identifier="gck_session_login_interactive_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="../gck/gck-session.c"
             line="1283">Get the result of a login operation.</doc>
        <source-position filename="../gck/gck.h" line="949"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../gck/gck-session.c"
               line="1291">Whether the operation was successful or not.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="1285">the session logged into</doc>
            <type name="Session" c:type="GckSession*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="1286">the result passed to the callback</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="logout" c:identifier="gck_session_logout" throws="1">
        <doc xml:space="preserve"
             filename="../gck/gck-session.c"
             line="1311">Log out of the session. This call may block for an indefinite period.</doc>
        <source-position filename="../gck/gck.h" line="953"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../gck/gck-session.c"
               line="1319">Whether the logout was successful or not.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="1313">Logout of this session.</doc>
            <type name="Session" c:type="GckSession*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="1314">Optional cancellation object, or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="logout_async" c:identifier="gck_session_logout_async">
        <doc xml:space="preserve"
             filename="../gck/gck-session.c"
             line="1328">Log out of the session. This call returns immediately and completes
asynchronously.</doc>
        <source-position filename="../gck/gck.h" line="957"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="1330">Logout of this session.</doc>
            <type name="Session" c:type="GckSession*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="1331">Optional cancellation object, or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="1332">Called when the operation completes.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="1333">Data to pass to the callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="logout_finish"
              c:identifier="gck_session_logout_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="../gck/gck-session.c"
             line="1346">Get the result of logging out of a session.</doc>
        <source-position filename="../gck/gck.h" line="962"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../gck/gck-session.c"
               line="1354">Whether the logout was successful or not.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="1348">Logout of this session.</doc>
            <type name="Session" c:type="GckSession*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="1349">The result passed to the callback.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_interaction"
              c:identifier="gck_session_set_interaction">
        <doc xml:space="preserve"
             filename="../gck/gck-session.c"
             line="790">Set the interaction object on this session, which is used to prompt for
pins and the like.</doc>
        <source-position filename="../gck/gck.h" line="860"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="792">the session</doc>
            <type name="Session" c:type="GckSession*"/>
          </instance-parameter>
          <parameter name="interaction"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="793">the interaction or %NULL</doc>
            <type name="Gio.TlsInteraction" c:type="GTlsInteraction*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_pin" c:identifier="gck_session_set_pin" throws="1">
        <doc xml:space="preserve"
             filename="../gck/gck-session.c"
             line="1020">Change the user's pin on this slot that this session is opened on.

This call may block for an indefinite period.</doc>
        <source-position filename="../gck/gck.h" line="896"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../gck/gck-session.c"
               line="1036">Whether successful or not.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="1022">Change the PIN for this session's slot.</doc>
            <type name="Session" c:type="GckSession*"/>
          </instance-parameter>
          <parameter name="old_pin"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="1023">the user's old PIN, or %NULL
          for protected authentication path.</doc>
            <array length="1" zero-terminated="0" c:type="const guchar*">
              <type name="guint8" c:type="guchar"/>
            </array>
          </parameter>
          <parameter name="n_old_pin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="1025">The length of the PIN.</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
          <parameter name="new_pin"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="1026">the user's new PIN, or %NULL
          for protected authentication path</doc>
            <array length="3" zero-terminated="0" c:type="const guchar*">
              <type name="guint8" c:type="guchar"/>
            </array>
          </parameter>
          <parameter name="n_new_pin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="1028">The length of the PIN.</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="1029">Optional cancellation object, or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_pin_async" c:identifier="gck_session_set_pin_async">
        <doc xml:space="preserve"
             filename="../gck/gck-session.c"
             line="1047">Change the user's pin on this slot that this session is opened on.

This call will return immediately and completes asynchronously.</doc>
        <source-position filename="../gck/gck.h" line="904"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="1049">Change the PIN for this session's slot.</doc>
            <type name="Session" c:type="GckSession*"/>
          </instance-parameter>
          <parameter name="old_pin"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="1050">the user's old PIN, or %NULL
          for protected authentication path</doc>
            <array length="3" zero-terminated="0" c:type="const guchar*">
              <type name="guint8" c:type="guchar"/>
            </array>
          </parameter>
          <parameter name="n_old_pin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="1052">the length of the old PIN</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
          <parameter name="new_pin"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="1053">the user's new PIN, or %NULL
          for protected authentication path</doc>
            <array length="3" zero-terminated="0" c:type="const guchar*">
              <type name="guint8" c:type="guchar"/>
            </array>
          </parameter>
          <parameter name="n_new_pin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="1055">the length of the new PIN</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="1056">Optional cancellation object, or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="1057">Called when the operation completes.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="1058">Data to pass to the callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_pin_finish"
              c:identifier="gck_session_set_pin_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="../gck/gck-session.c"
             line="1079">Get the result of changing a user's PIN.</doc>
        <source-position filename="../gck/gck.h" line="913"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../gck/gck-session.c"
               line="1087">Whether the operation was successful or not.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="1081">The session.</doc>
            <type name="Session" c:type="GckSession*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="1082">The result passed to the callback.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="sign" c:identifier="gck_session_sign" throws="1">
        <doc xml:space="preserve"
             filename="../gck/gck-session.c"
             line="2976">Sign data in a mechanism specific manner. This call may
block for an indefinite period.</doc>
        <source-position filename="../gck/gck.h" line="1112"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../gck/gck-session.c"
               line="2990">the data that was signed,
         or %NULL if an error occured</doc>
          <array length="4" zero-terminated="0" c:type="guchar*">
            <type name="guint8" c:type="guchar"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="2978">The session.</doc>
            <type name="Session" c:type="GckSession*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="2979">The key to sign with.</doc>
            <type name="Object" c:type="GckObject*"/>
          </parameter>
          <parameter name="mech_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="2980">The mechanism type to use for signing.</doc>
            <type name="gulong" c:type="gulong"/>
          </parameter>
          <parameter name="input" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="2981">data to sign</doc>
            <array length="3" zero-terminated="0" c:type="const guchar*">
              <type name="guint8" c:type="guchar"/>
            </array>
          </parameter>
          <parameter name="n_input" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="2982">length of the data to sign</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
          <parameter name="n_result"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="2983">location to store the length of the result data</doc>
            <type name="gsize" c:type="gsize*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="2984">Optional cancellation object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="sign_async" c:identifier="gck_session_sign_async">
        <doc xml:space="preserve"
             filename="../gck/gck-session.c"
             line="3038">Sign data in a mechanism specific manner. This call will
return immediately and complete asynchronously.</doc>
        <source-position filename="../gck/gck.h" line="1130"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="3040">The session.</doc>
            <type name="Session" c:type="GckSession*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="3041">The key to sign with.</doc>
            <type name="Object" c:type="GckObject*"/>
          </parameter>
          <parameter name="mechanism" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="3042">The mechanism type and parameters to use for signing.</doc>
            <type name="Mechanism" c:type="GckMechanism*"/>
          </parameter>
          <parameter name="input" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="3043">data to sign</doc>
            <array length="3" zero-terminated="0" c:type="const guchar*">
              <type name="guint8" c:type="guchar"/>
            </array>
          </parameter>
          <parameter name="n_input" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="3044">length of the data to sign</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="3045">A GCancellable which can be used to cancel the operation.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="3046">Called when the operation completes.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="3047">A pointer to pass to the callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="sign_finish"
              c:identifier="gck_session_sign_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="../gck/gck-session.c"
             line="3071">Get the result of an signing operation.</doc>
        <source-position filename="../gck/gck.h" line="1139"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../gck/gck-session.c"
               line="3080">the data that was signed,
         or %NULL if an error occurred</doc>
          <array length="1" zero-terminated="0" c:type="guchar*">
            <type name="guint8" c:type="guchar"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="3073">The session.</doc>
            <type name="Session" c:type="GckSession*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="3074">The result object passed to the callback.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
          <parameter name="n_result"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="3075">A location to store the length of the result data.</doc>
            <type name="gsize" c:type="gsize*"/>
          </parameter>
        </parameters>
      </method>
      <method name="sign_full" c:identifier="gck_session_sign_full" throws="1">
        <doc xml:space="preserve"
             filename="../gck/gck-session.c"
             line="3001">Sign data in a mechanism specific manner. This call may
block for an indefinite period.</doc>
        <source-position filename="../gck/gck.h" line="1121"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../gck/gck-session.c"
               line="3015">The data that was signed, or %NULL if an error occured.</doc>
          <type name="guint8" c:type="guchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="3003">The session.</doc>
            <type name="Session" c:type="GckSession*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="3004">The key to sign with.</doc>
            <type name="Object" c:type="GckObject*"/>
          </parameter>
          <parameter name="mechanism" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="3005">The mechanism type and parameters to use for signing.</doc>
            <type name="Mechanism" c:type="GckMechanism*"/>
          </parameter>
          <parameter name="input" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="3006">data to sign</doc>
            <array length="3" zero-terminated="0" c:type="const guchar*">
              <type name="guint8" c:type="guchar"/>
            </array>
          </parameter>
          <parameter name="n_input" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="3007">length of the data to sign</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
          <parameter name="n_result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="3008">location to store the length of the result data</doc>
            <type name="gsize" c:type="gsize*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="3009">A GCancellable which can be used to cancel the operation.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="unwrap_key"
              c:identifier="gck_session_unwrap_key"
              throws="1">
        <doc xml:space="preserve"
             filename="../gck/gck-session.c"
             line="2232">Unwrap a key from a byte stream. This call may block for an
indefinite period.

If the @attrs #GckAttributes is floating, it is consumed.</doc>
        <source-position filename="../gck/gck.h" line="1208"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../gck/gck-session.c"
               line="2248">the new unwrapped key or %NULL if the
         operation failed</doc>
          <type name="Object" c:type="GckObject*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="2234">The session to use.</doc>
            <type name="Session" c:type="GckSession*"/>
          </instance-parameter>
          <parameter name="wrapper" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="2235">The key to use for unwrapping.</doc>
            <type name="Object" c:type="GckObject*"/>
          </parameter>
          <parameter name="mech_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="2236">The mechanism to use for unwrapping.</doc>
            <type name="gulong" c:type="gulong"/>
          </parameter>
          <parameter name="input" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="2237">the wrapped data as a byte stream</doc>
            <array length="3" zero-terminated="0" c:type="const guchar*">
              <type name="guint8" c:type="guchar"/>
            </array>
          </parameter>
          <parameter name="n_input" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="2238">The length of the wrapped data.</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
          <parameter name="attrs" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="2239">Additional attributes for the unwrapped key.</doc>
            <type name="Attributes" c:type="GckAttributes*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="2240">Optional cancellation object, or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="unwrap_key_async"
              c:identifier="gck_session_unwrap_key_async">
        <doc xml:space="preserve"
             filename="../gck/gck-session.c"
             line="2320">Unwrap a key from a byte stream. This call will
return immediately and complete asynchronously.

If the @attrs #GckAttributes is floating, it is consumed.</doc>
        <source-position filename="../gck/gck.h" line="1226"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="2322">The session to use.</doc>
            <type name="Session" c:type="GckSession*"/>
          </instance-parameter>
          <parameter name="wrapper" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="2323">The key to use for unwrapping.</doc>
            <type name="Object" c:type="GckObject*"/>
          </parameter>
          <parameter name="mechanism" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="2324">The mechanism to use for unwrapping.</doc>
            <type name="Mechanism" c:type="GckMechanism*"/>
          </parameter>
          <parameter name="input" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="2325">the wrapped data as a byte stream</doc>
            <array length="3" zero-terminated="0" c:type="const guchar*">
              <type name="guint8" c:type="guchar"/>
            </array>
          </parameter>
          <parameter name="n_input" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="2326">The length of the wrapped data.</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
          <parameter name="attrs" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="2327">Additional attributes for the unwrapped key.</doc>
            <type name="Attributes" c:type="GckAttributes*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="2328">Optional cancellation object or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="7">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="2329">Called when the operation completes.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="2330">Data to pass to the callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="unwrap_key_finish"
              c:identifier="gck_session_unwrap_key_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="../gck/gck-session.c"
             line="2368">Get the result of a unwrap key operation.</doc>
        <source-position filename="../gck/gck.h" line="1236"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../gck/gck-session.c"
               line="2376">the new unwrapped key or %NULL if the operation
         failed.</doc>
          <type name="Object" c:type="GckObject*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="2370">The session to use.</doc>
            <type name="Session" c:type="GckSession*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="2371">The async result passed to the callback.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="unwrap_key_full"
              c:identifier="gck_session_unwrap_key_full"
              throws="1">
        <doc xml:space="preserve"
             filename="../gck/gck-session.c"
             line="2265">Unwrap a key from a byte stream. This call may block for an
indefinite period.

If the @attrs #GckAttributes is floating, it is consumed.</doc>
        <source-position filename="../gck/gck.h" line="1217"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../gck/gck-session.c"
               line="2281">the new unwrapped key or %NULL if the operation
         failed</doc>
          <type name="Object" c:type="GckObject*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="2267">The session to use.</doc>
            <type name="Session" c:type="GckSession*"/>
          </instance-parameter>
          <parameter name="wrapper" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="2268">The key to use for unwrapping.</doc>
            <type name="Object" c:type="GckObject*"/>
          </parameter>
          <parameter name="mechanism" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="2269">The mechanism to use for unwrapping.</doc>
            <type name="Mechanism" c:type="GckMechanism*"/>
          </parameter>
          <parameter name="input" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="2270">the wrapped data as a byte stream</doc>
            <array length="3" zero-terminated="0" c:type="const guchar*">
              <type name="guint8" c:type="guchar"/>
            </array>
          </parameter>
          <parameter name="n_input" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="2271">The length of the wrapped data.</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
          <parameter name="attrs" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="2272">Additional attributes for the unwrapped key.</doc>
            <type name="Attributes" c:type="GckAttributes*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="2273">Optional cancellation object, or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="verify" c:identifier="gck_session_verify" throws="1">
        <doc xml:space="preserve"
             filename="../gck/gck-session.c"
             line="3153">Verify data in a mechanism specific manner. This call may
block for an indefinite period.</doc>
        <source-position filename="../gck/gck.h" line="1144"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../gck/gck-session.c"
               line="3168">%TRUE if the data verified correctly, otherwise a failure or error occurred.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="3155">The session.</doc>
            <type name="Session" c:type="GckSession*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="3156">The key to verify with.</doc>
            <type name="Object" c:type="GckObject*"/>
          </parameter>
          <parameter name="mech_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="3157">The mechanism type to use for verifying.</doc>
            <type name="gulong" c:type="gulong"/>
          </parameter>
          <parameter name="input" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="3158">data to verify</doc>
            <array length="3" zero-terminated="0" c:type="const guchar*">
              <type name="guint8" c:type="guchar"/>
            </array>
          </parameter>
          <parameter name="n_input" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="3159">length of the data to verify</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
          <parameter name="signature" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="3160">the signature</doc>
            <array length="5" zero-terminated="0" c:type="const guchar*">
              <type name="guint8" c:type="guchar"/>
            </array>
          </parameter>
          <parameter name="n_signature" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="3161">length of the signature</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="3162">Optional cancellation object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="verify_async" c:identifier="gck_session_verify_async">
        <doc xml:space="preserve"
             filename="../gck/gck-session.c"
             line="3230">Verify data in a mechanism specific manner. This call returns
immediately and completes asynchronously.</doc>
        <source-position filename="../gck/gck.h" line="1164"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="3232">The session.</doc>
            <type name="Session" c:type="GckSession*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="3233">The key to verify with.</doc>
            <type name="Object" c:type="GckObject*"/>
          </parameter>
          <parameter name="mechanism" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="3234">The mechanism type and parameters to use for signing.</doc>
            <type name="Mechanism" c:type="GckMechanism*"/>
          </parameter>
          <parameter name="input" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="3235">data to verify</doc>
            <array length="3" zero-terminated="0" c:type="const guchar*">
              <type name="guint8" c:type="guchar"/>
            </array>
          </parameter>
          <parameter name="n_input" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="3236">the length of the data to verify</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
          <parameter name="signature" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="3237">the signature</doc>
            <array length="5" zero-terminated="0" c:type="const guchar*">
              <type name="guint8" c:type="guchar"/>
            </array>
          </parameter>
          <parameter name="n_signature" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="3238">the length of the signature</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="3239">A GCancellable which can be used to cancel the operation.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="8">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="3240">Called when the operation completes.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="3241">A pointer to pass to the callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="verify_finish"
              c:identifier="gck_session_verify_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="../gck/gck-session.c"
             line="3274">Get the result of an verify operation.</doc>
        <source-position filename="../gck/gck.h" line="1175"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../gck/gck-session.c"
               line="3282">%TRUE if the data verified correctly, otherwise a failure or error occurred.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="3276">The session.</doc>
            <type name="Session" c:type="GckSession*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="3277">The result object passed to the callback.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="verify_full"
              c:identifier="gck_session_verify_full"
              throws="1">
        <doc xml:space="preserve"
             filename="../gck/gck-session.c"
             line="3179">Verify data in a mechanism specific manner. This call may
block for an indefinite period.</doc>
        <source-position filename="../gck/gck.h" line="1154"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../gck/gck-session.c"
               line="3194">%TRUE if the data verified correctly, otherwise a failure or error occurred.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="3181">The session.</doc>
            <type name="Session" c:type="GckSession*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="3182">The key to verify with.</doc>
            <type name="Object" c:type="GckObject*"/>
          </parameter>
          <parameter name="mechanism" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="3183">The mechanism type and parameters to use for signing.</doc>
            <type name="Mechanism" c:type="GckMechanism*"/>
          </parameter>
          <parameter name="input" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="3184">data to verify</doc>
            <array length="3" zero-terminated="0" c:type="const guchar*">
              <type name="guint8" c:type="guchar"/>
            </array>
          </parameter>
          <parameter name="n_input" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="3185">the length of the data to verify</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
          <parameter name="signature" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="3186">the signature</doc>
            <array length="5" zero-terminated="0" c:type="const guchar*">
              <type name="guint8" c:type="guchar"/>
            </array>
          </parameter>
          <parameter name="n_signature" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="3187">length of the signature</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="3188">A GCancellable which can be used to cancel the operation.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="wrap_key" c:identifier="gck_session_wrap_key" throws="1">
        <doc xml:space="preserve"
             filename="../gck/gck-session.c"
             line="2051">Wrap a key into a byte stream. This call may block for an
indefinite period.</doc>
        <source-position filename="../gck/gck.h" line="1179"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../gck/gck-session.c"
               line="2064">the wrapped data or %NULL
         if the operation failed</doc>
          <array length="3" zero-terminated="0" c:type="guchar*">
            <type name="guint8" c:type="guchar"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="2053">The session to use.</doc>
            <type name="Session" c:type="GckSession*"/>
          </instance-parameter>
          <parameter name="wrapper" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="2054">The key to use for wrapping.</doc>
            <type name="Object" c:type="GckObject*"/>
          </parameter>
          <parameter name="mech_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="2055">The mechanism type to use for wrapping.</doc>
            <type name="gulong" c:type="gulong"/>
          </parameter>
          <parameter name="wrapped" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="2056">The key to wrap.</doc>
            <type name="Object" c:type="GckObject*"/>
          </parameter>
          <parameter name="n_result"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="2057">A location in which to return the length of the wrapped data.</doc>
            <type name="gsize" c:type="gsize*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="2058">A #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="wrap_key_async" c:identifier="gck_session_wrap_key_async">
        <doc xml:space="preserve"
             filename="../gck/gck-session.c"
             line="2122">Wrap a key into a byte stream. This call will
return immediately and complete asynchronously.</doc>
        <source-position filename="../gck/gck.h" line="1195"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="2124">The session to use.</doc>
            <type name="Session" c:type="GckSession*"/>
          </instance-parameter>
          <parameter name="wrapper" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="2125">The key to use for wrapping.</doc>
            <type name="Object" c:type="GckObject*"/>
          </parameter>
          <parameter name="mechanism" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="2126">The mechanism to use for wrapping.</doc>
            <type name="Mechanism" c:type="GckMechanism*"/>
          </parameter>
          <parameter name="wrapped" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="2127">The key to wrap.</doc>
            <type name="Object" c:type="GckObject*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="2128">Optional cancellation object or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="5">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="2129">Called when the operation completes.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="2130">Data to pass to the callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="wrap_key_finish"
              c:identifier="gck_session_wrap_key_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="../gck/gck-session.c"
             line="2159">Get the result of a wrap key operation.</doc>
        <source-position filename="../gck/gck.h" line="1203"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../gck/gck-session.c"
               line="2168">the wrapped data or %NULL
         if the operation failed</doc>
          <array length="1" zero-terminated="0" c:type="guchar*">
            <type name="guint8" c:type="guchar"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="2161">The session to use.</doc>
            <type name="Session" c:type="GckSession*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="2162">The async result passed to the callback.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
          <parameter name="n_result"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="2163">A location in which to return the length of the wrapped data.</doc>
            <type name="gsize" c:type="gsize*"/>
          </parameter>
        </parameters>
      </method>
      <method name="wrap_key_full"
              c:identifier="gck_session_wrap_key_full"
              throws="1">
        <doc xml:space="preserve"
             filename="../gck/gck-session.c"
             line="2075">Wrap a key into a byte stream. This call may block for an
indefinite period.</doc>
        <source-position filename="../gck/gck.h" line="1187"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../gck/gck-session.c"
               line="2088">the wrapped data or %NULL
         if the operation failed</doc>
          <array length="3" zero-terminated="0" c:type="guchar*">
            <type name="guint8" c:type="guchar"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="2077">The session to use.</doc>
            <type name="Session" c:type="GckSession*"/>
          </instance-parameter>
          <parameter name="wrapper" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="2078">The key to use for wrapping.</doc>
            <type name="Object" c:type="GckObject*"/>
          </parameter>
          <parameter name="mechanism" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="2079">The mechanism to use for wrapping.</doc>
            <type name="Mechanism" c:type="GckMechanism*"/>
          </parameter>
          <parameter name="wrapped" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="2080">The key to wrap.</doc>
            <type name="Object" c:type="GckObject*"/>
          </parameter>
          <parameter name="n_result"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="2081">A location in which to return the length of the wrapped data.</doc>
            <type name="gsize" c:type="gsize*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="2082">Optional cancellation object, or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <property name="app-data"
                readable="0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../gck/gck-session.c"
             line="345">Raw PKCS\#11 application data used to open the PKCS\#11 session.</doc>
        <type name="gpointer" c:type="gpointer"/>
      </property>
      <property name="handle"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../gck/gck-session.c"
             line="293">The raw CK_SESSION_HANDLE handle of this session.</doc>
        <type name="gulong" c:type="gulong"/>
      </property>
      <property name="interaction" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../gck/gck-session.c"
             line="323">Interaction object used to ask the user for pins when opening
sessions. Used if the session_options of the enumerator have
%GCK_SESSION_LOGIN_USER</doc>
        <type name="Gio.TlsInteraction"/>
      </property>
      <property name="module" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../gck/gck-session.c"
             line="283">The GckModule that this session is opened on.</doc>
        <type name="Module"/>
      </property>
      <property name="opening-flags"
                readable="0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../gck/gck-session.c"
             line="335">Raw PKCS\#11 flags used to open the PKCS\#11 session.</doc>
        <type name="gulong" c:type="gulong"/>
      </property>
      <property name="options"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../gck/gck-session.c"
             line="313">The options this session was opened with.</doc>
        <type name="SessionOptions"/>
      </property>
      <property name="slot"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../gck/gck-session.c"
             line="303">The GckSlot this session is opened on.</doc>
        <type name="Slot"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="pv" readable="0" private="1">
        <type name="SessionPrivate" c:type="GckSessionPrivate*"/>
      </field>
      <field name="reserved" readable="0" private="1">
        <array zero-terminated="0" fixed-size="4">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
      <glib:signal name="discard-handle" when="last">
        <doc xml:space="preserve"
             filename="../gck/gck-session.c"
             line="354">When a GckSession is being disposed of it emits this signal to allow
a session pool to pick up the handle and keep it around.

If no signal handler claims the handle, then it is closed.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../gck/gck-session.c"
               line="364">Whether or not this handle was claimed.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="handle" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="357">The handle being discarded.</doc>
            <type name="gulong" c:type="gulong"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="SessionClass"
            c:type="GckSessionClass"
            glib:is-gtype-struct-for="Session">
      <source-position filename="../gck/gck.h" line="838"/>
      <field name="parent">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="discard_handle" introspectable="0">
        <callback name="discard_handle" introspectable="0">
          <source-position filename="../gck/gck.h" line="834"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="session" transfer-ownership="none">
              <type name="Session" c:type="GckSession*"/>
            </parameter>
            <parameter name="handle" transfer-ownership="none">
              <type c:type="CK_SESSION_HANDLE"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="reserved" readable="0" private="1">
        <array zero-terminated="0" fixed-size="8">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <record name="SessionInfo"
            c:type="GckSessionInfo"
            glib:type-name="GckSessionInfo"
            glib:get-type="gck_session_info_get_type"
            c:symbol-prefix="session_info">
      <doc xml:space="preserve"
           filename="../gck/gck-session.c"
           line="543">Information about the session. This is analogous to a CK_SESSION_INFO structure.

When done with this structure, release it using gck_session_info_free().</doc>
      <source-position filename="../gck/gck.h" line="801"/>
      <field name="slot_id" writable="1">
        <doc xml:space="preserve"
             filename="../gck/gck-session.c"
             line="545">The handle of the PKCS11 slot that this session is opened on.</doc>
        <type name="gulong" c:type="gulong"/>
      </field>
      <field name="state" writable="1">
        <doc xml:space="preserve"
             filename="../gck/gck-session.c"
             line="546">The user login state of the session.</doc>
        <type name="gulong" c:type="gulong"/>
      </field>
      <field name="flags" writable="1">
        <doc xml:space="preserve"
             filename="../gck/gck-session.c"
             line="547">Various PKCS11 flags.</doc>
        <type name="gulong" c:type="gulong"/>
      </field>
      <field name="device_error" writable="1">
        <doc xml:space="preserve"
             filename="../gck/gck-session.c"
             line="548">The last device error that occurred from an operation on this session.</doc>
        <type name="gulong" c:type="gulong"/>
      </field>
      <method name="copy" c:identifier="gck_session_info_copy">
        <doc xml:space="preserve"
             filename="../gck/gck-session.c"
             line="569">Make a new copy of a session info structure.</doc>
        <source-position filename="../gck/gck.h" line="807"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../gck/gck-session.c"
               line="575">a new copy of the session info</doc>
          <type name="SessionInfo" c:type="GckSessionInfo*"/>
        </return-value>
        <parameters>
          <instance-parameter name="session_info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="571">a session info structure</doc>
            <type name="SessionInfo" c:type="GckSessionInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="free" c:identifier="gck_session_info_free">
        <doc xml:space="preserve"
             filename="../gck/gck-session.c"
             line="583">Free the GckSessionInfo structure and all associated memory.</doc>
        <source-position filename="../gck/gck.h" line="809"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="session_info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-session.c"
                 line="585">Session info to free.</doc>
            <type name="SessionInfo" c:type="GckSessionInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
    </record>
    <bitfield name="SessionOptions"
              glib:type-name="GckSessionOptions"
              glib:get-type="gck_session_options_get_type"
              c:type="GckSessionOptions">
      <doc xml:space="preserve"
           filename="../gck/gck-session.c"
           line="49">Options for creating sessions.</doc>
      <member name="read_only"
              value="0"
              c:identifier="GCK_SESSION_READ_ONLY"
              glib:nick="read-only">
        <doc xml:space="preserve"
             filename="../gck/gck-session.c"
             line="51">Open session as read only</doc>
      </member>
      <member name="read_write"
              value="2"
              c:identifier="GCK_SESSION_READ_WRITE"
              glib:nick="read-write">
        <doc xml:space="preserve"
             filename="../gck/gck-session.c"
             line="52">Open sessions as read/write</doc>
      </member>
      <member name="login_user"
              value="4"
              c:identifier="GCK_SESSION_LOGIN_USER"
              glib:nick="login-user">
        <doc xml:space="preserve"
             filename="../gck/gck-session.c"
             line="53">Login as user on new sessions</doc>
      </member>
      <member name="authenticate"
              value="8"
              c:identifier="GCK_SESSION_AUTHENTICATE"
              glib:nick="authenticate">
        <doc xml:space="preserve"
             filename="../gck/gck-session.c"
             line="54">Authenticate as necessary</doc>
      </member>
    </bitfield>
    <record name="SessionPrivate" c:type="GckSessionPrivate" disguised="1">
      <source-position filename="../gck/gck.h" line="821"/>
    </record>
    <class name="Slot"
           c:symbol-prefix="slot"
           c:type="GckSlot"
           parent="GObject.Object"
           glib:type-name="GckSlot"
           glib:get-type="gck_slot_get_type"
           glib:type-struct="SlotClass">
      <doc xml:space="preserve"
           filename="../gck/gck-slot.c"
           line="42">Represents a PKCS11 slot.</doc>
      <source-position filename="../gck/gck.h" line="717"/>
      <function name="from_handle" c:identifier="gck_slot_from_handle">
        <doc xml:space="preserve"
             filename="../gck/gck-slot.c"
             line="503">Create a new GckSlot object for a raw PKCS\#11 handle.</doc>
        <source-position filename="../gck/gck.h" line="729"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../gck/gck-slot.c"
               line="510">The new GckSlot object.</doc>
          <type name="Slot" c:type="GckSlot*"/>
        </return-value>
        <parameters>
          <parameter name="module" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-slot.c"
                 line="505">The module that this slot is on.</doc>
            <type name="Module" c:type="GckModule*"/>
          </parameter>
          <parameter name="slot_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-slot.c"
                 line="506">The raw PKCS\#11 handle or slot id of this slot.</doc>
            <type name="gulong" c:type="gulong"/>
          </parameter>
        </parameters>
      </function>
      <method name="enumerate_objects"
              c:identifier="gck_slot_enumerate_objects">
        <doc xml:space="preserve"
             filename="../gck/gck-slot.c"
             line="887">Setup an enumerator for listing matching objects on the slot.

If the @match #GckAttributes is floating, it is consumed.

This call will not block but will return an enumerator immediately.</doc>
        <source-position filename="../gck/gck.h" line="780"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../gck/gck-slot.c"
               line="899">a new enumerator</doc>
          <type name="Enumerator" c:type="GckEnumerator*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-slot.c"
                 line="889">a #GckSlot to enumerate objects on</doc>
            <type name="Slot" c:type="GckSlot*"/>
          </instance-parameter>
          <parameter name="match" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-slot.c"
                 line="890">attributes that the objects must match, or empty for all objects</doc>
            <type name="Attributes" c:type="GckAttributes*"/>
          </parameter>
          <parameter name="options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-slot.c"
                 line="891">options for opening a session</doc>
            <type name="SessionOptions" c:type="GckSessionOptions"/>
          </parameter>
        </parameters>
      </method>
      <method name="equal" c:identifier="gck_slot_equal">
        <doc xml:space="preserve"
             filename="../gck/gck-slot.c"
             line="451">Checks equality of two slots. Two GckSlot objects can point to the same
underlying PKCS\#11 slot.</doc>
        <source-position filename="../gck/gck.h" line="721"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../gck/gck-slot.c"
               line="459">%TRUE if slot1 and slot2 are equal.
              %FALSE if either is not a GckSlot.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="slot1" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-slot.c"
                 line="453">a pointer to the first #GckSlot</doc>
            <type name="Slot" c:type="gconstpointer"/>
          </instance-parameter>
          <parameter name="slot2" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-slot.c"
                 line="454">a pointer to the second #GckSlot</doc>
            <type name="Slot" c:type="gconstpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_handle" c:identifier="gck_slot_get_handle">
        <doc xml:space="preserve"
             filename="../gck/gck-slot.c"
             line="522">Get the raw PKCS\#11 handle of a slot.</doc>
        <source-position filename="../gck/gck.h" line="734"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../gck/gck-slot.c"
               line="528">the raw CK_SLOT_ID handle</doc>
          <type name="gulong" c:type="gulong"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-slot.c"
                 line="524">The slot to get the handle of.</doc>
            <type name="Slot" c:type="GckSlot*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_info" c:identifier="gck_slot_get_info">
        <doc xml:space="preserve"
             filename="../gck/gck-slot.c"
             line="554">Get the information for this slot.</doc>
        <source-position filename="../gck/gck.h" line="736"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../gck/gck-slot.c"
               line="560">the slot information, when done, use gck_slot_info_free()
         to release it.</doc>
          <type name="SlotInfo" c:type="GckSlotInfo*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-slot.c"
                 line="556">The slot to get info for.</doc>
            <type name="Slot" c:type="GckSlot*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_mechanism_info"
              c:identifier="gck_slot_get_mechanism_info">
        <doc xml:space="preserve"
             filename="../gck/gck-slot.c"
             line="801">Get information for the specified mechanism.</doc>
        <source-position filename="../gck/gck.h" line="742"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../gck/gck-slot.c"
               line="808">the mechanism information, or %NULL if failed; use
         gck_mechanism_info_free() when done with it</doc>
          <type name="MechanismInfo" c:type="GckMechanismInfo*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-slot.c"
                 line="803">The slot to get mechanism info from.</doc>
            <type name="Slot" c:type="GckSlot*"/>
          </instance-parameter>
          <parameter name="mech_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-slot.c"
                 line="804">The mechanisms type to get info for.</doc>
            <type name="gulong" c:type="gulong"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_mechanisms" c:identifier="gck_slot_get_mechanisms">
        <doc xml:space="preserve"
             filename="../gck/gck-slot.c"
             line="745">Get the available mechanisms for this slot.</doc>
        <source-position filename="../gck/gck.h" line="740"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../gck/gck-slot.c"
               line="751">a list of the mechanisms
         for this slot, which should be freed with g_array_free ()</doc>
          <array name="GLib.Array" c:type="GArray*">
            <type name="gulong"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-slot.c"
                 line="747">The slot to get mechanisms for.</doc>
            <type name="Slot" c:type="GckSlot*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_module" c:identifier="gck_slot_get_module">
        <doc xml:space="preserve"
             filename="../gck/gck-slot.c"
             line="537">Get the module that this slot is on.</doc>
        <source-position filename="../gck/gck.h" line="732"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../gck/gck-slot.c"
               line="543">The module, you must unreference this after
         you're done with it.</doc>
          <type name="Module" c:type="GckModule*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-slot.c"
                 line="539">The slot to get the module for.</doc>
            <type name="Slot" c:type="GckSlot*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_token_info" c:identifier="gck_slot_get_token_info">
        <doc xml:space="preserve"
             filename="../gck/gck-slot.c"
             line="706">Get the token information for this slot.</doc>
        <source-position filename="../gck/gck.h" line="738"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../gck/gck-slot.c"
               line="712">the token information; when done, use gck_token_info_free()
         to release it</doc>
          <type name="TokenInfo" c:type="GckTokenInfo*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-slot.c"
                 line="708">The slot to get info for.</doc>
            <type name="Slot" c:type="GckSlot*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="has_flags" c:identifier="gck_slot_has_flags">
        <doc xml:space="preserve"
             filename="../gck/gck-slot.c"
             line="848">Check if the PKCS11 slot has the given flags.</doc>
        <source-position filename="../gck/gck.h" line="745"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../gck/gck-slot.c"
               line="855">Whether one or more flags exist.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-slot.c"
                 line="850">The GckSlot object.</doc>
            <type name="Slot" c:type="GckSlot*"/>
          </instance-parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-slot.c"
                 line="851">The flags to check.</doc>
            <type name="gulong" c:type="gulong"/>
          </parameter>
        </parameters>
      </method>
      <method name="hash" c:identifier="gck_slot_hash">
        <doc xml:space="preserve"
             filename="../gck/gck-slot.c"
             line="479">Create a hash value for the GckSlot.

This function is intended for easily hashing a GckSlot to add to
a GHashTable or similar data structure.</doc>
        <source-position filename="../gck/gck.h" line="724"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../gck/gck-slot.c"
               line="488">An integer that can be used as a hash value, or 0 if invalid.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="slot" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-slot.c"
                 line="481">a pointer to a #GckSlot</doc>
            <type name="Slot" c:type="gconstpointer"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="match" c:identifier="gck_slot_match">
        <doc xml:space="preserve"
             filename="../gck/gck-slot.c"
             line="1122">Check whether the PKCS\#11 URI matches the slot</doc>
        <source-position filename="../gck/gck.h" line="726"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../gck/gck-slot.c"
               line="1129">whether the URI matches or not</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-slot.c"
                 line="1124">the slot to match</doc>
            <type name="Slot" c:type="GckSlot*"/>
          </instance-parameter>
          <parameter name="uri" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-slot.c"
                 line="1125">the uri to match against the slot</doc>
            <type name="UriData" c:type="GckUriData*"/>
          </parameter>
        </parameters>
      </method>
      <method name="open_session"
              c:identifier="gck_slot_open_session"
              throws="1">
        <doc xml:space="preserve"
             filename="../gck/gck-slot.c"
             line="949">Open a session on the slot. If the 'auto reuse' setting is set,
then this may be a recycled session with the same flags.

This call may block for an indefinite period.</doc>
        <source-position filename="../gck/gck.h" line="748"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../gck/gck-slot.c"
               line="961">a new session or %NULL if an error occurs</doc>
          <type name="Session" c:type="GckSession*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-slot.c"
                 line="951">The slot ot open a session on.</doc>
            <type name="Slot" c:type="GckSlot*"/>
          </instance-parameter>
          <parameter name="options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-slot.c"
                 line="952">The #GckSessionOptions to open a session with.</doc>
            <type name="SessionOptions" c:type="GckSessionOptions"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../gck/gck-slot.c"
                 line="953">An optional cancellation object, or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="open_session_async"
              c:identifier="gck_slot_open_session_async">
        <doc xml:space="preserve"
             filename="../gck/gck-slot.c"
             line="1006">Open a session on the slot. If the 'auto reuse' setting is set,
then this may be a recycled session with the same flags.

This call will return immediately and complete asynchronously.</doc>
        <source-position filename="../gck/gck.h" line="761"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-slot.c"
                 line="1008">The slot to open a session on.</doc>
            <type name="Slot" c:type="GckSlot*"/>
          </instance-parameter>
          <parameter name="options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-slot.c"
                 line="1009">The options to open the new session with.</doc>
            <type name="SessionOptions" c:type="GckSessionOptions"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../gck/gck-slot.c"
                 line="1010">Optional cancellation object, or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="../gck/gck-slot.c"
                 line="1011">Called when the operation completes.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../gck/gck-slot.c"
                 line="1012">Data to pass to the callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="open_session_finish"
              c:identifier="gck_slot_open_session_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="../gck/gck-slot.c"
             line="1094">Get the result of an open session operation. If the 'auto reuse' setting is set,
then this may be a recycled session with the same flags.</doc>
        <source-position filename="../gck/gck.h" line="776"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../gck/gck-slot.c"
               line="1103">the new session or %NULL if an error occurs</doc>
          <type name="Session" c:type="GckSession*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-slot.c"
                 line="1096">The slot to open a session on.</doc>
            <type name="Slot" c:type="GckSlot*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-slot.c"
                 line="1097">The result passed to the callback.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="open_session_full"
              c:identifier="gck_slot_open_session_full"
              introspectable="0"
              throws="1">
        <doc xml:space="preserve"
             filename="../gck/gck-slot.c"
             line="972">Open a session on the slot. If the 'auto reuse' setting is set,
then this may be a recycled session with the same flags.

This call may block for an indefinite period.</doc>
        <source-position filename="../gck/gck.h" line="753"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../gck/gck-slot.c"
               line="987">a new session or %NULL if an error occurs</doc>
          <type name="Session" c:type="GckSession*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-slot.c"
                 line="974">The slot to open a session on.</doc>
            <type name="Slot" c:type="GckSlot*"/>
          </instance-parameter>
          <parameter name="options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-slot.c"
                 line="975">The options to open the new session with.</doc>
            <type name="SessionOptions" c:type="GckSessionOptions"/>
          </parameter>
          <parameter name="pkcs11_flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-slot.c"
                 line="976">Additional raw PKCS\#11 flags.</doc>
            <type name="gulong" c:type="gulong"/>
          </parameter>
          <parameter name="app_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../gck/gck-slot.c"
                 line="977">Application data for notification callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="notify" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-slot.c"
                 line="978">PKCS\#11 notification callback.</doc>
            <type c:type="CK_NOTIFY"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../gck/gck-slot.c"
                 line="979">Optional cancellation object, or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="open_session_full_async"
              c:identifier="gck_slot_open_session_full_async"
              introspectable="0">
        <doc xml:space="preserve"
             filename="../gck/gck-slot.c"
             line="1048">Open a session on the slot. If the 'auto reuse' setting is set,
then this may be a recycled session with the same flags.

This call will return immediately and complete asynchronously.</doc>
        <source-position filename="../gck/gck.h" line="767"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-slot.c"
                 line="1050">The slot to open a session on.</doc>
            <type name="Slot" c:type="GckSlot*"/>
          </instance-parameter>
          <parameter name="options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-slot.c"
                 line="1051">Options to open the new session with.</doc>
            <type name="SessionOptions" c:type="GckSessionOptions"/>
          </parameter>
          <parameter name="pkcs11_flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-slot.c"
                 line="1052">Additional raw PKCS\#11 flags.</doc>
            <type name="gulong" c:type="gulong"/>
          </parameter>
          <parameter name="app_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../gck/gck-slot.c"
                 line="1053">Application data for notification callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="notify" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-slot.c"
                 line="1054">PKCS\#11 notification callback.</doc>
            <type c:type="CK_NOTIFY"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../gck/gck-slot.c"
                 line="1055">Optional cancellation object, or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="../gck/gck-slot.c"
                 line="1056">Called when the operation completes.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../gck/gck-slot.c"
                 line="1057">Data to pass to the callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <property name="handle"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../gck/gck-slot.c"
             line="145">The raw CK_SLOT_ID handle of this slot.</doc>
        <type name="gulong" c:type="gulong"/>
      </property>
      <property name="module"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../gck/gck-slot.c"
             line="135">The PKCS11 object that this slot is a part of.</doc>
        <type name="Module"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="pv" readable="0" private="1">
        <type name="SlotPrivate" c:type="GckSlotPrivate*"/>
      </field>
      <field name="reserved" readable="0" private="1">
        <array zero-terminated="0" fixed-size="4">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </class>
    <record name="SlotClass"
            c:type="GckSlotClass"
            glib:is-gtype-struct-for="Slot">
      <source-position filename="../gck/gck.h" line="717"/>
      <field name="parent">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="reserved" readable="0" private="1">
        <array zero-terminated="0" fixed-size="9">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <record name="SlotInfo"
            c:type="GckSlotInfo"
            glib:type-name="GckSlotInfo"
            glib:get-type="gck_slot_info_get_type"
            c:symbol-prefix="slot_info">
      <doc xml:space="preserve"
           filename="../gck/gck-slot.c"
           line="160">Represents information about a PKCS11 slot.

This is analogous to a CK_SLOT_INFO structure, but the
strings are far more usable.

When you're done with this structure it should be released with
gck_slot_info_free().</doc>
      <source-position filename="../gck/gck.h" line="622"/>
      <field name="slot_description" writable="1">
        <doc xml:space="preserve"
             filename="../gck/gck-slot.c"
             line="162">Description of the slot.</doc>
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="manufacturer_id" writable="1">
        <doc xml:space="preserve"
             filename="../gck/gck-slot.c"
             line="163">The manufacturer of this slot.</doc>
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="flags" writable="1">
        <doc xml:space="preserve"
             filename="../gck/gck-slot.c"
             line="164">Various PKCS11 flags that apply to this slot.</doc>
        <type name="gulong" c:type="gulong"/>
      </field>
      <field name="hardware_version_major" writable="1">
        <doc xml:space="preserve"
             filename="../gck/gck-slot.c"
             line="165">The major version of the hardware.</doc>
        <type name="guint8" c:type="guint8"/>
      </field>
      <field name="hardware_version_minor" writable="1">
        <doc xml:space="preserve"
             filename="../gck/gck-slot.c"
             line="166">The minor version of the hardware.</doc>
        <type name="guint8" c:type="guint8"/>
      </field>
      <field name="firmware_version_major" writable="1">
        <doc xml:space="preserve"
             filename="../gck/gck-slot.c"
             line="167">The major version of the firmware.</doc>
        <type name="guint8" c:type="guint8"/>
      </field>
      <field name="firmware_version_minor" writable="1">
        <doc xml:space="preserve"
             filename="../gck/gck-slot.c"
             line="168">The minor version of the firmware.</doc>
        <type name="guint8" c:type="guint8"/>
      </field>
      <method name="copy" c:identifier="gck_slot_info_copy">
        <doc xml:space="preserve"
             filename="../gck/gck-slot.c"
             line="193">Make a copy of the slot info.</doc>
        <source-position filename="../gck/gck.h" line="628"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../gck/gck-slot.c"
               line="199">a newly allocated copy slot info</doc>
          <type name="SlotInfo" c:type="GckSlotInfo*"/>
        </return-value>
        <parameters>
          <instance-parameter name="slot_info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-slot.c"
                 line="195">a slot info</doc>
            <type name="SlotInfo" c:type="GckSlotInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="free" c:identifier="gck_slot_info_free">
        <doc xml:space="preserve"
             filename="../gck/gck-slot.c"
             line="215">Free the GckSlotInfo and associated resources.</doc>
        <source-position filename="../gck/gck.h" line="630"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="slot_info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-slot.c"
                 line="217">The slot info to free, or %NULL.</doc>
            <type name="SlotInfo" c:type="GckSlotInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
    </record>
    <record name="SlotPrivate" c:type="GckSlotPrivate" disguised="1">
      <source-position filename="../gck/gck.h" line="702"/>
    </record>
    <record name="TokenInfo"
            c:type="GckTokenInfo"
            glib:type-name="GckTokenInfo"
            glib:get-type="gck_token_info_get_type"
            c:symbol-prefix="token_info">
      <doc xml:space="preserve"
           filename="../gck/gck-slot.c"
           line="231">Represents information about a PKCS11 token.

This is analogous to a CK_TOKEN_INFO structure, but the
strings are far more usable.

When you're done with this structure it should be released with
gck_token_info_free().</doc>
      <source-position filename="../gck/gck.h" line="657"/>
      <field name="label" writable="1">
        <doc xml:space="preserve"
             filename="../gck/gck-slot.c"
             line="233">The displayable token label.</doc>
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="manufacturer_id" writable="1">
        <doc xml:space="preserve"
             filename="../gck/gck-slot.c"
             line="234">The manufacturer of this slot.</doc>
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="model" writable="1">
        <doc xml:space="preserve"
             filename="../gck/gck-slot.c"
             line="235">The token model number as a string.</doc>
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="serial_number" writable="1">
        <doc xml:space="preserve"
             filename="../gck/gck-slot.c"
             line="236">The token serial number as a string.</doc>
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="flags" writable="1">
        <doc xml:space="preserve"
             filename="../gck/gck-slot.c"
             line="237">Various PKCS11 flags that apply to this token.</doc>
        <type name="gulong" c:type="gulong"/>
      </field>
      <field name="max_session_count" writable="1">
        <doc xml:space="preserve"
             filename="../gck/gck-slot.c"
             line="238">The maximum number of sessions allowed on this token.</doc>
        <type name="glong" c:type="glong"/>
      </field>
      <field name="session_count" writable="1">
        <doc xml:space="preserve"
             filename="../gck/gck-slot.c"
             line="239">The number of sessions open on this token.</doc>
        <type name="glong" c:type="glong"/>
      </field>
      <field name="max_rw_session_count" writable="1">
        <doc xml:space="preserve"
             filename="../gck/gck-slot.c"
             line="240">The maximum number of read/write sessions allowed on this token.</doc>
        <type name="glong" c:type="glong"/>
      </field>
      <field name="rw_session_count" writable="1">
        <doc xml:space="preserve"
             filename="../gck/gck-slot.c"
             line="241">The number of sessions open on this token.</doc>
        <type name="glong" c:type="glong"/>
      </field>
      <field name="max_pin_len" writable="1">
        <doc xml:space="preserve"
             filename="../gck/gck-slot.c"
             line="242">The maximum length of a PIN for locking this token.</doc>
        <type name="glong" c:type="glong"/>
      </field>
      <field name="min_pin_len" writable="1">
        <doc xml:space="preserve"
             filename="../gck/gck-slot.c"
             line="243">The minimum length of a PIN for locking this token.</doc>
        <type name="glong" c:type="glong"/>
      </field>
      <field name="total_public_memory" writable="1">
        <doc xml:space="preserve"
             filename="../gck/gck-slot.c"
             line="244">The total amount of memory on this token for storing public objects.</doc>
        <type name="glong" c:type="glong"/>
      </field>
      <field name="free_public_memory" writable="1">
        <doc xml:space="preserve"
             filename="../gck/gck-slot.c"
             line="245">The available amount of memory on this token for storing public objects.</doc>
        <type name="glong" c:type="glong"/>
      </field>
      <field name="total_private_memory" writable="1">
        <doc xml:space="preserve"
             filename="../gck/gck-slot.c"
             line="246">The total amount of memory on this token for storing private objects.</doc>
        <type name="glong" c:type="glong"/>
      </field>
      <field name="free_private_memory" writable="1">
        <doc xml:space="preserve"
             filename="../gck/gck-slot.c"
             line="247">The available amount of memory on this token for storing private objects.</doc>
        <type name="glong" c:type="glong"/>
      </field>
      <field name="hardware_version_major" writable="1">
        <doc xml:space="preserve"
             filename="../gck/gck-slot.c"
             line="248">The major version of the hardware.</doc>
        <type name="guint8" c:type="guint8"/>
      </field>
      <field name="hardware_version_minor" writable="1">
        <doc xml:space="preserve"
             filename="../gck/gck-slot.c"
             line="249">The minor version of the hardware.</doc>
        <type name="guint8" c:type="guint8"/>
      </field>
      <field name="firmware_version_major" writable="1">
        <doc xml:space="preserve"
             filename="../gck/gck-slot.c"
             line="250">The major version of the firmware.</doc>
        <type name="guint8" c:type="guint8"/>
      </field>
      <field name="firmware_version_minor" writable="1">
        <doc xml:space="preserve"
             filename="../gck/gck-slot.c"
             line="251">The minor version of the firmware.</doc>
        <type name="guint8" c:type="guint8"/>
      </field>
      <field name="utc_time" writable="1">
        <doc xml:space="preserve"
             filename="../gck/gck-slot.c"
             line="252">If the token has a hardware clock, this is set to the number of seconds since the epoch.</doc>
        <type name="gint64" c:type="gint64"/>
      </field>
      <method name="copy" c:identifier="gck_token_info_copy">
        <doc xml:space="preserve"
             filename="../gck/gck-slot.c"
             line="277">Make a copy of the token info.</doc>
        <source-position filename="../gck/gck.h" line="663"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../gck/gck-slot.c"
               line="283">a newly allocated copy token info</doc>
          <type name="TokenInfo" c:type="GckTokenInfo*"/>
        </return-value>
        <parameters>
          <instance-parameter name="token_info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-slot.c"
                 line="279">a token info</doc>
            <type name="TokenInfo" c:type="GckTokenInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="free" c:identifier="gck_token_info_free">
        <doc xml:space="preserve"
             filename="../gck/gck-slot.c"
             line="299">Free the GckTokenInfo and associated resources.</doc>
        <source-position filename="../gck/gck.h" line="665"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="token_info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-slot.c"
                 line="301">The token info to free, or %NULL.</doc>
            <type name="TokenInfo" c:type="GckTokenInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
    </record>
    <constant name="URI_FOR_MODULE_WITH_VERSION"
              value="24"
              c:type="GCK_URI_FOR_MODULE_WITH_VERSION">
      <doc xml:space="preserve"
           filename="../gck/gck-uri.c"
           line="86">The URI will match specific version of modules. To be used as a GckUriFlags argument.</doc>
      <source-position filename="../gck/gck.h" line="1557"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="URI_FOR_OBJECT_ON_TOKEN"
              value="6"
              c:type="GCK_URI_FOR_OBJECT_ON_TOKEN">
      <doc xml:space="preserve"
           filename="../gck/gck-uri.c"
           line="92">The URI will match objects on a specific token. To be used as a GckUriFlags argument.</doc>
      <source-position filename="../gck/gck.h" line="1559"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="URI_FOR_OBJECT_ON_TOKEN_AND_MODULE"
              value="8"
              c:type="GCK_URI_FOR_OBJECT_ON_TOKEN_AND_MODULE">
      <doc xml:space="preserve"
           filename="../gck/gck-uri.c"
           line="98">The token inserted into a device with a specific module.</doc>
      <source-position filename="../gck/gck.h" line="1561"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <record name="UriData"
            c:type="GckUriData"
            glib:type-name="GckUriData"
            glib:get-type="gck_uri_data_get_type"
            c:symbol-prefix="uri_data">
      <doc xml:space="preserve"
           filename="../gck/gck-uri.c"
           line="59">Information about the contents of a PKCS\#11 URI. Various fields may be %NULL
depending on the context that the URI was parsed for.

Since PKCS\#11 URIs represent a set which results from the intersections of
all of the URI parts, if @any_recognized is set to %TRUE then usually the URI
should be treated as not matching anything.</doc>
      <source-position filename="../gck/gck.h" line="1571"/>
      <field name="any_unrecognized" writable="1">
        <doc xml:space="preserve"
             filename="../gck/gck-uri.c"
             line="61">whether any parts of the PKCS\#11 URI were unsupported or unrecognized.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="module_info" writable="1">
        <doc xml:space="preserve"
             filename="../gck/gck-uri.c"
             line="62">information about the PKCS\#11 modules matching the URI.</doc>
        <type name="ModuleInfo" c:type="GckModuleInfo*"/>
      </field>
      <field name="token_info" writable="1">
        <doc xml:space="preserve"
             filename="../gck/gck-uri.c"
             line="63">information about the PKCS\#11 tokens matching the URI.</doc>
        <type name="TokenInfo" c:type="GckTokenInfo*"/>
      </field>
      <field name="attributes" writable="1">
        <doc xml:space="preserve"
             filename="../gck/gck-uri.c"
             line="64">information about the PKCS\#11 objects matching the URI.</doc>
        <type name="Attributes" c:type="GckAttributes*"/>
      </field>
      <field name="dummy" readable="0" private="1">
        <array zero-terminated="0" fixed-size="4">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
      <constructor name="new" c:identifier="gck_uri_data_new">
        <doc xml:space="preserve"
             filename="../gck/gck-uri.c"
             line="168">Allocate a new GckUriData structure. None of the fields
will be set.</doc>
        <source-position filename="../gck/gck.h" line="1577"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../gck/gck-uri.c"
               line="174">a newly allocated GckUriData, free with
         gck_uri_data_free()</doc>
          <type name="UriData" c:type="GckUriData*"/>
        </return-value>
      </constructor>
      <method name="copy" c:identifier="gck_uri_data_copy">
        <doc xml:space="preserve"
             filename="../gck/gck-uri.c"
             line="328">Copy a #GckUriData</doc>
        <source-position filename="../gck/gck.h" line="1590"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../gck/gck-uri.c"
               line="334">newly allocated copy of the uri data</doc>
          <type name="UriData" c:type="GckUriData*"/>
        </return-value>
        <parameters>
          <instance-parameter name="uri_data" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-uri.c"
                 line="330">URI data to copy</doc>
            <type name="UriData" c:type="GckUriData*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="free" c:identifier="gck_uri_data_free">
        <doc xml:space="preserve"
             filename="../gck/gck-uri.c"
             line="348">Free a #GckUriData.</doc>
        <source-position filename="../gck/gck.h" line="1592"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="uri_data" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../gck/gck-uri.c"
                 line="350">URI data to free.</doc>
            <type name="UriData" c:type="GckUriData*"/>
          </instance-parameter>
        </parameters>
      </method>
    </record>
    <enumeration name="UriError"
                 glib:type-name="GckUriError"
                 glib:get-type="gck_uri_error_get_type"
                 c:type="GckUriError">
      <doc xml:space="preserve"
           filename="../gck/gck-uri.c"
           line="104">Various error codes used with PKCS\#11 URIs</doc>
      <member name="bad_scheme"
              value="1"
              c:identifier="GCK_URI_BAD_SCHEME"
              glib:nick="bad-scheme">
        <doc xml:space="preserve"
             filename="../gck/gck-uri.c"
             line="106">invalid URI scheme</doc>
      </member>
      <member name="bad_encoding"
              value="2"
              c:identifier="GCK_URI_BAD_ENCODING"
              glib:nick="bad-encoding">
        <doc xml:space="preserve"
             filename="../gck/gck-uri.c"
             line="107">bad URI encoding</doc>
      </member>
      <member name="bad_syntax"
              value="3"
              c:identifier="GCK_URI_BAD_SYNTAX"
              glib:nick="bad-syntax">
        <doc xml:space="preserve"
             filename="../gck/gck-uri.c"
             line="108">bad URI syntax</doc>
      </member>
      <member name="bad_version"
              value="4"
              c:identifier="GCK_URI_BAD_VERSION"
              glib:nick="bad-version">
        <doc xml:space="preserve"
             filename="../gck/gck-uri.c"
             line="109">bad URI version component</doc>
      </member>
      <member name="not_found"
              value="5"
              c:identifier="GCK_URI_NOT_FOUND"
              glib:nick="not-found">
        <doc xml:space="preserve"
             filename="../gck/gck-uri.c"
             line="110">piece of the URI was not found</doc>
      </member>
      <function name="get_quark" c:identifier="gck_uri_error_get_quark">
        <source-position filename="../gck/gck.h" line="1575"/>
        <return-value transfer-ownership="none">
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
    </enumeration>
    <bitfield name="UriFlags"
              glib:type-name="GckUriFlags"
              glib:get-type="gck_uri_flags_get_type"
              c:type="GckUriFlags">
      <doc xml:space="preserve"
           filename="../gck/gck-uri.c"
           line="74">Which parts of the PKCS\#11 URI will be parsed or formatted. These can be
combined.</doc>
      <member name="for_object"
              value="2"
              c:identifier="GCK_URI_FOR_OBJECT"
              glib:nick="for-object">
        <doc xml:space="preserve"
             filename="../gck/gck-uri.c"
             line="78">the URI will be used to match objects.</doc>
      </member>
      <member name="for_token"
              value="4"
              c:identifier="GCK_URI_FOR_TOKEN"
              glib:nick="for-token">
        <doc xml:space="preserve"
             filename="../gck/gck-uri.c"
             line="77">the URI will be used to match tokens.</doc>
      </member>
      <member name="for_module"
              value="8"
              c:identifier="GCK_URI_FOR_MODULE"
              glib:nick="for-module">
        <doc xml:space="preserve"
             filename="../gck/gck-uri.c"
             line="76">the URI will be used to match modules.</doc>
      </member>
      <member name="with_version"
              value="16"
              c:identifier="GCK_URI_WITH_VERSION"
              glib:nick="with-version">
        <doc xml:space="preserve"
             filename="../gck/gck-uri.c"
             line="79">the URI has specific version numbers for module and/or token</doc>
      </member>
      <member name="for_any"
              value="65535"
              c:identifier="GCK_URI_FOR_ANY"
              glib:nick="for-any">
        <doc xml:space="preserve"
             filename="../gck/gck-uri.c"
             line="80">parse all recognized components of the URI.</doc>
      </member>
    </bitfield>
    <constant name="VENDOR_CODE" value="1195592448" c:type="GCK_VENDOR_CODE">
      <doc xml:space="preserve"
           filename="../gck/gck-misc.c"
           line="109">Custom PKCS11 errors that originate from the gck library, are
based at this error code.</doc>
      <source-position filename="../gck/gck.h" line="50"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <function name="builder_unref"
              c:identifier="gck_builder_unref"
              moved-to="Builder.unref">
      <doc xml:space="preserve"
           filename="../gck/gck-attributes.c"
           line="248">Unreferences a builder. If this was the last reference then the builder
is freed.

It is an error to use this function on builders that were allocated on the
stack.</doc>
      <source-position filename="../gck/gck.h" line="216"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="builder"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="../gck/gck-attributes.c"
               line="250">the builder</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="error_get_quark"
              c:identifier="gck_error_get_quark"
              moved-to="Error.get_quark">
      <source-position filename="../gck/gck.h" line="59"/>
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="list_get_boxed_type"
              c:identifier="gck_list_get_boxed_type">
      <source-position filename="../gck/gck.h" line="63"/>
      <return-value transfer-ownership="none">
        <type name="GType" c:type="GType"/>
      </return-value>
    </function>
    <function name="list_ref_copy"
              c:identifier="gck_list_ref_copy"
              introspectable="0">
      <doc xml:space="preserve"
           filename="../gck/gck-misc.c"
           line="329">Copy a list of GObject based pointers. All objects
in the list will be reffed and the list will be copied.</doc>
      <source-position filename="../gck/gck.h" line="65"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="../gck/gck-misc.c"
             line="337">the copied and
              reffed list, when done, free it with gck_list_unref_free ()</doc>
        <type name="GLib.List" c:type="GList*">
          <type name="GObject.Object"/>
        </type>
      </return-value>
      <parameters>
        <parameter name="reflist" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../gck/gck-misc.c"
               line="331">list of GObject reference counted
          objects</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="GObject.Object"/>
          </type>
        </parameter>
      </parameters>
    </function>
    <function name="list_unref_free"
              c:identifier="gck_list_unref_free"
              introspectable="0">
      <doc xml:space="preserve"
           filename="../gck/gck-misc.c"
           line="311">Free a list of GObject based pointers. All objects in the list
will be unreffed and then the list itself will be freed.</doc>
      <source-position filename="../gck/gck.h" line="67"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="reflist" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../gck/gck-misc.c"
               line="313">list of Gobject reference counted pointers</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="GObject.Object"/>
          </type>
        </parameter>
      </parameters>
    </function>
    <function-macro name="mechanisms_at"
                    c:identifier="gck_mechanisms_at"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="../gck/gck-slot.c"
           line="388">Get a specific mechanism in a the set.</doc>
      <source-position filename="../gck/gck.h" line="687"/>
      <parameters>
        <parameter name="a">
          <doc xml:space="preserve"
               filename="../gck/gck-slot.c"
               line="390">A GckMechanisms set.</doc>
        </parameter>
        <parameter name="i">
          <doc xml:space="preserve"
               filename="../gck/gck-slot.c"
               line="391">The index of a mechanism</doc>
        </parameter>
      </parameters>
    </function-macro>
    <function name="mechanisms_check"
              c:identifier="gck_mechanisms_check"
              introspectable="0">
      <doc xml:space="preserve"
           filename="../gck/gck-slot.c"
           line="405">Check whether all the mechanism types are in the list.

The arguments should be a list of CKM_XXX mechanism types. The last argument
should be GCK_INVALID.</doc>
      <source-position filename="../gck/gck.h" line="689"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../gck/gck-slot.c"
             line="416">Whether the mechanism is in the list or not.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="mechanisms" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../gck/gck-slot.c"
               line="407">A list of mechanisms, perhaps
             retrieved from gck_slot_get_mechanisms().</doc>
          <array name="GLib.Array" c:type="GArray*">
            <type name="gulong"/>
          </array>
        </parameter>
        <parameter name="..." transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../gck/gck-slot.c"
               line="409">A list of mechanism types followed by GCK_INVALID.</doc>
          <varargs/>
        </parameter>
      </parameters>
    </function>
    <function-macro name="mechanisms_length"
                    c:identifier="gck_mechanisms_length"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="../gck/gck-slot.c"
           line="379">Get the number of GckMechanismInfo in the set.</doc>
      <source-position filename="../gck/gck.h" line="685"/>
      <parameters>
        <parameter name="a">
          <doc xml:space="preserve"
               filename="../gck/gck-slot.c"
               line="381">A GckMechanisms set.</doc>
        </parameter>
      </parameters>
    </function-macro>
    <function name="message_from_rv" c:identifier="gck_message_from_rv">
      <doc xml:space="preserve"
           filename="../gck/gck-misc.c"
           line="152">Get a message for a PKCS\#11 return value or error code. Do not
pass CKR_OK or other such non errors to this function.</doc>
      <source-position filename="../gck/gck.h" line="69"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../gck/gck-misc.c"
             line="159">The user readable message.</doc>
        <type name="utf8" c:type="const gchar*"/>
      </return-value>
      <parameters>
        <parameter name="rv" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../gck/gck-misc.c"
               line="154">The PKCS\#11 return value to get a message for.</doc>
          <type name="gulong" c:type="gulong"/>
        </parameter>
      </parameters>
    </function>
    <function name="modules_enumerate_objects"
              c:identifier="gck_modules_enumerate_objects">
      <doc xml:space="preserve"
           filename="../gck/gck-modules.c"
           line="190">Setup an enumerator for listing matching objects on the modules.

This call will not block but will return an enumerator immediately.

If the @attrs #GckAttributes is floating, it is consumed.</doc>
      <source-position filename="../gck/gck.h" line="506"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="../gck/gck-modules.c"
             line="202">A new enumerator, which should be released
with g_object_unref().</doc>
        <type name="Enumerator" c:type="GckEnumerator*"/>
      </return-value>
      <parameters>
        <parameter name="modules" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../gck/gck-modules.c"
               line="192">The modules</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="Module"/>
          </type>
        </parameter>
        <parameter name="attrs" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../gck/gck-modules.c"
               line="193">attributes that the objects must have, or empty for all objects</doc>
          <type name="Attributes" c:type="GckAttributes*"/>
        </parameter>
        <parameter name="session_options" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../gck/gck-modules.c"
               line="194">Options from GckSessionOptions</doc>
          <type name="SessionOptions" c:type="GckSessionOptions"/>
        </parameter>
      </parameters>
    </function>
    <function name="modules_enumerate_uri"
              c:identifier="gck_modules_enumerate_uri"
              throws="1">
      <doc xml:space="preserve"
           filename="../gck/gck-modules.c"
           line="399">Enumerate objects that match a URI.

This call will not block. Use the #GckEnumerator functions in order to
get at the actual objects that match.</doc>
      <source-position filename="../gck/gck.h" line="528"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="../gck/gck-modules.c"
             line="411">A new #GckEnumerator, or %NULL if an error occurs.</doc>
        <type name="Enumerator" c:type="GckEnumerator*"/>
      </return-value>
      <parameters>
        <parameter name="modules" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../gck/gck-modules.c"
               line="401">The modules</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="Module"/>
          </type>
        </parameter>
        <parameter name="uri" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../gck/gck-modules.c"
               line="402">The URI that the enumerator will match</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="session_options" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../gck/gck-modules.c"
               line="403">Options from GckSessionOptions</doc>
          <type name="SessionOptions" c:type="GckSessionOptions"/>
        </parameter>
      </parameters>
    </function>
    <function name="modules_get_slots" c:identifier="gck_modules_get_slots">
      <doc xml:space="preserve"
           filename="../gck/gck-modules.c"
           line="167">Get a list of slots for across all of the modules.</doc>
      <source-position filename="../gck/gck.h" line="503"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="../gck/gck-modules.c"
             line="174">A list of #GckSlot
objects, which should be freed with gck_list_unref_free().</doc>
        <type name="GLib.List" c:type="GList*">
          <type name="Slot"/>
        </type>
      </return-value>
      <parameters>
        <parameter name="modules" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../gck/gck-modules.c"
               line="169">The modules</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="Module"/>
          </type>
        </parameter>
        <parameter name="token_present" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../gck/gck-modules.c"
               line="170">Whether to only list slots with token present</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="modules_initialize_registered"
              c:identifier="gck_modules_initialize_registered"
              throws="1">
      <doc xml:space="preserve"
           filename="../gck/gck-modules.c"
           line="83">Load and initialize all the registered modules.</doc>
      <source-position filename="../gck/gck.h" line="493"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="../gck/gck-modules.c"
             line="90">A newly allocated list
of #GckModule objects, which should be released with gck_list_unref_free().</doc>
        <type name="GLib.List" c:type="GList*">
          <type name="Module"/>
        </type>
      </return-value>
      <parameters>
        <parameter name="cancellable"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="../gck/gck-modules.c"
               line="85">optional cancellation object</doc>
          <type name="Gio.Cancellable" c:type="GCancellable*"/>
        </parameter>
      </parameters>
    </function>
    <function name="modules_initialize_registered_async"
              c:identifier="gck_modules_initialize_registered_async">
      <doc xml:space="preserve"
           filename="../gck/gck-modules.c"
           line="111">Load and initialize all the registered modules asynchronously.</doc>
      <source-position filename="../gck/gck.h" line="496"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="cancellable"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="../gck/gck-modules.c"
               line="113">optional cancellation object</doc>
          <type name="Gio.Cancellable" c:type="GCancellable*"/>
        </parameter>
        <parameter name="callback"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   scope="async"
                   closure="2">
          <doc xml:space="preserve"
               filename="../gck/gck-modules.c"
               line="114">a callback which will be called when the operation completes</doc>
          <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="../gck/gck-modules.c"
               line="115">data to pass to the callback</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="modules_initialize_registered_finish"
              c:identifier="gck_modules_initialize_registered_finish"
              throws="1">
      <doc xml:space="preserve"
           filename="../gck/gck-modules.c"
           line="132">Finishes the asynchronous operation to initialize the registered
PKCS\#11 modules.</doc>
      <source-position filename="../gck/gck.h" line="500"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="../gck/gck-modules.c"
             line="140">a list of newly
initialized #GckModule objects</doc>
        <type name="GLib.List" c:type="GList*">
          <type name="Module"/>
        </type>
      </return-value>
      <parameters>
        <parameter name="result" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../gck/gck-modules.c"
               line="134">the asynchronous result</doc>
          <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
        </parameter>
      </parameters>
    </function>
    <function name="modules_object_for_uri"
              c:identifier="gck_modules_object_for_uri"
              throws="1">
      <doc xml:space="preserve"
           filename="../gck/gck-modules.c"
           line="324">Find an object that matches a URI.

This call can block. Use gck_modules_enumerate_uri() for a non-blocking
version.</doc>
      <source-position filename="../gck/gck.h" line="518"/>
      <return-value transfer-ownership="full" nullable="1">
        <doc xml:space="preserve"
             filename="../gck/gck-modules.c"
             line="336">A new #GckObject which should be released with
g_object_unref(), or %NULL if no matching object was found.</doc>
        <type name="Object" c:type="GckObject*"/>
      </return-value>
      <parameters>
        <parameter name="modules" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../gck/gck-modules.c"
               line="326">The modules</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="Module"/>
          </type>
        </parameter>
        <parameter name="uri" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../gck/gck-modules.c"
               line="327">The URI the objects must match</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="session_options" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../gck/gck-modules.c"
               line="328">Options from GckSessionOptions</doc>
          <type name="SessionOptions" c:type="GckSessionOptions"/>
        </parameter>
      </parameters>
    </function>
    <function name="modules_objects_for_uri"
              c:identifier="gck_modules_objects_for_uri"
              throws="1">
      <doc xml:space="preserve"
           filename="../gck/gck-modules.c"
           line="361">Find objects that match a URI.

This call can block. Use gck_modules_enumerate_uri() for a non-blocking
version.</doc>
      <source-position filename="../gck/gck.h" line="523"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="../gck/gck-modules.c"
             line="373">A list of #GckObject which
should be released with gck_list_unref_free(), or %NULL if no matching object
was found.</doc>
        <type name="GLib.List" c:type="GList*">
          <type name="Object"/>
        </type>
      </return-value>
      <parameters>
        <parameter name="modules" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../gck/gck-modules.c"
               line="363">The modules</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="Module"/>
          </type>
        </parameter>
        <parameter name="uri" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../gck/gck-modules.c"
               line="364">The URI the objects must match</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="session_options" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../gck/gck-modules.c"
               line="365">Options from GckSessionOptions</doc>
          <type name="SessionOptions" c:type="GckSessionOptions"/>
        </parameter>
      </parameters>
    </function>
    <function name="modules_token_for_uri"
              c:identifier="gck_modules_token_for_uri"
              throws="1">
      <doc xml:space="preserve"
           filename="../gck/gck-modules.c"
           line="273">Lookup a token that matches the URI.</doc>
      <source-position filename="../gck/gck.h" line="510"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="../gck/gck-modules.c"
             line="281">A newly allocated #GckSlot or %NULL if no such
token was found.</doc>
        <type name="Slot" c:type="GckSlot*"/>
      </return-value>
      <parameters>
        <parameter name="modules" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../gck/gck-modules.c"
               line="275">The modules</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="Module"/>
          </type>
        </parameter>
        <parameter name="uri" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../gck/gck-modules.c"
               line="276">The URI that the token must match</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="modules_tokens_for_uri"
              c:identifier="gck_modules_tokens_for_uri"
              throws="1">
      <doc xml:space="preserve"
           filename="../gck/gck-modules.c"
           line="302">Lookup a token that matches the URI.</doc>
      <source-position filename="../gck/gck.h" line="514"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="../gck/gck-modules.c"
             line="310">A list of newly allocated
#GckSlot objects. Use gck_list_unref_free() to release the list once you're
done with it.</doc>
        <type name="GLib.List" c:type="GList*">
          <type name="Slot"/>
        </type>
      </return-value>
      <parameters>
        <parameter name="modules" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../gck/gck-modules.c"
               line="304">The modules</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="Module"/>
          </type>
        </parameter>
        <parameter name="uri" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../gck/gck-modules.c"
               line="305">The URI that the token must match</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="objects_from_handle_array"
              c:identifier="gck_objects_from_handle_array">
      <doc xml:space="preserve"
           filename="../gck/gck-object.c"
           line="235">Initialize a list of GckObject from raw PKCS\#11 handles. The handles argument must contain
contiguous CK_OBJECT_HANDLE handles in an array.</doc>
      <source-position filename="../gck/gck.h" line="1302"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="../gck/gck-object.c"
             line="244">The list of #GckObject
         objects. You should use gck_list_unref_free() when done with this
         list.</doc>
        <type name="GLib.List" c:type="GList*">
          <type name="Object"/>
        </type>
      </return-value>
      <parameters>
        <parameter name="session" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../gck/gck-object.c"
               line="237">The session for these objects</doc>
          <type name="Session" c:type="GckSession*"/>
        </parameter>
        <parameter name="object_handles" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../gck/gck-object.c"
               line="238">The raw object handles.</doc>
          <array length="2" zero-terminated="0" c:type="gulong*">
            <type name="gulong" c:type="gulong"/>
          </array>
        </parameter>
        <parameter name="n_object_handles" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../gck/gck-object.c"
               line="239">The number of raw object handles.</doc>
          <type name="gulong" c:type="gulong"/>
        </parameter>
      </parameters>
    </function>
    <function name="slots_enumerate_objects"
              c:identifier="gck_slots_enumerate_objects">
      <doc xml:space="preserve"
           filename="../gck/gck-slot.c"
           line="919">Setup an enumerator for listing matching objects on the slots.

If the @match #GckAttributes is floating, it is consumed.

This call will not block but will return an enumerator immediately.</doc>
      <source-position filename="../gck/gck.h" line="784"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="../gck/gck-slot.c"
             line="931">a new enumerator</doc>
        <type name="Enumerator" c:type="GckEnumerator*"/>
      </return-value>
      <parameters>
        <parameter name="slots" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../gck/gck-slot.c"
               line="921">a list of #GckSlot to enumerate objects on.</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="Slot"/>
          </type>
        </parameter>
        <parameter name="match" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../gck/gck-slot.c"
               line="922">attributes that the objects must match, or empty for all objects</doc>
          <type name="Attributes" c:type="GckAttributes*"/>
        </parameter>
        <parameter name="options" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../gck/gck-slot.c"
               line="923">options for opening a session</doc>
          <type name="SessionOptions" c:type="GckSessionOptions"/>
        </parameter>
      </parameters>
    </function>
    <function name="string_from_chars"
              c:identifier="gck_string_from_chars"
              introspectable="0">
      <doc xml:space="preserve"
           filename="../gck/gck-misc.c"
           line="351">Create a string from a set of PKCS\#11 characters. This is
similar to g_strndup, except for that it also strips trailing
spaces. These space padded strings are often used in PKCS\#11
structures.

If the space padded string is filled with null characters then
this function will return %NULL.</doc>
      <source-position filename="../gck/gck.h" line="75"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="../gck/gck-misc.c"
             line="364">The null terminated string.</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="data" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../gck/gck-misc.c"
               line="353">The character data to turn into a null terminated string.</doc>
          <type name="guint8" c:type="const guchar*"/>
        </parameter>
        <parameter name="max" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../gck/gck-misc.c"
               line="354">The maximum length of the charater data.</doc>
          <type name="gsize" c:type="gsize"/>
        </parameter>
      </parameters>
    </function>
    <function name="string_to_chars"
              c:identifier="gck_string_to_chars"
              introspectable="0">
      <doc xml:space="preserve"
           filename="../gck/gck-misc.c"
           line="383">Create a space padded PKCS\#11 string from a null terminated string.
The string must be shorter than the buffer or %FALSE will be
returned.

If a %NULL string is passed, then the space padded string will be
set to zero characters.</doc>
      <source-position filename="../gck/gck.h" line="71"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../gck/gck-misc.c"
             line="396">The null terminated string.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="data" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../gck/gck-misc.c"
               line="385">The character buffer to place string into.</doc>
          <type name="guint8" c:type="guchar*"/>
        </parameter>
        <parameter name="max" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../gck/gck-misc.c"
               line="386">The maximum length of the charater buffer.</doc>
          <type name="gsize" c:type="gsize"/>
        </parameter>
        <parameter name="string" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../gck/gck-misc.c"
               line="387">The string to place in the buffer.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="uri_build" c:identifier="gck_uri_build">
      <doc xml:space="preserve"
           filename="../gck/gck-uri.c"
           line="264">Build a PKCS\#11 URI. The various parts relevant to the flags
specified will be used to build the URI.</doc>
      <source-position filename="../gck/gck.h" line="1579"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="../gck/gck-uri.c"
             line="272">a newly allocated string containing a PKCS\#11 URI.</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="uri_data" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../gck/gck-uri.c"
               line="266">the info to build the URI from.</doc>
          <type name="UriData" c:type="GckUriData*"/>
        </parameter>
        <parameter name="flags" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../gck/gck-uri.c"
               line="267">The context that the URI is for</doc>
          <type name="UriFlags" c:type="GckUriFlags"/>
        </parameter>
      </parameters>
    </function>
    <function name="uri_error_get_quark"
              c:identifier="gck_uri_error_get_quark"
              moved-to="UriError.get_quark">
      <source-position filename="../gck/gck.h" line="1575"/>
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="uri_parse" c:identifier="gck_uri_parse" throws="1">
      <doc xml:space="preserve"
           filename="../gck/gck-uri.c"
           line="183">Parse a PKCS\#11 URI for use in a given context.

The result will contain the fields that are relevant for
the given context. See #GckUriData  for more info.
Other fields will be set to %NULL.</doc>
      <source-position filename="../gck/gck.h" line="1582"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="../gck/gck-uri.c"
             line="195">a newly allocated #GckUriData; which should be
         freed with gck_uri_data_free()</doc>
        <type name="UriData" c:type="GckUriData*"/>
      </return-value>
      <parameters>
        <parameter name="string" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../gck/gck-uri.c"
               line="185">the URI to parse.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="flags" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../gck/gck-uri.c"
               line="186">the context in which the URI will be used.</doc>
          <type name="UriFlags" c:type="GckUriFlags"/>
        </parameter>
      </parameters>
    </function>
    <function name="value_to_boolean" c:identifier="gck_value_to_boolean">
      <doc xml:space="preserve"
           filename="../gck/gck-misc.c"
           line="460">Convert CK_BBOOL type memory to a boolean.</doc>
      <source-position filename="../gck/gck.h" line="109"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../gck/gck-misc.c"
             line="468">Whether the conversion was successful.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="value" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../gck/gck-misc.c"
               line="462">memory to convert</doc>
          <array length="1" zero-terminated="0" c:type="const guchar*">
            <type name="guint8" c:type="guchar"/>
          </array>
        </parameter>
        <parameter name="length" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../gck/gck-misc.c"
               line="463">length of memory</doc>
          <type name="gsize" c:type="gsize"/>
        </parameter>
        <parameter name="result" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../gck/gck-misc.c"
               line="464">A location to store the result</doc>
          <type name="gboolean" c:type="gboolean*"/>
        </parameter>
      </parameters>
    </function>
    <function name="value_to_ulong" c:identifier="gck_value_to_ulong">
      <doc xml:space="preserve"
           filename="../gck/gck-misc.c"
           line="438">Convert CK_ULONG type memory to a boolean.</doc>
      <source-position filename="../gck/gck.h" line="105"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../gck/gck-misc.c"
             line="446">Whether the conversion was successful.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="value" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../gck/gck-misc.c"
               line="440">memory to convert</doc>
          <array length="1" zero-terminated="0" c:type="const guchar*">
            <type name="guint8" c:type="guchar"/>
          </array>
        </parameter>
        <parameter name="length" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../gck/gck-misc.c"
               line="441">length of memory</doc>
          <type name="gsize" c:type="gsize"/>
        </parameter>
        <parameter name="result" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../gck/gck-misc.c"
               line="442">A location to store the result</doc>
          <type name="gulong" c:type="gulong*"/>
        </parameter>
      </parameters>
    </function>
  </namespace>
</repository>
