<?xml version="1.0"?>
<!-- This file was automatically generated from C sources - DO NOT EDIT!
To affect the contents of this file, edit the original C definitions,
and/or use gtk-doc annotations.  -->
<repository version="1.2"
            xmlns="http://www.gtk.org/introspection/core/1.0"
            xmlns:c="http://www.gtk.org/introspection/c/1.0"
            xmlns:glib="http://www.gtk.org/introspection/glib/1.0">
  <include name="Gio" version="2.0"/>
  <package name="libnm"/>
  <namespace name="NM"
             version="1.0"
             shared-library="libnm.so.0"
             c:identifier-prefixes="NM"
             c:symbol-prefixes="nm">
    <bitfield name="80211ApFlags"
              glib:type-name="NM80211ApFlags"
              glib:get-type="nm_802_11_ap_flags_get_type"
              c:type="NM80211ApFlags">
      <doc xml:space="preserve"
           filename="libnm-core/nm-dbus-interface.h"
           line="312">802.11 access point flags.</doc>
      <member name="none"
              value="0"
              c:identifier="NM_802_11_AP_FLAGS_NONE"
              glib:nick="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="314">access point has no special capabilities</doc>
      </member>
      <member name="privacy"
              value="1"
              c:identifier="NM_802_11_AP_FLAGS_PRIVACY"
              glib:nick="privacy">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="315">access point requires authentication and
encryption (usually means WEP)</doc>
      </member>
      <member name="wps"
              value="2"
              c:identifier="NM_802_11_AP_FLAGS_WPS"
              glib:nick="wps">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="317">access point supports some WPS method</doc>
      </member>
      <member name="wps_pbc"
              value="4"
              c:identifier="NM_802_11_AP_FLAGS_WPS_PBC"
              glib:nick="wps-pbc">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="318">access point supports push-button WPS</doc>
      </member>
      <member name="wps_pin"
              value="8"
              c:identifier="NM_802_11_AP_FLAGS_WPS_PIN"
              glib:nick="wps-pin">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="319">access point supports PIN-based WPS</doc>
      </member>
    </bitfield>
    <bitfield name="80211ApSecurityFlags"
              glib:type-name="NM80211ApSecurityFlags"
              glib:get-type="nm_802_11_ap_security_flags_get_type"
              c:type="NM80211ApSecurityFlags">
      <doc xml:space="preserve"
           filename="libnm-core/nm-dbus-interface.h"
           line="331">802.11 access point security and authentication flags.  These flags describe
the current security requirements of an access point as determined from the
access point's beacon.</doc>
      <member name="none"
              value="0"
              c:identifier="NM_802_11_AP_SEC_NONE"
              glib:nick="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="333">the access point has no special security requirements</doc>
      </member>
      <member name="pair_wep40"
              value="1"
              c:identifier="NM_802_11_AP_SEC_PAIR_WEP40"
              glib:nick="pair-wep40">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="334">40/64-bit WEP is supported for
pairwise/unicast encryption</doc>
      </member>
      <member name="pair_wep104"
              value="2"
              c:identifier="NM_802_11_AP_SEC_PAIR_WEP104"
              glib:nick="pair-wep104">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="336">104/128-bit WEP is supported for
pairwise/unicast encryption</doc>
      </member>
      <member name="pair_tkip"
              value="4"
              c:identifier="NM_802_11_AP_SEC_PAIR_TKIP"
              glib:nick="pair-tkip">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="338">TKIP is supported for pairwise/unicast encryption</doc>
      </member>
      <member name="pair_ccmp"
              value="8"
              c:identifier="NM_802_11_AP_SEC_PAIR_CCMP"
              glib:nick="pair-ccmp">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="339">AES/CCMP is supported for pairwise/unicast encryption</doc>
      </member>
      <member name="group_wep40"
              value="16"
              c:identifier="NM_802_11_AP_SEC_GROUP_WEP40"
              glib:nick="group-wep40">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="340">40/64-bit WEP is supported for group/broadcast
encryption</doc>
      </member>
      <member name="group_wep104"
              value="32"
              c:identifier="NM_802_11_AP_SEC_GROUP_WEP104"
              glib:nick="group-wep104">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="342">104/128-bit WEP is supported for
group/broadcast encryption</doc>
      </member>
      <member name="group_tkip"
              value="64"
              c:identifier="NM_802_11_AP_SEC_GROUP_TKIP"
              glib:nick="group-tkip">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="344">TKIP is supported for group/broadcast encryption</doc>
      </member>
      <member name="group_ccmp"
              value="128"
              c:identifier="NM_802_11_AP_SEC_GROUP_CCMP"
              glib:nick="group-ccmp">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="345">AES/CCMP is supported for group/broadcast
encryption</doc>
      </member>
      <member name="key_mgmt_psk"
              value="256"
              c:identifier="NM_802_11_AP_SEC_KEY_MGMT_PSK"
              glib:nick="key-mgmt-psk">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="347">WPA/RSN Pre-Shared Key encryption is
supported</doc>
      </member>
      <member name="key_mgmt_802_1x"
              value="512"
              c:identifier="NM_802_11_AP_SEC_KEY_MGMT_802_1X"
              glib:nick="key-mgmt-802-1x">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="349">802.1x authentication and key management
is supported</doc>
      </member>
      <member name="key_mgmt_sae"
              value="1024"
              c:identifier="NM_802_11_AP_SEC_KEY_MGMT_SAE"
              glib:nick="key-mgmt-sae">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="351">WPA/RSN Simultaneous Authentication of Equals is
supported</doc>
      </member>
    </bitfield>
    <enumeration name="80211Mode"
                 glib:type-name="NM80211Mode"
                 glib:get-type="nm_802_11_mode_get_type"
                 c:type="NM80211Mode">
      <doc xml:space="preserve"
           filename="libnm-core/nm-dbus-interface.h"
           line="373">Indicates the 802.11 mode an access point or device is currently in.</doc>
      <member name="unknown"
              value="0"
              c:identifier="NM_802_11_MODE_UNKNOWN"
              glib:nick="unknown">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="375">the device or access point mode is unknown</doc>
      </member>
      <member name="adhoc"
              value="1"
              c:identifier="NM_802_11_MODE_ADHOC"
              glib:nick="adhoc">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="376">for both devices and access point objects, indicates
  the object is part of an Ad-Hoc 802.11 network without a central
  coordinating access point.</doc>
      </member>
      <member name="infra"
              value="2"
              c:identifier="NM_802_11_MODE_INFRA"
              glib:nick="infra">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="379">the device or access point is in infrastructure mode.
  For devices, this indicates the device is an 802.11 client/station.  For
  access point objects, this indicates the object is an access point that
  provides connectivity to clients.</doc>
      </member>
      <member name="ap"
              value="3"
              c:identifier="NM_802_11_MODE_AP"
              glib:nick="ap">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="383">the device is an access point/hotspot.  Not valid for
  access point objects; used only for hotspot mode on the local machine.</doc>
      </member>
    </enumeration>
    <constant name="ACCESS_POINT_BSSID"
              value="bssid"
              c:type="NM_ACCESS_POINT_BSSID">
      <source-position filename="libnm/nm-access-point.h" line="44"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="ACCESS_POINT_FLAGS"
              value="flags"
              c:type="NM_ACCESS_POINT_FLAGS">
      <source-position filename="libnm/nm-access-point.h" line="40"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="ACCESS_POINT_FREQUENCY"
              value="frequency"
              c:type="NM_ACCESS_POINT_FREQUENCY">
      <source-position filename="libnm/nm-access-point.h" line="45"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="ACCESS_POINT_HW_ADDRESS"
              value="hw-address"
              c:type="NM_ACCESS_POINT_HW_ADDRESS">
      <source-position filename="libnm/nm-access-point.h" line="52"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="ACCESS_POINT_LAST_SEEN"
              value="last-seen"
              c:type="NM_ACCESS_POINT_LAST_SEEN">
      <source-position filename="libnm/nm-access-point.h" line="49"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="ACCESS_POINT_MAX_BITRATE"
              value="max-bitrate"
              c:type="NM_ACCESS_POINT_MAX_BITRATE">
      <source-position filename="libnm/nm-access-point.h" line="47"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="ACCESS_POINT_MODE"
              value="mode"
              c:type="NM_ACCESS_POINT_MODE">
      <source-position filename="libnm/nm-access-point.h" line="46"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="ACCESS_POINT_RSN_FLAGS"
              value="rsn-flags"
              c:type="NM_ACCESS_POINT_RSN_FLAGS">
      <source-position filename="libnm/nm-access-point.h" line="42"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="ACCESS_POINT_SSID"
              value="ssid"
              c:type="NM_ACCESS_POINT_SSID">
      <source-position filename="libnm/nm-access-point.h" line="43"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="ACCESS_POINT_STRENGTH"
              value="strength"
              c:type="NM_ACCESS_POINT_STRENGTH">
      <source-position filename="libnm/nm-access-point.h" line="48"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="ACCESS_POINT_WPA_FLAGS"
              value="wpa-flags"
              c:type="NM_ACCESS_POINT_WPA_FLAGS">
      <source-position filename="libnm/nm-access-point.h" line="41"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="ACTIVE_CONNECTION_CONNECTION"
              value="connection"
              c:type="NM_ACTIVE_CONNECTION_CONNECTION">
      <source-position filename="libnm/nm-active-connection.h" line="40"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="ACTIVE_CONNECTION_DEFAULT"
              value="default"
              c:type="NM_ACTIVE_CONNECTION_DEFAULT">
      <source-position filename="libnm/nm-active-connection.h" line="48"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="ACTIVE_CONNECTION_DEFAULT6"
              value="default6"
              c:type="NM_ACTIVE_CONNECTION_DEFAULT6">
      <source-position filename="libnm/nm-active-connection.h" line="51"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="ACTIVE_CONNECTION_DEVICES"
              value="devices"
              c:type="NM_ACTIVE_CONNECTION_DEVICES">
      <source-position filename="libnm/nm-active-connection.h" line="45"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="ACTIVE_CONNECTION_DHCP4_CONFIG"
              value="dhcp4-config"
              c:type="NM_ACTIVE_CONNECTION_DHCP4_CONFIG">
      <source-position filename="libnm/nm-active-connection.h" line="50"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="ACTIVE_CONNECTION_DHCP6_CONFIG"
              value="dhcp6-config"
              c:type="NM_ACTIVE_CONNECTION_DHCP6_CONFIG">
      <source-position filename="libnm/nm-active-connection.h" line="53"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="ACTIVE_CONNECTION_ID"
              value="id"
              c:type="NM_ACTIVE_CONNECTION_ID">
      <source-position filename="libnm/nm-active-connection.h" line="41"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="ACTIVE_CONNECTION_IP4_CONFIG"
              value="ip4-config"
              c:type="NM_ACTIVE_CONNECTION_IP4_CONFIG">
      <source-position filename="libnm/nm-active-connection.h" line="49"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="ACTIVE_CONNECTION_IP6_CONFIG"
              value="ip6-config"
              c:type="NM_ACTIVE_CONNECTION_IP6_CONFIG">
      <source-position filename="libnm/nm-active-connection.h" line="52"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="ACTIVE_CONNECTION_MASTER"
              value="master"
              c:type="NM_ACTIVE_CONNECTION_MASTER">
      <source-position filename="libnm/nm-active-connection.h" line="55"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="ACTIVE_CONNECTION_SPECIFIC_OBJECT_PATH"
              value="specific-object-path"
              c:type="NM_ACTIVE_CONNECTION_SPECIFIC_OBJECT_PATH">
      <source-position filename="libnm/nm-active-connection.h" line="44"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="ACTIVE_CONNECTION_STATE"
              value="state"
              c:type="NM_ACTIVE_CONNECTION_STATE">
      <source-position filename="libnm/nm-active-connection.h" line="46"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="ACTIVE_CONNECTION_STATE_FLAGS"
              value="state-flags"
              c:type="NM_ACTIVE_CONNECTION_STATE_FLAGS">
      <source-position filename="libnm/nm-active-connection.h" line="47"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="ACTIVE_CONNECTION_TYPE"
              value="type"
              c:type="NM_ACTIVE_CONNECTION_TYPE">
      <source-position filename="libnm/nm-active-connection.h" line="43"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="ACTIVE_CONNECTION_UUID"
              value="uuid"
              c:type="NM_ACTIVE_CONNECTION_UUID">
      <source-position filename="libnm/nm-active-connection.h" line="42"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="ACTIVE_CONNECTION_VPN"
              value="vpn"
              c:type="NM_ACTIVE_CONNECTION_VPN">
      <source-position filename="libnm/nm-active-connection.h" line="54"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <class name="AccessPoint"
           c:symbol-prefix="access_point"
           c:type="NMAccessPoint"
           parent="Object"
           glib:type-name="NMAccessPoint"
           glib:get-type="nm_access_point_get_type"
           glib:type-struct="AccessPointClass">
      <source-position filename="libnm/nm-access-point.h" line="66"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.Initable"/>
      <method name="connection_valid"
              c:identifier="nm_access_point_connection_valid">
        <doc xml:space="preserve"
             filename="libnm/nm-access-point.c"
             line="243">Validates a given connection against a given Wi-Fi access point to ensure that
the connection may be activated with that AP.  The connection must match the
@ap's SSID, (if given) BSSID, and other attributes like security settings,
channel, band, etc.</doc>
        <source-position filename="libnm/nm-access-point.h" line="85"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-access-point.c"
               line="253">%TRUE if the connection may be activated with this Wi-Fi AP,
%FALSE if it cannot be.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="ap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-access-point.c"
                 line="245">an #NMAccessPoint to validate @connection against</doc>
            <type name="AccessPoint" c:type="NMAccessPoint*"/>
          </instance-parameter>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-access-point.c"
                 line="246">an #NMConnection to validate against @ap</doc>
            <type name="Connection" c:type="NMConnection*"/>
          </parameter>
        </parameters>
      </method>
      <method name="filter_connections"
              c:identifier="nm_access_point_filter_connections">
        <doc xml:space="preserve"
             filename="libnm/nm-access-point.c"
             line="352">Filters a given array of connections for a given #NMAccessPoint object and
returns connections which may be activated with the access point.  Any
returned connections will match the @ap's SSID and (if given) BSSID and
other attributes like security settings, channel, etc.

To obtain the list of connections that are compatible with this access point,
use nm_client_get_connections() and then filter the returned list for a given
#NMDevice using nm_device_filter_connections() and finally filter that list
with this function.</doc>
        <source-position filename="libnm/nm-access-point.h" line="82"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libnm/nm-access-point.c"
               line="368">an array of
#NMConnections that could be activated with the given @ap.  The array should
be freed with g_ptr_array_unref() when it is no longer required.</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="Connection"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="ap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-access-point.c"
                 line="354">an #NMAccessPoint to filter connections for</doc>
            <type name="AccessPoint" c:type="NMAccessPoint*"/>
          </instance-parameter>
          <parameter name="connections" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-access-point.c"
                 line="355">an array of #NMConnections to
filter</doc>
            <array name="GLib.PtrArray" c:type="const GPtrArray*">
              <type name="Connection"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="get_bssid" c:identifier="nm_access_point_get_bssid">
        <doc xml:space="preserve"
             filename="libnm/nm-access-point.c"
             line="157">Gets the Basic Service Set ID (BSSID) of the Wi-Fi access point.</doc>
        <source-position filename="libnm/nm-access-point.h" line="74"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-access-point.c"
               line="163">the BSSID of the access point. This is an internal string and must
not be modified or freed.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="ap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-access-point.c"
                 line="159">a #NMAccessPoint</doc>
            <type name="AccessPoint" c:type="NMAccessPoint*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_flags" c:identifier="nm_access_point_get_flags">
        <doc xml:space="preserve"
             filename="libnm/nm-access-point.c"
             line="69">Gets the flags of the access point.</doc>
        <source-position filename="libnm/nm-access-point.h" line="70"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-access-point.c"
               line="75">the flags</doc>
          <type name="80211ApFlags" c:type="NM80211ApFlags"/>
        </return-value>
        <parameters>
          <instance-parameter name="ap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-access-point.c"
                 line="71">a #NMAccessPoint</doc>
            <type name="AccessPoint" c:type="NMAccessPoint*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_frequency"
              c:identifier="nm_access_point_get_frequency">
        <doc xml:space="preserve"
             filename="libnm/nm-access-point.c"
             line="141">Gets the frequency of the access point in MHz.</doc>
        <source-position filename="libnm/nm-access-point.h" line="75"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-access-point.c"
               line="147">the frequency in MHz</doc>
          <type name="guint32" c:type="guint32"/>
        </return-value>
        <parameters>
          <instance-parameter name="ap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-access-point.c"
                 line="143">a #NMAccessPoint</doc>
            <type name="AccessPoint" c:type="NMAccessPoint*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_last_seen"
              c:identifier="nm_access_point_get_last_seen"
              version="1.2">
        <doc xml:space="preserve"
             filename="libnm/nm-access-point.c"
             line="222">Returns the timestamp (in CLOCK_BOOTTIME seconds) for the last time the
access point was found in scan results.  A value of -1 means the access
point has not been found in a scan.</doc>
        <source-position filename="libnm/nm-access-point.h" line="80"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-access-point.c"
               line="230">the last seen time in seconds</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="ap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-access-point.c"
                 line="224">a #NMAccessPoint</doc>
            <type name="AccessPoint" c:type="NMAccessPoint*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_max_bitrate"
              c:identifier="nm_access_point_get_max_bitrate">
        <doc xml:space="preserve"
             filename="libnm/nm-access-point.c"
             line="190">Gets the maximum bit rate of the access point in kbit/s.</doc>
        <source-position filename="libnm/nm-access-point.h" line="77"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-access-point.c"
               line="196">the maximum bit rate (kbit/s)</doc>
          <type name="guint32" c:type="guint32"/>
        </return-value>
        <parameters>
          <instance-parameter name="ap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-access-point.c"
                 line="192">a #NMAccessPoint</doc>
            <type name="AccessPoint" c:type="NMAccessPoint*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_mode" c:identifier="nm_access_point_get_mode">
        <doc xml:space="preserve"
             filename="libnm/nm-access-point.c"
             line="174">Gets the mode of the access point.</doc>
        <source-position filename="libnm/nm-access-point.h" line="76"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-access-point.c"
               line="180">the mode</doc>
          <type name="80211Mode" c:type="NM80211Mode"/>
        </return-value>
        <parameters>
          <instance-parameter name="ap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-access-point.c"
                 line="176">a #NMAccessPoint</doc>
            <type name="AccessPoint" c:type="NMAccessPoint*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_rsn_flags"
              c:identifier="nm_access_point_get_rsn_flags">
        <doc xml:space="preserve"
             filename="libnm/nm-access-point.c"
             line="101">Gets the RSN (Robust Secure Network, ie WPA version 2) flags of the access
point.</doc>
        <source-position filename="libnm/nm-access-point.h" line="72"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-access-point.c"
               line="108">the RSN flags</doc>
          <type name="80211ApSecurityFlags" c:type="NM80211ApSecurityFlags"/>
        </return-value>
        <parameters>
          <instance-parameter name="ap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-access-point.c"
                 line="103">a #NMAccessPoint</doc>
            <type name="AccessPoint" c:type="NMAccessPoint*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_ssid" c:identifier="nm_access_point_get_ssid">
        <doc xml:space="preserve"
             filename="libnm/nm-access-point.c"
             line="118">Gets the SSID of the access point.</doc>
        <source-position filename="libnm/nm-access-point.h" line="73"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-access-point.c"
               line="124">the #GBytes containing the SSID, or %NULL if the
  SSID is unknown.</doc>
          <type name="GLib.Bytes" c:type="GBytes*"/>
        </return-value>
        <parameters>
          <instance-parameter name="ap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-access-point.c"
                 line="120">a #NMAccessPoint</doc>
            <type name="AccessPoint" c:type="NMAccessPoint*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_strength" c:identifier="nm_access_point_get_strength">
        <doc xml:space="preserve"
             filename="libnm/nm-access-point.c"
             line="206">Gets the current signal strength of the access point as a percentage.</doc>
        <source-position filename="libnm/nm-access-point.h" line="78"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-access-point.c"
               line="212">the signal strength (0 to 100)</doc>
          <type name="guint8" c:type="guint8"/>
        </return-value>
        <parameters>
          <instance-parameter name="ap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-access-point.c"
                 line="208">a #NMAccessPoint</doc>
            <type name="AccessPoint" c:type="NMAccessPoint*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_wpa_flags"
              c:identifier="nm_access_point_get_wpa_flags">
        <doc xml:space="preserve"
             filename="libnm/nm-access-point.c"
             line="85">Gets the WPA (version 1) flags of the access point.</doc>
        <source-position filename="libnm/nm-access-point.h" line="71"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-access-point.c"
               line="91">the WPA flags</doc>
          <type name="80211ApSecurityFlags" c:type="NM80211ApSecurityFlags"/>
        </return-value>
        <parameters>
          <instance-parameter name="ap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-access-point.c"
                 line="87">a #NMAccessPoint</doc>
            <type name="AccessPoint" c:type="NMAccessPoint*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="bssid" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-access-point.c"
             line="563">The BSSID of the access point.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="flags" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-access-point.c"
             line="500">The flags of the access point.</doc>
        <type name="80211ApFlags"/>
      </property>
      <property name="frequency" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-access-point.c"
             line="551">The frequency of the access point.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="hw-address"
                deprecated="1"
                deprecated-version="1.0"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-access-point.c"
             line="575">Alias for #NMAccessPoint:bssid.</doc>
        <doc-deprecated xml:space="preserve">use #NMAccessPoint:bssid.</doc-deprecated>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="last-seen" version="1.2" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-access-point.c"
             line="628">The timestamp (in CLOCK_BOOTTIME seconds) for the last time the
access point was found in scan results.  A value of -1 means the
access point has not been found in a scan.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="max-bitrate" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-access-point.c"
             line="604">The maximum bit rate of the access point in kbit/s.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="mode" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-access-point.c"
             line="589">The mode of the access point; either "infrastructure" (a central
coordinator of the wireless network allowing clients to connect) or
"ad-hoc" (a network with no central controller).</doc>
        <type name="80211Mode"/>
      </property>
      <property name="rsn-flags" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-access-point.c"
             line="526">The RSN flags of the access point.</doc>
        <type name="80211ApSecurityFlags"/>
      </property>
      <property name="ssid" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-access-point.c"
             line="539">The SSID of the access point, or %NULL if it is not known.</doc>
        <type name="GLib.Bytes"/>
      </property>
      <property name="strength" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-access-point.c"
             line="616">The current signal strength of the access point.</doc>
        <type name="guint8" c:type="guint8"/>
      </property>
      <property name="wpa-flags" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-access-point.c"
             line="513">The WPA flags of the access point.</doc>
        <type name="80211ApSecurityFlags"/>
      </property>
      <field name="parent">
        <type name="Object" c:type="NMObject"/>
      </field>
    </class>
    <record name="AccessPointClass"
            c:type="NMAccessPointClass"
            glib:is-gtype-struct-for="AccessPoint">
      <source-position filename="libnm/nm-access-point.h" line="66"/>
      <field name="parent">
        <type name="ObjectClass" c:type="NMObjectClass"/>
      </field>
      <field name="padding" readable="0" private="1">
        <array zero-terminated="0" fixed-size="4">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <bitfield name="ActivationStateFlags"
              version="1.10"
              glib:type-name="NMActivationStateFlags"
              glib:get-type="nm_activation_state_flags_get_type"
              c:type="NMActivationStateFlags">
      <doc xml:space="preserve"
           filename="libnm-core/nm-dbus-interface.h"
           line="962">Flags describing the current activation state.</doc>
      <member name="none"
              value="0"
              c:identifier="NM_ACTIVATION_STATE_FLAG_NONE"
              glib:nick="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="964">an alias for numeric zero, no flags set.</doc>
      </member>
      <member name="is_master"
              value="1"
              c:identifier="NM_ACTIVATION_STATE_FLAG_IS_MASTER"
              glib:nick="is-master">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="965">the device is a master.</doc>
      </member>
      <member name="is_slave"
              value="2"
              c:identifier="NM_ACTIVATION_STATE_FLAG_IS_SLAVE"
              glib:nick="is-slave">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="966">the device is a slave.</doc>
      </member>
      <member name="layer2_ready"
              value="4"
              c:identifier="NM_ACTIVATION_STATE_FLAG_LAYER2_READY"
              glib:nick="layer2-ready">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="967">layer2 is activated and ready.</doc>
      </member>
      <member name="ip4_ready"
              value="8"
              c:identifier="NM_ACTIVATION_STATE_FLAG_IP4_READY"
              glib:nick="ip4-ready">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="968">IPv4 setting is completed.</doc>
      </member>
      <member name="ip6_ready"
              value="16"
              c:identifier="NM_ACTIVATION_STATE_FLAG_IP6_READY"
              glib:nick="ip6-ready">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="969">IPv6 setting is completed.</doc>
      </member>
      <member name="master_has_slaves"
              value="32"
              c:identifier="NM_ACTIVATION_STATE_FLAG_MASTER_HAS_SLAVES"
              glib:nick="master-has-slaves">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="970">The master has any slave devices attached.
  This only makes sense if the device is a master.</doc>
      </member>
      <member name="lifetime_bound_to_profile_visibility"
              value="64"
              c:identifier="NM_ACTIVATION_STATE_FLAG_LIFETIME_BOUND_TO_PROFILE_VISIBILITY"
              glib:nick="lifetime-bound-to-profile-visibility">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="972">the lifetime
  of the activation is bound to the visilibity of the connection profile,
  which in turn depends on "connection.permissions" and whether a session
  for the user exists. Since: 1.16</doc>
      </member>
    </bitfield>
    <class name="ActiveConnection"
           c:symbol-prefix="active_connection"
           c:type="NMActiveConnection"
           parent="Object"
           glib:type-name="NMActiveConnection"
           glib:get-type="nm_active_connection_get_type"
           glib:type-struct="ActiveConnectionClass">
      <source-position filename="libnm/nm-active-connection.h" line="69"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.Initable"/>
      <method name="get_connection"
              c:identifier="nm_active_connection_get_connection">
        <doc xml:space="preserve"
             filename="libnm/nm-active-connection.c"
             line="95">Gets the #NMRemoteConnection associated with @connection.</doc>
        <source-position filename="libnm/nm-active-connection.h" line="73"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-active-connection.c"
               line="101">the #NMRemoteConnection which this
#NMActiveConnection is an active instance of.</doc>
          <type name="RemoteConnection" c:type="NMRemoteConnection*"/>
        </return-value>
        <parameters>
          <instance-parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-active-connection.c"
                 line="97">a #NMActiveConnection</doc>
            <type name="ActiveConnection" c:type="NMActiveConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_connection_type"
              c:identifier="nm_active_connection_get_connection_type">
        <doc xml:space="preserve"
             filename="libnm/nm-active-connection.c"
             line="146">Gets the #NMConnection's type.</doc>
        <source-position filename="libnm/nm-active-connection.h" line="76"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-active-connection.c"
               line="152">the type of the #NMConnection that backs the #NMActiveConnection.
This is the internal string used by the connection, and must not be modified.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-active-connection.c"
                 line="148">a #NMActiveConnection</doc>
            <type name="ActiveConnection" c:type="NMActiveConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_default"
              c:identifier="nm_active_connection_get_default">
        <doc xml:space="preserve"
             filename="libnm/nm-active-connection.c"
             line="255">Whether the active connection is the default IPv4 one (that is, is used for
the default IPv4 route and DNS information).</doc>
        <source-position filename="libnm/nm-active-connection.h" line="85"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-active-connection.c"
               line="262">%TRUE if the active connection is the default IPv4 connection</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-active-connection.c"
                 line="257">a #NMActiveConnection</doc>
            <type name="ActiveConnection" c:type="NMActiveConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_default6"
              c:identifier="nm_active_connection_get_default6">
        <doc xml:space="preserve"
             filename="libnm/nm-active-connection.c"
             line="308">Whether the active connection is the default IPv6 one (that is, is used for
the default IPv6 route and DNS information).</doc>
        <source-position filename="libnm/nm-active-connection.h" line="88"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-active-connection.c"
               line="315">%TRUE if the active connection is the default IPv6 connection</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-active-connection.c"
                 line="310">a #NMActiveConnection</doc>
            <type name="ActiveConnection" c:type="NMActiveConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_devices"
              c:identifier="nm_active_connection_get_devices">
        <doc xml:space="preserve"
             filename="libnm/nm-active-connection.c"
             line="186">Gets the #NMDevices used for the active connections.</doc>
        <source-position filename="libnm/nm-active-connection.h" line="78"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-active-connection.c"
               line="192">the #GPtrArray containing #NMDevices.
This is the internal copy used by the connection, and must not be modified.</doc>
          <array name="GLib.PtrArray" c:type="const GPtrArray*">
            <type name="Device"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-active-connection.c"
                 line="188">a #NMActiveConnection</doc>
            <type name="ActiveConnection" c:type="NMActiveConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_dhcp4_config"
              c:identifier="nm_active_connection_get_dhcp4_config">
        <doc xml:space="preserve"
             filename="libnm/nm-active-connection.c"
             line="289">Gets the current IPv4 #NMDhcpConfig (if any) associated with the
#NMActiveConnection.</doc>
        <source-position filename="libnm/nm-active-connection.h" line="87"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-active-connection.c"
               line="296">the IPv4 #NMDhcpConfig, or %NULL if the connection
  does not use DHCP, or is not in the %NM_ACTIVE_CONNECTION_STATE_ACTIVATED
  state.</doc>
          <type name="DhcpConfig" c:type="NMDhcpConfig*"/>
        </return-value>
        <parameters>
          <instance-parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-active-connection.c"
                 line="291">an #NMActiveConnection</doc>
            <type name="ActiveConnection" c:type="NMActiveConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_dhcp6_config"
              c:identifier="nm_active_connection_get_dhcp6_config">
        <doc xml:space="preserve"
             filename="libnm/nm-active-connection.c"
             line="342">Gets the current IPv6 #NMDhcpConfig (if any) associated with the
#NMActiveConnection.</doc>
        <source-position filename="libnm/nm-active-connection.h" line="90"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-active-connection.c"
               line="349">the IPv6 #NMDhcpConfig, or %NULL if the connection
  does not use DHCPv6, or is not in the %NM_ACTIVE_CONNECTION_STATE_ACTIVATED
  state.</doc>
          <type name="DhcpConfig" c:type="NMDhcpConfig*"/>
        </return-value>
        <parameters>
          <instance-parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-active-connection.c"
                 line="344">an #NMActiveConnection</doc>
            <type name="ActiveConnection" c:type="NMActiveConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_id" c:identifier="nm_active_connection_get_id">
        <doc xml:space="preserve"
             filename="libnm/nm-active-connection.c"
             line="112">Gets the #NMConnection's ID.</doc>
        <source-position filename="libnm/nm-active-connection.h" line="74"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-active-connection.c"
               line="118">the ID of the #NMConnection that backs the #NMActiveConnection.
This is the internal string used by the connection, and must not be modified.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-active-connection.c"
                 line="114">a #NMActiveConnection</doc>
            <type name="ActiveConnection" c:type="NMActiveConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_ip4_config"
              c:identifier="nm_active_connection_get_ip4_config">
        <doc xml:space="preserve"
             filename="libnm/nm-active-connection.c"
             line="272">Gets the current IPv4 #NMIPConfig associated with the #NMActiveConnection.</doc>
        <source-position filename="libnm/nm-active-connection.h" line="86"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-active-connection.c"
               line="278">the IPv4 #NMIPConfig, or %NULL if the connection is
  not in the %NM_ACTIVE_CONNECTION_STATE_ACTIVATED state.</doc>
          <type name="IPConfig" c:type="NMIPConfig*"/>
        </return-value>
        <parameters>
          <instance-parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-active-connection.c"
                 line="274">an #NMActiveConnection</doc>
            <type name="ActiveConnection" c:type="NMActiveConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_ip6_config"
              c:identifier="nm_active_connection_get_ip6_config">
        <doc xml:space="preserve"
             filename="libnm/nm-active-connection.c"
             line="325">Gets the current IPv6 #NMIPConfig associated with the #NMActiveConnection.</doc>
        <source-position filename="libnm/nm-active-connection.h" line="89"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-active-connection.c"
               line="331">the IPv6 #NMIPConfig, or %NULL if the connection is
  not in the %NM_ACTIVE_CONNECTION_STATE_ACTIVATED state.</doc>
          <type name="IPConfig" c:type="NMIPConfig*"/>
        </return-value>
        <parameters>
          <instance-parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-active-connection.c"
                 line="327">an #NMActiveConnection</doc>
            <type name="ActiveConnection" c:type="NMActiveConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_master" c:identifier="nm_active_connection_get_master">
        <doc xml:space="preserve"
             filename="libnm/nm-active-connection.c"
             line="377">Gets the master #NMDevice of the connection.</doc>
        <source-position filename="libnm/nm-active-connection.h" line="84"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-active-connection.c"
               line="383">the master #NMDevice of the #NMActiveConnection.</doc>
          <type name="Device" c:type="NMDevice*"/>
        </return-value>
        <parameters>
          <instance-parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-active-connection.c"
                 line="379">a #NMActiveConnection</doc>
            <type name="ActiveConnection" c:type="NMActiveConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_specific_object_path"
              c:identifier="nm_active_connection_get_specific_object_path">
        <doc xml:space="preserve"
             filename="libnm/nm-active-connection.c"
             line="163">Gets the path of the "specific object" used at activation.

Currently there is no single method that will allow you to automatically turn
this into an appropriate #NMObject; you need to know what kind of object it
is based on other information. (Eg, if @connection corresponds to a Wi-Fi
connection, then the specific object will be an #NMAccessPoint, and you can
resolve it with nm_device_wifi_get_access_point_by_path().)</doc>
        <source-position filename="libnm/nm-active-connection.h" line="77"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-active-connection.c"
               line="175">the specific object's D-Bus path. This is the internal string used
by the connection, and must not be modified.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-active-connection.c"
                 line="165">a #NMActiveConnection</doc>
            <type name="ActiveConnection" c:type="NMActiveConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_state" c:identifier="nm_active_connection_get_state">
        <doc xml:space="preserve"
             filename="libnm/nm-active-connection.c"
             line="203">Gets the active connection's state.</doc>
        <source-position filename="libnm/nm-active-connection.h" line="79"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-active-connection.c"
               line="209">the state</doc>
          <type name="ActiveConnectionState" c:type="NMActiveConnectionState"/>
        </return-value>
        <parameters>
          <instance-parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-active-connection.c"
                 line="205">a #NMActiveConnection</doc>
            <type name="ActiveConnection" c:type="NMActiveConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_state_flags"
              c:identifier="nm_active_connection_get_state_flags"
              version="1.10">
        <doc xml:space="preserve"
             filename="libnm/nm-active-connection.c"
             line="219">Gets the active connection's state flags.</doc>
        <source-position filename="libnm/nm-active-connection.h" line="81"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-active-connection.c"
               line="225">the state flags</doc>
          <type name="ActivationStateFlags" c:type="NMActivationStateFlags"/>
        </return-value>
        <parameters>
          <instance-parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-active-connection.c"
                 line="221">a #NMActiveConnection</doc>
            <type name="ActiveConnection" c:type="NMActiveConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_state_reason"
              c:identifier="nm_active_connection_get_state_reason"
              version="1.8">
        <doc xml:space="preserve"
             filename="libnm/nm-active-connection.c"
             line="237">Gets the reason for active connection's state.</doc>
        <source-position filename="libnm/nm-active-connection.h" line="83"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-active-connection.c"
               line="243">the reason</doc>
          <type name="ActiveConnectionStateReason"
                c:type="NMActiveConnectionStateReason"/>
        </return-value>
        <parameters>
          <instance-parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-active-connection.c"
                 line="239">a #NMActiveConnection</doc>
            <type name="ActiveConnection" c:type="NMActiveConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_uuid" c:identifier="nm_active_connection_get_uuid">
        <doc xml:space="preserve"
             filename="libnm/nm-active-connection.c"
             line="129">Gets the #NMConnection's UUID.</doc>
        <source-position filename="libnm/nm-active-connection.h" line="75"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-active-connection.c"
               line="135">the UUID of the #NMConnection that backs the #NMActiveConnection.
This is the internal string used by the connection, and must not be modified.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-active-connection.c"
                 line="131">a #NMActiveConnection</doc>
            <type name="ActiveConnection" c:type="NMActiveConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_vpn" c:identifier="nm_active_connection_get_vpn">
        <doc xml:space="preserve"
             filename="libnm/nm-active-connection.c"
             line="361">Whether the active connection is a VPN connection.</doc>
        <source-position filename="libnm/nm-active-connection.h" line="91"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-active-connection.c"
               line="367">%TRUE if the active connection is a VPN connection</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-active-connection.c"
                 line="363">a #NMActiveConnection</doc>
            <type name="ActiveConnection" c:type="NMActiveConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="connection" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-active-connection.c"
             line="600">The connection that this is an active instance of.</doc>
        <type name="RemoteConnection"/>
      </property>
      <property name="default" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-active-connection.c"
             line="701">Whether the active connection is the default IPv4 one.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="default6" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-active-connection.c"
             line="737">Whether the active connection is the default IPv6 one.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="devices" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-active-connection.c"
             line="661">The devices of the active connection.</doc>
        <array name="GLib.PtrArray">
          <type name="Device"/>
        </array>
      </property>
      <property name="dhcp4-config" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-active-connection.c"
             line="725">The IPv4 #NMDhcpConfig of the connection.</doc>
        <type name="DhcpConfig"/>
      </property>
      <property name="dhcp6-config" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-active-connection.c"
             line="761">The IPv6 #NMDhcpConfig of the connection.</doc>
        <type name="DhcpConfig"/>
      </property>
      <property name="id" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-active-connection.c"
             line="612">The active connection's ID</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="ip4-config" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-active-connection.c"
             line="713">The IPv4 #NMIPConfig of the connection.</doc>
        <type name="IPConfig"/>
      </property>
      <property name="ip6-config" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-active-connection.c"
             line="749">The IPv6 #NMIPConfig of the connection.</doc>
        <type name="IPConfig"/>
      </property>
      <property name="master" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-active-connection.c"
             line="785">The master device if one exists.</doc>
        <type name="Device"/>
      </property>
      <property name="specific-object-path" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-active-connection.c"
             line="648">The path to the "specific object" of the active connection; see
nm_active_connection_get_specific_object_path() for more details.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="state" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-active-connection.c"
             line="673">The state of the active connection.</doc>
        <type name="ActiveConnectionState"/>
      </property>
      <property name="state-flags" version="1.10" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-active-connection.c"
             line="686">The state flags of the active connection.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="type" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-active-connection.c"
             line="636">The active connection's type</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="uuid" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-active-connection.c"
             line="624">The active connection's UUID</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="vpn" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-active-connection.c"
             line="773">Whether the active connection is a VPN connection.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <field name="parent">
        <type name="Object" c:type="NMObject"/>
      </field>
      <glib:signal name="state-changed" when="first">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="state" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-active-connection.c"
                 line="800">the new state number (#NMActiveConnectionState)</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="reason" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-active-connection.c"
                 line="801">the state change reason (#NMActiveConnectionStateReason)</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="ActiveConnectionClass"
            c:type="NMActiveConnectionClass"
            glib:is-gtype-struct-for="ActiveConnection">
      <source-position filename="libnm/nm-active-connection.h" line="69"/>
      <field name="parent">
        <type name="ObjectClass" c:type="NMObjectClass"/>
      </field>
      <field name="padding" readable="0" private="1">
        <array zero-terminated="0" fixed-size="8">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <enumeration name="ActiveConnectionState"
                 glib:type-name="NMActiveConnectionState"
                 glib:get-type="nm_active_connection_state_get_type"
                 c:type="NMActiveConnectionState">
      <doc xml:space="preserve"
           filename="libnm-core/nm-dbus-interface.h"
           line="691">#NMActiveConnectionState values indicate the state of a connection to a
specific network while it is starting, connected, or disconnecting from that
network.</doc>
      <member name="unknown"
              value="0"
              c:identifier="NM_ACTIVE_CONNECTION_STATE_UNKNOWN"
              glib:nick="unknown">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="693">the state of the connection is unknown</doc>
      </member>
      <member name="activating"
              value="1"
              c:identifier="NM_ACTIVE_CONNECTION_STATE_ACTIVATING"
              glib:nick="activating">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="694">a network connection is being prepared</doc>
      </member>
      <member name="activated"
              value="2"
              c:identifier="NM_ACTIVE_CONNECTION_STATE_ACTIVATED"
              glib:nick="activated">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="695">there is a connection to the network</doc>
      </member>
      <member name="deactivating"
              value="3"
              c:identifier="NM_ACTIVE_CONNECTION_STATE_DEACTIVATING"
              glib:nick="deactivating">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="696">the network connection is being
  torn down and cleaned up</doc>
      </member>
      <member name="deactivated"
              value="4"
              c:identifier="NM_ACTIVE_CONNECTION_STATE_DEACTIVATED"
              glib:nick="deactivated">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="698">the network connection is disconnected
  and will be removed</doc>
      </member>
    </enumeration>
    <enumeration name="ActiveConnectionStateReason"
                 version="1.8"
                 glib:type-name="NMActiveConnectionStateReason"
                 glib:get-type="nm_active_connection_state_reason_get_type"
                 c:type="NMActiveConnectionStateReason">
      <doc xml:space="preserve"
           filename="libnm-core/nm-dbus-interface.h"
           line="713">Active connection state reasons.</doc>
      <member name="unknown"
              value="0"
              c:identifier="NM_ACTIVE_CONNECTION_STATE_REASON_UNKNOWN"
              glib:nick="unknown">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="715">The reason for the active connection
  state change is unknown.</doc>
      </member>
      <member name="none"
              value="1"
              c:identifier="NM_ACTIVE_CONNECTION_STATE_REASON_NONE"
              glib:nick="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="717">No reason was given for the active
  connection state change.</doc>
      </member>
      <member name="user_disconnected"
              value="2"
              c:identifier="NM_ACTIVE_CONNECTION_STATE_REASON_USER_DISCONNECTED"
              glib:nick="user-disconnected">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="719">The active connection changed
  state because the user disconnected it.</doc>
      </member>
      <member name="device_disconnected"
              value="3"
              c:identifier="NM_ACTIVE_CONNECTION_STATE_REASON_DEVICE_DISCONNECTED"
              glib:nick="device-disconnected">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="721">The active connection
  changed state because the device it was using was disconnected.</doc>
      </member>
      <member name="service_stopped"
              value="4"
              c:identifier="NM_ACTIVE_CONNECTION_STATE_REASON_SERVICE_STOPPED"
              glib:nick="service-stopped">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="723">The service providing the
  VPN connection was stopped.</doc>
      </member>
      <member name="ip_config_invalid"
              value="5"
              c:identifier="NM_ACTIVE_CONNECTION_STATE_REASON_IP_CONFIG_INVALID"
              glib:nick="ip-config-invalid">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="725">The IP config of the active
  connection was invalid.</doc>
      </member>
      <member name="connect_timeout"
              value="6"
              c:identifier="NM_ACTIVE_CONNECTION_STATE_REASON_CONNECT_TIMEOUT"
              glib:nick="connect-timeout">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="727">The connection attempt to
  the VPN service timed out.</doc>
      </member>
      <member name="service_start_timeout"
              value="7"
              c:identifier="NM_ACTIVE_CONNECTION_STATE_REASON_SERVICE_START_TIMEOUT"
              glib:nick="service-start-timeout">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="729">A timeout occurred
  while starting the service providing the VPN connection.</doc>
      </member>
      <member name="service_start_failed"
              value="8"
              c:identifier="NM_ACTIVE_CONNECTION_STATE_REASON_SERVICE_START_FAILED"
              glib:nick="service-start-failed">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="731">Starting the service
  providing the VPN connection failed.</doc>
      </member>
      <member name="no_secrets"
              value="9"
              c:identifier="NM_ACTIVE_CONNECTION_STATE_REASON_NO_SECRETS"
              glib:nick="no-secrets">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="733">Necessary secrets for the
  connection were not provided.</doc>
      </member>
      <member name="login_failed"
              value="10"
              c:identifier="NM_ACTIVE_CONNECTION_STATE_REASON_LOGIN_FAILED"
              glib:nick="login-failed">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="735">Authentication to the
  server failed.</doc>
      </member>
      <member name="connection_removed"
              value="11"
              c:identifier="NM_ACTIVE_CONNECTION_STATE_REASON_CONNECTION_REMOVED"
              glib:nick="connection-removed">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="737">The connection was
  deleted from settings.</doc>
      </member>
      <member name="dependency_failed"
              value="12"
              c:identifier="NM_ACTIVE_CONNECTION_STATE_REASON_DEPENDENCY_FAILED"
              glib:nick="dependency-failed">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="739">Master connection of this
  connection failed to activate.</doc>
      </member>
      <member name="device_realize_failed"
              value="13"
              c:identifier="NM_ACTIVE_CONNECTION_STATE_REASON_DEVICE_REALIZE_FAILED"
              glib:nick="device-realize-failed">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="741">Could not create the
  software device link.</doc>
      </member>
      <member name="device_removed"
              value="14"
              c:identifier="NM_ACTIVE_CONNECTION_STATE_REASON_DEVICE_REMOVED"
              glib:nick="device-removed">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="743">The device this connection
  depended on disappeared.</doc>
      </member>
    </enumeration>
    <enumeration name="AgentManagerError"
                 glib:type-name="NMAgentManagerError"
                 glib:get-type="nm_agent_manager_error_get_type"
                 c:type="NMAgentManagerError"
                 glib:error-domain="nm-agent-manager-error-quark">
      <doc xml:space="preserve"
           filename="libnm-core/nm-errors.h"
           line="23">Errors returned from the secret-agent manager.

These errors may be returned from operations that could cause secrets to be
requested (such as nm_client_activate_connection()), and correspond to D-Bus
errors in the "org.freedesktop.NetworkManager.AgentManager" namespace.</doc>
      <member name="Failed"
              value="0"
              c:identifier="NM_AGENT_MANAGER_ERROR_FAILED"
              glib:nick="Failed">
        <doc xml:space="preserve"
             filename="libnm-core/nm-errors.h"
             line="25">unknown or unspecified error</doc>
      </member>
      <member name="PermissionDenied"
              value="1"
              c:identifier="NM_AGENT_MANAGER_ERROR_PERMISSION_DENIED"
              glib:nick="PermissionDenied">
        <doc xml:space="preserve"
             filename="libnm-core/nm-errors.h"
             line="26">The caller does not have permission
  to register a secret agent, or is trying to register the same secret agent
  twice.</doc>
      </member>
      <member name="InvalidIdentifier"
              value="2"
              c:identifier="NM_AGENT_MANAGER_ERROR_INVALID_IDENTIFIER"
              glib:nick="InvalidIdentifier">
        <doc xml:space="preserve"
             filename="libnm-core/nm-errors.h"
             line="29">The identifier is not a valid
  secret agent identifier.</doc>
      </member>
      <member name="NotRegistered"
              value="3"
              c:identifier="NM_AGENT_MANAGER_ERROR_NOT_REGISTERED"
              glib:nick="NotRegistered">
        <doc xml:space="preserve"
             filename="libnm-core/nm-errors.h"
             line="31">The caller tried to unregister an agent
  that was not registered.</doc>
      </member>
      <member name="NoSecrets"
              value="4"
              c:identifier="NM_AGENT_MANAGER_ERROR_NO_SECRETS"
              glib:nick="NoSecrets">
        <doc xml:space="preserve"
             filename="libnm-core/nm-errors.h"
             line="33">No secret agent returned secrets for this
  request</doc>
      </member>
      <member name="UserCanceled"
              value="5"
              c:identifier="NM_AGENT_MANAGER_ERROR_USER_CANCELED"
              glib:nick="UserCanceled">
        <doc xml:space="preserve"
             filename="libnm-core/nm-errors.h"
             line="35">The user canceled the secrets request.</doc>
      </member>
      <function name="quark" c:identifier="nm_agent_manager_error_quark">
        <return-value transfer-ownership="none">
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
    </enumeration>
    <bitfield name="BluetoothCapabilities"
              glib:type-name="NMBluetoothCapabilities"
              glib:get-type="nm_bluetooth_capabilities_get_type"
              c:type="NMBluetoothCapabilities">
      <doc xml:space="preserve"
           filename="libnm-core/nm-dbus-interface.h"
           line="395">#NMBluetoothCapabilities values indicate the usable capabilities of a
Bluetooth device.</doc>
      <member name="none"
              value="0"
              c:identifier="NM_BT_CAPABILITY_NONE"
              glib:nick="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="397">device has no usable capabilities</doc>
      </member>
      <member name="dun"
              value="1"
              c:identifier="NM_BT_CAPABILITY_DUN"
              glib:nick="dun">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="398">device provides Dial-Up Networking capability</doc>
      </member>
      <member name="nap"
              value="2"
              c:identifier="NM_BT_CAPABILITY_NAP"
              glib:nick="nap">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="399">device provides Network Access Point capability</doc>
      </member>
    </bitfield>
    <constant name="CHECKPOINT_CREATED"
              value="created"
              c:type="NM_CHECKPOINT_CREATED">
      <source-position filename="libnm/nm-checkpoint.h" line="34"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="CHECKPOINT_DEVICES"
              value="devices"
              c:type="NM_CHECKPOINT_DEVICES">
      <source-position filename="libnm/nm-checkpoint.h" line="33"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="CHECKPOINT_ROLLBACK_TIMEOUT"
              value="rollback-timeout"
              c:type="NM_CHECKPOINT_ROLLBACK_TIMEOUT">
      <source-position filename="libnm/nm-checkpoint.h" line="35"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="CLIENT_ACTIVATING_CONNECTION"
              value="activating-connection"
              c:type="NM_CLIENT_ACTIVATING_CONNECTION">
      <source-position filename="libnm/nm-client.h" line="56"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="CLIENT_ACTIVE_CONNECTIONS"
              value="active-connections"
              c:type="NM_CLIENT_ACTIVE_CONNECTIONS">
      <source-position filename="libnm/nm-client.h" line="51"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="CLIENT_ACTIVE_CONNECTION_ADDED"
              value="active-connection-added"
              c:type="NM_CLIENT_ACTIVE_CONNECTION_ADDED">
      <source-position filename="libnm/nm-client.h" line="74"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="CLIENT_ACTIVE_CONNECTION_REMOVED"
              value="active-connection-removed"
              c:type="NM_CLIENT_ACTIVE_CONNECTION_REMOVED">
      <source-position filename="libnm/nm-client.h" line="75"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="CLIENT_ALL_DEVICES"
              value="all-devices"
              c:type="NM_CLIENT_ALL_DEVICES">
      <source-position filename="libnm/nm-client.h" line="58"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="CLIENT_ANY_DEVICE_ADDED"
              value="any-device-added"
              c:type="NM_CLIENT_ANY_DEVICE_ADDED">
      <source-position filename="libnm/nm-client.h" line="69"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="CLIENT_ANY_DEVICE_REMOVED"
              value="any-device-removed"
              c:type="NM_CLIENT_ANY_DEVICE_REMOVED">
      <source-position filename="libnm/nm-client.h" line="70"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="CLIENT_CAN_MODIFY"
              value="can-modify"
              c:type="NM_CLIENT_CAN_MODIFY">
      <source-position filename="libnm/nm-client.h" line="61"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="CLIENT_CONNECTIONS"
              value="connections"
              c:type="NM_CLIENT_CONNECTIONS">
      <source-position filename="libnm/nm-client.h" line="59"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="CLIENT_CONNECTION_ADDED"
              value="connection-added"
              c:type="NM_CLIENT_CONNECTION_ADDED">
      <source-position filename="libnm/nm-client.h" line="72"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="CLIENT_CONNECTION_REMOVED"
              value="connection-removed"
              c:type="NM_CLIENT_CONNECTION_REMOVED">
      <source-position filename="libnm/nm-client.h" line="73"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="CLIENT_CONNECTIVITY"
              value="connectivity"
              c:type="NM_CLIENT_CONNECTIVITY">
      <source-position filename="libnm/nm-client.h" line="52"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="CLIENT_CONNECTIVITY_CHECK_AVAILABLE"
              value="connectivity-check-available"
              c:type="NM_CLIENT_CONNECTIVITY_CHECK_AVAILABLE">
      <source-position filename="libnm/nm-client.h" line="53"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="CLIENT_CONNECTIVITY_CHECK_ENABLED"
              value="connectivity-check-enabled"
              c:type="NM_CLIENT_CONNECTIVITY_CHECK_ENABLED">
      <source-position filename="libnm/nm-client.h" line="54"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="CLIENT_DEVICES" value="devices" c:type="NM_CLIENT_DEVICES">
      <source-position filename="libnm/nm-client.h" line="57"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="CLIENT_DEVICE_ADDED"
              value="device-added"
              c:type="NM_CLIENT_DEVICE_ADDED">
      <source-position filename="libnm/nm-client.h" line="67"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="CLIENT_DEVICE_REMOVED"
              value="device-removed"
              c:type="NM_CLIENT_DEVICE_REMOVED">
      <source-position filename="libnm/nm-client.h" line="68"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="CLIENT_DNS_CONFIGURATION"
              value="dns-configuration"
              c:type="NM_CLIENT_DNS_CONFIGURATION">
      <source-position filename="libnm/nm-client.h" line="65"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="CLIENT_DNS_MODE"
              value="dns-mode"
              c:type="NM_CLIENT_DNS_MODE">
      <source-position filename="libnm/nm-client.h" line="63"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="CLIENT_DNS_RC_MANAGER"
              value="dns-rc-manager"
              c:type="NM_CLIENT_DNS_RC_MANAGER">
      <source-position filename="libnm/nm-client.h" line="64"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="CLIENT_HOSTNAME"
              value="hostname"
              c:type="NM_CLIENT_HOSTNAME">
      <source-position filename="libnm/nm-client.h" line="60"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="CLIENT_METERED" value="metered" c:type="NM_CLIENT_METERED">
      <source-position filename="libnm/nm-client.h" line="62"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="CLIENT_NETWORKING_ENABLED"
              value="networking-enabled"
              c:type="NM_CLIENT_NETWORKING_ENABLED">
      <source-position filename="libnm/nm-client.h" line="44"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="CLIENT_NM_RUNNING"
              value="nm-running"
              c:type="NM_CLIENT_NM_RUNNING">
      <source-position filename="libnm/nm-client.h" line="43"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="CLIENT_PERMISSION_CHANGED"
              value="permission-changed"
              c:type="NM_CLIENT_PERMISSION_CHANGED">
      <source-position filename="libnm/nm-client.h" line="71"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="CLIENT_PRIMARY_CONNECTION"
              value="primary-connection"
              c:type="NM_CLIENT_PRIMARY_CONNECTION">
      <source-position filename="libnm/nm-client.h" line="55"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="CLIENT_STARTUP" value="startup" c:type="NM_CLIENT_STARTUP">
      <source-position filename="libnm/nm-client.h" line="42"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="CLIENT_STATE" value="state" c:type="NM_CLIENT_STATE">
      <source-position filename="libnm/nm-client.h" line="41"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="CLIENT_VERSION" value="version" c:type="NM_CLIENT_VERSION">
      <source-position filename="libnm/nm-client.h" line="40"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="CLIENT_WIMAX_ENABLED"
              value="wimax-enabled"
              c:type="NM_CLIENT_WIMAX_ENABLED">
      <source-position filename="libnm/nm-client.h" line="49"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="CLIENT_WIMAX_HARDWARE_ENABLED"
              value="wimax-hardware-enabled"
              c:type="NM_CLIENT_WIMAX_HARDWARE_ENABLED">
      <source-position filename="libnm/nm-client.h" line="50"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="CLIENT_WIRELESS_ENABLED"
              value="wireless-enabled"
              c:type="NM_CLIENT_WIRELESS_ENABLED">
      <source-position filename="libnm/nm-client.h" line="45"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="CLIENT_WIRELESS_HARDWARE_ENABLED"
              value="wireless-hardware-enabled"
              c:type="NM_CLIENT_WIRELESS_HARDWARE_ENABLED">
      <source-position filename="libnm/nm-client.h" line="46"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="CLIENT_WWAN_ENABLED"
              value="wwan-enabled"
              c:type="NM_CLIENT_WWAN_ENABLED">
      <source-position filename="libnm/nm-client.h" line="47"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="CLIENT_WWAN_HARDWARE_ENABLED"
              value="wwan-hardware-enabled"
              c:type="NM_CLIENT_WWAN_HARDWARE_ENABLED">
      <source-position filename="libnm/nm-client.h" line="48"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="CONNECTION_CHANGED"
              value="changed"
              c:type="NM_CONNECTION_CHANGED">
      <source-position filename="libnm-core/nm-connection.h" line="44"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="CONNECTION_NORMALIZE_PARAM_IP6_CONFIG_METHOD"
              value="ip6-config-method"
              c:type="NM_CONNECTION_NORMALIZE_PARAM_IP6_CONFIG_METHOD">
      <source-position filename="libnm-core/nm-connection.h" line="51"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="CONNECTION_SECRETS_CLEARED"
              value="secrets-cleared"
              c:type="NM_CONNECTION_SECRETS_CLEARED">
      <source-position filename="libnm-core/nm-connection.h" line="43"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="CONNECTION_SECRETS_UPDATED"
              value="secrets-updated"
              c:type="NM_CONNECTION_SECRETS_UPDATED">
      <source-position filename="libnm-core/nm-connection.h" line="42"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <enumeration name="Capability"
                 glib:type-name="NMCapability"
                 glib:get-type="nm_capability_get_type"
                 c:type="NMCapability">
      <doc xml:space="preserve"
           filename="libnm-core/nm-dbus-interface.h"
           line="104">#NMCapability names the numbers in the Capabilities property.
Capabilities are positive numbers. They are part of stable API
and a certain capability number is guaranteed not to change.

The range 0x7000 - 0x7FFF of capabilities is guaranteed not to be
used by upstream NetworkManager. It could thus be used for downstream
extensions.</doc>
      <member name="team"
              value="1"
              c:identifier="NM_CAPABILITY_TEAM"
              glib:nick="team">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="106">Teams can be managed</doc>
      </member>
    </enumeration>
    <class name="Checkpoint"
           c:symbol-prefix="checkpoint"
           c:type="NMCheckpoint"
           parent="Object"
           glib:type-name="NMCheckpoint"
           glib:get-type="nm_checkpoint_get_type"
           glib:type-struct="CheckpointClass">
      <source-position filename="libnm/nm-checkpoint.h" line="40"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.Initable"/>
      <method name="get_created"
              c:identifier="nm_checkpoint_get_created"
              version="1.12">
        <doc xml:space="preserve"
             filename="libnm/nm-checkpoint.c"
             line="69">Gets the timestamp (in CLOCK_BOOTTIME milliseconds) of checkpoint creation.

Use nm_utils_get_timestamp_msec() to obtain current time value suitable for
comparing to this value.</doc>
        <source-position filename="libnm/nm-checkpoint.h" line="47"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-checkpoint.c"
               line="78">the timestamp of checkpoint creation.</doc>
          <type name="gint64" c:type="gint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="checkpoint" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-checkpoint.c"
                 line="71">a #NMCheckpoint</doc>
            <type name="Checkpoint" c:type="NMCheckpoint*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_devices"
              c:identifier="nm_checkpoint_get_devices"
              version="1.12">
        <doc xml:space="preserve"
             filename="libnm/nm-checkpoint.c"
             line="51">The devices that are part of this checkpoint.</doc>
        <source-position filename="libnm/nm-checkpoint.h" line="45"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-checkpoint.c"
               line="57">the devices list.</doc>
          <array name="GLib.PtrArray" c:type="const GPtrArray*">
            <type name="Device"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="checkpoint" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-checkpoint.c"
                 line="53">a #NMCheckpoint</doc>
            <type name="Checkpoint" c:type="NMCheckpoint*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_rollback_timeout"
              c:identifier="nm_checkpoint_get_rollback_timeout"
              version="1.12">
        <doc xml:space="preserve"
             filename="libnm/nm-checkpoint.c"
             line="90">Gets the timeout in seconds for automatic rollback.</doc>
        <source-position filename="libnm/nm-checkpoint.h" line="49"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-checkpoint.c"
               line="96">the rollback timeout.</doc>
          <type name="guint32" c:type="guint32"/>
        </return-value>
        <parameters>
          <instance-parameter name="checkpoint" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-checkpoint.c"
                 line="92">a #NMCheckpoint</doc>
            <type name="Checkpoint" c:type="NMCheckpoint*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="created" version="1.12" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-checkpoint.c"
             line="193">The timestamp (in CLOCK_BOOTTIME milliseconds) of checkpoint creation.</doc>
        <type name="gint64" c:type="gint64"/>
      </property>
      <property name="devices" version="1.12" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-checkpoint.c"
             line="179">The devices that are part of this checkpoint.</doc>
        <array name="GLib.PtrArray">
          <type name="Device"/>
        </array>
      </property>
      <property name="rollback-timeout"
                version="1.12"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-checkpoint.c"
             line="207">Timeout in seconds for automatic rollback, or zero.</doc>
        <type name="guint" c:type="guint"/>
      </property>
    </class>
    <record name="CheckpointClass"
            c:type="NMCheckpointClass"
            disguised="1"
            glib:is-gtype-struct-for="Checkpoint">
      <source-position filename="libnm/nm-checkpoint.h" line="40"/>
    </record>
    <bitfield name="CheckpointCreateFlags"
              version="1.4"
              glib:type-name="NMCheckpointCreateFlags"
              glib:get-type="nm_checkpoint_create_flags_get_type"
              c:type="NMCheckpointCreateFlags">
      <doc xml:space="preserve"
           filename="libnm-core/nm-dbus-interface.h"
           line="882">The flags for CheckpointCreate call</doc>
      <doc-version xml:space="preserve">(gi flags generated since 1.12)</doc-version>
      <member name="none"
              value="0"
              c:identifier="NM_CHECKPOINT_CREATE_FLAG_NONE"
              glib:nick="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="884">no flags</doc>
      </member>
      <member name="destroy_all"
              value="1"
              c:identifier="NM_CHECKPOINT_CREATE_FLAG_DESTROY_ALL"
              glib:nick="destroy-all">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="885">when creating
  a new checkpoint, destroy all existing ones.</doc>
      </member>
      <member name="delete_new_connections"
              value="2"
              c:identifier="NM_CHECKPOINT_CREATE_FLAG_DELETE_NEW_CONNECTIONS"
              glib:nick="delete-new-connections">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="887">upon rollback,
  delete any new connection added after the checkpoint (Since: 1.6)</doc>
      </member>
      <member name="disconnect_new_devices"
              value="4"
              c:identifier="NM_CHECKPOINT_CREATE_FLAG_DISCONNECT_NEW_DEVICES"
              glib:nick="disconnect-new-devices">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="889">upon rollback,
  disconnect any new device appeared after the checkpoint (Since: 1.6)</doc>
      </member>
      <member name="allow_overlapping"
              value="8"
              c:identifier="NM_CHECKPOINT_CREATE_FLAG_ALLOW_OVERLAPPING"
              glib:nick="allow-overlapping">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="891">by default, creating
  a checkpoint fails if there are already existing checkoints that
  reference the same devices. With this flag, creation of such
  checkpoints is allowed, however, if an older checkpoint
  that references overlapping devices gets rolled back, it will
  automatically destroy this checkpoint during rollback. This
  allows to create several overlapping checkpoints in parallel,
  and rollback to them at will. With the special case that
  rolling back to an older checkpoint will invalidate all
  overlapping younger checkpoints. This opts-in that the
  checkpoint can be automatically destroyed by the rollback
  of an older checkpoint. (Since: 1.12)</doc>
      </member>
    </bitfield>
    <class name="Client"
           c:symbol-prefix="client"
           c:type="NMClient"
           parent="GObject.Object"
           glib:type-name="NMClient"
           glib:get-type="nm_client_get_type"
           glib:type-struct="ClientClass">
      <source-position filename="libnm/nm-client.h" line="224"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.Initable"/>
      <constructor name="new" c:identifier="nm_client_new" throws="1">
        <doc xml:space="preserve"
             filename="libnm/nm-client.c"
             line="2033">Creates a new #NMClient.

Note that this will do blocking D-Bus calls to initialize the
client. You can use nm_client_new_async() if you want to avoid
that.</doc>
        <source-position filename="libnm/nm-client.h" line="228"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libnm/nm-client.c"
               line="2044">a new #NMClient or NULL on an error</doc>
          <type name="Client" c:type="NMClient*"/>
        </return-value>
        <parameters>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="2035">a #GCancellable, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_finish"
                   c:identifier="nm_client_new_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="libnm/nm-client.c"
             line="2095">Gets the result of an nm_client_new_async() call.</doc>
        <source-position filename="libnm/nm-client.h" line="234"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libnm/nm-client.c"
               line="2102">a new #NMClient, or %NULL on error</doc>
          <type name="Client" c:type="NMClient*"/>
        </return-value>
        <parameters>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="2097">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new_async" c:identifier="nm_client_new_async">
        <doc xml:space="preserve"
             filename="libnm/nm-client.c"
             line="2068">Creates a new #NMClient and begins asynchronously initializing it.
@callback will be called when it is done; use
nm_client_new_finish() to get the result. Note that on an error,
the callback can be invoked with two first parameters as NULL.</doc>
        <source-position filename="libnm/nm-client.h" line="231"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="2070">a #GCancellable, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="2071">callback to call when the client is created</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="2072">data for @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="any_device_added">
        <source-position filename="libnm/nm-client.h" line="214"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <type name="Client" c:type="NMClient*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <type name="Device" c:type="NMDevice*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="any_device_removed">
        <source-position filename="libnm/nm-client.h" line="215"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <type name="Client" c:type="NMClient*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <type name="Device" c:type="NMDevice*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="connection_added">
        <source-position filename="libnm/nm-client.h" line="219"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <type name="Client" c:type="NMClient*"/>
          </instance-parameter>
          <parameter name="connection" transfer-ownership="none">
            <type name="RemoteConnection" c:type="NMRemoteConnection*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="connection_removed">
        <source-position filename="libnm/nm-client.h" line="220"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <type name="Client" c:type="NMClient*"/>
          </instance-parameter>
          <parameter name="connection" transfer-ownership="none">
            <type name="RemoteConnection" c:type="NMRemoteConnection*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="device_added">
        <source-position filename="libnm/nm-client.h" line="212"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <type name="Client" c:type="NMClient*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <type name="Device" c:type="NMDevice*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="device_removed">
        <source-position filename="libnm/nm-client.h" line="213"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <type name="Client" c:type="NMClient*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <type name="Device" c:type="NMDevice*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="permission_changed">
        <source-position filename="libnm/nm-client.h" line="216"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <type name="Client" c:type="NMClient*"/>
          </instance-parameter>
          <parameter name="permission" transfer-ownership="none">
            <type name="ClientPermission" c:type="NMClientPermission"/>
          </parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="ClientPermissionResult"
                  c:type="NMClientPermissionResult"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="activate_connection_async"
              c:identifier="nm_client_activate_connection_async">
        <doc xml:space="preserve"
             filename="libnm/nm-client.c"
             line="1071">Asynchronously starts a connection to a particular network using the
configuration settings from @connection and the network device @device.
Certain connection types also take a "specific object" which is the object
path of a connection- specific object, like an #NMAccessPoint for Wi-Fi
connections, or an #NMWimaxNsp for WiMAX connections, to which you wish to
connect.  If the specific object is not given, NetworkManager can, in some
cases, automatically determine which network to connect to given the settings
in @connection.

If @connection is not given for a device-based activation, NetworkManager
picks the best available connection for the device and activates it.

Note that the callback is invoked when NetworkManager has started activating
the new connection, not when it finishes. You can use the returned
#NMActiveConnection object (in particular, #NMActiveConnection:state) to
track the activation to its completion.</doc>
        <source-position filename="libnm/nm-client.h" line="322"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="1073">a #NMClient</doc>
            <type name="Client" c:type="NMClient*"/>
          </instance-parameter>
          <parameter name="connection"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="1074">an #NMConnection</doc>
            <type name="Connection" c:type="NMConnection*"/>
          </parameter>
          <parameter name="device"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="1075">the #NMDevice</doc>
            <type name="Device" c:type="NMDevice*"/>
          </parameter>
          <parameter name="specific_object"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="1076">the object path of a connection-type-specific
  object this activation should use. This parameter is currently ignored for
  wired and mobile broadband connections, and the value of %NULL should be used
  (ie, no specific object).  For Wi-Fi or WiMAX connections, pass the object
  path of a #NMAccessPoint or #NMWimaxNsp owned by @device, which you can
  get using nm_object_get_path(), and which will be used to complete the
  details of the newly added connection.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="1083">a #GCancellable, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="5">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="1084">callback to be called when the activation has started</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="1085">caller-specific data passed to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="activate_connection_finish"
              c:identifier="nm_client_activate_connection_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="libnm/nm-client.c"
             line="1136">Gets the result of a call to nm_client_activate_connection_async().</doc>
        <source-position filename="libnm/nm-client.h" line="329"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libnm/nm-client.c"
               line="1144">the new #NMActiveConnection on success, %NULL on
  failure, in which case @error will be set.</doc>
          <type name="ActiveConnection" c:type="NMActiveConnection*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="1138">an #NMClient</doc>
            <type name="Client" c:type="NMClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="1139">the result passed to the #GAsyncReadyCallback</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_and_activate_connection2"
              c:identifier="nm_client_add_and_activate_connection2"
              version="1.16">
        <doc xml:space="preserve"
             filename="libnm/nm-client.c"
             line="1283">Adds a new connection using the given details (if any) as a template,
automatically filling in missing settings with the capabilities of the given
device and specific object.  The new connection is then asynchronously
activated as with nm_client_activate_connection_async(). Cannot be used for
VPN connections at this time.

Note that the callback is invoked when NetworkManager has started activating
the new connection, not when it finishes. You can used the returned
#NMActiveConnection object (in particular, #NMActiveConnection:state) to
track the activation to its completion.

This is identitcal to nm_client_add_and_activate_connection_async() but takes
a further @options parameter. Currently the following options are supported
by the daemon:
 * "persist": A string describing how the connection should be stored.
              The default is "disk", but it can be modified to "memory" (until
              the daemon quits) or "volatile" (will be deleted on disconnect).
 * "bind-activation": Bind the connection lifetime to something. The default is "none",
           meaning an explicit disconnect is needed. The value "dbus-client"
           means the connection will automatically be deactivated when the calling
           DBus client disappears from the system bus.</doc>
        <source-position filename="libnm/nm-client.h" line="345"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="1285">a #NMClient</doc>
            <type name="Client" c:type="NMClient*"/>
          </instance-parameter>
          <parameter name="partial"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="1286">an #NMConnection to add; the connection may be
  partially filled (or even %NULL) and will be completed by NetworkManager
  using the given @device and @specific_object before being added</doc>
            <type name="Connection" c:type="NMConnection*"/>
          </parameter>
          <parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="1289">the #NMDevice</doc>
            <type name="Device" c:type="NMDevice*"/>
          </parameter>
          <parameter name="specific_object"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="1290">the object path of a connection-type-specific
  object this activation should use. This parameter is currently ignored for
  wired and mobile broadband connections, and the value of %NULL should be used
  (ie, no specific object).  For Wi-Fi or WiMAX connections, pass the object
  path of a #NMAccessPoint or #NMWimaxNsp owned by @device, which you can
  get using nm_object_get_path(), and which will be used to complete the
  details of the newly added connection.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="1297">a #GVariant containing a dictionary with options, or %NULL</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="1298">a #GCancellable, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="1299">callback to be called when the activation has started</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="1300">caller-specific data passed to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_and_activate_connection2_finish"
              c:identifier="nm_client_add_and_activate_connection2_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="libnm/nm-client.c"
             line="1364">Gets the result of a call to nm_client_add_and_activate_connection2().

You can call nm_active_connection_get_connection() on the returned
#NMActiveConnection to find the path of the created #NMConnection.</doc>
        <source-position filename="libnm/nm-client.h" line="354"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libnm/nm-client.c"
               line="1378">the new #NMActiveConnection on success, %NULL on
  failure, in which case @error will be set.</doc>
          <type name="ActiveConnection" c:type="NMActiveConnection*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="1366">an #NMClient</doc>
            <type name="Client" c:type="NMClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="1367">the result passed to the #GAsyncReadyCallback</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
          <parameter name="out_result"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="1369">(transfer full): the output result
  of type "a{sv}" returned by D-Bus' AddAndActivate2 call. Currently no
  output is implemented yet.</doc>
            <type name="GLib.Variant" c:type="GVariant**"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_and_activate_connection_async"
              c:identifier="nm_client_add_and_activate_connection_async">
        <doc xml:space="preserve"
             filename="libnm/nm-client.c"
             line="1185">Adds a new connection using the given details (if any) as a template,
automatically filling in missing settings with the capabilities of the given
device and specific object.  The new connection is then asynchronously
activated as with nm_client_activate_connection_async(). Cannot be used for
VPN connections at this time.

Note that the callback is invoked when NetworkManager has started activating
the new connection, not when it finishes. You can used the returned
#NMActiveConnection object (in particular, #NMActiveConnection:state) to
track the activation to its completion.</doc>
        <source-position filename="libnm/nm-client.h" line="333"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="1187">a #NMClient</doc>
            <type name="Client" c:type="NMClient*"/>
          </instance-parameter>
          <parameter name="partial"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="1188">an #NMConnection to add; the connection may be
  partially filled (or even %NULL) and will be completed by NetworkManager
  using the given @device and @specific_object before being added</doc>
            <type name="Connection" c:type="NMConnection*"/>
          </parameter>
          <parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="1191">the #NMDevice</doc>
            <type name="Device" c:type="NMDevice*"/>
          </parameter>
          <parameter name="specific_object"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="1192">the object path of a connection-type-specific
  object this activation should use. This parameter is currently ignored for
  wired and mobile broadband connections, and the value of %NULL should be used
  (ie, no specific object).  For Wi-Fi or WiMAX connections, pass the object
  path of a #NMAccessPoint or #NMWimaxNsp owned by @device, which you can
  get using nm_object_get_path(), and which will be used to complete the
  details of the newly added connection.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="1199">a #GCancellable, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="5">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="1200">callback to be called when the activation has started</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="1201">caller-specific data passed to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_and_activate_connection_finish"
              c:identifier="nm_client_add_and_activate_connection_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="libnm/nm-client.c"
             line="1251">Gets the result of a call to nm_client_add_and_activate_connection_async().

You can call nm_active_connection_get_connection() on the returned
#NMActiveConnection to find the path of the created #NMConnection.</doc>
        <source-position filename="libnm/nm-client.h" line="340"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libnm/nm-client.c"
               line="1262">the new #NMActiveConnection on success, %NULL on
  failure, in which case @error will be set.</doc>
          <type name="ActiveConnection" c:type="NMActiveConnection*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="1253">an #NMClient</doc>
            <type name="Client" c:type="NMClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="1254">the result passed to the #GAsyncReadyCallback</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_connection_async"
              c:identifier="nm_client_add_connection_async">
        <doc xml:space="preserve"
             filename="libnm/nm-client.c"
             line="1632">Requests that the remote settings service add the given settings to a new
connection.  If @save_to_disk is %TRUE, the connection is immediately written
to disk; otherwise it is initially only stored in memory, but may be saved
later by calling the connection's nm_remote_connection_commit_changes()
method.

@connection is untouched by this function and only serves as a template of
the settings to add.  The #NMRemoteConnection object that represents what
NetworkManager actually added is returned to @callback when the addition
operation is complete.

Note that the #NMRemoteConnection returned in @callback may not contain
identical settings to @connection as NetworkManager may perform automatic
completion and/or normalization of connection properties.</doc>
        <source-position filename="libnm/nm-client.h" line="380"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="1634">the %NMClient</doc>
            <type name="Client" c:type="NMClient*"/>
          </instance-parameter>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="1635">the connection to add. Note that this object's settings will be
  added, not the object itself</doc>
            <type name="Connection" c:type="NMConnection*"/>
          </parameter>
          <parameter name="save_to_disk" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="1637">whether to immediately save the connection to disk</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="1638">a #GCancellable, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="1639">callback to be called when the add operation completes</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="1640">caller-specific data passed to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_connection_finish"
              c:identifier="nm_client_add_connection_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="libnm/nm-client.c"
             line="1685">Gets the result of a call to nm_client_add_connection_async().</doc>
        <source-position filename="libnm/nm-client.h" line="386"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libnm/nm-client.c"
               line="1693">the new #NMRemoteConnection on success, %NULL on
  failure, in which case @error will be set.</doc>
          <type name="RemoteConnection" c:type="NMRemoteConnection*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="1687">an #NMClient</doc>
            <type name="Client" c:type="NMClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="1688">the result passed to the #GAsyncReadyCallback</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="check_connectivity"
              c:identifier="nm_client_check_connectivity"
              throws="1">
        <doc xml:space="preserve"
             filename="libnm/nm-client.c"
             line="651">Updates the network connectivity state and returns the (new)
current state. Contrast nm_client_get_connectivity(), which returns
the most recent known state without re-checking.

This is a blocking call; use nm_client_check_connectivity_async()
if you do not want to block.</doc>
        <source-position filename="libnm/nm-client.h" line="283"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-client.c"
               line="664">the (new) current connectivity state</doc>
          <type name="ConnectivityState" c:type="NMConnectivityState"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="653">an #NMClient</doc>
            <type name="Client" c:type="NMClient*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="654">a #GCancellable</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="check_connectivity_async"
              c:identifier="nm_client_check_connectivity_async">
        <doc xml:space="preserve"
             filename="libnm/nm-client.c"
             line="700">Asynchronously updates the network connectivity state and invokes
@callback when complete. Contrast nm_client_get_connectivity(),
which (immediately) returns the most recent known state without
re-checking, and nm_client_check_connectivity(), which blocks.</doc>
        <source-position filename="libnm/nm-client.h" line="286"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="702">an #NMClient</doc>
            <type name="Client" c:type="NMClient*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="703">a #GCancellable</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="704">callback to call with the result</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="705">data for @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="check_connectivity_finish"
              c:identifier="nm_client_check_connectivity_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="libnm/nm-client.c"
             line="736">Retrieves the result of an nm_client_check_connectivity_async()
call.</doc>
        <source-position filename="libnm/nm-client.h" line="290"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-client.c"
               line="745">the (new) current connectivity state</doc>
          <type name="ConnectivityState" c:type="NMConnectivityState"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="738">an #NMClient</doc>
            <type name="Client" c:type="NMClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="739">the #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="checkpoint_adjust_rollback_timeout"
              c:identifier="nm_client_checkpoint_adjust_rollback_timeout"
              version="1.12">
        <doc xml:space="preserve"
             filename="libnm/nm-client.c"
             line="2528">Resets the timeout for the checkpoint with path @checkpoint_path
to @timeout_add.</doc>
        <source-position filename="libnm/nm-client.h" line="462"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="2530">the %NMClient</doc>
            <type name="Client" c:type="NMClient*"/>
          </instance-parameter>
          <parameter name="checkpoint_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="2531">a D-Bus path to a checkpoint</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="add_timeout" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="2532">the timeout in seconds counting from now.
  Set to zero, to disable the timeout.</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="2534">a #GCancellable, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="2535">callback to be called when the add operation completes</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="2536">caller-specific data passed to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="checkpoint_adjust_rollback_timeout_finish"
              c:identifier="nm_client_checkpoint_adjust_rollback_timeout_finish"
              version="1.12"
              throws="1">
        <doc xml:space="preserve"
             filename="libnm/nm-client.c"
             line="2571">Gets the result of a call to nm_client_checkpoint_adjust_rollback_timeout().</doc>
        <source-position filename="libnm/nm-client.h" line="470"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-client.c"
               line="2579">%TRUE on success or %FALSE on failure.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="2573">an #NMClient</doc>
            <type name="Client" c:type="NMClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="2574">the result passed to the #GAsyncReadyCallback</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="checkpoint_create"
              c:identifier="nm_client_checkpoint_create"
              version="1.12">
        <doc xml:space="preserve"
             filename="libnm/nm-client.c"
             line="2258">Creates a checkpoint of the current networking configuration
for given interfaces. An empty @devices argument means all
devices. If @rollback_timeout is not zero, a rollback is
automatically performed after the given timeout.</doc>
        <source-position filename="libnm/nm-client.h" line="427"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="2260">the %NMClient</doc>
            <type name="Client" c:type="NMClient*"/>
          </instance-parameter>
          <parameter name="devices" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="2261">a list of devices for which a
  checkpoint should be created.</doc>
            <array name="GLib.PtrArray" c:type="const GPtrArray*">
              <type name="Device"/>
            </array>
          </parameter>
          <parameter name="rollback_timeout" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="2263">the rollback timeout in seconds</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="2264">creation flags</doc>
            <type name="CheckpointCreateFlags"
                  c:type="NMCheckpointCreateFlags"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="2265">a #GCancellable, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="5">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="2266">callback to be called when the add operation completes</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="2267">caller-specific data passed to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="checkpoint_create_finish"
              c:identifier="nm_client_checkpoint_create_finish"
              version="1.12"
              throws="1">
        <doc xml:space="preserve"
             filename="libnm/nm-client.c"
             line="2304">Gets the result of a call to nm_client_checkpoint_create().</doc>
        <source-position filename="libnm/nm-client.h" line="435"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libnm/nm-client.c"
               line="2312">the new #NMCheckpoint on success, %NULL on
  failure, in which case @error will be set.</doc>
          <type name="Checkpoint" c:type="NMCheckpoint*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="2306">the #NMClient</doc>
            <type name="Client" c:type="NMClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="2307">the result passed to the #GAsyncReadyCallback</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="checkpoint_destroy"
              c:identifier="nm_client_checkpoint_destroy"
              version="1.12">
        <doc xml:space="preserve"
             filename="libnm/nm-client.c"
             line="2351">Destroys an existing checkpoint without performing a rollback.</doc>
        <source-position filename="libnm/nm-client.h" line="440"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="2353">the %NMClient</doc>
            <type name="Client" c:type="NMClient*"/>
          </instance-parameter>
          <parameter name="checkpoint_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="2354">the D-Bus path for the checkpoint</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="2355">a #GCancellable, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="2356">callback to be called when the add operation completes</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="2357">caller-specific data passed to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="checkpoint_destroy_finish"
              c:identifier="nm_client_checkpoint_destroy_finish"
              version="1.12"
              throws="1">
        <doc xml:space="preserve"
             filename="libnm/nm-client.c"
             line="2390">Gets the result of a call to nm_client_checkpoint_destroy().</doc>
        <source-position filename="libnm/nm-client.h" line="446"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-client.c"
               line="2398">%TRUE on success or %FALSE on failure, in which case
  @error will be set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="2392">an #NMClient</doc>
            <type name="Client" c:type="NMClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="2393">the result passed to the #GAsyncReadyCallback</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="checkpoint_rollback"
              c:identifier="nm_client_checkpoint_rollback"
              version="1.12">
        <doc xml:space="preserve"
             filename="libnm/nm-client.c"
             line="2439">Performs the rollback of a checkpoint before the timeout is reached.</doc>
        <source-position filename="libnm/nm-client.h" line="451"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="2441">the %NMClient</doc>
            <type name="Client" c:type="NMClient*"/>
          </instance-parameter>
          <parameter name="checkpoint_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="2442">the D-Bus path to the checkpoint</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="2443">a #GCancellable, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="2444">callback to be called when the add operation completes</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="2445">caller-specific data passed to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="checkpoint_rollback_finish"
              c:identifier="nm_client_checkpoint_rollback_finish"
              version="1.12"
              throws="1">
        <doc xml:space="preserve"
             filename="libnm/nm-client.c"
             line="2478">Gets the result of a call to nm_client_checkpoint_rollback().</doc>
        <source-position filename="libnm/nm-client.h" line="457"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libnm/nm-client.c"
               line="2486">an hash table of
  devices and results. Devices are represented by their original
  D-Bus path; each result is a #NMRollbackResult.</doc>
          <type name="GLib.HashTable" c:type="GHashTable*">
            <type name="utf8"/>
            <type name="guint32"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="2480">an #NMClient</doc>
            <type name="Client" c:type="NMClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="2481">the result passed to the #GAsyncReadyCallback</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="connectivity_check_get_available"
              c:identifier="nm_client_connectivity_check_get_available"
              version="1.10">
        <doc xml:space="preserve"
             filename="libnm/nm-client.c"
             line="490">Determine whether connectivity checking is available.  This
requires that the URI of a connectivity service has been set in the
configuration file.</doc>
        <source-position filename="libnm/nm-client.h" line="260"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-client.c"
               line="498">%TRUE if connectivity checking is available.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="492">a #NMClient</doc>
            <type name="Client" c:type="NMClient*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="connectivity_check_get_enabled"
              c:identifier="nm_client_connectivity_check_get_enabled"
              version="1.10">
        <doc xml:space="preserve"
             filename="libnm/nm-client.c"
             line="513">Determine whether connectivity checking is enabled.</doc>
        <source-position filename="libnm/nm-client.h" line="263"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-client.c"
               line="519">%TRUE if connectivity checking is enabled.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="515">a #NMClient</doc>
            <type name="Client" c:type="NMClient*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="connectivity_check_set_enabled"
              c:identifier="nm_client_connectivity_check_set_enabled"
              version="1.10">
        <doc xml:space="preserve"
             filename="libnm/nm-client.c"
             line="534">Enable or disable connectivity checking.  Note that if a
connectivity checking URI has not been configured, this will not
have any effect.</doc>
        <source-position filename="libnm/nm-client.h" line="266"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="536">a #NMClient</doc>
            <type name="Client" c:type="NMClient*"/>
          </instance-parameter>
          <parameter name="enabled" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="537">%TRUE to enable connectivity checking</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="deactivate_connection"
              c:identifier="nm_client_deactivate_connection"
              throws="1">
        <doc xml:space="preserve"
             filename="libnm/nm-client.c"
             line="1403">Deactivates an active #NMActiveConnection.</doc>
        <source-position filename="libnm/nm-client.h" line="359"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-client.c"
               line="1412">success or failure</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="1405">a #NMClient</doc>
            <type name="Client" c:type="NMClient*"/>
          </instance-parameter>
          <parameter name="active" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="1406">the #NMActiveConnection to deactivate</doc>
            <type name="ActiveConnection" c:type="NMActiveConnection*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="1407">a #GCancellable, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="deactivate_connection_async"
              c:identifier="nm_client_deactivate_connection_async">
        <doc xml:space="preserve"
             filename="libnm/nm-client.c"
             line="1446">Asynchronously deactivates an active #NMActiveConnection.</doc>
        <source-position filename="libnm/nm-client.h" line="363"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="1448">a #NMClient</doc>
            <type name="Client" c:type="NMClient*"/>
          </instance-parameter>
          <parameter name="active" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="1449">the #NMActiveConnection to deactivate</doc>
            <type name="ActiveConnection" c:type="NMActiveConnection*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="1450">a #GCancellable, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="1451">callback to be called when the deactivation has completed</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="1452">caller-specific data passed to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="deactivate_connection_finish"
              c:identifier="nm_client_deactivate_connection_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="libnm/nm-client.c"
             line="1485">Gets the result of a call to nm_client_deactivate_connection_async().</doc>
        <source-position filename="libnm/nm-client.h" line="368"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-client.c"
               line="1493">success or failure</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="1487">a #NMClient</doc>
            <type name="Client" c:type="NMClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="1488">the result passed to the #GAsyncReadyCallback</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_activating_connection"
              c:identifier="nm_client_get_activating_connection">
        <doc xml:space="preserve"
             filename="libnm/nm-client.c"
             line="1030">Gets the #NMActiveConnection corresponding to a
currently-activating connection that is expected to become the new
#NMClient:primary-connection upon successful activation.</doc>
        <source-position filename="libnm/nm-client.h" line="320"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-client.c"
               line="1038">the appropriate #NMActiveConnection, if
any.</doc>
          <type name="ActiveConnection" c:type="NMActiveConnection*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="1032">an #NMClient</doc>
            <type name="Client" c:type="NMClient*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_active_connections"
              c:identifier="nm_client_get_active_connections">
        <doc xml:space="preserve"
             filename="libnm/nm-client.c"
             line="979">Gets the active connections.</doc>
        <source-position filename="libnm/nm-client.h" line="317"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-client.c"
               line="985">a #GPtrArray
 containing all the active #NMActiveConnections.
The returned array is owned by the client and should not be modified.</doc>
          <array name="GLib.PtrArray" c:type="const GPtrArray*">
            <type name="ActiveConnection"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="981">a #NMClient</doc>
            <type name="Client" c:type="NMClient*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_all_devices"
              c:identifier="nm_client_get_all_devices"
              version="1.2">
        <doc xml:space="preserve"
             filename="libnm/nm-client.c"
             line="902">Gets both real devices and device placeholders (eg, software devices which
do not currently exist, but could be created automatically by NetworkManager
if one of their NMDevice::ActivatableConnections was activated).  Use
nm_device_is_real() to determine whether each device is a real device or
a placeholder.

Use nm_device_get_type() or the NM_IS_DEVICE_XXXX() functions to determine
what kind of device each member of the returned array is, and then you may
use device-specific methods such as nm_device_ethernet_get_hw_address().</doc>
        <source-position filename="libnm/nm-client.h" line="311"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-client.c"
               line="916">a #GPtrArray
containing all the #NMDevices.  The returned array is owned by the
#NMClient object and should not be modified.</doc>
          <array name="GLib.PtrArray" c:type="const GPtrArray*">
            <type name="Device"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="904">a #NMClient</doc>
            <type name="Client" c:type="NMClient*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_checkpoints"
              c:identifier="nm_client_get_checkpoints"
              version="1.12">
        <doc xml:space="preserve"
             filename="libnm/nm-client.c"
             line="2235">Gets all the active checkpoints.</doc>
        <source-position filename="libnm/nm-client.h" line="424"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-client.c"
               line="2241">a #GPtrArray
containing all the #NMCheckpoint.  The returned array is owned by the
#NMClient object and should not be modified.</doc>
          <array name="GLib.PtrArray" c:type="const GPtrArray*">
            <type name="Checkpoint"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="2237">a #NMClient</doc>
            <type name="Client" c:type="NMClient*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_connection_by_id"
              c:identifier="nm_client_get_connection_by_id">
        <doc xml:space="preserve"
             filename="libnm/nm-client.c"
             line="1538">Returns the first matching %NMRemoteConnection matching a given @id.</doc>
        <source-position filename="libnm/nm-client.h" line="376"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-client.c"
               line="1545">the remote connection object on success, or %NULL if no
 matching object was found.

The connection is as received from D-Bus and might not validate according
to nm_connection_verify().</doc>
          <type name="RemoteConnection" c:type="NMRemoteConnection*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="1540">the %NMClient</doc>
            <type name="Client" c:type="NMClient*"/>
          </instance-parameter>
          <parameter name="id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="1541">the id of the remote connection</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_connection_by_path"
              c:identifier="nm_client_get_connection_by_path">
        <doc xml:space="preserve"
             filename="libnm/nm-client.c"
             line="1563">Returns the %NMRemoteConnection representing the connection at @path.</doc>
        <source-position filename="libnm/nm-client.h" line="377"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-client.c"
               line="1570">the remote connection object on success, or %NULL if the object was
 not known

The connection is as received from D-Bus and might not validate according
to nm_connection_verify().</doc>
          <type name="RemoteConnection" c:type="NMRemoteConnection*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="1565">the %NMClient</doc>
            <type name="Client" c:type="NMClient*"/>
          </instance-parameter>
          <parameter name="path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="1566">the D-Bus object path of the remote connection</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_connection_by_uuid"
              c:identifier="nm_client_get_connection_by_uuid">
        <doc xml:space="preserve"
             filename="libnm/nm-client.c"
             line="1588">Returns the %NMRemoteConnection identified by @uuid.</doc>
        <source-position filename="libnm/nm-client.h" line="378"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-client.c"
               line="1595">the remote connection object on success, or %NULL if the object was
 not known

The connection is as received from D-Bus and might not validate according
to nm_connection_verify().</doc>
          <type name="RemoteConnection" c:type="NMRemoteConnection*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="1590">the %NMClient</doc>
            <type name="Client" c:type="NMClient*"/>
          </instance-parameter>
          <parameter name="uuid" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="1591">the UUID of the remote connection</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_connections" c:identifier="nm_client_get_connections">
        <source-position filename="libnm/nm-client.h" line="374"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-client.c"
               line="1520">an array
containing all connections provided by the remote settings service.  The
returned array is owned by the #NMClient object and should not be modified.

The connections are as received from D-Bus and might not validate according
to nm_connection_verify().</doc>
          <array name="GLib.PtrArray" c:type="const GPtrArray*">
            <type name="RemoteConnection"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="1518">the %NMClient</doc>
            <type name="Client" c:type="NMClient*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_connectivity"
              c:identifier="nm_client_get_connectivity">
        <doc xml:space="preserve"
             filename="libnm/nm-client.c"
             line="629">Gets the current network connectivity state. Contrast
nm_client_check_connectivity() and
nm_client_check_connectivity_async(), which re-check the
connectivity state first before returning any information.</doc>
        <source-position filename="libnm/nm-client.h" line="281"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-client.c"
               line="638">the current connectivity state</doc>
          <type name="ConnectivityState" c:type="NMConnectivityState"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="631">an #NMClient</doc>
            <type name="Client" c:type="NMClient*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_device_by_iface"
              c:identifier="nm_client_get_device_by_iface">
        <doc xml:space="preserve"
             filename="libnm/nm-client.c"
             line="954">Gets a #NMDevice from a #NMClient.</doc>
        <source-position filename="libnm/nm-client.h" line="313"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-client.c"
               line="961">the #NMDevice for the given @iface or %NULL if none is found.</doc>
          <type name="Device" c:type="NMDevice*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="956">a #NMClient</doc>
            <type name="Client" c:type="NMClient*"/>
          </instance-parameter>
          <parameter name="iface" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="957">the interface name to search for</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_device_by_path"
              c:identifier="nm_client_get_device_by_path">
        <doc xml:space="preserve"
             filename="libnm/nm-client.c"
             line="933">Gets a #NMDevice from a #NMClient.</doc>
        <source-position filename="libnm/nm-client.h" line="312"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-client.c"
               line="940">the #NMDevice for the given @object_path or %NULL if none is found.</doc>
          <type name="Device" c:type="NMDevice*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="935">a #NMClient</doc>
            <type name="Client" c:type="NMClient*"/>
          </instance-parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="936">the object path to search for</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_devices" c:identifier="nm_client_get_devices">
        <doc xml:space="preserve"
             filename="libnm/nm-client.c"
             line="878">Gets all the known network devices.  Use nm_device_get_type() or the
&lt;literal&gt;NM_IS_DEVICE_XXXX&lt;/literal&gt; functions to determine what kind of
device member of the returned array is, and then you may use device-specific
methods such as nm_device_ethernet_get_hw_address().</doc>
        <source-position filename="libnm/nm-client.h" line="309"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-client.c"
               line="887">a #GPtrArray
containing all the #NMDevices.  The returned array is owned by the
#NMClient object and should not be modified.</doc>
          <array name="GLib.PtrArray" c:type="const GPtrArray*">
            <type name="Device"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="880">a #NMClient</doc>
            <type name="Client" c:type="NMClient*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_dns_configuration"
              c:identifier="nm_client_get_dns_configuration"
              version="1.6">
        <doc xml:space="preserve"
             filename="libnm/nm-client.c"
             line="2004">Gets the current DNS configuration</doc>
        <source-position filename="libnm/nm-client.h" line="421"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-client.c"
               line="2010">a #GPtrArray
containing #NMDnsEntry elements or %NULL in case the value is not
available.  The returned array is owned by the #NMClient object
and should not be modified.</doc>
          <array name="GLib.PtrArray" c:type="const GPtrArray*">
            <type name="DnsEntry"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="2006">a #NMClient</doc>
            <type name="Client" c:type="NMClient*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_dns_mode"
              c:identifier="nm_client_get_dns_mode"
              version="1.6">
        <doc xml:space="preserve"
             filename="libnm/nm-client.c"
             line="1954">Gets the current DNS processing mode.</doc>
        <source-position filename="libnm/nm-client.h" line="417"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-client.c"
               line="1960">the DNS processing mode, or %NULL in case the
  value is not available.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="1956">the #NMClient</doc>
            <type name="Client" c:type="NMClient*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_dns_rc_manager"
              c:identifier="nm_client_get_dns_rc_manager"
              version="1.6">
        <doc xml:space="preserve"
             filename="libnm/nm-client.c"
             line="1979">Gets the current DNS resolv.conf manager.</doc>
        <source-position filename="libnm/nm-client.h" line="419"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-client.c"
               line="1985">the resolv.conf manager or %NULL in case the
  value is not available.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="1981">the #NMClient</doc>
            <type name="Client" c:type="NMClient*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_logging"
              c:identifier="nm_client_get_logging"
              throws="1">
        <doc xml:space="preserve"
             filename="libnm/nm-client.c"
             line="556">Gets NetworkManager current logging level and domains.</doc>
        <source-position filename="libnm/nm-client.h" line="269"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-client.c"
               line="566">%TRUE on success, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="558">a #NMClient</doc>
            <type name="Client" c:type="NMClient*"/>
          </instance-parameter>
          <parameter name="level"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="559">return location for logging level string</doc>
            <type name="utf8" c:type="char**"/>
          </parameter>
          <parameter name="domains"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="560">return location for log domains string. The string is
  a list of domains separated by ","</doc>
            <type name="utf8" c:type="char**"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_nm_running" c:identifier="nm_client_get_nm_running">
        <doc xml:space="preserve"
             filename="libnm/nm-client.c"
             line="263">Determines whether the daemon is running.</doc>
        <source-position filename="libnm/nm-client.h" line="240"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-client.c"
               line="269">%TRUE if the daemon is running</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="265">a #NMClient</doc>
            <type name="Client" c:type="NMClient*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_permission_result"
              c:identifier="nm_client_get_permission_result">
        <doc xml:space="preserve"
             filename="libnm/nm-client.c"
             line="608">Requests the result of a specific permission, which indicates whether the
client can or cannot perform the action the permission represents</doc>
        <source-position filename="libnm/nm-client.h" line="278"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-client.c"
               line="616">the permission's result, one of #NMClientPermissionResult</doc>
          <type name="ClientPermissionResult"
                c:type="NMClientPermissionResult"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="610">a #NMClient</doc>
            <type name="Client" c:type="NMClient*"/>
          </instance-parameter>
          <parameter name="permission" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="611">the permission for which to return the result, one of #NMClientPermission</doc>
            <type name="ClientPermission" c:type="NMClientPermission"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_primary_connection"
              c:identifier="nm_client_get_primary_connection">
        <doc xml:space="preserve"
             filename="libnm/nm-client.c"
             line="1000">Gets the #NMActiveConnection corresponding to the primary active
network device.

In particular, when there is no VPN active, or the VPN does not
have the default route, this returns the active connection that has
the default route. If there is a VPN active with the default route,
then this function returns the active connection that contains the
route to the VPN endpoint.

If there is no default route, or the default route is over a
non-NetworkManager-recognized device, this will return %NULL.</doc>
        <source-position filename="libnm/nm-client.h" line="319"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-client.c"
               line="1016">the appropriate #NMActiveConnection, if
any</doc>
          <type name="ActiveConnection" c:type="NMActiveConnection*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="1002">an #NMClient</doc>
            <type name="Client" c:type="NMClient*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_startup" c:identifier="nm_client_get_startup">
        <doc xml:space="preserve"
             filename="libnm/nm-client.c"
             line="243">Tests whether the daemon is still in the process of activating
connections at startup.</doc>
        <source-position filename="libnm/nm-client.h" line="239"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-client.c"
               line="250">whether the daemon is still starting up</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="245">a #NMClient</doc>
            <type name="Client" c:type="NMClient*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_state" c:identifier="nm_client_get_state">
        <doc xml:space="preserve"
             filename="libnm/nm-client.c"
             line="224">Gets the current daemon state.</doc>
        <source-position filename="libnm/nm-client.h" line="238"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-client.c"
               line="230">the current %NMState</doc>
          <type name="State" c:type="NMState"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="226">a #NMClient</doc>
            <type name="Client" c:type="NMClient*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_version" c:identifier="nm_client_get_version">
        <doc xml:space="preserve"
             filename="libnm/nm-client.c"
             line="205">Gets NetworkManager version.</doc>
        <source-position filename="libnm/nm-client.h" line="237"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-client.c"
               line="211">string with the version (or %NULL if NetworkManager is not running)</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="207">a #NMClient</doc>
            <type name="Client" c:type="NMClient*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="load_connections"
              c:identifier="nm_client_load_connections"
              throws="1">
        <doc xml:space="preserve"
             filename="libnm/nm-client.c"
             line="1713">Requests that the remote settings service load or reload the given files,
adding or updating the connections described within.

The changes to the indicated files will not yet be reflected in
@client's connections array when the function returns.

If all of the indicated files were successfully loaded, the
function will return %TRUE, and @failures will be set to %NULL. If
NetworkManager tried to load the files, but some (or all) failed,
then @failures will be set to a %NULL-terminated array of the
filenames that failed to load.</doc>
        <source-position filename="libnm/nm-client.h" line="390"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-client.c"
               line="1734">%TRUE if NetworkManager at least tried to load @filenames,
%FALSE if an error occurred (eg, permission denied).</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="1715">the %NMClient</doc>
            <type name="Client" c:type="NMClient*"/>
          </instance-parameter>
          <parameter name="filenames" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="1716">%NULL-terminated array of filenames to load</doc>
            <array c:type="char**">
              <type name="utf8" c:type="char*"/>
            </array>
          </parameter>
          <parameter name="failures"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="1717">on return, a %NULL-terminated array of
  filenames that failed to load</doc>
            <type name="utf8" c:type="char***"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="1719">a #GCancellable, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="load_connections_async"
              c:identifier="nm_client_load_connections_async">
        <doc xml:space="preserve"
             filename="libnm/nm-client.c"
             line="1772">Requests that the remote settings service asynchronously load or reload the
given files, adding or updating the connections described within.

See nm_client_load_connections() for more details.</doc>
        <source-position filename="libnm/nm-client.h" line="395"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="1774">the %NMClient</doc>
            <type name="Client" c:type="NMClient*"/>
          </instance-parameter>
          <parameter name="filenames" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="1775">%NULL-terminated array of filenames to load</doc>
            <array c:type="char**">
              <type name="utf8" c:type="char*"/>
            </array>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="1776">a #GCancellable, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="1777">callback to be called when the operation completes</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="1778">caller-specific data passed to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="load_connections_finish"
              c:identifier="nm_client_load_connections_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="libnm/nm-client.c"
             line="1812">Gets the result of an nm_client_load_connections_async() call.

See nm_client_load_connections() for more details.</doc>
        <source-position filename="libnm/nm-client.h" line="400"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-client.c"
               line="1824">%TRUE if NetworkManager at least tried to load @filenames,
%FALSE if an error occurred (eg, permission denied).</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="1814">the %NMClient</doc>
            <type name="Client" c:type="NMClient*"/>
          </instance-parameter>
          <parameter name="failures"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="1815">on return, a
   %NULL-terminated array of filenames that failed to load</doc>
            <array c:type="char***">
              <type name="utf8" c:type="char**"/>
            </array>
          </parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="1817">the result passed to the #GAsyncReadyCallback</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="networking_get_enabled"
              c:identifier="nm_client_networking_get_enabled">
        <doc xml:space="preserve"
             filename="libnm/nm-client.c"
             line="279">Whether networking is enabled or disabled.</doc>
        <source-position filename="libnm/nm-client.h" line="242"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-client.c"
               line="285">%TRUE if networking is enabled, %FALSE if networking is disabled</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="281">a #NMClient</doc>
            <type name="Client" c:type="NMClient*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="networking_set_enabled"
              c:identifier="nm_client_networking_set_enabled"
              throws="1">
        <doc xml:space="preserve"
             filename="libnm/nm-client.c"
             line="298">Enables or disables networking.  When networking is disabled, all controlled
interfaces are disconnected and deactivated.  When networking is enabled,
all controlled interfaces are available for activation.</doc>
        <source-position filename="libnm/nm-client.h" line="243"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-client.c"
               line="308">%TRUE on success, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="300">a #NMClient</doc>
            <type name="Client" c:type="NMClient*"/>
          </instance-parameter>
          <parameter name="enabled" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="301">%TRUE to set networking enabled, %FALSE to set networking disabled</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="reload_connections"
              c:identifier="nm_client_reload_connections"
              throws="1">
        <doc xml:space="preserve"
             filename="libnm/nm-client.c"
             line="1848">Requests that the remote settings service reload all connection
files from disk, adding, updating, and removing connections until
the in-memory state matches the on-disk state.</doc>
        <source-position filename="libnm/nm-client.h" line="405"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-client.c"
               line="1858">%TRUE on success, %FALSE on failure</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="1850">the #NMClient</doc>
            <type name="Client" c:type="NMClient*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="1851">a #GCancellable, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="reload_connections_async"
              c:identifier="nm_client_reload_connections_async">
        <doc xml:space="preserve"
             filename="libnm/nm-client.c"
             line="1890">Requests that the remote settings service begin reloading all connection
files from disk, adding, updating, and removing connections until the
in-memory state matches the on-disk state.</doc>
        <source-position filename="libnm/nm-client.h" line="408"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="1892">the #NMClient</doc>
            <type name="Client" c:type="NMClient*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="1893">a #GCancellable, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="1894">callback to be called when the reload operation completes</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="1895">caller-specific data passed to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="reload_connections_finish"
              c:identifier="nm_client_reload_connections_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="libnm/nm-client.c"
             line="1925">Gets the result of an nm_client_reload_connections_async() call.</doc>
        <source-position filename="libnm/nm-client.h" line="412"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-client.c"
               line="1933">%TRUE on success, %FALSE on failure</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="1927">the #NMClient</doc>
            <type name="Client" c:type="NMClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="1928">the result passed to the #GAsyncReadyCallback</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="save_hostname"
              c:identifier="nm_client_save_hostname"
              throws="1">
        <doc xml:space="preserve"
             filename="libnm/nm-client.c"
             line="764">Requests that the machine's persistent hostname be set to the specified value
or cleared.</doc>
        <source-position filename="libnm/nm-client.h" line="294"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-client.c"
               line="775">%TRUE if the request was successful, %FALSE if it failed</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="766">the %NMClient</doc>
            <type name="Client" c:type="NMClient*"/>
          </instance-parameter>
          <parameter name="hostname"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="767">the new persistent hostname to set, or %NULL to
  clear any existing persistent hostname</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="769">a #GCancellable, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="save_hostname_async"
              c:identifier="nm_client_save_hostname_async">
        <doc xml:space="preserve"
             filename="libnm/nm-client.c"
             line="809">Requests that the machine's persistent hostname be set to the specified value
or cleared.</doc>
        <source-position filename="libnm/nm-client.h" line="298"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="811">the %NMClient</doc>
            <type name="Client" c:type="NMClient*"/>
          </instance-parameter>
          <parameter name="hostname"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="812">the new persistent hostname to set, or %NULL to
  clear any existing persistent hostname</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="814">a #GCancellable, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="815">callback to be called when the operation completes</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="816">caller-specific data passed to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="save_hostname_finish"
              c:identifier="nm_client_save_hostname_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="libnm/nm-client.c"
             line="847">Gets the result of an nm_client_save_hostname_async() call.</doc>
        <source-position filename="libnm/nm-client.h" line="303"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-client.c"
               line="855">%TRUE if the request was successful, %FALSE if it failed</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="849">the %NMClient</doc>
            <type name="Client" c:type="NMClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="850">the result passed to the #GAsyncReadyCallback</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_logging"
              c:identifier="nm_client_set_logging"
              throws="1">
        <doc xml:space="preserve"
             filename="libnm/nm-client.c"
             line="583">Sets NetworkManager logging level and/or domains.</doc>
        <source-position filename="libnm/nm-client.h" line="273"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-client.c"
               line="593">%TRUE on success, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="585">a #NMClient</doc>
            <type name="Client" c:type="NMClient*"/>
          </instance-parameter>
          <parameter name="level"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="586">logging level to set (%NULL or an empty string for no change)</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="domains"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="587">logging domains to set. The string should be a list of log
  domains separated by ",". (%NULL or an empty string for no change)</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="wimax_get_enabled"
              c:identifier="nm_client_wimax_get_enabled">
        <doc xml:space="preserve"
             filename="libnm/nm-client.c"
             line="434">Determines whether WiMAX is enabled.</doc>
        <source-position filename="libnm/nm-client.h" line="255"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-client.c"
               line="440">%TRUE if WiMAX is enabled</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="436">a #NMClient</doc>
            <type name="Client" c:type="NMClient*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="wimax_hardware_get_enabled"
              c:identifier="nm_client_wimax_hardware_get_enabled">
        <doc xml:space="preserve"
             filename="libnm/nm-client.c"
             line="471">Determines whether the WiMAX hardware is enabled.</doc>
        <source-position filename="libnm/nm-client.h" line="257"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-client.c"
               line="477">%TRUE if the WiMAX hardware is enabled</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="473">a #NMClient</doc>
            <type name="Client" c:type="NMClient*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="wimax_set_enabled"
              c:identifier="nm_client_wimax_set_enabled">
        <doc xml:space="preserve"
             filename="libnm/nm-client.c"
             line="453">Enables or disables WiMAX devices.</doc>
        <source-position filename="libnm/nm-client.h" line="256"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="455">a #NMClient</doc>
            <type name="Client" c:type="NMClient*"/>
          </instance-parameter>
          <parameter name="enabled" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="456">%TRUE to enable WiMAX</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="wireless_get_enabled"
              c:identifier="nm_client_wireless_get_enabled">
        <doc xml:space="preserve"
             filename="libnm/nm-client.c"
             line="322">Determines whether the wireless is enabled.</doc>
        <source-position filename="libnm/nm-client.h" line="247"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-client.c"
               line="328">%TRUE if wireless is enabled</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="324">a #NMClient</doc>
            <type name="Client" c:type="NMClient*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="wireless_hardware_get_enabled"
              c:identifier="nm_client_wireless_hardware_get_enabled">
        <doc xml:space="preserve"
             filename="libnm/nm-client.c"
             line="359">Determines whether the wireless hardware is enabled.</doc>
        <source-position filename="libnm/nm-client.h" line="249"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-client.c"
               line="365">%TRUE if the wireless hardware is enabled</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="361">a #NMClient</doc>
            <type name="Client" c:type="NMClient*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="wireless_set_enabled"
              c:identifier="nm_client_wireless_set_enabled">
        <doc xml:space="preserve"
             filename="libnm/nm-client.c"
             line="341">Enables or disables wireless devices.</doc>
        <source-position filename="libnm/nm-client.h" line="248"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="343">a #NMClient</doc>
            <type name="Client" c:type="NMClient*"/>
          </instance-parameter>
          <parameter name="enabled" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="344">%TRUE to enable wireless</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="wwan_get_enabled"
              c:identifier="nm_client_wwan_get_enabled">
        <doc xml:space="preserve"
             filename="libnm/nm-client.c"
             line="378">Determines whether WWAN is enabled.</doc>
        <source-position filename="libnm/nm-client.h" line="251"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-client.c"
               line="384">%TRUE if WWAN is enabled</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="380">a #NMClient</doc>
            <type name="Client" c:type="NMClient*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="wwan_hardware_get_enabled"
              c:identifier="nm_client_wwan_hardware_get_enabled">
        <doc xml:space="preserve"
             filename="libnm/nm-client.c"
             line="415">Determines whether the WWAN hardware is enabled.</doc>
        <source-position filename="libnm/nm-client.h" line="253"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-client.c"
               line="421">%TRUE if the WWAN hardware is enabled</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="417">a #NMClient</doc>
            <type name="Client" c:type="NMClient*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="wwan_set_enabled"
              c:identifier="nm_client_wwan_set_enabled">
        <doc xml:space="preserve"
             filename="libnm/nm-client.c"
             line="397">Enables or disables WWAN devices.</doc>
        <source-position filename="libnm/nm-client.h" line="252"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="399">a #NMClient</doc>
            <type name="Client" c:type="NMClient*"/>
          </instance-parameter>
          <parameter name="enabled" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="400">%TRUE to enable WWAN</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <property name="activating-connection" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-client.c"
             line="3583">The #NMActiveConnection of the activating connection that is
likely to become the new #NMClient:primary-connection.</doc>
        <type name="ActiveConnection"/>
      </property>
      <property name="active-connections" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-client.c"
             line="3517">The active connections.</doc>
        <array name="GLib.PtrArray">
          <type name="ActiveConnection"/>
        </array>
      </property>
      <property name="all-devices" version="1.2" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-client.c"
             line="3608">List of both real devices and device placeholders.</doc>
        <array name="GLib.PtrArray">
          <type name="Device"/>
        </array>
      </property>
      <property name="can-modify" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-client.c"
             line="3649">If %TRUE, adding and modifying connections is supported.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="checkpoints" version="1.12" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-client.c"
             line="3723">The list of active checkpoints.</doc>
        <array name="GLib.PtrArray">
          <type name="Checkpoint"/>
        </array>
      </property>
      <property name="connections" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-client.c"
             line="3621">The list of configured connections that are available to the user. (Note
that this differs from the underlying D-Bus property, which may also
contain the object paths of connections that the user does not have
permission to read the details of.)</doc>
        <array name="GLib.PtrArray">
          <type name="RemoteConnection"/>
        </array>
      </property>
      <property name="connectivity" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-client.c"
             line="3529">The network connectivity state.</doc>
        <type name="ConnectivityState"/>
      </property>
      <property name="connectivity-check-available" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="connectivity-check-enabled"
                writable="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="devices" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-client.c"
             line="3596">List of real network devices.  Does not include placeholder devices.</doc>
        <array name="GLib.PtrArray">
          <type name="Device"/>
        </array>
      </property>
      <property name="dns-configuration"
                version="1.6"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-client.c"
             line="3703">The current DNS configuration represented as an array of
dictionaries.  Each dictionary has the "nameservers",
"priority" keys and, optionally, "interface" and "vpn".
"nameservers" is the list of DNS servers, "priority" their
relative priority, "interface" the interface on which these
servers are contacted, "vpn" a boolean telling whether the
configuration was obtained from a VPN connection.</doc>
        <array name="GLib.PtrArray">
          <type name="GLib.Variant"/>
        </array>
      </property>
      <property name="dns-mode" version="1.6" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-client.c"
             line="3675">The current DNS processing mode.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="dns-rc-manager" version="1.6" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-client.c"
             line="3689">The current resolv.conf management mode.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="hostname" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-client.c"
             line="3636">The machine hostname stored in persistent configuration. This can be
modified by calling nm_client_save_hostname().</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="metered" version="1.2" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-client.c"
             line="3661">Whether the connectivity is metered.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="networking-enabled"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-client.c"
             line="3433">Whether networking is enabled.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="nm-running" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-client.c"
             line="3421">Whether the daemon is running.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="primary-connection" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-client.c"
             line="3570">The #NMActiveConnection of the device with the default route;
see nm_client_get_primary_connection() for more details.</doc>
        <type name="ActiveConnection"/>
      </property>
      <property name="startup" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-client.c"
             line="3409">Whether the daemon is still starting up.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="state" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-client.c"
             line="3396">The current daemon state.</doc>
        <type name="State"/>
      </property>
      <property name="version" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-client.c"
             line="3384">The NetworkManager version.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="wimax-enabled" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-client.c"
             line="3493">Whether WiMAX functionality is enabled.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="wimax-hardware-enabled" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-client.c"
             line="3505">Whether the WiMAX hardware is enabled.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="wireless-enabled" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-client.c"
             line="3445">Whether wireless is enabled.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="wireless-hardware-enabled" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-client.c"
             line="3457">Whether the wireless hardware is enabled.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="wwan-enabled" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-client.c"
             line="3469">Whether WWAN functionality is enabled.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="wwan-hardware-enabled" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-client.c"
             line="3481">Whether the WWAN hardware is enabled.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <glib:signal name="active-connection-added" when="first">
        <doc xml:space="preserve"
             filename="libnm/nm-client.c"
             line="3853">Notifies that a #NMActiveConnection has been added.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="active_connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="3856">the new active connection</doc>
            <type name="ActiveConnection"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="active-connection-removed" when="first">
        <doc xml:space="preserve"
             filename="libnm/nm-client.c"
             line="3868">Notifies that a #NMActiveConnection has been removed.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="active_connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="3871">the removed active connection</doc>
            <type name="ActiveConnection"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="any-device-added" when="first">
        <doc xml:space="preserve"
             filename="libnm/nm-client.c"
             line="3773">Notifies that a #NMDevice is added.  This signal is emitted for both
regular devices and placeholder devices.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="3776">the new device</doc>
            <type name="Device"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="any-device-removed" when="first">
        <doc xml:space="preserve"
             filename="libnm/nm-client.c"
             line="3790">Notifies that a #NMDevice is removed.  This signal is emitted for both
regular devices and placeholder devices.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="3793">the removed device</doc>
            <type name="Device"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="connection-added" when="first">
        <doc xml:space="preserve"
             filename="libnm/nm-client.c"
             line="3821">Notifies that a #NMConnection has been added.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="3824">the new connection</doc>
            <type name="RemoteConnection"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="connection-removed" when="first">
        <doc xml:space="preserve"
             filename="libnm/nm-client.c"
             line="3837">Notifies that a #NMConnection has been removed.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="3840">the removed connection</doc>
            <type name="RemoteConnection"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="device-added" when="first">
        <doc xml:space="preserve"
             filename="libnm/nm-client.c"
             line="3739">Notifies that a #NMDevice is added.  This signal is not emitted for
placeholder devices.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="3742">the new device</doc>
            <type name="Device"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="device-removed" when="first">
        <doc xml:space="preserve"
             filename="libnm/nm-client.c"
             line="3756">Notifies that a #NMDevice is removed.  This signal is not emitted for
placeholder devices.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="3759">the removed device</doc>
            <type name="Device"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="permission-changed" when="first">
        <doc xml:space="preserve"
             filename="libnm/nm-client.c"
             line="3807">Notifies that a permission has changed</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="permission" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="3810">a permission from #NMClientPermission</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-client.c"
                 line="3811">the permission's result, one of #NMClientPermissionResult</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="ClientClass"
            c:type="NMClientClass"
            glib:is-gtype-struct-for="Client">
      <source-position filename="libnm/nm-client.h" line="224"/>
      <field name="parent">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="device_added">
        <callback name="device_added">
          <source-position filename="libnm/nm-client.h" line="212"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="client" transfer-ownership="none">
              <type name="Client" c:type="NMClient*"/>
            </parameter>
            <parameter name="device" transfer-ownership="none">
              <type name="Device" c:type="NMDevice*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="device_removed">
        <callback name="device_removed">
          <source-position filename="libnm/nm-client.h" line="213"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="client" transfer-ownership="none">
              <type name="Client" c:type="NMClient*"/>
            </parameter>
            <parameter name="device" transfer-ownership="none">
              <type name="Device" c:type="NMDevice*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="any_device_added">
        <callback name="any_device_added">
          <source-position filename="libnm/nm-client.h" line="214"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="client" transfer-ownership="none">
              <type name="Client" c:type="NMClient*"/>
            </parameter>
            <parameter name="device" transfer-ownership="none">
              <type name="Device" c:type="NMDevice*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="any_device_removed">
        <callback name="any_device_removed">
          <source-position filename="libnm/nm-client.h" line="215"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="client" transfer-ownership="none">
              <type name="Client" c:type="NMClient*"/>
            </parameter>
            <parameter name="device" transfer-ownership="none">
              <type name="Device" c:type="NMDevice*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="permission_changed">
        <callback name="permission_changed">
          <source-position filename="libnm/nm-client.h" line="216"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="client" transfer-ownership="none">
              <type name="Client" c:type="NMClient*"/>
            </parameter>
            <parameter name="permission" transfer-ownership="none">
              <type name="ClientPermission" c:type="NMClientPermission"/>
            </parameter>
            <parameter name="result" transfer-ownership="none">
              <type name="ClientPermissionResult"
                    c:type="NMClientPermissionResult"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="connection_added">
        <callback name="connection_added">
          <source-position filename="libnm/nm-client.h" line="219"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="client" transfer-ownership="none">
              <type name="Client" c:type="NMClient*"/>
            </parameter>
            <parameter name="connection" transfer-ownership="none">
              <type name="RemoteConnection" c:type="NMRemoteConnection*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="connection_removed">
        <callback name="connection_removed">
          <source-position filename="libnm/nm-client.h" line="220"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="client" transfer-ownership="none">
              <type name="Client" c:type="NMClient*"/>
            </parameter>
            <parameter name="connection" transfer-ownership="none">
              <type name="RemoteConnection" c:type="NMRemoteConnection*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="padding" readable="0" private="1">
        <array zero-terminated="0" fixed-size="6">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <enumeration name="ClientError"
                 glib:type-name="NMClientError"
                 glib:get-type="nm_client_error_get_type"
                 c:type="NMClientError"
                 glib:error-domain="nm-client-error-quark">
      <doc xml:space="preserve"
           filename="libnm/nm-client.h"
           line="158">Describes errors that may result from operations involving a #NMClient.

D-Bus operations may also return errors from other domains, including
#NMManagerError, #NMSettingsError, #NMAgentManagerError, and #NMConnectionError.</doc>
      <member name="failed"
              value="0"
              c:identifier="NM_CLIENT_ERROR_FAILED"
              glib:nick="failed">
        <doc xml:space="preserve"
             filename="libnm/nm-client.h"
             line="160">unknown or unclassified error</doc>
      </member>
      <member name="manager_not_running"
              value="1"
              c:identifier="NM_CLIENT_ERROR_MANAGER_NOT_RUNNING"
              glib:nick="manager-not-running">
        <doc xml:space="preserve"
             filename="libnm/nm-client.h"
             line="161">an operation that requires NetworkManager
  failed because NetworkManager is not running</doc>
      </member>
      <member name="object_creation_failed"
              value="2"
              c:identifier="NM_CLIENT_ERROR_OBJECT_CREATION_FAILED"
              glib:nick="object-creation-failed">
        <doc xml:space="preserve"
             filename="libnm/nm-client.h"
             line="163">NetworkManager claimed that an
  operation succeeded, but the object that was allegedly created (eg,
  #NMRemoteConnection, #NMActiveConnection) was apparently destroyed before
  #NMClient could create a representation of it.</doc>
      </member>
      <function name="quark" c:identifier="nm_client_error_quark">
        <doc xml:space="preserve"
             filename="libnm/nm-client.c"
             line="175">Registers an error quark for #NMClient if necessary.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-client.c"
               line="180">the error quark used for #NMClient errors.</doc>
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
    </enumeration>
    <enumeration name="ClientPermission"
                 glib:type-name="NMClientPermission"
                 glib:get-type="nm_client_permission_get_type"
                 c:type="NMClientPermission">
      <doc xml:space="preserve"
           filename="libnm/nm-client.h"
           line="77">#NMClientPermission values indicate various permissions that NetworkManager
clients can obtain to perform certain tasks on behalf of the current user.</doc>
      <member name="none"
              value="0"
              c:identifier="NM_CLIENT_PERMISSION_NONE"
              glib:nick="none">
        <doc xml:space="preserve"
             filename="libnm/nm-client.h"
             line="79">unknown or no permission</doc>
      </member>
      <member name="enable_disable_network"
              value="1"
              c:identifier="NM_CLIENT_PERMISSION_ENABLE_DISABLE_NETWORK"
              glib:nick="enable-disable-network">
        <doc xml:space="preserve"
             filename="libnm/nm-client.h"
             line="80">controls whether networking
 can be globally enabled or disabled</doc>
      </member>
      <member name="enable_disable_wifi"
              value="2"
              c:identifier="NM_CLIENT_PERMISSION_ENABLE_DISABLE_WIFI"
              glib:nick="enable-disable-wifi">
        <doc xml:space="preserve"
             filename="libnm/nm-client.h"
             line="82">controls whether Wi-Fi can be
 globally enabled or disabled</doc>
      </member>
      <member name="enable_disable_wwan"
              value="3"
              c:identifier="NM_CLIENT_PERMISSION_ENABLE_DISABLE_WWAN"
              glib:nick="enable-disable-wwan">
        <doc xml:space="preserve"
             filename="libnm/nm-client.h"
             line="84">controls whether WWAN (3G) can be
 globally enabled or disabled</doc>
      </member>
      <member name="enable_disable_wimax"
              value="4"
              c:identifier="NM_CLIENT_PERMISSION_ENABLE_DISABLE_WIMAX"
              glib:nick="enable-disable-wimax">
        <doc xml:space="preserve"
             filename="libnm/nm-client.h"
             line="86">controls whether WiMAX can be
 globally enabled or disabled</doc>
      </member>
      <member name="sleep_wake"
              value="5"
              c:identifier="NM_CLIENT_PERMISSION_SLEEP_WAKE"
              glib:nick="sleep-wake">
        <doc xml:space="preserve"
             filename="libnm/nm-client.h"
             line="88">controls whether the client can ask
 NetworkManager to sleep and wake</doc>
      </member>
      <member name="network_control"
              value="6"
              c:identifier="NM_CLIENT_PERMISSION_NETWORK_CONTROL"
              glib:nick="network-control">
        <doc xml:space="preserve"
             filename="libnm/nm-client.h"
             line="90">controls whether networking connections
 can be started, stopped, and changed</doc>
      </member>
      <member name="wifi_share_protected"
              value="7"
              c:identifier="NM_CLIENT_PERMISSION_WIFI_SHARE_PROTECTED"
              glib:nick="wifi-share-protected">
        <doc xml:space="preserve"
             filename="libnm/nm-client.h"
             line="92">controls whether a password
 protected Wi-Fi hotspot can be created</doc>
      </member>
      <member name="wifi_share_open"
              value="8"
              c:identifier="NM_CLIENT_PERMISSION_WIFI_SHARE_OPEN"
              glib:nick="wifi-share-open">
        <doc xml:space="preserve"
             filename="libnm/nm-client.h"
             line="94">controls whether an open Wi-Fi hotspot
 can be created</doc>
      </member>
      <member name="settings_modify_system"
              value="9"
              c:identifier="NM_CLIENT_PERMISSION_SETTINGS_MODIFY_SYSTEM"
              glib:nick="settings-modify-system">
        <doc xml:space="preserve"
             filename="libnm/nm-client.h"
             line="96">controls whether connections
 that are available to all users can be modified</doc>
      </member>
      <member name="settings_modify_own"
              value="10"
              c:identifier="NM_CLIENT_PERMISSION_SETTINGS_MODIFY_OWN"
              glib:nick="settings-modify-own">
        <doc xml:space="preserve"
             filename="libnm/nm-client.h"
             line="98">controls whether connections
 owned by the current user can be modified</doc>
      </member>
      <member name="settings_modify_hostname"
              value="11"
              c:identifier="NM_CLIENT_PERMISSION_SETTINGS_MODIFY_HOSTNAME"
              glib:nick="settings-modify-hostname">
        <doc xml:space="preserve"
             filename="libnm/nm-client.h"
             line="100">controls whether the
 persistent hostname can be changed</doc>
      </member>
      <member name="settings_modify_global_dns"
              value="12"
              c:identifier="NM_CLIENT_PERMISSION_SETTINGS_MODIFY_GLOBAL_DNS"
              glib:nick="settings-modify-global-dns">
        <doc xml:space="preserve"
             filename="libnm/nm-client.h"
             line="102">modify persistent global
 DNS configuration</doc>
      </member>
      <member name="reload"
              value="13"
              c:identifier="NM_CLIENT_PERMISSION_RELOAD"
              glib:nick="reload">
        <doc xml:space="preserve"
             filename="libnm/nm-client.h"
             line="104">controls access to Reload.</doc>
      </member>
      <member name="checkpoint_rollback"
              value="14"
              c:identifier="NM_CLIENT_PERMISSION_CHECKPOINT_ROLLBACK"
              glib:nick="checkpoint-rollback">
        <doc xml:space="preserve"
             filename="libnm/nm-client.h"
             line="105">permission to create checkpoints.</doc>
      </member>
      <member name="enable_disable_statistics"
              value="15"
              c:identifier="NM_CLIENT_PERMISSION_ENABLE_DISABLE_STATISTICS"
              glib:nick="enable-disable-statistics">
        <doc xml:space="preserve"
             filename="libnm/nm-client.h"
             line="106">controls whether device
 statistics can be globally enabled or disabled</doc>
      </member>
      <member name="enable_disable_connectivity_check"
              value="16"
              c:identifier="NM_CLIENT_PERMISSION_ENABLE_DISABLE_CONNECTIVITY_CHECK"
              glib:nick="enable-disable-connectivity-check">
        <doc xml:space="preserve"
             filename="libnm/nm-client.h"
             line="108">controls whether
 connectivity check can be enabled or disabled</doc>
      </member>
      <member name="wifi_scan"
              value="17"
              c:identifier="NM_CLIENT_PERMISSION_WIFI_SCAN"
              glib:nick="wifi-scan">
        <doc xml:space="preserve"
             filename="libnm/nm-client.h"
             line="110">controls whether wifi scans can be performed</doc>
      </member>
      <member name="last"
              value="17"
              c:identifier="NM_CLIENT_PERMISSION_LAST"
              glib:nick="last">
        <doc xml:space="preserve"
             filename="libnm/nm-client.h"
             line="111">a reserved boundary value</doc>
      </member>
    </enumeration>
    <enumeration name="ClientPermissionResult"
                 glib:type-name="NMClientPermissionResult"
                 glib:get-type="nm_client_permission_result_get_type"
                 c:type="NMClientPermissionResult">
      <doc xml:space="preserve"
           filename="libnm/nm-client.h"
           line="139">#NMClientPermissionResult values indicate what authorizations and permissions
the user requires to obtain a given #NMClientPermission</doc>
      <member name="unknown"
              value="0"
              c:identifier="NM_CLIENT_PERMISSION_RESULT_UNKNOWN"
              glib:nick="unknown">
        <doc xml:space="preserve"
             filename="libnm/nm-client.h"
             line="141">unknown or no authorization</doc>
      </member>
      <member name="yes"
              value="1"
              c:identifier="NM_CLIENT_PERMISSION_RESULT_YES"
              glib:nick="yes">
        <doc xml:space="preserve"
             filename="libnm/nm-client.h"
             line="142">the permission is available</doc>
      </member>
      <member name="auth"
              value="2"
              c:identifier="NM_CLIENT_PERMISSION_RESULT_AUTH"
              glib:nick="auth">
        <doc xml:space="preserve"
             filename="libnm/nm-client.h"
             line="143">authorization is necessary before the
 permission is available</doc>
      </member>
      <member name="no"
              value="3"
              c:identifier="NM_CLIENT_PERMISSION_RESULT_NO"
              glib:nick="no">
        <doc xml:space="preserve"
             filename="libnm/nm-client.h"
             line="145">permission to perform the operation is
 denied by system policy</doc>
      </member>
    </enumeration>
    <interface name="Connection"
               c:symbol-prefix="connection"
               c:type="NMConnection"
               glib:type-name="NMConnection"
               glib:get-type="nm_connection_get_type"
               glib:type-struct="ConnectionInterface">
      <doc xml:space="preserve"
           filename="libnm-core/nm-connection.h"
           line="53">NMConnection is the interface implemented by #NMRemoteConnection on the
client side, and #NMSettingsConnection on the daemon side.</doc>
      <source-position filename="libnm-core/nm-connection.h" line="76"/>
      <virtual-method name="changed">
        <source-position filename="libnm-core/nm-connection.h" line="74"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="connection" transfer-ownership="none">
            <type name="Connection" c:type="NMConnection*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="secrets_cleared">
        <source-position filename="libnm-core/nm-connection.h" line="73"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="connection" transfer-ownership="none">
            <type name="Connection" c:type="NMConnection*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="secrets_updated">
        <source-position filename="libnm-core/nm-connection.h" line="71"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="connection" transfer-ownership="none">
            <type name="Connection" c:type="NMConnection*"/>
          </instance-parameter>
          <parameter name="setting" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="add_setting" c:identifier="nm_connection_add_setting">
        <doc xml:space="preserve"
             filename="libnm-core/nm-connection.c"
             line="138">Adds a #NMSetting to the connection, replacing any previous #NMSetting of the
same name which has previously been added to the #NMConnection.  The
connection takes ownership of the #NMSetting object and does not increase
the setting object's reference count.</doc>
        <source-position filename="libnm-core/nm-connection.h" line="80"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-connection.c"
                 line="140">a #NMConnection</doc>
            <type name="Connection" c:type="NMConnection*"/>
          </instance-parameter>
          <parameter name="setting" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-connection.c"
                 line="141">the #NMSetting to add to the connection object</doc>
            <type name="Setting" c:type="NMSetting*"/>
          </parameter>
        </parameters>
      </method>
      <method name="clear_secrets" c:identifier="nm_connection_clear_secrets">
        <doc xml:space="preserve"
             filename="libnm-core/nm-connection.c"
             line="1855">Clears and frees any secrets that may be stored in the connection, to avoid
keeping secret data in memory when not needed.</doc>
        <source-position filename="libnm-core/nm-connection.h" line="158"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-connection.c"
                 line="1857">the #NMConnection</doc>
            <type name="Connection" c:type="NMConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="clear_secrets_with_flags"
              c:identifier="nm_connection_clear_secrets_with_flags">
        <doc xml:space="preserve"
             filename="libnm-core/nm-connection.c"
             line="1868">Clears and frees secrets determined by @func.</doc>
        <source-position filename="libnm-core/nm-connection.h" line="160"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-connection.c"
                 line="1870">the #NMConnection</doc>
            <type name="Connection" c:type="NMConnection*"/>
          </instance-parameter>
          <parameter name="func"
                     transfer-ownership="none"
                     scope="call"
                     closure="1">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-connection.c"
                 line="1871">(allow-none): function to be called to determine whether a
    specific secret should be cleared or not. If %NULL, all secrets are cleared.</doc>
            <type name="SettingClearSecretsWithFlagsFn"
                  c:type="NMSettingClearSecretsWithFlagsFn"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-connection.c"
                 line="1873">caller-supplied data passed to @func</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="clear_settings"
              c:identifier="nm_connection_clear_settings">
        <doc xml:space="preserve"
             filename="libnm-core/nm-connection.c"
             line="528">Deletes all of @connection's settings.</doc>
        <source-position filename="libnm-core/nm-connection.h" line="136"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-connection.c"
                 line="530">a #NMConnection</doc>
            <type name="Connection" c:type="NMConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="compare" c:identifier="nm_connection_compare">
        <doc xml:space="preserve"
             filename="libnm-core/nm-connection.c"
             line="549">Compares two #NMConnection objects for similarity, with comparison behavior
modified by a set of flags.  See nm_setting_compare() for a description of
each flag's behavior.</doc>
        <source-position filename="libnm-core/nm-connection.h" line="138"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-connection.c"
               line="559">%TRUE if the comparison succeeds, %FALSE if it does not</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="a" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-connection.c"
                 line="551">a #NMConnection</doc>
            <type name="Connection" c:type="NMConnection*"/>
          </instance-parameter>
          <parameter name="b" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-connection.c"
                 line="552">a second #NMConnection to compare with the first</doc>
            <type name="Connection" c:type="NMConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-connection.c"
                 line="553">compare flags, e.g. %NM_SETTING_COMPARE_FLAG_EXACT</doc>
            <type name="SettingCompareFlags" c:type="NMSettingCompareFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="diff" c:identifier="nm_connection_diff">
        <doc xml:space="preserve"
             filename="libnm-core/nm-connection.c"
             line="627">Compares two #NMConnection objects for similarity, with comparison behavior
modified by a set of flags.  See nm_setting_compare() for a description of
each flag's behavior.  If the connections differ, settings and keys within
each setting that differ are added to the returned @out_settings hash table.
No values are returned, only key names.</doc>
        <source-position filename="libnm-core/nm-connection.h" line="142"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-connection.c"
               line="643">%TRUE if the connections contain the same values, %FALSE if they do
not</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="a" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-connection.c"
                 line="629">a #NMConnection</doc>
            <type name="Connection" c:type="NMConnection*"/>
          </instance-parameter>
          <parameter name="b" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-connection.c"
                 line="630">a second #NMConnection to compare with the first</doc>
            <type name="Connection" c:type="NMConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-connection.c"
                 line="631">compare flags, e.g. %NM_SETTING_COMPARE_FLAG_EXACT</doc>
            <type name="SettingCompareFlags" c:type="NMSettingCompareFlags"/>
          </parameter>
          <parameter name="out_settings" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-connection.c"
                 line="632">if the
connections differ, on return a hash table mapping setting names to
second-level GHashTable (utf8 to guint32), which contains the key names that
differ mapped to one or more of %NMSettingDiffResult as a bitfield</doc>
            <type name="GLib.HashTable" c:type="GHashTable**">
              <type name="utf8"/>
              <type name="GLib.HashTable">
                <type name="gpointer" c:type="gpointer"/>
                <type name="gpointer" c:type="gpointer"/>
              </type>
            </type>
          </parameter>
        </parameters>
      </method>
      <method name="dump" c:identifier="nm_connection_dump">
        <doc xml:space="preserve"
             filename="libnm-core/nm-connection.c"
             line="2226">Print the connection (including secrets!) to stdout. For debugging
purposes ONLY, should NOT be used for serialization of the setting,
or machine-parsed in any way. The output format is not guaranteed to
be stable and may change at any time.</doc>
        <source-position filename="libnm-core/nm-connection.h" line="186"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-connection.c"
                 line="2228">the #NMConnection</doc>
            <type name="Connection" c:type="NMConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="for_each_setting_value"
              c:identifier="nm_connection_for_each_setting_value">
        <doc xml:space="preserve"
             filename="libnm-core/nm-connection.c"
             line="2134">Iterates over the properties of each #NMSetting object in the #NMConnection,
calling the supplied user function for each property.</doc>
        <source-position filename="libnm-core/nm-connection.h" line="178"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-connection.c"
                 line="2136">the #NMConnection</doc>
            <type name="Connection" c:type="NMConnection*"/>
          </instance-parameter>
          <parameter name="func"
                     transfer-ownership="none"
                     scope="call"
                     closure="1">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-connection.c"
                 line="2137">user-supplied function called for each setting's property</doc>
            <type name="SettingValueIterFn" c:type="NMSettingValueIterFn"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-connection.c"
                 line="2138">user data passed to @func at each invocation</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_connection_type"
              c:identifier="nm_connection_get_connection_type">
        <doc xml:space="preserve"
             filename="libnm-core/nm-connection.c"
             line="2396">A shortcut to return the type from the connection's #NMSettingConnection.</doc>
        <source-position filename="libnm-core/nm-connection.h" line="191"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-connection.c"
               line="2402">the type from the connection's 'connection' setting</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-connection.c"
                 line="2398">the #NMConnection</doc>
            <type name="Connection" c:type="NMConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_id" c:identifier="nm_connection_get_id">
        <doc xml:space="preserve"
             filename="libnm-core/nm-connection.c"
             line="2379">A shortcut to return the ID from the connection's #NMSettingConnection.</doc>
        <source-position filename="libnm-core/nm-connection.h" line="190"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-connection.c"
               line="2385">the ID from the connection's 'connection' setting</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-connection.c"
                 line="2381">the #NMConnection</doc>
            <type name="Connection" c:type="NMConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_interface_name"
              c:identifier="nm_connection_get_interface_name">
        <doc xml:space="preserve"
             filename="libnm-core/nm-connection.c"
             line="2293">Returns the interface name as stored in NMSettingConnection:interface_name.
If the connection contains no NMSettingConnection, it will return %NULL.

For hardware devices and software devices created outside of NetworkManager,
this name is used to match the device. for software devices created by
NetworkManager, this is the name of the created interface.</doc>
        <source-position filename="libnm-core/nm-connection.h" line="174"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-connection.c"
               line="2304">Name of the kernel interface or %NULL</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-connection.c"
                 line="2295">The #NMConnection</doc>
            <type name="Connection" c:type="NMConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_path" c:identifier="nm_connection_get_path">
        <doc xml:space="preserve"
             filename="libnm-core/nm-connection.c"
             line="2276">Returns the connection's D-Bus path.</doc>
        <source-position filename="libnm-core/nm-connection.h" line="172"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-connection.c"
               line="2282">the D-Bus path of the connection, previously set by a call to
nm_connection_set_path().</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-connection.c"
                 line="2278">the #NMConnection</doc>
            <type name="Connection" c:type="NMConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_setting" c:identifier="nm_connection_get_setting">
        <doc xml:space="preserve"
             filename="libnm-core/nm-connection.c"
             line="214">Gets the #NMSetting with the given #GType, if one has been previously added
to the #NMConnection.</doc>
        <source-position filename="libnm-core/nm-connection.h" line="86"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-connection.c"
               line="222">the #NMSetting, or %NULL if no setting of that type was previously
added to the #NMConnection</doc>
          <type name="Setting" c:type="NMSetting*"/>
        </return-value>
        <parameters>
          <instance-parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-connection.c"
                 line="216">a #NMConnection</doc>
            <type name="Connection" c:type="NMConnection*"/>
          </instance-parameter>
          <parameter name="setting_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-connection.c"
                 line="217">the #GType of the setting object to return</doc>
            <type name="GType" c:type="GType"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_setting_802_1x"
              c:identifier="nm_connection_get_setting_802_1x">
        <doc xml:space="preserve"
             filename="libnm-core/nm-connection.c"
             line="2513">A shortcut to return any #NMSetting8021x the connection might contain.</doc>
        <source-position filename="libnm-core/nm-connection.h" line="196"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-connection.c"
               line="2519">an #NMSetting8021x if the connection contains one, otherwise %NULL</doc>
          <type name="Setting8021x" c:type="NMSetting8021x*"/>
        </return-value>
        <parameters>
          <instance-parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-connection.c"
                 line="2515">the #NMConnection</doc>
            <type name="Connection" c:type="NMConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_setting_adsl"
              c:identifier="nm_connection_get_setting_adsl">
        <doc xml:space="preserve"
             filename="libnm-core/nm-connection.c"
             line="3009">A shortcut to return any #NMSettingAdsl the connection might contain.</doc>
        <source-position filename="libnm-core/nm-connection.h" line="238"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-connection.c"
               line="3015">an #NMSettingAdsl if the connection contains one, otherwise %NULL</doc>
          <type name="SettingAdsl" c:type="NMSettingAdsl*"/>
        </return-value>
        <parameters>
          <instance-parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-connection.c"
                 line="3011">the #NMConnection</doc>
            <type name="Connection" c:type="NMConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_setting_bluetooth"
              c:identifier="nm_connection_get_setting_bluetooth">
        <doc xml:space="preserve"
             filename="libnm-core/nm-connection.c"
             line="2527">A shortcut to return any #NMSettingBluetooth the connection might contain.</doc>
        <source-position filename="libnm-core/nm-connection.h" line="197"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-connection.c"
               line="2533">an #NMSettingBluetooth if the connection contains one, otherwise %NULL</doc>
          <type name="SettingBluetooth" c:type="NMSettingBluetooth*"/>
        </return-value>
        <parameters>
          <instance-parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-connection.c"
                 line="2529">the #NMConnection</doc>
            <type name="Connection" c:type="NMConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_setting_bond"
              c:identifier="nm_connection_get_setting_bond">
        <doc xml:space="preserve"
             filename="libnm-core/nm-connection.c"
             line="2541">A shortcut to return any #NMSettingBond the connection might contain.</doc>
        <source-position filename="libnm-core/nm-connection.h" line="198"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-connection.c"
               line="2547">an #NMSettingBond if the connection contains one, otherwise %NULL</doc>
          <type name="SettingBond" c:type="NMSettingBond*"/>
        </return-value>
        <parameters>
          <instance-parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-connection.c"
                 line="2543">the #NMConnection</doc>
            <type name="Connection" c:type="NMConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_setting_bridge"
              c:identifier="nm_connection_get_setting_bridge">
        <doc xml:space="preserve"
             filename="libnm-core/nm-connection.c"
             line="2583">A shortcut to return any #NMSettingBridge the connection might contain.</doc>
        <source-position filename="libnm-core/nm-connection.h" line="201"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-connection.c"
               line="2589">an #NMSettingBridge if the connection contains one, otherwise %NULL</doc>
          <type name="SettingBridge" c:type="NMSettingBridge*"/>
        </return-value>
        <parameters>
          <instance-parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-connection.c"
                 line="2585">the #NMConnection</doc>
            <type name="Connection" c:type="NMConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_setting_bridge_port"
              c:identifier="nm_connection_get_setting_bridge_port">
        <doc xml:space="preserve"
             filename="libnm-core/nm-connection.c"
             line="3051">A shortcut to return any #NMSettingBridgePort the connection might contain.</doc>
        <source-position filename="libnm-core/nm-connection.h" line="202"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-connection.c"
               line="3057">an #NMSettingBridgePort if the connection contains one, otherwise %NULL</doc>
          <type name="SettingBridgePort" c:type="NMSettingBridgePort*"/>
        </return-value>
        <parameters>
          <instance-parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-connection.c"
                 line="3053">the #NMConnection</doc>
            <type name="Connection" c:type="NMConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_setting_by_name"
              c:identifier="nm_connection_get_setting_by_name">
        <doc xml:space="preserve"
             filename="libnm-core/nm-connection.c"
             line="245">Gets the #NMSetting with the given name, if one has been previously added
the #NMConnection.</doc>
        <source-position filename="libnm-core/nm-connection.h" line="89"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-connection.c"
               line="253">the #NMSetting, or %NULL if no setting with that name was previously
added to the #NMConnection</doc>
          <type name="Setting" c:type="NMSetting*"/>
        </return-value>
        <parameters>
          <instance-parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-connection.c"
                 line="247">a #NMConnection</doc>
            <type name="Connection" c:type="NMConnection*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-connection.c"
                 line="248">a setting name</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_setting_cdma"
              c:identifier="nm_connection_get_setting_cdma">
        <doc xml:space="preserve"
             filename="libnm-core/nm-connection.c"
             line="2597">A shortcut to return any #NMSettingCdma the connection might contain.</doc>
        <source-position filename="libnm-core/nm-connection.h" line="203"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-connection.c"
               line="2603">an #NMSettingCdma if the connection contains one, otherwise %NULL</doc>
          <type name="SettingCdma" c:type="NMSettingCdma*"/>
        </return-value>
        <parameters>
          <instance-parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-connection.c"
                 line="2599">the #NMConnection</doc>
            <type name="Connection" c:type="NMConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_setting_connection"
              c:identifier="nm_connection_get_setting_connection">
        <doc xml:space="preserve"
             filename="libnm-core/nm-connection.c"
             line="2611">A shortcut to return any #NMSettingConnection the connection might contain.</doc>
        <source-position filename="libnm-core/nm-connection.h" line="204"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-connection.c"
               line="2617">an #NMSettingConnection if the connection contains one, otherwise %NULL</doc>
          <type name="SettingConnection" c:type="NMSettingConnection*"/>
        </return-value>
        <parameters>
          <instance-parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-connection.c"
                 line="2613">the #NMConnection</doc>
            <type name="Connection" c:type="NMConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_setting_dcb"
              c:identifier="nm_connection_get_setting_dcb">
        <doc xml:space="preserve"
             filename="libnm-core/nm-connection.c"
             line="2625">A shortcut to return any #NMSettingDcb the connection might contain.</doc>
        <source-position filename="libnm-core/nm-connection.h" line="205"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-connection.c"
               line="2631">an #NMSettingDcb if the connection contains one, otherwise NULL</doc>
          <type name="SettingDcb" c:type="NMSettingDcb*"/>
        </return-value>
        <parameters>
          <instance-parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-connection.c"
                 line="2627">the #NMConnection</doc>
            <type name="Connection" c:type="NMConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_setting_dummy"
              c:identifier="nm_connection_get_setting_dummy"
              version="1.8">
        <doc xml:space="preserve"
             filename="libnm-core/nm-connection.c"
             line="2639">A shortcut to return any #NMSettingDummy the connection might contain.</doc>
        <source-position filename="libnm-core/nm-connection.h" line="207"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-connection.c"
               line="2645">an #NMSettingDummy if the connection contains one, otherwise %NULL</doc>
          <type name="SettingDummy" c:type="NMSettingDummy*"/>
        </return-value>
        <parameters>
          <instance-parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-connection.c"
                 line="2641">the #NMConnection</doc>
            <type name="Connection" c:type="NMConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_setting_generic"
              c:identifier="nm_connection_get_setting_generic">
        <doc xml:space="preserve"
             filename="libnm-core/nm-connection.c"
             line="2655">A shortcut to return any #NMSettingGeneric the connection might contain.</doc>
        <source-position filename="libnm-core/nm-connection.h" line="208"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-connection.c"
               line="2661">an #NMSettingGeneric if the connection contains one, otherwise NULL</doc>
          <type name="SettingGeneric" c:type="NMSettingGeneric*"/>
        </return-value>
        <parameters>
          <instance-parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-connection.c"
                 line="2657">the #NMConnection</doc>
            <type name="Connection" c:type="NMConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_setting_gsm"
              c:identifier="nm_connection_get_setting_gsm">
        <doc xml:space="preserve"
             filename="libnm-core/nm-connection.c"
             line="2669">A shortcut to return any #NMSettingGsm the connection might contain.</doc>
        <source-position filename="libnm-core/nm-connection.h" line="209"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-connection.c"
               line="2675">an #NMSettingGsm if the connection contains one, otherwise %NULL</doc>
          <type name="SettingGsm" c:type="NMSettingGsm*"/>
        </return-value>
        <parameters>
          <instance-parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-connection.c"
                 line="2671">the #NMConnection</doc>
            <type name="Connection" c:type="NMConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_setting_infiniband"
              c:identifier="nm_connection_get_setting_infiniband">
        <doc xml:space="preserve"
             filename="libnm-core/nm-connection.c"
             line="2683">A shortcut to return any #NMSettingInfiniband the connection might contain.</doc>
        <source-position filename="libnm-core/nm-connection.h" line="210"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-connection.c"
               line="2689">an #NMSettingInfiniband if the connection contains one, otherwise %NULL</doc>
          <type name="SettingInfiniband" c:type="NMSettingInfiniband*"/>
        </return-value>
        <parameters>
          <instance-parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-connection.c"
                 line="2685">the #NMConnection</doc>
            <type name="Connection" c:type="NMConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_setting_ip4_config"
              c:identifier="nm_connection_get_setting_ip4_config">
        <doc xml:space="preserve"
             filename="libnm-core/nm-connection.c"
             line="2697">A shortcut to return any #NMSettingIP4Config the connection might contain.

Note that it returns the value as type #NMSettingIPConfig, since the vast
majority of IPv4-setting-related methods are on that type, not
#NMSettingIP4Config.</doc>
        <source-position filename="libnm-core/nm-connection.h" line="213"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-connection.c"
               line="2707">an #NMSettingIP4Config if the
connection contains one, otherwise %NULL</doc>
          <type name="SettingIP4Config" c:type="NMSettingIPConfig*"/>
        </return-value>
        <parameters>
          <instance-parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-connection.c"
                 line="2699">the #NMConnection</doc>
            <type name="Connection" c:type="NMConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_setting_ip6_config"
              c:identifier="nm_connection_get_setting_ip6_config">
        <doc xml:space="preserve"
             filename="libnm-core/nm-connection.c"
             line="2732">A shortcut to return any #NMSettingIP6Config the connection might contain.

Note that it returns the value as type #NMSettingIPConfig, since the vast
majority of IPv6-setting-related methods are on that type, not
#NMSettingIP6Config.</doc>
        <source-position filename="libnm-core/nm-connection.h" line="214"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-connection.c"
               line="2742">an #NMSettingIP6Config if the
connection contains one, otherwise %NULL</doc>
          <type name="SettingIP6Config" c:type="NMSettingIPConfig*"/>
        </return-value>
        <parameters>
          <instance-parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-connection.c"
                 line="2734">the #NMConnection</doc>
            <type name="Connection" c:type="NMConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_setting_ip_tunnel"
              c:identifier="nm_connection_get_setting_ip_tunnel"
              version="1.2">
        <doc xml:space="preserve"
             filename="libnm-core/nm-connection.c"
             line="2716">A shortcut to return any #NMSettingIPTunnel the connection might contain.</doc>
        <source-position filename="libnm-core/nm-connection.h" line="212"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-connection.c"
               line="2722">an #NMSettingIPTunnel if the connection contains one, otherwise %NULL</doc>
          <type name="SettingIPTunnel" c:type="NMSettingIPTunnel*"/>
        </return-value>
        <parameters>
          <instance-parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-connection.c"
                 line="2718">the #NMConnection</doc>
            <type name="Connection" c:type="NMConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_setting_macsec"
              c:identifier="nm_connection_get_setting_macsec"
              version="1.6">
        <doc xml:space="preserve"
             filename="libnm-core/nm-connection.c"
             line="2751">A shortcut to return any #NMSettingMacsec the connection might contain.</doc>
        <source-position filename="libnm-core/nm-connection.h" line="216"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-connection.c"
               line="2757">an #NMSettingMacsec if the connection contains one, otherwise %NULL</doc>
          <type name="SettingMacsec" c:type="NMSettingMacsec*"/>
        </return-value>
        <parameters>
          <instance-parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-connection.c"
                 line="2753">the #NMConnection</doc>
            <type name="Connection" c:type="NMConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_setting_macvlan"
              c:identifier="nm_connection_get_setting_macvlan"
              version="1.2">
        <doc xml:space="preserve"
             filename="libnm-core/nm-connection.c"
             line="2767">A shortcut to return any #NMSettingMacvlan the connection might contain.</doc>
        <source-position filename="libnm-core/nm-connection.h" line="218"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-connection.c"
               line="2773">an #NMSettingMacvlan if the connection contains one, otherwise %NULL</doc>
          <type name="SettingMacvlan" c:type="NMSettingMacvlan*"/>
        </return-value>
        <parameters>
          <instance-parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-connection.c"
                 line="2769">the #NMConnection</doc>
            <type name="Connection" c:type="NMConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_setting_olpc_mesh"
              c:identifier="nm_connection_get_setting_olpc_mesh">
        <doc xml:space="preserve"
             filename="libnm-core/nm-connection.c"
             line="2783">A shortcut to return any #NMSettingOlpcMesh the connection might contain.</doc>
        <source-position filename="libnm-core/nm-connection.h" line="219"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-connection.c"
               line="2789">an #NMSettingOlpcMesh if the connection contains one, otherwise %NULL</doc>
          <type name="SettingOlpcMesh" c:type="NMSettingOlpcMesh*"/>
        </return-value>
        <parameters>
          <instance-parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-connection.c"
                 line="2785">the #NMConnection</doc>
            <type name="Connection" c:type="NMConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_setting_ovs_bridge"
              c:identifier="nm_connection_get_setting_ovs_bridge"
              version="1.10">
        <doc xml:space="preserve"
             filename="libnm-core/nm-connection.c"
             line="2797">A shortcut to return any #NMSettingOvsBridge the connection might contain.</doc>
        <source-position filename="libnm-core/nm-connection.h" line="221"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-connection.c"
               line="2803">an #NMSettingOvsBridge if the connection contains one, otherwise %NULL</doc>
          <type name="SettingOvsBridge" c:type="NMSettingOvsBridge*"/>
        </return-value>
        <parameters>
          <instance-parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-connection.c"
                 line="2799">the #NMConnection</doc>
            <type name="Connection" c:type="NMConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_setting_ovs_interface"
              c:identifier="nm_connection_get_setting_ovs_interface"
              version="1.10">
        <doc xml:space="preserve"
             filename="libnm-core/nm-connection.c"
             line="2813">A shortcut to return any #NMSettingOvsInterface the connection might contain.</doc>
        <source-position filename="libnm-core/nm-connection.h" line="223"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-connection.c"
               line="2819">an #NMSettingOvsInterface if the connection contains one, otherwise %NULL</doc>
          <type name="SettingOvsInterface" c:type="NMSettingOvsInterface*"/>
        </return-value>
        <parameters>
          <instance-parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-connection.c"
                 line="2815">the #NMConnection</doc>
            <type name="Connection" c:type="NMConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_setting_ovs_patch"
              c:identifier="nm_connection_get_setting_ovs_patch"
              version="1.10">
        <doc xml:space="preserve"
             filename="libnm-core/nm-connection.c"
             line="2829">A shortcut to return any #NMSettingOvsPatch the connection might contain.</doc>
        <source-position filename="libnm-core/nm-connection.h" line="224"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-connection.c"
               line="2835">an #NMSettingOvsPatch if the connection contains one, otherwise %NULL</doc>
          <type name="SettingOvsPatch" c:type="NMSettingOvsPatch*"/>
        </return-value>
        <parameters>
          <instance-parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-connection.c"
                 line="2831">the #NMConnection</doc>
            <type name="Connection" c:type="NMConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_setting_ovs_port"
              c:identifier="nm_connection_get_setting_ovs_port"
              version="1.10">
        <doc xml:space="preserve"
             filename="libnm-core/nm-connection.c"
             line="2845">A shortcut to return any #NMSettingOvsPort the connection might contain.</doc>
        <source-position filename="libnm-core/nm-connection.h" line="226"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-connection.c"
               line="2851">an #NMSettingOvsPort if the connection contains one, otherwise %NULL</doc>
          <type name="SettingOvsPort" c:type="NMSettingOvsPort*"/>
        </return-value>
        <parameters>
          <instance-parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-connection.c"
                 line="2847">the #NMConnection</doc>
            <type name="Connection" c:type="NMConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_setting_ppp"
              c:identifier="nm_connection_get_setting_ppp">
        <doc xml:space="preserve"
             filename="libnm-core/nm-connection.c"
             line="2861">A shortcut to return any #NMSettingPpp the connection might contain.</doc>
        <source-position filename="libnm-core/nm-connection.h" line="227"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-connection.c"
               line="2867">an #NMSettingPpp if the connection contains one, otherwise %NULL</doc>
          <type name="SettingPpp" c:type="NMSettingPpp*"/>
        </return-value>
        <parameters>
          <instance-parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-connection.c"
                 line="2863">the #NMConnection</doc>
            <type name="Connection" c:type="NMConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_setting_pppoe"
              c:identifier="nm_connection_get_setting_pppoe">
        <doc xml:space="preserve"
             filename="libnm-core/nm-connection.c"
             line="2875">A shortcut to return any #NMSettingPppoe the connection might contain.</doc>
        <source-position filename="libnm-core/nm-connection.h" line="228"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-connection.c"
               line="2881">an #NMSettingPppoe if the connection contains one, otherwise %NULL</doc>
          <type name="SettingPppoe" c:type="NMSettingPppoe*"/>
        </return-value>
        <parameters>
          <instance-parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-connection.c"
                 line="2877">the #NMConnection</doc>
            <type name="Connection" c:type="NMConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_setting_proxy"
              c:identifier="nm_connection_get_setting_proxy"
              version="1.6">
        <doc xml:space="preserve"
             filename="libnm-core/nm-connection.c"
             line="2889">A shortcut to return any #NMSettingProxy the connection might contain.</doc>
        <source-position filename="libnm-core/nm-connection.h" line="230"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-connection.c"
               line="2895">an #NMSettingProxy if the connection contains one, otherwise %NULL</doc>
          <type name="SettingProxy" c:type="NMSettingProxy*"/>
        </return-value>
        <parameters>
          <instance-parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-connection.c"
                 line="2891">the #NMConnection</doc>
            <type name="Connection" c:type="NMConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_setting_serial"
              c:identifier="nm_connection_get_setting_serial">
        <doc xml:space="preserve"
             filename="libnm-core/nm-connection.c"
             line="2905">A shortcut to return any #NMSettingSerial the connection might contain.</doc>
        <source-position filename="libnm-core/nm-connection.h" line="231"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-connection.c"
               line="2911">an #NMSettingSerial if the connection contains one, otherwise %NULL</doc>
          <type name="SettingSerial" c:type="NMSettingSerial*"/>
        </return-value>
        <parameters>
          <instance-parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-connection.c"
                 line="2907">the #NMConnection</doc>
            <type name="Connection" c:type="NMConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_setting_tc_config"
              c:identifier="nm_connection_get_setting_tc_config"
              version="1.12">
        <doc xml:space="preserve"
             filename="libnm-core/nm-connection.c"
             line="2919">A shortcut to return any #NMSettingTCConfig the connection might contain.</doc>
        <source-position filename="libnm-core/nm-connection.h" line="233"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-connection.c"
               line="2925">an #NMSettingTCConfig if the connection contains one, otherwise %NULL</doc>
          <type name="SettingTCConfig" c:type="NMSettingTCConfig*"/>
        </return-value>
        <parameters>
          <instance-parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-connection.c"
                 line="2921">the #NMConnection</doc>
            <type name="Connection" c:type="NMConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_setting_team"
              c:identifier="nm_connection_get_setting_team">
        <doc xml:space="preserve"
             filename="libnm-core/nm-connection.c"
             line="2555">A shortcut to return any #NMSettingTeam the connection might contain.</doc>
        <source-position filename="libnm-core/nm-connection.h" line="199"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-connection.c"
               line="2561">an #NMSettingTeam if the connection contains one, otherwise %NULL</doc>
          <type name="SettingTeam" c:type="NMSettingTeam*"/>
        </return-value>
        <parameters>
          <instance-parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-connection.c"
                 line="2557">the #NMConnection</doc>
            <type name="Connection" c:type="NMConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_setting_team_port"
              c:identifier="nm_connection_get_setting_team_port">
        <doc xml:space="preserve"
             filename="libnm-core/nm-connection.c"
             line="2569">A shortcut to return any #NMSettingTeamPort the connection might contain.</doc>
        <source-position filename="libnm-core/nm-connection.h" line="200"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-connection.c"
               line="2575">an #NMSettingTeamPort if the connection contains one, otherwise %NULL</doc>
          <type name="SettingTeamPort" c:type="NMSettingTeamPort*"/>
        </return-value>
        <parameters>
          <instance-parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-connection.c"
                 line="2571">the #NMConnection</doc>
            <type name="Connection" c:type="NMConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_setting_tun"
              c:identifier="nm_connection_get_setting_tun"
              version="1.2">
        <doc xml:space="preserve"
             filename="libnm-core/nm-connection.c"
             line="2935">A shortcut to return any #NMSettingTun the connection might contain.</doc>
        <source-position filename="libnm-core/nm-connection.h" line="235"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-connection.c"
               line="2941">an #NMSettingTun if the connection contains one, otherwise %NULL</doc>
          <type name="SettingTun" c:type="NMSettingTun*"/>
        </return-value>
        <parameters>
          <instance-parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-connection.c"
                 line="2937">the #NMConnection</doc>
            <type name="Connection" c:type="NMConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_setting_vlan"
              c:identifier="nm_connection_get_setting_vlan">
        <doc xml:space="preserve"
             filename="libnm-core/nm-connection.c"
             line="3065">A shortcut to return any #NMSettingVlan the connection might contain.</doc>
        <source-position filename="libnm-core/nm-connection.h" line="242"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-connection.c"
               line="3071">an #NMSettingVlan if the connection contains one, otherwise %NULL</doc>
          <type name="SettingVlan" c:type="NMSettingVlan*"/>
        </return-value>
        <parameters>
          <instance-parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-connection.c"
                 line="3067">the #NMConnection</doc>
            <type name="Connection" c:type="NMConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_setting_vpn"
              c:identifier="nm_connection_get_setting_vpn">
        <doc xml:space="preserve"
             filename="libnm-core/nm-connection.c"
             line="2951">A shortcut to return any #NMSettingVpn the connection might contain.</doc>
        <source-position filename="libnm-core/nm-connection.h" line="236"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-connection.c"
               line="2957">an #NMSettingVpn if the connection contains one, otherwise %NULL</doc>
          <type name="SettingVpn" c:type="NMSettingVpn*"/>
        </return-value>
        <parameters>
          <instance-parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-connection.c"
                 line="2953">the #NMConnection</doc>
            <type name="Connection" c:type="NMConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_setting_vxlan"
              c:identifier="nm_connection_get_setting_vxlan"
              version="1.2">
        <doc xml:space="preserve"
             filename="libnm-core/nm-connection.c"
             line="2965">A shortcut to return any #NMSettingVxlan the connection might contain.</doc>
        <source-position filename="libnm-core/nm-connection.h" line="244"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-connection.c"
               line="2971">an #NMSettingVxlan if the connection contains one, otherwise %NULL</doc>
          <type name="SettingVxlan" c:type="NMSettingVxlan*"/>
        </return-value>
        <parameters>
          <instance-parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-connection.c"
                 line="2967">the #NMConnection</doc>
            <type name="Connection" c:type="NMConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_setting_wimax"
              c:identifier="nm_connection_get_setting_wimax">
        <doc xml:space="preserve"
             filename="libnm-core/nm-connection.c"
             line="2981">A shortcut to return any #NMSettingWimax the connection might contain.</doc>
        <source-position filename="libnm-core/nm-connection.h" line="237"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-connection.c"
               line="2987">an #NMSettingWimax if the connection contains one, otherwise %NULL</doc>
          <type name="SettingWimax" c:type="NMSettingWimax*"/>
        </return-value>
        <parameters>
          <instance-parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-connection.c"
                 line="2983">the #NMConnection</doc>
            <type name="Connection" c:type="NMConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_setting_wired"
              c:identifier="nm_connection_get_setting_wired">
        <doc xml:space="preserve"
             filename="libnm-core/nm-connection.c"
             line="2995">A shortcut to return any #NMSettingWired the connection might contain.</doc>
        <source-position filename="libnm-core/nm-connection.h" line="239"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-connection.c"
               line="3001">an #NMSettingWired if the connection contains one, otherwise %NULL</doc>
          <type name="SettingWired" c:type="NMSettingWired*"/>
        </return-value>
        <parameters>
          <instance-parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-connection.c"
                 line="2997">the #NMConnection</doc>
            <type name="Connection" c:type="NMConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_setting_wireless"
              c:identifier="nm_connection_get_setting_wireless">
        <doc xml:space="preserve"
             filename="libnm-core/nm-connection.c"
             line="3023">A shortcut to return any #NMSettingWireless the connection might contain.</doc>
        <source-position filename="libnm-core/nm-connection.h" line="240"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-connection.c"
               line="3029">an #NMSettingWireless if the connection contains one, otherwise %NULL</doc>
          <type name="SettingWireless" c:type="NMSettingWireless*"/>
        </return-value>
        <parameters>
          <instance-parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-connection.c"
                 line="3025">the #NMConnection</doc>
            <type name="Connection" c:type="NMConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_setting_wireless_security"
              c:identifier="nm_connection_get_setting_wireless_security">
        <doc xml:space="preserve"
             filename="libnm-core/nm-connection.c"
             line="3037">A shortcut to return any #NMSettingWirelessSecurity the connection might contain.</doc>
        <source-position filename="libnm-core/nm-connection.h" line="241"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-connection.c"
               line="3043">an #NMSettingWirelessSecurity if the connection contains one, otherwise %NULL</doc>
          <type name="SettingWirelessSecurity"
                c:type="NMSettingWirelessSecurity*"/>
        </return-value>
        <parameters>
          <instance-parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-connection.c"
                 line="3039">the #NMConnection</doc>
            <type name="Connection" c:type="NMConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_settings"
              c:identifier="nm_connection_get_settings"
              version="1.10">
        <doc xml:space="preserve"
             filename="libnm-core/nm-connection.c"
             line="2080">Retrieves the settings in @connection.

The returned array is %NULL-terminated.</doc>
        <source-position filename="libnm-core/nm-connection.h" line="183"/>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve"
               filename="libnm-core/nm-connection.c"
               line="2089">a
  %NULL-terminated array containing every setting of
  @connection.
  If the connection has no settings, %NULL is returned.</doc>
          <array length="0" zero-terminated="0" c:type="NMSetting**">
            <type name="Setting" c:type="NMSetting*"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-connection.c"
                 line="2082">the #NMConnection instance</doc>
            <type name="Connection" c:type="NMConnection*"/>
          </instance-parameter>
          <parameter name="out_length"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     nullable="1">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-connection.c"
                 line="2083">(out): the length of the returned array</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_uuid" c:identifier="nm_connection_get_uuid">
        <doc xml:space="preserve"
             filename="libnm-core/nm-connection.c"
             line="2362">A shortcut to return the UUID from the connection's #NMSettingConnection.</doc>
        <source-position filename="libnm-core/nm-connection.h" line="189"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-connection.c"
               line="2368">the UUID from the connection's 'connection' setting</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-connection.c"
                 line="2364">the #NMConnection</doc>
            <type name="Connection" c:type="NMConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_virtual_device_description"
              c:identifier="nm_connection_get_virtual_device_description">
        <doc xml:space="preserve"
             filename="libnm-core/nm-connection.c"
             line="2468">Returns the name that nm_device_disambiguate_names() would
return for the virtual device that would be created for @connection.
Eg, "VLAN (eth1.1)".</doc>
        <source-position filename="libnm-core/nm-connection.h" line="194"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libnm-core/nm-connection.c"
               line="2476">the name of @connection's device,
  or %NULL if @connection is not a virtual connection type</doc>
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-connection.c"
                 line="2470">an #NMConnection for a virtual device type</doc>
            <type name="Connection" c:type="NMConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_type" c:identifier="nm_connection_is_type">
        <doc xml:space="preserve"
             filename="libnm-core/nm-connection.c"
             line="2047">A convenience function to check if the given @connection is a particular
type (ie wired, Wi-Fi, ppp, etc). Checks the #NMSettingConnection:type
property of the connection and matches that against @type.</doc>
        <source-position filename="libnm-core/nm-connection.h" line="176"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-connection.c"
               line="2057">%TRUE if the connection is of the given @type, %FALSE if not</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-connection.c"
                 line="2049">the #NMConnection</doc>
            <type name="Connection" c:type="NMConnection*"/>
          </instance-parameter>
          <parameter name="type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-connection.c"
                 line="2050">a setting name to check the connection's type against (like
%NM_SETTING_WIRELESS_SETTING_NAME or %NM_SETTING_WIRED_SETTING_NAME)</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="is_virtual" c:identifier="nm_connection_is_virtual">
        <doc xml:space="preserve"
             filename="libnm-core/nm-connection.c"
             line="2413">Checks if @connection refers to a virtual device (and thus can potentially be
activated even if the device it refers to doesn't exist).</doc>
        <source-position filename="libnm-core/nm-connection.h" line="193"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-connection.c"
               line="2420">whether @connection refers to a virtual device</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-connection.c"
                 line="2415">an #NMConnection</doc>
            <type name="Connection" c:type="NMConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="need_secrets" c:identifier="nm_connection_need_secrets">
        <doc xml:space="preserve"
             filename="libnm-core/nm-connection.c"
             line="1794">Returns the name of the first setting object in the connection which would
need secrets to make a successful connection.  The returned hints are only
intended as a guide to what secrets may be required, because in some
circumstances, there is no way to conclusively determine exactly which
secrets are needed.</doc>
        <source-position filename="libnm-core/nm-connection.h" line="155"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-connection.c"
               line="1810">the setting name of the #NMSetting object which has invalid or
  missing secrets</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-connection.c"
                 line="1796">the #NMConnection</doc>
            <type name="Connection" c:type="NMConnection*"/>
          </instance-parameter>
          <parameter name="hints"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="container"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-connection.c"
                 line="1797">
  the address of a pointer to a #GPtrArray, initialized to %NULL, which on
  return points to an allocated #GPtrArray containing the property names of
  secrets of the #NMSetting which may be required; the caller owns the array
  and must free the array itself with g_ptr_array_free(), but not free its
  elements</doc>
            <array name="GLib.PtrArray" c:type="GPtrArray**">
              <type name="utf8"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="normalize"
              c:identifier="nm_connection_normalize"
              throws="1">
        <doc xml:space="preserve"
             filename="libnm-core/nm-connection.c"
             line="1573">Does some basic normalization and fixup of well known inconsistencies
and deprecated fields. If the connection was modified in any way,
the output parameter @modified is set %TRUE.

Finally the connection will be verified and %TRUE returns if the connection
is valid. As this function only performs some specific normalization steps
it cannot repair all connections. If the connection has errors that
cannot be normalized, the connection will not be modified.</doc>
        <source-position filename="libnm-core/nm-connection.h" line="150"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-connection.c"
               line="1594">%TRUE if the connection is valid, %FALSE if it is not</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-connection.c"
                 line="1575">the #NMConnection to normalize</doc>
            <type name="Connection" c:type="NMConnection*"/>
          </instance-parameter>
          <parameter name="parameters"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-connection.c"
                 line="1576">a #GHashTable with
normalization parameters to allow customization of the normalization by providing
specific arguments. Unknown arguments will be ignored and the default will be
used. The keys must be strings compared with g_str_equal() function.
The values are opaque and depend on the parameter name.</doc>
            <type name="GLib.HashTable" c:type="GHashTable*">
              <type name="utf8"/>
              <type name="gpointer"/>
            </type>
          </parameter>
          <parameter name="modified"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-connection.c"
                 line="1581">outputs whether any settings were modified.</doc>
            <type name="gboolean" c:type="gboolean*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_setting"
              c:identifier="nm_connection_remove_setting">
        <doc xml:space="preserve"
             filename="libnm-core/nm-connection.c"
             line="178">Removes the #NMSetting with the given #GType from the #NMConnection.  This
operation dereferences the #NMSetting object.</doc>
        <source-position filename="libnm-core/nm-connection.h" line="83"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-connection.c"
                 line="180">a #NMConnection</doc>
            <type name="Connection" c:type="NMConnection*"/>
          </instance-parameter>
          <parameter name="setting_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-connection.c"
                 line="181">the #GType of the setting object to remove</doc>
            <type name="GType" c:type="GType"/>
          </parameter>
        </parameters>
      </method>
      <method name="replace_settings"
              c:identifier="nm_connection_replace_settings"
              throws="1">
        <doc xml:space="preserve"
             filename="libnm-core/nm-connection.c"
             line="460">Replaces @connection's settings with @new_settings (which must be
syntactically valid, and describe a known type of connection, but does not
need to result in a connection that passes nm_connection_verify()).</doc>
        <source-position filename="libnm-core/nm-connection.h" line="129"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-connection.c"
               line="470">%TRUE if connection was updated, %FALSE if @new_settings could not
  be deserialized (in which case @connection will be unchanged).</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-connection.c"
                 line="462">a #NMConnection</doc>
            <type name="Connection" c:type="NMConnection*"/>
          </instance-parameter>
          <parameter name="new_settings" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-connection.c"
                 line="463">a #GVariant of type %NM_VARIANT_TYPE_CONNECTION, with the new settings</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </method>
      <method name="replace_settings_from_connection"
              c:identifier="nm_connection_replace_settings_from_connection">
        <doc xml:space="preserve"
             filename="libnm-core/nm-connection.c"
             line="481">Deep-copies the settings of @new_connection and replaces the settings of @connection
with the copied settings.</doc>
        <source-position filename="libnm-core/nm-connection.h" line="133"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-connection.c"
                 line="483">a #NMConnection</doc>
            <type name="Connection" c:type="NMConnection*"/>
          </instance-parameter>
          <parameter name="new_connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-connection.c"
                 line="484">a #NMConnection to replace the settings of @connection with</doc>
            <type name="Connection" c:type="NMConnection*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_path" c:identifier="nm_connection_set_path">
        <doc xml:space="preserve"
             filename="libnm-core/nm-connection.c"
             line="2253">Sets the D-Bus path of the connection.  This property is not serialized, and
is only for the reference of the caller.  Sets the #NMConnection:path
property.</doc>
        <source-position filename="libnm-core/nm-connection.h" line="169"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-connection.c"
                 line="2255">the #NMConnection</doc>
            <type name="Connection" c:type="NMConnection*"/>
          </instance-parameter>
          <parameter name="path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-connection.c"
                 line="2256">the D-Bus path of the connection as given by the settings service
which provides the connection</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="to_dbus" c:identifier="nm_connection_to_dbus">
        <doc xml:space="preserve"
             filename="libnm-core/nm-connection.c"
             line="1999">Converts the #NMConnection into a #GVariant of type
%NM_VARIANT_TYPE_CONNECTION describing the connection, suitable for
marshalling over D-Bus or otherwise serializing.</doc>
        <source-position filename="libnm-core/nm-connection.h" line="126"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-connection.c"
               line="2008">a new floating #GVariant describing the connection,
its settings, and each setting's properties.</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-connection.c"
                 line="2001">the #NMConnection</doc>
            <type name="Connection" c:type="NMConnection*"/>
          </instance-parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-connection.c"
                 line="2002">serialization flags, e.g. %NM_CONNECTION_SERIALIZE_ALL</doc>
            <type name="ConnectionSerializationFlags"
                  c:type="NMConnectionSerializationFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="update_secrets"
              c:identifier="nm_connection_update_secrets"
              throws="1">
        <doc xml:space="preserve"
             filename="libnm-core/nm-connection.c"
             line="1675">Update the specified setting's secrets, given a dictionary of secrets
intended for that setting (deserialized from D-Bus for example).  Will also
extract the given setting's secrets hash if given a connection dictionary.
If @setting_name is %NULL, expects a fully serialized #NMConnection as
returned by nm_connection_to_dbus() and will update all secrets from all
settings contained in @secrets.</doc>
        <source-position filename="libnm-core/nm-connection.h" line="164"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-connection.c"
               line="1690">%TRUE if the secrets were successfully updated, %FALSE if the update
failed (tried to update secrets for a setting that doesn't exist, etc)</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-connection.c"
                 line="1677">the #NMConnection</doc>
            <type name="Connection" c:type="NMConnection*"/>
          </instance-parameter>
          <parameter name="setting_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-connection.c"
                 line="1678">the setting object name to which the secrets apply</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="secrets" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-connection.c"
                 line="1679">a #GVariant of secrets, of type %NM_VARIANT_TYPE_CONNECTION
  or %NM_VARIANT_TYPE_SETTING</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </method>
      <method name="verify" c:identifier="nm_connection_verify" throws="1">
        <doc xml:space="preserve"
             filename="libnm-core/nm-connection.c"
             line="1344">Validates the connection and all its settings.  Each setting's properties
have allowed values, and some values are dependent on other values.  For
example, if a Wi-Fi connection is security enabled, the #NMSettingWireless
setting object's 'security' property must contain the setting name of the
#NMSettingWirelessSecurity object, which must also be present in the
connection for the connection to be valid.  As another example, the
#NMSettingWired object's 'mac-address' property must be a validly formatted
MAC address.  The returned #GError contains information about which
setting and which property failed validation, and how it failed validation.</doc>
        <source-position filename="libnm-core/nm-connection.h" line="147"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-connection.c"
               line="1359">%TRUE if the connection is valid, %FALSE if it is not</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-connection.c"
                 line="1346">the #NMConnection to verify</doc>
            <type name="Connection" c:type="NMConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="verify_secrets"
              c:identifier="nm_connection_verify_secrets"
              version="1.2"
              throws="1">
        <doc xml:space="preserve"
             filename="libnm-core/nm-connection.c"
             line="1545">Verifies the secrets in the connection.</doc>
        <source-position filename="libnm-core/nm-connection.h" line="149"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-connection.c"
               line="1552">%TRUE if the secrets are valid, %FALSE if they are not</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-connection.c"
                 line="1547">the #NMConnection to verify in</doc>
            <type name="Connection" c:type="NMConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <glib:signal name="changed" when="first">
        <doc xml:space="preserve"
             filename="libnm-core/nm-connection.c"
             line="3168">The ::changed signal is emitted when any property of any property
(including secrets) of any setting of the connection is modified,
or when settings are added or removed.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="secrets-cleared" when="first">
        <doc xml:space="preserve"
             filename="libnm-core/nm-connection.c"
             line="3152">The ::secrets-cleared signal is emitted when the secrets of a connection
are cleared.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="secrets-updated" when="first">
        <doc xml:space="preserve"
             filename="libnm-core/nm-connection.c"
             line="3133">The ::secrets-updated signal is emitted when the secrets of a setting
have been changed.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="setting_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-connection.c"
                 line="3136">the setting name of the #NMSetting for which secrets were
updated</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <enumeration name="ConnectionError"
                 glib:type-name="NMConnectionError"
                 glib:get-type="nm_connection_error_get_type"
                 c:type="NMConnectionError"
                 glib:error-domain="nm-connection-error-quark">
      <doc xml:space="preserve"
           filename="libnm-core/nm-errors.h"
           line="55">Describes errors that may result from operations involving a #NMConnection
or its #NMSettings.

These errors may be returned directly from #NMConnection and #NMSetting
methods, or may be returned from D-Bus operations (eg on #NMClient or
#NMDevice), where they correspond to errors in the
"org.freedesktop.NetworkManager.Settings.Connection" namespace.</doc>
      <member name="Failed"
              value="0"
              c:identifier="NM_CONNECTION_ERROR_FAILED"
              glib:nick="Failed">
        <doc xml:space="preserve"
             filename="libnm-core/nm-errors.h"
             line="57">unknown or unclassified error</doc>
      </member>
      <member name="SettingNotFound"
              value="1"
              c:identifier="NM_CONNECTION_ERROR_SETTING_NOT_FOUND"
              glib:nick="SettingNotFound">
        <doc xml:space="preserve"
             filename="libnm-core/nm-errors.h"
             line="58">the #NMConnection object
  did not contain the specified #NMSetting object</doc>
      </member>
      <member name="PropertyNotFound"
              value="2"
              c:identifier="NM_CONNECTION_ERROR_PROPERTY_NOT_FOUND"
              glib:nick="PropertyNotFound">
        <doc xml:space="preserve"
             filename="libnm-core/nm-errors.h"
             line="60">the #NMConnection did not contain the
  requested #NMSetting property</doc>
      </member>
      <member name="PropertyNotSecret"
              value="3"
              c:identifier="NM_CONNECTION_ERROR_PROPERTY_NOT_SECRET"
              glib:nick="PropertyNotSecret">
        <doc xml:space="preserve"
             filename="libnm-core/nm-errors.h"
             line="62">an operation which requires a secret
  was attempted on a non-secret property</doc>
      </member>
      <member name="MissingSetting"
              value="4"
              c:identifier="NM_CONNECTION_ERROR_MISSING_SETTING"
              glib:nick="MissingSetting">
        <doc xml:space="preserve"
             filename="libnm-core/nm-errors.h"
             line="64">the #NMConnection object is missing an
  #NMSetting which is required for its configuration. The error message will
  always be prefixed with "&amp;lt;setting-name&gt;: ", where "&amp;lt;setting-name&gt;" is the
  name of the setting that is missing.</doc>
      </member>
      <member name="InvalidSetting"
              value="5"
              c:identifier="NM_CONNECTION_ERROR_INVALID_SETTING"
              glib:nick="InvalidSetting">
        <doc xml:space="preserve"
             filename="libnm-core/nm-errors.h"
             line="68">the #NMConnection object contains an
  invalid or inappropriate #NMSetting. The error message will always be
  prefixed with "&amp;lt;setting-name&gt;: ", where "&amp;lt;setting-name&gt;" is the name of the
  setting that is invalid.</doc>
      </member>
      <member name="MissingProperty"
              value="6"
              c:identifier="NM_CONNECTION_ERROR_MISSING_PROPERTY"
              glib:nick="MissingProperty">
        <doc xml:space="preserve"
             filename="libnm-core/nm-errors.h"
             line="72">the #NMConnection object is invalid
  because it is missing a required property. The error message will always be
  prefixed with "&amp;lt;setting-name&gt;.&amp;lt;property-name&gt;: ", where "&amp;lt;setting-name&gt;" is
  the name of the setting with the missing property, and "&amp;lt;property-name&gt;" is
  the property that is missing.</doc>
      </member>
      <member name="InvalidProperty"
              value="7"
              c:identifier="NM_CONNECTION_ERROR_INVALID_PROPERTY"
              glib:nick="InvalidProperty">
        <doc xml:space="preserve"
             filename="libnm-core/nm-errors.h"
             line="77">the #NMConnection object is invalid
  because a property has an invalid value. The error message will always be
  prefixed with "&amp;lt;setting-name&gt;.&amp;lt;property-name&gt;: ", where "&amp;lt;setting-name&gt;" is
  the name of the setting with the invalid property, and "&amp;lt;property-name&gt;" is
  the property that is invalid.</doc>
      </member>
      <function name="quark" c:identifier="nm_connection_error_quark">
        <return-value transfer-ownership="none">
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
    </enumeration>
    <record name="ConnectionInterface"
            c:type="NMConnectionInterface"
            glib:is-gtype-struct-for="Connection">
      <source-position filename="libnm-core/nm-connection.h" line="76"/>
      <field name="parent">
        <doc xml:space="preserve"
             filename="libnm-core/nm-connection.h"
             line="62">the parent interface struct</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="secrets_updated">
        <callback name="secrets_updated">
          <source-position filename="libnm-core/nm-connection.h" line="71"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="connection" transfer-ownership="none">
              <type name="Connection" c:type="NMConnection*"/>
            </parameter>
            <parameter name="setting" transfer-ownership="none">
              <type name="utf8" c:type="const char*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="secrets_cleared">
        <callback name="secrets_cleared">
          <source-position filename="libnm-core/nm-connection.h" line="73"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="connection" transfer-ownership="none">
              <type name="Connection" c:type="NMConnection*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="changed">
        <callback name="changed">
          <source-position filename="libnm-core/nm-connection.h" line="74"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="connection" transfer-ownership="none">
              <type name="Connection" c:type="NMConnection*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <enumeration name="ConnectionMultiConnect"
                 version="1.14"
                 glib:type-name="NMConnectionMultiConnect"
                 glib:get-type="nm_connection_multi_connect_get_type"
                 c:type="NMConnectionMultiConnect">
      <member name="default"
              value="0"
              c:identifier="NM_CONNECTION_MULTI_CONNECT_DEFAULT"
              glib:nick="default">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="669">indicates that the per-connection
  setting is unspecified. In this case, it will fallback to the default
  value, which is @NM_CONNECTION_MULTI_CONNECT_SINGLE.</doc>
      </member>
      <member name="single"
              value="1"
              c:identifier="NM_CONNECTION_MULTI_CONNECT_SINGLE"
              glib:nick="single">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="672">the connection profile can only
  be active once at each moment. Activating a profile that is already active,
  will first deactivate it.</doc>
      </member>
      <member name="manual_multiple"
              value="2"
              c:identifier="NM_CONNECTION_MULTI_CONNECT_MANUAL_MULTIPLE"
              glib:nick="manual-multiple">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="675">the profile can
  be manually activated multiple times on different devices. However,
  regarding autoconnect, the profile will autoconnect only if it is
  currently not connected otherwise.</doc>
      </member>
      <member name="multiple"
              value="3"
              c:identifier="NM_CONNECTION_MULTI_CONNECT_MULTIPLE"
              glib:nick="multiple">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="679">the profile can autoactivate
  and be manually activated multiple times together.</doc>
      </member>
    </enumeration>
    <bitfield name="ConnectionSerializationFlags"
              glib:type-name="NMConnectionSerializationFlags"
              glib:get-type="nm_connection_serialization_flags_get_type"
              c:type="NMConnectionSerializationFlags">
      <doc xml:space="preserve"
           filename="libnm-core/nm-connection.h"
           line="111">These flags determine which properties are serialized when calling when
calling nm_connection_to_dbus().</doc>
      <member name="all"
              value="0"
              c:identifier="NM_CONNECTION_SERIALIZE_ALL"
              glib:nick="all">
        <doc xml:space="preserve"
             filename="libnm-core/nm-connection.h"
             line="113">serialize all properties (including secrets)</doc>
      </member>
      <member name="no_secrets"
              value="1"
              c:identifier="NM_CONNECTION_SERIALIZE_NO_SECRETS"
              glib:nick="no-secrets">
        <doc xml:space="preserve"
             filename="libnm-core/nm-connection.h"
             line="114">do not include secrets</doc>
      </member>
      <member name="only_secrets"
              value="2"
              c:identifier="NM_CONNECTION_SERIALIZE_ONLY_SECRETS"
              glib:nick="only-secrets">
        <doc xml:space="preserve"
             filename="libnm-core/nm-connection.h"
             line="115">only serialize secrets</doc>
      </member>
    </bitfield>
    <enumeration name="ConnectivityState"
                 glib:type-name="NMConnectivityState"
                 glib:get-type="nm_connectivity_state_get_type"
                 c:type="NMConnectivityState">
      <member name="unknown"
              value="0"
              c:identifier="NM_CONNECTIVITY_UNKNOWN"
              glib:nick="unknown">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="164">Network connectivity is unknown. This means the
  connectivity checks are disabled (e.g. on server installations) or has
  not run yet. The graphical shell should assume the Internet connection
  might be available and not present a captive portal window.</doc>
      </member>
      <member name="none"
              value="1"
              c:identifier="NM_CONNECTIVITY_NONE"
              glib:nick="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="168">The host is not connected to any network. There's
  no active connection that contains a default route to the internet and
  thus it makes no sense to even attempt a connectivity check. The graphical
  shell should use this state to indicate the network connection is unavailable.</doc>
      </member>
      <member name="portal"
              value="2"
              c:identifier="NM_CONNECTIVITY_PORTAL"
              glib:nick="portal">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="172">The Internet connection is hijacked by a captive
  portal gateway. The graphical shell may open a sandboxed web browser window
  (because the captive portals typically attempt a man-in-the-middle attacks
  against the https connections) for the purpose of authenticating to a gateway
  and retrigger the connectivity check with CheckConnectivity() when the
  browser window is dismissed.</doc>
      </member>
      <member name="limited"
              value="3"
              c:identifier="NM_CONNECTIVITY_LIMITED"
              glib:nick="limited">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="178">The host is connected to a network, does not appear
  to be able to reach the full Internet, but a captive portal has not been
  detected.</doc>
      </member>
      <member name="full"
              value="4"
              c:identifier="NM_CONNECTIVITY_FULL"
              glib:nick="full">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="181">The host is connected to a network, and
  appears to be able to reach the full Internet.</doc>
      </member>
    </enumeration>
    <enumeration name="CryptoError"
                 glib:type-name="NMCryptoError"
                 glib:get-type="nm_crypto_error_get_type"
                 c:type="NMCryptoError"
                 glib:error-domain="nm-crypto-error-quark">
      <doc xml:space="preserve"
           filename="libnm-core/nm-errors.h"
           line="105">Cryptography-related errors that can be returned from some nm-utils methods,
and some #NMSetting8021x operations.</doc>
      <member name="failed"
              value="0"
              c:identifier="NM_CRYPTO_ERROR_FAILED"
              glib:nick="failed">
        <doc xml:space="preserve"
             filename="libnm-core/nm-errors.h"
             line="107">generic failure</doc>
      </member>
      <member name="invalid_data"
              value="1"
              c:identifier="NM_CRYPTO_ERROR_INVALID_DATA"
              glib:nick="invalid-data">
        <doc xml:space="preserve"
             filename="libnm-core/nm-errors.h"
             line="108">the certificate or key data provided
  was invalid</doc>
      </member>
      <member name="invalid_password"
              value="2"
              c:identifier="NM_CRYPTO_ERROR_INVALID_PASSWORD"
              glib:nick="invalid-password">
        <doc xml:space="preserve"
             filename="libnm-core/nm-errors.h"
             line="110">the password was invalid</doc>
      </member>
      <member name="unknown_cipher"
              value="3"
              c:identifier="NM_CRYPTO_ERROR_UNKNOWN_CIPHER"
              glib:nick="unknown-cipher">
        <doc xml:space="preserve"
             filename="libnm-core/nm-errors.h"
             line="111">the data uses an unknown cipher</doc>
      </member>
      <member name="decryption_failed"
              value="4"
              c:identifier="NM_CRYPTO_ERROR_DECRYPTION_FAILED"
              glib:nick="decryption-failed">
        <doc xml:space="preserve"
             filename="libnm-core/nm-errors.h"
             line="112">decryption failed</doc>
      </member>
      <member name="encryption_failed"
              value="5"
              c:identifier="NM_CRYPTO_ERROR_ENCRYPTION_FAILED"
              glib:nick="encryption-failed">
        <doc xml:space="preserve"
             filename="libnm-core/nm-errors.h"
             line="113">encryption failed</doc>
      </member>
      <function name="quark" c:identifier="nm_crypto_error_quark">
        <return-value transfer-ownership="none">
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
    </enumeration>
    <constant name="DBUS_INTERFACE"
              value="org.freedesktop.NetworkManager"
              c:type="NM_DBUS_INTERFACE">
      <source-position filename="libnm-core/nm-dbus-interface.h" line="41"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DBUS_INTERFACE_DNS_MANAGER"
              value="org.freedesktop.NetworkManager.DnsManager"
              c:type="NM_DBUS_INTERFACE_DNS_MANAGER">
      <source-position filename="libnm-core/nm-dbus-interface.h" line="101"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DBUS_INTERFACE_SETTINGS"
              value="org.freedesktop.NetworkManager.Settings"
              c:type="NM_DBUS_INTERFACE_SETTINGS">
      <source-position filename="libnm-core/nm-dbus-interface.h" line="88"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DBUS_INTERFACE_SETTINGS_CONNECTION"
              value="org.freedesktop.NetworkManager.Settings.Connection"
              c:type="NM_DBUS_INTERFACE_SETTINGS_CONNECTION">
      <source-position filename="libnm-core/nm-dbus-interface.h" line="91"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DBUS_INTERFACE_SETTINGS_CONNECTION_SECRETS"
              value="org.freedesktop.NetworkManager.Settings.Connection.Secrets"
              c:type="NM_DBUS_INTERFACE_SETTINGS_CONNECTION_SECRETS">
      <source-position filename="libnm-core/nm-dbus-interface.h" line="93"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DBUS_INTERFACE_VPN"
              value="org.freedesktop.NetworkManager.VPN.Manager"
              c:type="NM_DBUS_INTERFACE_VPN">
      <source-position filename="libnm-core/nm-vpn-dbus-interface.h"
                       line="39"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DBUS_INTERFACE_VPN_CONNECTION"
              value="org.freedesktop.NetworkManager.VPN.Connection"
              c:type="NM_DBUS_INTERFACE_VPN_CONNECTION">
      <source-position filename="libnm-core/nm-vpn-dbus-interface.h"
                       line="42"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DBUS_INVALID_VPN_CONNECTION"
              value="org.freedesktop.NetworkManager.VPNConnections.InvalidVPNConnection"
              c:type="NM_DBUS_INVALID_VPN_CONNECTION">
      <source-position filename="libnm-core/nm-vpn-dbus-interface.h"
                       line="52"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DBUS_NO_ACTIVE_VPN_CONNECTION"
              value="org.freedesktop.NetworkManager.VPNConnections.NoActiveVPNConnection"
              c:type="NM_DBUS_NO_ACTIVE_VPN_CONNECTION">
      <source-position filename="libnm-core/nm-vpn-dbus-interface.h"
                       line="50"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DBUS_NO_VPN_CONNECTIONS"
              value="org.freedesktop.NetworkManager.VPNConnections.NoVPNConnections"
              c:type="NM_DBUS_NO_VPN_CONNECTIONS">
      <source-position filename="libnm-core/nm-vpn-dbus-interface.h"
                       line="51"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DBUS_PATH"
              value="/org/freedesktop/NetworkManager"
              c:type="NM_DBUS_PATH">
      <source-position filename="libnm-core/nm-dbus-interface.h" line="83"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DBUS_PATH_AGENT_MANAGER"
              value="/org/freedesktop/NetworkManager/AgentManager"
              c:type="NM_DBUS_PATH_AGENT_MANAGER">
      <source-position filename="libnm-core/nm-dbus-interface.h" line="96"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DBUS_PATH_DNS_MANAGER"
              value="/org/freedesktop/NetworkManager/DnsManager"
              c:type="NM_DBUS_PATH_DNS_MANAGER">
      <source-position filename="libnm-core/nm-dbus-interface.h" line="102"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DBUS_PATH_SECRET_AGENT"
              value="/org/freedesktop/NetworkManager/SecretAgent"
              c:type="NM_DBUS_PATH_SECRET_AGENT">
      <source-position filename="libnm-core/nm-dbus-interface.h" line="99"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DBUS_PATH_SETTINGS"
              value="/org/freedesktop/NetworkManager/Settings"
              c:type="NM_DBUS_PATH_SETTINGS">
      <source-position filename="libnm-core/nm-dbus-interface.h" line="89"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DBUS_PATH_SETTINGS_CONNECTION"
              value="/org/freedesktop/NetworkManager/Settings/Connection"
              c:type="NM_DBUS_PATH_SETTINGS_CONNECTION">
      <source-position filename="libnm-core/nm-dbus-interface.h" line="92"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DBUS_PATH_VPN"
              value="/org/freedesktop/NetworkManager/VPN/Manager"
              c:type="NM_DBUS_PATH_VPN">
      <source-position filename="libnm-core/nm-vpn-dbus-interface.h"
                       line="38"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DBUS_PATH_VPN_CONNECTION"
              value="/org/freedesktop/NetworkManager/VPN/Connection"
              c:type="NM_DBUS_PATH_VPN_CONNECTION">
      <source-position filename="libnm-core/nm-vpn-dbus-interface.h"
                       line="41"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DBUS_SERVICE"
              value="org.freedesktop.NetworkManager"
              c:type="NM_DBUS_SERVICE">
      <source-position filename="libnm-core/nm-dbus-interface.h" line="39"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DBUS_VPN_ALREADY_STARTED"
              value="AlreadyStarted"
              c:type="NM_DBUS_VPN_ALREADY_STARTED">
      <source-position filename="libnm-core/nm-vpn-dbus-interface.h"
                       line="56"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DBUS_VPN_ALREADY_STOPPED"
              value="AlreadyStopped"
              c:type="NM_DBUS_VPN_ALREADY_STOPPED">
      <source-position filename="libnm-core/nm-vpn-dbus-interface.h"
                       line="58"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DBUS_VPN_BAD_ARGUMENTS"
              value="BadArguments"
              c:type="NM_DBUS_VPN_BAD_ARGUMENTS">
      <source-position filename="libnm-core/nm-vpn-dbus-interface.h"
                       line="60"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DBUS_VPN_ERROR_PREFIX"
              value="org.freedesktop.NetworkManager.VPN.Error"
              c:type="NM_DBUS_VPN_ERROR_PREFIX">
      <source-position filename="libnm-core/nm-vpn-dbus-interface.h"
                       line="54"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DBUS_VPN_INTERACTIVE_NOT_SUPPORTED"
              value="InteractiveNotSupported"
              c:type="NM_DBUS_VPN_INTERACTIVE_NOT_SUPPORTED">
      <source-position filename="libnm-core/nm-vpn-dbus-interface.h"
                       line="61"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DBUS_VPN_SIGNAL_CONNECT_FAILED"
              value="ConnectFailed"
              c:type="NM_DBUS_VPN_SIGNAL_CONNECT_FAILED">
      <source-position filename="libnm-core/nm-vpn-dbus-interface.h"
                       line="69"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DBUS_VPN_SIGNAL_IP4_CONFIG"
              value="IP4Config"
              c:type="NM_DBUS_VPN_SIGNAL_IP4_CONFIG">
      <source-position filename="libnm-core/nm-vpn-dbus-interface.h"
                       line="73"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DBUS_VPN_SIGNAL_IP_CONFIG_BAD"
              value="IPConfigBad"
              c:type="NM_DBUS_VPN_SIGNAL_IP_CONFIG_BAD">
      <source-position filename="libnm-core/nm-vpn-dbus-interface.h"
                       line="71"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DBUS_VPN_SIGNAL_LAUNCH_FAILED"
              value="LaunchFailed"
              c:type="NM_DBUS_VPN_SIGNAL_LAUNCH_FAILED">
      <source-position filename="libnm-core/nm-vpn-dbus-interface.h"
                       line="68"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DBUS_VPN_SIGNAL_LOGIN_BANNER"
              value="LoginBanner"
              c:type="NM_DBUS_VPN_SIGNAL_LOGIN_BANNER">
      <source-position filename="libnm-core/nm-vpn-dbus-interface.h"
                       line="66"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DBUS_VPN_SIGNAL_LOGIN_FAILED"
              value="LoginFailed"
              c:type="NM_DBUS_VPN_SIGNAL_LOGIN_FAILED">
      <source-position filename="libnm-core/nm-vpn-dbus-interface.h"
                       line="67"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DBUS_VPN_SIGNAL_STATE_CHANGE"
              value="StateChange"
              c:type="NM_DBUS_VPN_SIGNAL_STATE_CHANGE">
      <source-position filename="libnm-core/nm-vpn-dbus-interface.h"
                       line="72"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DBUS_VPN_SIGNAL_VPN_CONFIG_BAD"
              value="VPNConfigBad"
              c:type="NM_DBUS_VPN_SIGNAL_VPN_CONFIG_BAD">
      <source-position filename="libnm-core/nm-vpn-dbus-interface.h"
                       line="70"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DBUS_VPN_STARTING_IN_PROGRESS"
              value="StartingInProgress"
              c:type="NM_DBUS_VPN_STARTING_IN_PROGRESS">
      <source-position filename="libnm-core/nm-vpn-dbus-interface.h"
                       line="55"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DBUS_VPN_STOPPING_IN_PROGRESS"
              value="StoppingInProgress"
              c:type="NM_DBUS_VPN_STOPPING_IN_PROGRESS">
      <source-position filename="libnm-core/nm-vpn-dbus-interface.h"
                       line="57"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DBUS_VPN_WRONG_STATE"
              value="WrongState"
              c:type="NM_DBUS_VPN_WRONG_STATE">
      <source-position filename="libnm-core/nm-vpn-dbus-interface.h"
                       line="59"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_6LOWPAN_HW_ADDRESS"
              value="hw-address"
              c:type="NM_DEVICE_6LOWPAN_HW_ADDRESS">
      <source-position filename="libnm/nm-device-6lowpan.h" line="39"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_6LOWPAN_PARENT"
              value="parent"
              c:type="NM_DEVICE_6LOWPAN_PARENT">
      <source-position filename="libnm/nm-device-6lowpan.h" line="38"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_ACTIVE_CONNECTION"
              value="active-connection"
              c:type="NM_DEVICE_ACTIVE_CONNECTION">
      <source-position filename="libnm/nm-device.h" line="59"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_ADSL_CARRIER"
              value="carrier"
              c:type="NM_DEVICE_ADSL_CARRIER">
      <source-position filename="libnm/nm-device-adsl.h" line="39"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_AUTOCONNECT"
              value="autoconnect"
              c:type="NM_DEVICE_AUTOCONNECT">
      <source-position filename="libnm/nm-device.h" line="50"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_AVAILABLE_CONNECTIONS"
              value="available-connections"
              c:type="NM_DEVICE_AVAILABLE_CONNECTIONS">
      <source-position filename="libnm/nm-device.h" line="60"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_BOND_CARRIER"
              value="carrier"
              c:type="NM_DEVICE_BOND_CARRIER">
      <source-position filename="libnm/nm-device-bond.h" line="40"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_BOND_HW_ADDRESS"
              value="hw-address"
              c:type="NM_DEVICE_BOND_HW_ADDRESS">
      <source-position filename="libnm/nm-device-bond.h" line="39"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_BOND_SLAVES"
              value="slaves"
              c:type="NM_DEVICE_BOND_SLAVES">
      <source-position filename="libnm/nm-device-bond.h" line="41"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_BRIDGE_CARRIER"
              value="carrier"
              c:type="NM_DEVICE_BRIDGE_CARRIER">
      <source-position filename="libnm/nm-device-bridge.h" line="40"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_BRIDGE_HW_ADDRESS"
              value="hw-address"
              c:type="NM_DEVICE_BRIDGE_HW_ADDRESS">
      <source-position filename="libnm/nm-device-bridge.h" line="39"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_BRIDGE_SLAVES"
              value="slaves"
              c:type="NM_DEVICE_BRIDGE_SLAVES">
      <source-position filename="libnm/nm-device-bridge.h" line="41"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_BT_CAPABILITIES"
              value="bt-capabilities"
              c:type="NM_DEVICE_BT_CAPABILITIES">
      <source-position filename="libnm/nm-device-bt.h" line="42"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_BT_HW_ADDRESS"
              value="hw-address"
              c:type="NM_DEVICE_BT_HW_ADDRESS">
      <source-position filename="libnm/nm-device-bt.h" line="40"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_BT_NAME" value="name" c:type="NM_DEVICE_BT_NAME">
      <source-position filename="libnm/nm-device-bt.h" line="41"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_CAPABILITIES"
              value="capabilities"
              c:type="NM_DEVICE_CAPABILITIES">
      <source-position filename="libnm/nm-device.h" line="47"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_DEVICE_TYPE"
              value="device-type"
              c:type="NM_DEVICE_DEVICE_TYPE">
      <source-position filename="libnm/nm-device.h" line="40"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_DHCP4_CONFIG"
              value="dhcp4-config"
              c:type="NM_DEVICE_DHCP4_CONFIG">
      <source-position filename="libnm/nm-device.h" line="54"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_DHCP6_CONFIG"
              value="dhcp6-config"
              c:type="NM_DEVICE_DHCP6_CONFIG">
      <source-position filename="libnm/nm-device.h" line="56"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_DRIVER" value="driver" c:type="NM_DEVICE_DRIVER">
      <source-position filename="libnm/nm-device.h" line="44"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_DRIVER_VERSION"
              value="driver-version"
              c:type="NM_DEVICE_DRIVER_VERSION">
      <source-position filename="libnm/nm-device.h" line="45"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_DUMMY_HW_ADDRESS"
              value="hw-address"
              c:type="NM_DEVICE_DUMMY_HW_ADDRESS">
      <source-position filename="libnm/nm-device-dummy.h" line="39"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_ETHERNET_CARRIER"
              value="carrier"
              c:type="NM_DEVICE_ETHERNET_CARRIER">
      <source-position filename="libnm/nm-device-ethernet.h" line="43"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_ETHERNET_HW_ADDRESS"
              value="hw-address"
              c:type="NM_DEVICE_ETHERNET_HW_ADDRESS">
      <source-position filename="libnm/nm-device-ethernet.h" line="40"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_ETHERNET_PERMANENT_HW_ADDRESS"
              value="perm-hw-address"
              c:type="NM_DEVICE_ETHERNET_PERMANENT_HW_ADDRESS">
      <source-position filename="libnm/nm-device-ethernet.h" line="41"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_ETHERNET_S390_SUBCHANNELS"
              value="s390-subchannels"
              c:type="NM_DEVICE_ETHERNET_S390_SUBCHANNELS">
      <source-position filename="libnm/nm-device-ethernet.h" line="44"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_ETHERNET_SPEED"
              value="speed"
              c:type="NM_DEVICE_ETHERNET_SPEED">
      <source-position filename="libnm/nm-device-ethernet.h" line="42"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_FIRMWARE_MISSING"
              value="firmware-missing"
              c:type="NM_DEVICE_FIRMWARE_MISSING">
      <source-position filename="libnm/nm-device.h" line="51"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_FIRMWARE_VERSION"
              value="firmware-version"
              c:type="NM_DEVICE_FIRMWARE_VERSION">
      <source-position filename="libnm/nm-device.h" line="46"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_GENERIC_HW_ADDRESS"
              value="hw-address"
              c:type="NM_DEVICE_GENERIC_HW_ADDRESS">
      <source-position filename="libnm/nm-device-generic.h" line="39"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_GENERIC_TYPE_DESCRIPTION"
              value="type-description"
              c:type="NM_DEVICE_GENERIC_TYPE_DESCRIPTION">
      <source-position filename="libnm/nm-device-generic.h" line="40"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_INFINIBAND_CARRIER"
              value="carrier"
              c:type="NM_DEVICE_INFINIBAND_CARRIER">
      <source-position filename="libnm/nm-device-infiniband.h" line="40"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_INFINIBAND_HW_ADDRESS"
              value="hw-address"
              c:type="NM_DEVICE_INFINIBAND_HW_ADDRESS">
      <source-position filename="libnm/nm-device-infiniband.h" line="39"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_INTERFACE"
              value="interface"
              c:type="NM_DEVICE_INTERFACE">
      <source-position filename="libnm/nm-device.h" line="42"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_IP4_CONFIG"
              value="ip4-config"
              c:type="NM_DEVICE_IP4_CONFIG">
      <source-position filename="libnm/nm-device.h" line="53"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_IP4_CONNECTIVITY"
              value="ip4-connectivity"
              c:type="NM_DEVICE_IP4_CONNECTIVITY">
      <source-position filename="libnm/nm-device.h" line="67"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_IP6_CONFIG"
              value="ip6-config"
              c:type="NM_DEVICE_IP6_CONFIG">
      <source-position filename="libnm/nm-device.h" line="55"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_IP6_CONNECTIVITY"
              value="ip6-connectivity"
              c:type="NM_DEVICE_IP6_CONNECTIVITY">
      <source-position filename="libnm/nm-device.h" line="68"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_IP_INTERFACE"
              value="ip-interface"
              c:type="NM_DEVICE_IP_INTERFACE">
      <source-position filename="libnm/nm-device.h" line="43"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_IP_TUNNEL_ENCAPSULATION_LIMIT"
              value="encapsulation-limit"
              c:type="NM_DEVICE_IP_TUNNEL_ENCAPSULATION_LIMIT">
      <source-position filename="libnm/nm-device-ip-tunnel.h" line="49"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_IP_TUNNEL_FLAGS"
              value="flags"
              c:type="NM_DEVICE_IP_TUNNEL_FLAGS">
      <source-position filename="libnm/nm-device-ip-tunnel.h" line="51"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_IP_TUNNEL_FLOW_LABEL"
              value="flow-label"
              c:type="NM_DEVICE_IP_TUNNEL_FLOW_LABEL">
      <source-position filename="libnm/nm-device-ip-tunnel.h" line="50"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_IP_TUNNEL_INPUT_KEY"
              value="input-key"
              c:type="NM_DEVICE_IP_TUNNEL_INPUT_KEY">
      <source-position filename="libnm/nm-device-ip-tunnel.h" line="47"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_IP_TUNNEL_LOCAL"
              value="local"
              c:type="NM_DEVICE_IP_TUNNEL_LOCAL">
      <source-position filename="libnm/nm-device-ip-tunnel.h" line="42"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_IP_TUNNEL_MODE"
              value="mode"
              c:type="NM_DEVICE_IP_TUNNEL_MODE">
      <source-position filename="libnm/nm-device-ip-tunnel.h" line="40"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_IP_TUNNEL_OUTPUT_KEY"
              value="output-key"
              c:type="NM_DEVICE_IP_TUNNEL_OUTPUT_KEY">
      <source-position filename="libnm/nm-device-ip-tunnel.h" line="48"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_IP_TUNNEL_PARENT"
              value="parent"
              c:type="NM_DEVICE_IP_TUNNEL_PARENT">
      <source-position filename="libnm/nm-device-ip-tunnel.h" line="41"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_IP_TUNNEL_PATH_MTU_DISCOVERY"
              value="path-mtu-discovery"
              c:type="NM_DEVICE_IP_TUNNEL_PATH_MTU_DISCOVERY">
      <source-position filename="libnm/nm-device-ip-tunnel.h" line="46"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_IP_TUNNEL_REMOTE"
              value="remote"
              c:type="NM_DEVICE_IP_TUNNEL_REMOTE">
      <source-position filename="libnm/nm-device-ip-tunnel.h" line="43"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_IP_TUNNEL_TOS"
              value="tos"
              c:type="NM_DEVICE_IP_TUNNEL_TOS">
      <source-position filename="libnm/nm-device-ip-tunnel.h" line="45"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_IP_TUNNEL_TTL"
              value="ttl"
              c:type="NM_DEVICE_IP_TUNNEL_TTL">
      <source-position filename="libnm/nm-device-ip-tunnel.h" line="44"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_LLDP_NEIGHBORS"
              value="lldp-neighbors"
              c:type="NM_DEVICE_LLDP_NEIGHBORS">
      <source-position filename="libnm/nm-device.h" line="66"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_MACSEC_CIPHER_SUITE"
              value="cipher-suite"
              c:type="NM_DEVICE_MACSEC_CIPHER_SUITE">
      <source-position filename="libnm/nm-device-macsec.h" line="43"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_MACSEC_ENCODING_SA"
              value="encoding-sa"
              c:type="NM_DEVICE_MACSEC_ENCODING_SA">
      <source-position filename="libnm/nm-device-macsec.h" line="45"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_MACSEC_ENCRYPT"
              value="encrypt"
              c:type="NM_DEVICE_MACSEC_ENCRYPT">
      <source-position filename="libnm/nm-device-macsec.h" line="47"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_MACSEC_ES" value="es" c:type="NM_DEVICE_MACSEC_ES">
      <source-position filename="libnm/nm-device-macsec.h" line="50"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_MACSEC_HW_ADDRESS"
              value="hw-address"
              c:type="NM_DEVICE_MACSEC_HW_ADDRESS">
      <source-position filename="libnm/nm-device-macsec.h" line="40"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_MACSEC_ICV_LENGTH"
              value="icv-length"
              c:type="NM_DEVICE_MACSEC_ICV_LENGTH">
      <source-position filename="libnm/nm-device-macsec.h" line="42"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_MACSEC_INCLUDE_SCI"
              value="include-sci"
              c:type="NM_DEVICE_MACSEC_INCLUDE_SCI">
      <source-position filename="libnm/nm-device-macsec.h" line="49"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_MACSEC_PARENT"
              value="parent"
              c:type="NM_DEVICE_MACSEC_PARENT">
      <source-position filename="libnm/nm-device-macsec.h" line="39"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_MACSEC_PROTECT"
              value="protect"
              c:type="NM_DEVICE_MACSEC_PROTECT">
      <source-position filename="libnm/nm-device-macsec.h" line="48"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_MACSEC_REPLAY_PROTECT"
              value="replay-protect"
              c:type="NM_DEVICE_MACSEC_REPLAY_PROTECT">
      <source-position filename="libnm/nm-device-macsec.h" line="52"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_MACSEC_SCB"
              value="scb"
              c:type="NM_DEVICE_MACSEC_SCB">
      <source-position filename="libnm/nm-device-macsec.h" line="51"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_MACSEC_SCI"
              value="sci"
              c:type="NM_DEVICE_MACSEC_SCI">
      <source-position filename="libnm/nm-device-macsec.h" line="41"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_MACSEC_VALIDATION"
              value="validation"
              c:type="NM_DEVICE_MACSEC_VALIDATION">
      <source-position filename="libnm/nm-device-macsec.h" line="46"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_MACSEC_WINDOW"
              value="window"
              c:type="NM_DEVICE_MACSEC_WINDOW">
      <source-position filename="libnm/nm-device-macsec.h" line="44"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_MACVLAN_HW_ADDRESS"
              value="hw-address"
              c:type="NM_DEVICE_MACVLAN_HW_ADDRESS">
      <source-position filename="libnm/nm-device-macvlan.h" line="43"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_MACVLAN_MODE"
              value="mode"
              c:type="NM_DEVICE_MACVLAN_MODE">
      <source-position filename="libnm/nm-device-macvlan.h" line="40"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_MACVLAN_NO_PROMISC"
              value="no-promisc"
              c:type="NM_DEVICE_MACVLAN_NO_PROMISC">
      <source-position filename="libnm/nm-device-macvlan.h" line="41"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_MACVLAN_PARENT"
              value="parent"
              c:type="NM_DEVICE_MACVLAN_PARENT">
      <source-position filename="libnm/nm-device-macvlan.h" line="39"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_MACVLAN_TAP"
              value="tap"
              c:type="NM_DEVICE_MACVLAN_TAP">
      <source-position filename="libnm/nm-device-macvlan.h" line="42"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_MANAGED" value="managed" c:type="NM_DEVICE_MANAGED">
      <source-position filename="libnm/nm-device.h" line="49"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_METERED" value="metered" c:type="NM_DEVICE_METERED">
      <source-position filename="libnm/nm-device.h" line="65"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_MODEM_CURRENT_CAPABILITIES"
              value="current-capabilities"
              c:type="NM_DEVICE_MODEM_CURRENT_CAPABILITIES">
      <source-position filename="libnm/nm-device-modem.h" line="41"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_MODEM_MODEM_CAPABILITIES"
              value="modem-capabilities"
              c:type="NM_DEVICE_MODEM_MODEM_CAPABILITIES">
      <source-position filename="libnm/nm-device-modem.h" line="40"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_MTU" value="mtu" c:type="NM_DEVICE_MTU">
      <source-position filename="libnm/nm-device.h" line="64"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_NM_PLUGIN_MISSING"
              value="nm-plugin-missing"
              c:type="NM_DEVICE_NM_PLUGIN_MISSING">
      <source-position filename="libnm/nm-device.h" line="52"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_OLPC_MESH_ACTIVE_CHANNEL"
              value="active-channel"
              c:type="NM_DEVICE_OLPC_MESH_ACTIVE_CHANNEL">
      <source-position filename="libnm/nm-device-olpc-mesh.h" line="41"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_OLPC_MESH_COMPANION"
              value="companion"
              c:type="NM_DEVICE_OLPC_MESH_COMPANION">
      <source-position filename="libnm/nm-device-olpc-mesh.h" line="40"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_OLPC_MESH_HW_ADDRESS"
              value="hw-address"
              c:type="NM_DEVICE_OLPC_MESH_HW_ADDRESS">
      <source-position filename="libnm/nm-device-olpc-mesh.h" line="39"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_OVS_BRIDGE_SLAVES"
              value="slaves"
              c:type="NM_DEVICE_OVS_BRIDGE_SLAVES">
      <source-position filename="libnm/nm-device-ovs-bridge.h" line="38"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_OVS_PORT_SLAVES"
              value="slaves"
              c:type="NM_DEVICE_OVS_PORT_SLAVES">
      <source-position filename="libnm/nm-device-ovs-port.h" line="38"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_PHYSICAL_PORT_ID"
              value="physical-port-id"
              c:type="NM_DEVICE_PHYSICAL_PORT_ID">
      <source-position filename="libnm/nm-device.h" line="63"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_PRODUCT" value="product" c:type="NM_DEVICE_PRODUCT">
      <source-position filename="libnm/nm-device.h" line="62"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_REAL" value="real" c:type="NM_DEVICE_REAL">
      <source-position filename="libnm/nm-device.h" line="48"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_STATE" value="state" c:type="NM_DEVICE_STATE">
      <source-position filename="libnm/nm-device.h" line="57"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_STATE_REASON"
              value="state-reason"
              c:type="NM_DEVICE_STATE_REASON">
      <source-position filename="libnm/nm-device.h" line="58"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_TEAM_CARRIER"
              value="carrier"
              c:type="NM_DEVICE_TEAM_CARRIER">
      <source-position filename="libnm/nm-device-team.h" line="40"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_TEAM_CONFIG"
              value="config"
              c:type="NM_DEVICE_TEAM_CONFIG">
      <source-position filename="libnm/nm-device-team.h" line="42"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_TEAM_HW_ADDRESS"
              value="hw-address"
              c:type="NM_DEVICE_TEAM_HW_ADDRESS">
      <source-position filename="libnm/nm-device-team.h" line="39"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_TEAM_SLAVES"
              value="slaves"
              c:type="NM_DEVICE_TEAM_SLAVES">
      <source-position filename="libnm/nm-device-team.h" line="41"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_TUN_GROUP"
              value="group"
              c:type="NM_DEVICE_TUN_GROUP">
      <source-position filename="libnm/nm-device-tun.h" line="41"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_TUN_HW_ADDRESS"
              value="hw-address"
              c:type="NM_DEVICE_TUN_HW_ADDRESS">
      <source-position filename="libnm/nm-device-tun.h" line="39"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_TUN_MODE" value="mode" c:type="NM_DEVICE_TUN_MODE">
      <source-position filename="libnm/nm-device-tun.h" line="42"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_TUN_MULTI_QUEUE"
              value="multi-queue"
              c:type="NM_DEVICE_TUN_MULTI_QUEUE">
      <source-position filename="libnm/nm-device-tun.h" line="45"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_TUN_NO_PI"
              value="no-pi"
              c:type="NM_DEVICE_TUN_NO_PI">
      <source-position filename="libnm/nm-device-tun.h" line="43"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_TUN_OWNER"
              value="owner"
              c:type="NM_DEVICE_TUN_OWNER">
      <source-position filename="libnm/nm-device-tun.h" line="40"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_TUN_VNET_HDR"
              value="vnet-hdr"
              c:type="NM_DEVICE_TUN_VNET_HDR">
      <source-position filename="libnm/nm-device-tun.h" line="44"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_UDI" value="udi" c:type="NM_DEVICE_UDI">
      <source-position filename="libnm/nm-device.h" line="41"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_VENDOR" value="vendor" c:type="NM_DEVICE_VENDOR">
      <source-position filename="libnm/nm-device.h" line="61"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_VLAN_CARRIER"
              value="carrier"
              c:type="NM_DEVICE_VLAN_CARRIER">
      <source-position filename="libnm/nm-device-vlan.h" line="40"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_VLAN_HW_ADDRESS"
              value="hw-address"
              c:type="NM_DEVICE_VLAN_HW_ADDRESS">
      <source-position filename="libnm/nm-device-vlan.h" line="39"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_VLAN_PARENT"
              value="parent"
              c:type="NM_DEVICE_VLAN_PARENT">
      <source-position filename="libnm/nm-device-vlan.h" line="41"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_VLAN_VLAN_ID"
              value="vlan-id"
              c:type="NM_DEVICE_VLAN_VLAN_ID">
      <source-position filename="libnm/nm-device-vlan.h" line="42"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_VXLAN_AGEING"
              value="ageing"
              c:type="NM_DEVICE_VXLAN_AGEING">
      <source-position filename="libnm/nm-device-vxlan.h" line="48"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_VXLAN_CARRIER"
              value="carrier"
              c:type="NM_DEVICE_VXLAN_CARRIER">
      <source-position filename="libnm/nm-device-vxlan.h" line="40"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_VXLAN_DST_PORT"
              value="dst-port"
              c:type="NM_DEVICE_VXLAN_DST_PORT">
      <source-position filename="libnm/nm-device-vxlan.h" line="56"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_VXLAN_GROUP"
              value="group"
              c:type="NM_DEVICE_VXLAN_GROUP">
      <source-position filename="libnm/nm-device-vxlan.h" line="43"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_VXLAN_HW_ADDRESS"
              value="hw-address"
              c:type="NM_DEVICE_VXLAN_HW_ADDRESS">
      <source-position filename="libnm/nm-device-vxlan.h" line="39"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_VXLAN_ID" value="id" c:type="NM_DEVICE_VXLAN_ID">
      <source-position filename="libnm/nm-device-vxlan.h" line="42"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_VXLAN_L2MISS"
              value="l2miss"
              c:type="NM_DEVICE_VXLAN_L2MISS">
      <source-position filename="libnm/nm-device-vxlan.h" line="54"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_VXLAN_L3MISS"
              value="l3miss"
              c:type="NM_DEVICE_VXLAN_L3MISS">
      <source-position filename="libnm/nm-device-vxlan.h" line="55"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_VXLAN_LEARNING"
              value="learning"
              c:type="NM_DEVICE_VXLAN_LEARNING">
      <source-position filename="libnm/nm-device-vxlan.h" line="47"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_VXLAN_LIMIT"
              value="limit"
              c:type="NM_DEVICE_VXLAN_LIMIT">
      <source-position filename="libnm/nm-device-vxlan.h" line="51"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_VXLAN_LOCAL"
              value="local"
              c:type="NM_DEVICE_VXLAN_LOCAL">
      <source-position filename="libnm/nm-device-vxlan.h" line="44"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_VXLAN_PARENT"
              value="parent"
              c:type="NM_DEVICE_VXLAN_PARENT">
      <source-position filename="libnm/nm-device-vxlan.h" line="41"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_VXLAN_PROXY"
              value="proxy"
              c:type="NM_DEVICE_VXLAN_PROXY">
      <source-position filename="libnm/nm-device-vxlan.h" line="52"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_VXLAN_RSC" value="rsc" c:type="NM_DEVICE_VXLAN_RSC">
      <source-position filename="libnm/nm-device-vxlan.h" line="53"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_VXLAN_SRC_PORT_MAX"
              value="src-port-max"
              c:type="NM_DEVICE_VXLAN_SRC_PORT_MAX">
      <source-position filename="libnm/nm-device-vxlan.h" line="46"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_VXLAN_SRC_PORT_MIN"
              value="src-port-min"
              c:type="NM_DEVICE_VXLAN_SRC_PORT_MIN">
      <source-position filename="libnm/nm-device-vxlan.h" line="45"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_VXLAN_TOS" value="tos" c:type="NM_DEVICE_VXLAN_TOS">
      <source-position filename="libnm/nm-device-vxlan.h" line="49"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_VXLAN_TTL" value="ttl" c:type="NM_DEVICE_VXLAN_TTL">
      <source-position filename="libnm/nm-device-vxlan.h" line="50"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_WIFI_ACCESS_POINTS"
              value="access-points"
              c:type="NM_DEVICE_WIFI_ACCESS_POINTS">
      <source-position filename="libnm/nm-device-wifi.h" line="46"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_WIFI_ACTIVE_ACCESS_POINT"
              value="active-access-point"
              c:type="NM_DEVICE_WIFI_ACTIVE_ACCESS_POINT">
      <source-position filename="libnm/nm-device-wifi.h" line="44"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_WIFI_BITRATE"
              value="bitrate"
              c:type="NM_DEVICE_WIFI_BITRATE">
      <source-position filename="libnm/nm-device-wifi.h" line="43"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_WIFI_CAPABILITIES"
              value="wireless-capabilities"
              c:type="NM_DEVICE_WIFI_CAPABILITIES">
      <source-position filename="libnm/nm-device-wifi.h" line="45"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_WIFI_HW_ADDRESS"
              value="hw-address"
              c:type="NM_DEVICE_WIFI_HW_ADDRESS">
      <source-position filename="libnm/nm-device-wifi.h" line="40"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_WIFI_LAST_SCAN"
              value="last-scan"
              c:type="NM_DEVICE_WIFI_LAST_SCAN">
      <source-position filename="libnm/nm-device-wifi.h" line="47"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_WIFI_MODE"
              value="mode"
              c:type="NM_DEVICE_WIFI_MODE">
      <source-position filename="libnm/nm-device-wifi.h" line="42"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_WIFI_P2P_HW_ADDRESS"
              value="hw-address"
              c:type="NM_DEVICE_WIFI_P2P_HW_ADDRESS">
      <source-position filename="libnm/nm-device-wifi-p2p.h" line="38"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_WIFI_P2P_PEERS"
              value="peers"
              c:type="NM_DEVICE_WIFI_P2P_PEERS">
      <source-position filename="libnm/nm-device-wifi-p2p.h" line="39"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_WIFI_P2P_WFDIES"
              value="wfdies"
              c:type="NM_DEVICE_WIFI_P2P_WFDIES">
      <source-position filename="libnm/nm-device-wifi-p2p.h" line="40"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_WIFI_PERMANENT_HW_ADDRESS"
              value="perm-hw-address"
              c:type="NM_DEVICE_WIFI_PERMANENT_HW_ADDRESS">
      <source-position filename="libnm/nm-device-wifi.h" line="41"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_WIMAX_ACTIVE_NSP"
              value="active-nsp"
              c:type="NM_DEVICE_WIMAX_ACTIVE_NSP">
      <source-position filename="libnm/nm-device-wimax.h" line="41"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_WIMAX_BSID"
              value="bsid"
              c:type="NM_DEVICE_WIMAX_BSID">
      <source-position filename="libnm/nm-device-wimax.h" line="46"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_WIMAX_CENTER_FREQUENCY"
              value="center-frequency"
              c:type="NM_DEVICE_WIMAX_CENTER_FREQUENCY">
      <source-position filename="libnm/nm-device-wimax.h" line="42"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_WIMAX_CINR"
              value="cinr"
              c:type="NM_DEVICE_WIMAX_CINR">
      <source-position filename="libnm/nm-device-wimax.h" line="44"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_WIMAX_HW_ADDRESS"
              value="hw-address"
              c:type="NM_DEVICE_WIMAX_HW_ADDRESS">
      <source-position filename="libnm/nm-device-wimax.h" line="40"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_WIMAX_NSPS"
              value="nsps"
              c:type="NM_DEVICE_WIMAX_NSPS">
      <source-position filename="libnm/nm-device-wimax.h" line="47"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_WIMAX_RSSI"
              value="rssi"
              c:type="NM_DEVICE_WIMAX_RSSI">
      <source-position filename="libnm/nm-device-wimax.h" line="43"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_WIMAX_TX_POWER"
              value="tx-power"
              c:type="NM_DEVICE_WIMAX_TX_POWER">
      <source-position filename="libnm/nm-device-wimax.h" line="45"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_WIREGUARD_FWMARK"
              value="fwmark"
              c:type="NM_DEVICE_WIREGUARD_FWMARK">
      <source-position filename="libnm/nm-device-wireguard.h" line="42"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_WIREGUARD_LISTEN_PORT"
              value="listen-port"
              c:type="NM_DEVICE_WIREGUARD_LISTEN_PORT">
      <source-position filename="libnm/nm-device-wireguard.h" line="41"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_WIREGUARD_PUBLIC_KEY"
              value="public-key"
              c:type="NM_DEVICE_WIREGUARD_PUBLIC_KEY">
      <source-position filename="libnm/nm-device-wireguard.h" line="40"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_WPAN_HW_ADDRESS"
              value="hw-address"
              c:type="NM_DEVICE_WPAN_HW_ADDRESS">
      <source-position filename="libnm/nm-device-wpan.h" line="38"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DHCP_CONFIG_FAMILY"
              value="family"
              c:type="NM_DHCP_CONFIG_FAMILY">
      <source-position filename="libnm/nm-dhcp-config.h" line="53"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DHCP_CONFIG_OPTIONS"
              value="options"
              c:type="NM_DHCP_CONFIG_OPTIONS">
      <source-position filename="libnm/nm-dhcp-config.h" line="54"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <class name="Device"
           c:symbol-prefix="device"
           c:type="NMDevice"
           parent="Object"
           abstract="1"
           glib:type-name="NMDevice"
           glib:get-type="nm_device_get_type"
           glib:type-struct="DeviceClass">
      <source-position filename="libnm/nm-device.h" line="98"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.Initable"/>
      <function name="disambiguate_names"
                c:identifier="nm_device_disambiguate_names">
        <doc xml:space="preserve"
             filename="libnm/nm-device.c"
             line="1751">Generates a list of short-ish unique presentation names for the
devices in @devices.</doc>
        <source-position filename="libnm/nm-device.h" line="145"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libnm/nm-device.c"
               line="1759">the device names</doc>
          <array c:type="char**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <parameter name="devices" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device.c"
                 line="1753">an array of #NMDevice</doc>
            <array length="1" zero-terminated="0" c:type="NMDevice**">
              <type name="Device" c:type="NMDevice*"/>
            </array>
          </parameter>
          <parameter name="num_devices" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device.c"
                 line="1754">length of @devices</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="connection_compatible"
                      invoker="connection_compatible"
                      throws="1">
        <doc xml:space="preserve"
             filename="libnm/nm-device.c"
             line="2564">Validates a given connection for a given #NMDevice object and returns
whether the connection may be activated with the device. For example if
@device is a Wi-Fi device that supports only WEP encryption, the connection
will only be valid if it is a Wi-Fi connection which describes a WEP or open
network, and will not be valid if it describes a WPA network, or if it is
an Ethernet, Bluetooth, WWAN, etc connection that is incompatible with the
device.

This function does the same as nm_device_connection_valid(), i.e. checking
compatibility of the given device and connection. But, in addition, it sets
GError when FALSE is returned.</doc>
        <source-position filename="libnm/nm-device.h" line="87"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-device.c"
               line="2582">%TRUE if the connection may be activated with this device, %FALSE
if is incompatible with the device's capabilities and characteristics.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device.c"
                 line="2566">an #NMDevice to validate @connection against</doc>
            <type name="Device" c:type="NMDevice*"/>
          </instance-parameter>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device.c"
                 line="2567">an #NMConnection to validate against @device</doc>
            <type name="Connection" c:type="NMConnection*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_hw_address" invoker="get_hw_address">
        <doc xml:space="preserve"
             filename="libnm/nm-device.c"
             line="1049">Gets the current a hardware address (MAC) for the @device.</doc>
        <source-position filename="libnm/nm-device.h" line="92"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-device.c"
               line="1055">the current MAC of the device, or %NULL.
This is the internal string used by the device, and must not be modified.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device.c"
                 line="1051">a #NMDevice</doc>
            <type name="Device" c:type="NMDevice*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_setting_type" invoker="get_setting_type">
        <doc xml:space="preserve"
             filename="libnm/nm-device.c"
             line="2631">Gets the (primary) #NMSetting subtype associated with connections
that can be used on @device.</doc>
        <source-position filename="libnm/nm-device.h" line="94"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-device.c"
               line="2638">@device's associated #NMSetting type</doc>
          <type name="GType" c:type="GType"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device.c"
                 line="2633">an #NMDevice</doc>
            <type name="Device" c:type="NMDevice*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_type_description"
                      invoker="get_type_description">
        <doc xml:space="preserve"
             filename="libnm/nm-device.c"
             line="1011">Gets a (non-localized) description of the type of device that
@device is.</doc>
        <source-position filename="libnm/nm-device.h" line="91"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-device.c"
               line="1018">the type description of the device. This is the internal
string used by the device, and must not be modified.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device.c"
                 line="1013">a #NMDevice</doc>
            <type name="Device" c:type="NMDevice*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="state_changed">
        <source-position filename="libnm/nm-device.h" line="81"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <type name="Device" c:type="NMDevice*"/>
          </instance-parameter>
          <parameter name="new_state" transfer-ownership="none">
            <type name="DeviceState" c:type="NMDeviceState"/>
          </parameter>
          <parameter name="old_state" transfer-ownership="none">
            <type name="DeviceState" c:type="NMDeviceState"/>
          </parameter>
          <parameter name="reason" transfer-ownership="none">
            <type name="DeviceStateReason" c:type="NMDeviceStateReason"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="connection_compatible"
              c:identifier="nm_device_connection_compatible"
              throws="1">
        <doc xml:space="preserve"
             filename="libnm/nm-device.c"
             line="2564">Validates a given connection for a given #NMDevice object and returns
whether the connection may be activated with the device. For example if
@device is a Wi-Fi device that supports only WEP encryption, the connection
will only be valid if it is a Wi-Fi connection which describes a WEP or open
network, and will not be valid if it describes a WPA network, or if it is
an Ethernet, Bluetooth, WWAN, etc connection that is incompatible with the
device.

This function does the same as nm_device_connection_valid(), i.e. checking
compatibility of the given device and connection. But, in addition, it sets
GError when FALSE is returned.</doc>
        <source-position filename="libnm/nm-device.h" line="213"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-device.c"
               line="2582">%TRUE if the connection may be activated with this device, %FALSE
if is incompatible with the device's capabilities and characteristics.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device.c"
                 line="2566">an #NMDevice to validate @connection against</doc>
            <type name="Device" c:type="NMDevice*"/>
          </instance-parameter>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device.c"
                 line="2567">an #NMConnection to validate against @device</doc>
            <type name="Connection" c:type="NMConnection*"/>
          </parameter>
        </parameters>
      </method>
      <method name="connection_valid"
              c:identifier="nm_device_connection_valid">
        <doc xml:space="preserve"
             filename="libnm/nm-device.c"
             line="2518">Validates a given connection for a given #NMDevice object and returns
whether the connection may be activated with the device. For example if
@device is a Wi-Fi device that supports only WEP encryption, the connection
will only be valid if it is a Wi-Fi connection which describes a WEP or open
network, and will not be valid if it describes a WPA network, or if it is
an Ethernet, Bluetooth, WWAN, etc connection that is incompatible with the
device.</doc>
        <source-position filename="libnm/nm-device.h" line="210"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-device.c"
               line="2531">%TRUE if the connection may be activated with this device, %FALSE
if is incompatible with the device's capabilities and characteristics.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device.c"
                 line="2520">an #NMDevice to validate @connection against</doc>
            <type name="Device" c:type="NMDevice*"/>
          </instance-parameter>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device.c"
                 line="2521">an #NMConnection to validate against @device</doc>
            <type name="Connection" c:type="NMConnection*"/>
          </parameter>
        </parameters>
      </method>
      <method name="delete" c:identifier="nm_device_delete" throws="1">
        <doc xml:space="preserve"
             filename="libnm/nm-device.c"
             line="2415">Deletes the software device. Hardware devices can't be deleted.</doc>
        <source-position filename="libnm/nm-device.h" line="196"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-device.c"
               line="2423">%TRUE on success, %FALSE on error, in which case @error
will be set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device.c"
                 line="2417">a #NMDevice</doc>
            <type name="Device" c:type="NMDevice*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libnm/nm-device.c"
                 line="2418">a #GCancellable, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="delete_async" c:identifier="nm_device_delete_async">
        <doc xml:space="preserve"
             filename="libnm/nm-device.c"
             line="2461">Asynchronously begins deleting the software device. Hardware devices can't
be deleted.</doc>
        <source-position filename="libnm/nm-device.h" line="199"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device.c"
                 line="2463">a #NMDevice</doc>
            <type name="Device" c:type="NMDevice*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libnm/nm-device.c"
                 line="2464">a #GCancellable, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="libnm/nm-device.c"
                 line="2465">callback to be called when delete operation completes</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libnm/nm-device.c"
                 line="2466">caller-specific data passed to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="delete_finish"
              c:identifier="nm_device_delete_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="libnm/nm-device.c"
             line="2491">Gets the result of a call to nm_device_delete_async().</doc>
        <source-position filename="libnm/nm-device.h" line="203"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-device.c"
               line="2499">%TRUE on success, %FALSE on error, in which case @error
will be set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device.c"
                 line="2493">a #NMDevice</doc>
            <type name="Device" c:type="NMDevice*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device.c"
                 line="2494">the result passed to the #GAsyncReadyCallback</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="disconnect" c:identifier="nm_device_disconnect" throws="1">
        <doc xml:space="preserve"
             filename="libnm/nm-device.c"
             line="2310">Disconnects the device if currently connected, and prevents the device from
automatically connecting to networks until the next manual network connection
request.</doc>
        <source-position filename="libnm/nm-device.h" line="185"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-device.c"
               line="2320">%TRUE on success, %FALSE on error, in which case @error will be set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device.c"
                 line="2312">a #NMDevice</doc>
            <type name="Device" c:type="NMDevice*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libnm/nm-device.c"
                 line="2313">a #GCancellable, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="disconnect_async"
              c:identifier="nm_device_disconnect_async">
        <doc xml:space="preserve"
             filename="libnm/nm-device.c"
             line="2357">Asynchronously begins disconnecting the device if currently connected, and
prevents the device from automatically connecting to networks until the next
manual network connection request.</doc>
        <source-position filename="libnm/nm-device.h" line="188"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device.c"
                 line="2359">a #NMDevice</doc>
            <type name="Device" c:type="NMDevice*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libnm/nm-device.c"
                 line="2360">a #GCancellable, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="libnm/nm-device.c"
                 line="2361">callback to be called when the disconnect operation completes</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libnm/nm-device.c"
                 line="2362">caller-specific data passed to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="disconnect_finish"
              c:identifier="nm_device_disconnect_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="libnm/nm-device.c"
             line="2388">Gets the result of a call to nm_device_disconnect_async().</doc>
        <source-position filename="libnm/nm-device.h" line="192"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-device.c"
               line="2396">%TRUE on success, %FALSE on error, in which case @error
will be set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device.c"
                 line="2390">a #NMDevice</doc>
            <type name="Device" c:type="NMDevice*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device.c"
                 line="2391">the result passed to the #GAsyncReadyCallback</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="filter_connections"
              c:identifier="nm_device_filter_connections">
        <doc xml:space="preserve"
             filename="libnm/nm-device.c"
             line="2595">Filters a given array of connections for a given #NMDevice object and returns
connections which may be activated with the device. For example if @device
is a Wi-Fi device that supports only WEP encryption, the returned array will
contain any Wi-Fi connections in @connections that allow connection to
unencrypted or WEP-enabled SSIDs.  The returned array will not contain
Ethernet, Bluetooth, Wi-Fi WPA connections, or any other connection that is
incompatible with the device. To get the full list of connections see
nm_client_get_connections().</doc>
        <source-position filename="libnm/nm-device.h" line="207"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libnm/nm-device.c"
               line="2609">an array of
#NMConnections that could be activated with the given @device.  The array
should be freed with g_ptr_array_unref() when it is no longer required.</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="Connection"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device.c"
                 line="2597">an #NMDevice to filter connections for</doc>
            <type name="Device" c:type="NMDevice*"/>
          </instance-parameter>
          <parameter name="connections" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device.c"
                 line="2598">an array of #NMConnections to filter</doc>
            <array name="GLib.PtrArray" c:type="const GPtrArray*">
              <type name="Connection"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="get_active_connection"
              c:identifier="nm_device_get_active_connection">
        <doc xml:space="preserve"
             filename="libnm/nm-device.c"
             line="1338">Gets the #NMActiveConnection object which owns this device during activation.</doc>
        <source-position filename="libnm/nm-device.h" line="130"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-device.c"
               line="1344">the #NMActiveConnection or %NULL if the device is
not part of an active connection</doc>
          <type name="ActiveConnection" c:type="NMActiveConnection*"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device.c"
                 line="1340">a #NMDevice</doc>
            <type name="Device" c:type="NMDevice*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_applied_connection"
              c:identifier="nm_device_get_applied_connection"
              version="1.2"
              throws="1">
        <doc xml:space="preserve"
             filename="libnm/nm-device.c"
             line="2131">Fetch the currently applied connection on the device.</doc>
        <source-position filename="libnm/nm-device.h" line="168"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libnm/nm-device.c"
               line="2142">a %NMConnection with the currently applied settings
  or %NULL on error.

The connection is as received from D-Bus and might not validate according
to nm_connection_verify().</doc>
          <type name="Connection" c:type="NMConnection*"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device.c"
                 line="2133">a #NMDevice</doc>
            <type name="Device" c:type="NMDevice*"/>
          </instance-parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device.c"
                 line="2134">the flags argument. Currently this value must always be zero.</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
          <parameter name="version_id"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libnm/nm-device.c"
                 line="2135">(allow-none): returns the current version id of
  the applied connection</doc>
            <type name="guint64" c:type="guint64*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libnm/nm-device.c"
                 line="2137">a #GCancellable, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_applied_connection_async"
              c:identifier="nm_device_get_applied_connection_async"
              version="1.2">
        <doc xml:space="preserve"
             filename="libnm/nm-device.c"
             line="2231">Asynchronously begins and gets the currently applied connection.</doc>
        <source-position filename="libnm/nm-device.h" line="174"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device.c"
                 line="2233">a #NMDevice</doc>
            <type name="Device" c:type="NMDevice*"/>
          </instance-parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device.c"
                 line="2234">the flags argument. Currently this value must always be zero.</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libnm/nm-device.c"
                 line="2235">a #GCancellable, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="libnm/nm-device.c"
                 line="2236">callback to be called when the reapply operation completes</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libnm/nm-device.c"
                 line="2237">caller-specific data passed to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_applied_connection_finish"
              c:identifier="nm_device_get_applied_connection_finish"
              version="1.2"
              throws="1">
        <doc xml:space="preserve"
             filename="libnm/nm-device.c"
             line="2265">Gets the result of a call to nm_device_get_applied_connection_async().</doc>
        <source-position filename="libnm/nm-device.h" line="180"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libnm/nm-device.c"
               line="2275">a currently applied %NMConnection or %NULL in case
  of error.

The connection is as received from D-Bus and might not validate according
to nm_connection_verify().</doc>
          <type name="Connection" c:type="NMConnection*"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device.c"
                 line="2267">a #NMDevice</doc>
            <type name="Device" c:type="NMDevice*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device.c"
                 line="2268">the result passed to the #GAsyncReadyCallback</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
          <parameter name="version_id"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libnm/nm-device.c"
                 line="2269">(allow-none): the current version id of the applied
  connection.</doc>
            <type name="guint64" c:type="guint64*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_autoconnect" c:identifier="nm_device_get_autoconnect">
        <doc xml:space="preserve"
             filename="libnm/nm-device.c"
             line="1125">Whether the #NMDevice can be autoconnected.</doc>
        <source-position filename="libnm/nm-device.h" line="117"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-device.c"
               line="1131">%TRUE if the device is allowed to be autoconnected</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device.c"
                 line="1127">a #NMDevice</doc>
            <type name="Device" c:type="NMDevice*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_available_connections"
              c:identifier="nm_device_get_available_connections">
        <doc xml:space="preserve"
             filename="libnm/nm-device.c"
             line="1355">Gets the #NMRemoteConnections currently known to the daemon that could
be activated on @device.</doc>
        <source-position filename="libnm/nm-device.h" line="131"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-device.c"
               line="1362">the #GPtrArray
containing #NMRemoteConnections. This is the internal copy used by
the connection, and must not be modified.</doc>
          <array name="GLib.PtrArray" c:type="const GPtrArray*">
            <type name="RemoteConnection"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device.c"
                 line="1357">a #NMDevice</doc>
            <type name="Device" c:type="NMDevice*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_capabilities"
              c:identifier="nm_device_get_capabilities">
        <doc xml:space="preserve"
             filename="libnm/nm-device.c"
             line="1069">Gets the device' capabilities.</doc>
        <source-position filename="libnm/nm-device.h" line="113"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-device.c"
               line="1075">the capabilities</doc>
          <type name="DeviceCapabilities" c:type="NMDeviceCapabilities"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device.c"
                 line="1071">a #NMDevice</doc>
            <type name="Device" c:type="NMDevice*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_connectivity"
              c:identifier="nm_device_get_connectivity"
              version="1.16">
        <doc xml:space="preserve"
             filename="libnm/nm-device.c"
             line="1276">The connectivity state of the device for given address family.
Supported address families are %AF_INET for IPv4, %AF_INET6
for IPv6 or %AF_UNSPEC for any.</doc>
        <source-position filename="libnm/nm-device.h" line="127"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-device.c"
               line="1285">the current connectivity state</doc>
          <type name="ConnectivityState" c:type="NMConnectivityState"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device.c"
                 line="1278">a #NMDevice</doc>
            <type name="Device" c:type="NMDevice*"/>
          </instance-parameter>
          <parameter name="addr_family" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device.c"
                 line="1279">network address family</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_description" c:identifier="nm_device_get_description">
        <doc xml:space="preserve"
             filename="libnm/nm-device.c"
             line="1704">Gets a description of @device, based on its vendor and product names.</doc>
        <source-position filename="libnm/nm-device.h" line="140"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-device.c"
               line="1710">a description of @device. If either the vendor or the
  product name is unknown, this returns the interface name.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device.c"
                 line="1706">an #NMDevice</doc>
            <type name="Device" c:type="NMDevice*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_device_type" c:identifier="nm_device_get_device_type">
        <doc xml:space="preserve"
             filename="libnm/nm-device.c"
             line="926">Returns the numeric type of the #NMDevice, ie Ethernet, Wi-Fi, etc.</doc>
        <source-position filename="libnm/nm-device.h" line="106"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-device.c"
               line="932">the device type</doc>
          <type name="DeviceType" c:type="NMDeviceType"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device.c"
                 line="928">a #NMDevice</doc>
            <type name="Device" c:type="NMDevice*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_dhcp4_config"
              c:identifier="nm_device_get_dhcp4_config">
        <doc xml:space="preserve"
             filename="libnm/nm-device.c"
             line="1217">Gets the current IPv4 #NMDhcpConfig associated with the #NMDevice.

You can alternatively use nm_active_connection_get_dhcp4_config(), which also
works with VPN connections.</doc>
        <source-position filename="libnm/nm-device.h" line="123"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-device.c"
               line="1226">the IPv4 #NMDhcpConfig, or %NULL if the device is
not activated or not using DHCP.</doc>
          <type name="DhcpConfig" c:type="NMDhcpConfig*"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device.c"
                 line="1219">a #NMDevice</doc>
            <type name="Device" c:type="NMDevice*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_dhcp6_config"
              c:identifier="nm_device_get_dhcp6_config">
        <doc xml:space="preserve"
             filename="libnm/nm-device.c"
             line="1256">Gets the current IPv6 #NMDhcpConfig associated with the #NMDevice.

You can alternatively use nm_active_connection_get_dhcp6_config(), which also
works with VPN connections.</doc>
        <source-position filename="libnm/nm-device.h" line="125"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-device.c"
               line="1265">the IPv6 #NMDhcpConfig, or %NULL if the device is
not activated or not using DHCPv6.</doc>
          <type name="DhcpConfig" c:type="NMDhcpConfig*"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device.c"
                 line="1258">a #NMDevice</doc>
            <type name="Device" c:type="NMDevice*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_driver" c:identifier="nm_device_get_driver">
        <doc xml:space="preserve"
             filename="libnm/nm-device.c"
             line="960">Gets the driver of the #NMDevice.</doc>
        <source-position filename="libnm/nm-device.h" line="108"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-device.c"
               line="966">the driver of the device. This is the internal string used by the
device, and must not be modified.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device.c"
                 line="962">a #NMDevice</doc>
            <type name="Device" c:type="NMDevice*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_driver_version"
              c:identifier="nm_device_get_driver_version">
        <doc xml:space="preserve"
             filename="libnm/nm-device.c"
             line="977">Gets the driver version of the #NMDevice.</doc>
        <source-position filename="libnm/nm-device.h" line="109"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-device.c"
               line="983">the version of the device driver. This is the internal string used by the
device, and must not be modified.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device.c"
                 line="979">a #NMDevice</doc>
            <type name="Device" c:type="NMDevice*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_firmware_missing"
              c:identifier="nm_device_get_firmware_missing">
        <doc xml:space="preserve"
             filename="libnm/nm-device.c"
             line="1161">Indicates that firmware required for the device's operation is likely
to be missing.</doc>
        <source-position filename="libnm/nm-device.h" line="119"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-device.c"
               line="1168">%TRUE if firmware required for the device's operation is likely
to be missing.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device.c"
                 line="1163">a #NMDevice</doc>
            <type name="Device" c:type="NMDevice*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_firmware_version"
              c:identifier="nm_device_get_firmware_version">
        <doc xml:space="preserve"
             filename="libnm/nm-device.c"
             line="994">Gets the firmware version of the #NMDevice.</doc>
        <source-position filename="libnm/nm-device.h" line="110"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-device.c"
               line="1000">the firmware version of the device. This is the internal string used by the
device, and must not be modified.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device.c"
                 line="996">a #NMDevice</doc>
            <type name="Device" c:type="NMDevice*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_hw_address" c:identifier="nm_device_get_hw_address">
        <doc xml:space="preserve"
             filename="libnm/nm-device.c"
             line="1049">Gets the current a hardware address (MAC) for the @device.</doc>
        <source-position filename="libnm/nm-device.h" line="112"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-device.c"
               line="1055">the current MAC of the device, or %NULL.
This is the internal string used by the device, and must not be modified.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device.c"
                 line="1051">a #NMDevice</doc>
            <type name="Device" c:type="NMDevice*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_iface" c:identifier="nm_device_get_iface">
        <doc xml:space="preserve"
             filename="libnm/nm-device.c"
             line="891">Gets the interface name of the #NMDevice.</doc>
        <source-position filename="libnm/nm-device.h" line="104"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-device.c"
               line="897">the interface of the device. This is the internal string used by the
device, and must not be modified.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device.c"
                 line="893">a #NMDevice</doc>
            <type name="Device" c:type="NMDevice*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_ip4_config" c:identifier="nm_device_get_ip4_config">
        <doc xml:space="preserve"
             filename="libnm/nm-device.c"
             line="1197">Gets the current IPv4 #NMIPConfig associated with the #NMDevice.

You can alternatively use nm_active_connection_get_ip4_config(), which also
works with VPN connections.</doc>
        <source-position filename="libnm/nm-device.h" line="122"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-device.c"
               line="1206">the IPv4 #NMIPConfig, or %NULL if the device is not
activated.</doc>
          <type name="IPConfig" c:type="NMIPConfig*"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device.c"
                 line="1199">a #NMDevice</doc>
            <type name="Device" c:type="NMDevice*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_ip6_config" c:identifier="nm_device_get_ip6_config">
        <doc xml:space="preserve"
             filename="libnm/nm-device.c"
             line="1237">Gets the current IPv6 #NMIPConfig associated with the #NMDevice.

You can alternatively use nm_active_connection_get_ip6_config(), which also
works with VPN connections.</doc>
        <source-position filename="libnm/nm-device.h" line="124"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-device.c"
               line="1246">the IPv6 #NMIPConfig or %NULL if the device is not activated.</doc>
          <type name="IPConfig" c:type="NMIPConfig*"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device.c"
                 line="1239">a #NMDevice</doc>
            <type name="Device" c:type="NMDevice*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_ip_iface" c:identifier="nm_device_get_ip_iface">
        <doc xml:space="preserve"
             filename="libnm/nm-device.c"
             line="908">Gets the IP interface name of the #NMDevice over which IP traffic flows
when the device is in the ACTIVATED state.</doc>
        <source-position filename="libnm/nm-device.h" line="105"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-device.c"
               line="915">the IP traffic interface of the device. This is the internal string
used by the device, and must not be modified.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device.c"
                 line="910">a #NMDevice</doc>
            <type name="Device" c:type="NMDevice*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_lldp_neighbors"
              c:identifier="nm_device_get_lldp_neighbors"
              version="1.2">
        <doc xml:space="preserve"
             filename="libnm/nm-device.c"
             line="1934">Gets the list of neighbors discovered through LLDP.</doc>
        <source-position filename="libnm/nm-device.h" line="144"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-device.c"
               line="1940">the #GPtrArray
containing #NMLldpNeighbor&lt;!-- --&gt;s. This is the internal copy used by the
device and must not be modified. The library never modifies the returned
array and thus it is safe for callers to reference and keep using it.</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="LldpNeighbor"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device.c"
                 line="1936">a #NMDevice</doc>
            <type name="Device" c:type="NMDevice*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_managed" c:identifier="nm_device_get_managed">
        <doc xml:space="preserve"
             filename="libnm/nm-device.c"
             line="1085">Whether the #NMDevice is managed by NetworkManager.</doc>
        <source-position filename="libnm/nm-device.h" line="114"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-device.c"
               line="1091">%TRUE if the device is managed by NetworkManager</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device.c"
                 line="1087">a #NMDevice</doc>
            <type name="Device" c:type="NMDevice*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_metered"
              c:identifier="nm_device_get_metered"
              version="1.2">
        <doc xml:space="preserve"
             filename="libnm/nm-device.c"
             line="1914">Gets the metered setting of a #NMDevice.</doc>
        <source-position filename="libnm/nm-device.h" line="142"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-device.c"
               line="1920">the metered setting.</doc>
          <type name="Metered" c:type="NMMetered"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device.c"
                 line="1916">a #NMDevice</doc>
            <type name="Device" c:type="NMDevice*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_mtu" c:identifier="nm_device_get_mtu">
        <doc xml:space="preserve"
             filename="libnm/nm-device.c"
             line="1898">Gets the  MTU of the #NMDevice.</doc>
        <source-position filename="libnm/nm-device.h" line="133"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-device.c"
               line="1904">the MTU of the device in bytes.</doc>
          <type name="guint32" c:type="guint32"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device.c"
                 line="1900">a #NMDevice</doc>
            <type name="Device" c:type="NMDevice*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_nm_plugin_missing"
              c:identifier="nm_device_get_nm_plugin_missing"
              version="1.2">
        <doc xml:space="preserve"
             filename="libnm/nm-device.c"
             line="1179">Indicates that the NetworkManager plugin for the device is not installed.</doc>
        <source-position filename="libnm/nm-device.h" line="121"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-device.c"
               line="1185">%TRUE if the device plugin not installed.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device.c"
                 line="1181">a #NMDevice</doc>
            <type name="Device" c:type="NMDevice*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_physical_port_id"
              c:identifier="nm_device_get_physical_port_id">
        <doc xml:space="preserve"
             filename="libnm/nm-device.c"
             line="1877">Gets the physical port ID of the #NMDevice. If non-%NULL, this is
an opaque string that can be used to recognize when
seemingly-unrelated #NMDevices are actually just different virtual
ports on a single physical port. (Eg, NPAR / SR-IOV.)</doc>
        <source-position filename="libnm/nm-device.h" line="132"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-device.c"
               line="1886">the physical port ID of the device, or %NULL if the port
  ID is unknown. This is the internal string used by the device and
  must not be modified.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device.c"
                 line="1879">a #NMDevice</doc>
            <type name="Device" c:type="NMDevice*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_product" c:identifier="nm_device_get_product">
        <doc xml:space="preserve"
             filename="libnm/nm-device.c"
             line="1584">Gets the product string of the #NMDevice.</doc>
        <source-position filename="libnm/nm-device.h" line="138"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-device.c"
               line="1590">the product name of the device. This is the internal string used by the
device, and must not be modified.

The string is backslash escaped (C escaping) for invalid characters. The escaping
can be reverted with g_strcompress(), however the result may not be valid UTF-8.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device.c"
                 line="1586">a #NMDevice</doc>
            <type name="Device" c:type="NMDevice*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_setting_type"
              c:identifier="nm_device_get_setting_type">
        <doc xml:space="preserve"
             filename="libnm/nm-device.c"
             line="2631">Gets the (primary) #NMSetting subtype associated with connections
that can be used on @device.</doc>
        <source-position filename="libnm/nm-device.h" line="217"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-device.c"
               line="2638">@device's associated #NMSetting type</doc>
          <type name="GType" c:type="GType"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device.c"
                 line="2633">an #NMDevice</doc>
            <type name="Device" c:type="NMDevice*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_state" c:identifier="nm_device_get_state">
        <doc xml:space="preserve"
             filename="libnm/nm-device.c"
             line="1306">Gets the current #NMDevice state.</doc>
        <source-position filename="libnm/nm-device.h" line="128"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-device.c"
               line="1312">the current device state</doc>
          <type name="DeviceState" c:type="NMDeviceState"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device.c"
                 line="1308">a #NMDevice</doc>
            <type name="Device" c:type="NMDevice*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_state_reason"
              c:identifier="nm_device_get_state_reason">
        <doc xml:space="preserve"
             filename="libnm/nm-device.c"
             line="1322">Gets the reason for entering the current #NMDevice state.</doc>
        <source-position filename="libnm/nm-device.h" line="129"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-device.c"
               line="1328">the reason for entering the current device state</doc>
          <type name="DeviceStateReason" c:type="NMDeviceStateReason"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device.c"
                 line="1324">a #NMDevice</doc>
            <type name="Device" c:type="NMDevice*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_type_description"
              c:identifier="nm_device_get_type_description">
        <doc xml:space="preserve"
             filename="libnm/nm-device.c"
             line="1011">Gets a (non-localized) description of the type of device that
@device is.</doc>
        <source-position filename="libnm/nm-device.h" line="111"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-device.c"
               line="1018">the type description of the device. This is the internal
string used by the device, and must not be modified.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device.c"
                 line="1013">a #NMDevice</doc>
            <type name="Device" c:type="NMDevice*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_udi" c:identifier="nm_device_get_udi">
        <doc xml:space="preserve"
             filename="libnm/nm-device.c"
             line="942">Gets the Unique Device Identifier of the #NMDevice.</doc>
        <source-position filename="libnm/nm-device.h" line="107"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-device.c"
               line="948">the Unique Device Identifier of the device.  This identifier may be
used to gather more information about the device from various operating
system services like udev or sysfs.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device.c"
                 line="944">a #NMDevice</doc>
            <type name="Device" c:type="NMDevice*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_vendor" c:identifier="nm_device_get_vendor">
        <doc xml:space="preserve"
             filename="libnm/nm-device.c"
             line="1618">Gets the vendor string of the #NMDevice.</doc>
        <source-position filename="libnm/nm-device.h" line="139"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-device.c"
               line="1624">the vendor name of the device. This is the internal string used by the
device, and must not be modified.

The string is backslash escaped (C escaping) for invalid characters. The escaping
can be reverted with g_strcompress(), however the result may not be valid UTF-8.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device.c"
                 line="1620">a #NMDevice</doc>
            <type name="Device" c:type="NMDevice*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_real" c:identifier="nm_device_is_real" version="1.2">
        <source-position filename="libnm/nm-device.h" line="135"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-device.c"
               line="1959">%TRUE if the device exists, or %FALSE if it is a placeholder device
that could be automatically created by NetworkManager if one of its
#NMDevice:available-connections was activated.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device.c"
                 line="1957">a #NMDevice</doc>
            <type name="Device" c:type="NMDevice*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_software" c:identifier="nm_device_is_software">
        <doc xml:space="preserve"
             filename="libnm/nm-device.c"
             line="1973">Whether the device is a software device.</doc>
        <source-position filename="libnm/nm-device.h" line="136"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-device.c"
               line="1979">%TRUE if @device is a software device, %FALSE if it is a hardware device.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device.c"
                 line="1975">a #NMDevice</doc>
            <type name="Device" c:type="NMDevice*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="reapply"
              c:identifier="nm_device_reapply"
              version="1.2"
              throws="1">
        <doc xml:space="preserve"
             filename="libnm/nm-device.c"
             line="1989">Attempts to update device with changes to the currently active connection
made since it was last applied.</doc>
        <source-position filename="libnm/nm-device.h" line="148"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-device.c"
               line="2004">%TRUE on success, %FALSE on error, in which case @error will be set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device.c"
                 line="1991">a #NMDevice</doc>
            <type name="Device" c:type="NMDevice*"/>
          </instance-parameter>
          <parameter name="connection"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libnm/nm-device.c"
                 line="1992">the #NMConnection to replace the applied
  settings with or %NULL to reuse existing</doc>
            <type name="Connection" c:type="NMConnection*"/>
          </parameter>
          <parameter name="version_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device.c"
                 line="1994">zero or the expected version id of the applied connection.
  If specified and the version id mismatches, the call fails without
  modification. This allows to catch concurrent accesses.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device.c"
                 line="1997">always set this to zero</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libnm/nm-device.c"
                 line="1998">a #GCancellable, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="reapply_async"
              c:identifier="nm_device_reapply_async"
              version="1.2">
        <doc xml:space="preserve"
             filename="libnm/nm-device.c"
             line="2052">Asynchronously begins an attempt to update device with changes to the
currently active connection made since it was last applied.</doc>
        <source-position filename="libnm/nm-device.h" line="155"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device.c"
                 line="2054">a #NMDevice</doc>
            <type name="Device" c:type="NMDevice*"/>
          </instance-parameter>
          <parameter name="connection"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libnm/nm-device.c"
                 line="2055">the #NMConnection to replace the applied
  settings with or %NULL to reuse existing</doc>
            <type name="Connection" c:type="NMConnection*"/>
          </parameter>
          <parameter name="version_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device.c"
                 line="2057">zero or the expected version id of the applied
  connection. If specified and the version id mismatches, the call
  fails without modification. This allows to catch concurrent
  accesses.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device.c"
                 line="2061">always set this to zero</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libnm/nm-device.c"
                 line="2062">a #GCancellable, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="5">
            <doc xml:space="preserve"
                 filename="libnm/nm-device.c"
                 line="2063">callback to be called when the reapply operation completes</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libnm/nm-device.c"
                 line="2064">caller-specific data passed to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="reapply_finish"
              c:identifier="nm_device_reapply_finish"
              version="1.2"
              throws="1">
        <doc xml:space="preserve"
             filename="libnm/nm-device.c"
             line="2100">Gets the result of a call to nm_device_reapply_async().</doc>
        <source-position filename="libnm/nm-device.h" line="163"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-device.c"
               line="2108">%TRUE on success, %FALSE on error, in which case @error
will be set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device.c"
                 line="2102">a #NMDevice</doc>
            <type name="Device" c:type="NMDevice*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device.c"
                 line="2103">the result passed to the #GAsyncReadyCallback</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_autoconnect" c:identifier="nm_device_set_autoconnect">
        <doc xml:space="preserve"
             filename="libnm/nm-device.c"
             line="1141">Enables or disables automatic activation of the #NMDevice.</doc>
        <source-position filename="libnm/nm-device.h" line="118"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device.c"
                 line="1143">a #NMDevice</doc>
            <type name="Device" c:type="NMDevice*"/>
          </instance-parameter>
          <parameter name="autoconnect" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device.c"
                 line="1144">%TRUE to enable autoconnecting</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_managed"
              c:identifier="nm_device_set_managed"
              version="1.2">
        <doc xml:space="preserve"
             filename="libnm/nm-device.c"
             line="1101">Enables or disables management of  #NMDevice by NetworkManager.</doc>
        <source-position filename="libnm/nm-device.h" line="116"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device.c"
                 line="1103">a #NMDevice</doc>
            <type name="Device" c:type="NMDevice*"/>
          </instance-parameter>
          <parameter name="managed" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device.c"
                 line="1104">%TRUE to make the device managed by NetworkManager.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <property name="active-connection" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-device.c"
             line="771">The #NMActiveConnection object that "owns" this device during activation.</doc>
        <type name="ActiveConnection"/>
      </property>
      <property name="autoconnect" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-device.c"
             line="628">Whether the device can auto-activate a connection.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="available-connections" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-device.c"
             line="783">The available connections of the device</doc>
        <array name="GLib.PtrArray">
          <type name="RemoteConnection"/>
        </array>
      </property>
      <property name="capabilities" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-device.c"
             line="587">The capabilities of the device.</doc>
        <type name="DeviceCapabilities"/>
      </property>
      <property name="device-type" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-device.c"
             line="522">The numeric type of the device.</doc>
        <type name="DeviceType"/>
      </property>
      <property name="dhcp4-config" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-device.c"
             line="680">The IPv4 #NMDhcpConfig of the device.</doc>
        <type name="DhcpConfig"/>
      </property>
      <property name="dhcp6-config" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-device.c"
             line="704">The IPv6 #NMDhcpConfig of the device.</doc>
        <type name="DhcpConfig"/>
      </property>
      <property name="driver" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-device.c"
             line="551">The driver of the device.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="driver-version" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-device.c"
             line="563">The version of the device driver.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="firmware-missing" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-device.c"
             line="640">When %TRUE indicates the device is likely missing firmware required
for its operation.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="firmware-version" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-device.c"
             line="575">The firmware version of the device.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="interface" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-device.c"
             line="497">The interface of the device.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="ip-interface" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-device.c"
             line="509">The IP interface of the device which should be used for all IP-related
operations like addressing and routing.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="ip4-config" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-device.c"
             line="668">The #NMIP4Config of the device.</doc>
        <type name="IPConfig"/>
      </property>
      <property name="ip4-connectivity"
                version="1.16"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-device.c"
             line="716">The IPv4 connectivity state of the device.</doc>
        <type name="ConnectivityState"/>
      </property>
      <property name="ip6-config" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-device.c"
             line="692">The IPv6 #NMIPConfig of the device.</doc>
        <type name="IPConfig"/>
      </property>
      <property name="ip6-connectivity"
                version="1.16"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-device.c"
             line="731">The IPv6 connectivity state of the device.</doc>
        <type name="ConnectivityState"/>
      </property>
      <property name="lldp-neighbors" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-device.c"
             line="858">The LLDP neighbors.</doc>
        <array name="GLib.PtrArray">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </property>
      <property name="managed" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-device.c"
             line="616">Whether the device is managed by NetworkManager.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="metered" version="1.2" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-device.c"
             line="844">Whether the device is metered.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="mtu" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-device.c"
             line="832">The MTU of the device.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="nm-plugin-missing"
                version="1.2"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-device.c"
             line="653">When %TRUE indicates that the NetworkManager plugin for the device
is not installed.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="physical-port-id" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-device.c"
             line="819">The physical port ID of the device. (See
nm_device_get_physical_port_id().)</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="product" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-device.c"
             line="807">The product string of the device.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="real" version="1.2" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-device.c"
             line="600">Whether the device is real or is a placeholder device that could
be created automatically by NetworkManager if one of its
#NMDevice:available-connections was activated.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="state" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-device.c"
             line="746">The state of the device.</doc>
        <type name="DeviceState"/>
      </property>
      <property name="state-reason" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-device.c"
             line="759">The reason for the device state.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="udi" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-device.c"
             line="534">An operating-system specific device hardware identifier; this is not
unique to a specific hardware device across reboots or hotplugs.  It
is an opaque string which for some device types (Bluetooth, Modem)
contains an identifier provided by the underlying hardware service daemon
such as Bluez or ModemManager, and clients can use this property to
request more information about the device from those services.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="vendor" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-device.c"
             line="795">The vendor string of the device.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent">
        <type name="Object" c:type="NMObject"/>
      </field>
      <glib:signal name="state-changed" when="first">
        <doc xml:space="preserve"
             filename="libnm/nm-device.c"
             line="872">Notifies the state change of a #NMDevice.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="new_state" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device.c"
                 line="875">the new state of the device</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="old_state" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device.c"
                 line="876">the previous state of the device</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="reason" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device.c"
                 line="877">the reason describing the state change</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <class name="Device6Lowpan"
           c:symbol-prefix="device_6lowpan"
           c:type="NMDevice6Lowpan"
           parent="Device"
           glib:type-name="NMDevice6Lowpan"
           glib:get-type="nm_device_6lowpan_get_type">
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.Initable"/>
      <method name="get_hw_address"
              c:identifier="nm_device_6lowpan_get_hw_address"
              version="1.14">
        <doc xml:space="preserve"
             filename="libnm/nm-device-6lowpan.c"
             line="69">Gets the hardware (MAC) address of the #NMDevice6Lowpan</doc>
        <source-position filename="libnm/nm-device-6lowpan.h" line="47"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-device-6lowpan.c"
               line="75">the hardware address. This is the internal string used by the
device, and must not be modified.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device-6lowpan.c"
                 line="71">a #NMDevice6Lowpan</doc>
            <type name="Device6Lowpan" c:type="NMDevice6Lowpan*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_parent"
              c:identifier="nm_device_6lowpan_get_parent"
              version="1.14">
        <source-position filename="libnm/nm-device-6lowpan.h" line="45"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-device-6lowpan.c"
               line="57">the device's parent device</doc>
          <type name="Device" c:type="NMDevice*"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device-6lowpan.c"
                 line="55">a #NMDevice6Lowpan</doc>
            <type name="Device6Lowpan" c:type="NMDevice6Lowpan*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="hw-address" version="1.14" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-device-6lowpan.c"
             line="179">The hardware (MAC) address of the device.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="parent" version="1.14" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-device-6lowpan.c"
             line="166">The devices's parent device.</doc>
        <type name="Device"/>
      </property>
    </class>
    <class name="DeviceAdsl"
           c:symbol-prefix="device_adsl"
           c:type="NMDeviceAdsl"
           parent="Device"
           glib:type-name="NMDeviceAdsl"
           glib:get-type="nm_device_adsl_get_type"
           glib:type-struct="DeviceAdslClass">
      <source-position filename="libnm/nm-device-adsl.h" line="53"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.Initable"/>
      <method name="get_carrier" c:identifier="nm_device_adsl_get_carrier">
        <doc xml:space="preserve"
             filename="libnm/nm-device-adsl.c"
             line="45">Whether the device has carrier.</doc>
        <source-position filename="libnm/nm-device-adsl.h" line="57"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-device-adsl.c"
               line="51">%TRUE if the device has carrier</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device-adsl.c"
                 line="47">a #NMDeviceAdsl</doc>
            <type name="DeviceAdsl" c:type="NMDeviceAdsl*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="carrier" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-device-adsl.c"
             line="141">Whether the device has carrier.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <field name="parent">
        <type name="Device" c:type="NMDevice"/>
      </field>
    </class>
    <record name="DeviceAdslClass"
            c:type="NMDeviceAdslClass"
            glib:is-gtype-struct-for="DeviceAdsl">
      <source-position filename="libnm/nm-device-adsl.h" line="53"/>
      <field name="parent">
        <type name="DeviceClass" c:type="NMDeviceClass"/>
      </field>
      <field name="padding" readable="0" private="1">
        <array zero-terminated="0" fixed-size="4">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <class name="DeviceBond"
           c:symbol-prefix="device_bond"
           c:type="NMDeviceBond"
           parent="Device"
           glib:type-name="NMDeviceBond"
           glib:get-type="nm_device_bond_get_type"
           glib:type-struct="DeviceBondClass">
      <source-position filename="libnm/nm-device-bond.h" line="55"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.Initable"/>
      <method name="get_carrier" c:identifier="nm_device_bond_get_carrier">
        <doc xml:space="preserve"
             filename="libnm/nm-device-bond.c"
             line="67">Whether the device has carrier.</doc>
        <source-position filename="libnm/nm-device-bond.h" line="60"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-device-bond.c"
               line="73">%TRUE if the device has carrier</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device-bond.c"
                 line="69">a #NMDeviceBond</doc>
            <type name="DeviceBond" c:type="NMDeviceBond*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_hw_address"
              c:identifier="nm_device_bond_get_hw_address">
        <doc xml:space="preserve"
             filename="libnm/nm-device-bond.c"
             line="50">Gets the hardware (MAC) address of the #NMDeviceBond</doc>
        <source-position filename="libnm/nm-device-bond.h" line="59"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-device-bond.c"
               line="56">the hardware address. This is the internal string used by the
device, and must not be modified.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device-bond.c"
                 line="52">a #NMDeviceBond</doc>
            <type name="DeviceBond" c:type="NMDeviceBond*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_slaves" c:identifier="nm_device_bond_get_slaves">
        <doc xml:space="preserve"
             filename="libnm/nm-device-bond.c"
             line="83">Gets the devices currently enslaved to @device.</doc>
        <source-position filename="libnm/nm-device-bond.h" line="61"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-device-bond.c"
               line="89">the #GPtrArray containing
#NMDevices that are slaves of @device. This is the internal
copy used by the device, and must not be modified.</doc>
          <array name="GLib.PtrArray" c:type="const GPtrArray*">
            <type name="Device"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device-bond.c"
                 line="85">a #NMDeviceBond</doc>
            <type name="DeviceBond" c:type="NMDeviceBond*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="carrier" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-device-bond.c"
             line="236">Whether the device has carrier.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="hw-address" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-device-bond.c"
             line="224">The hardware (MAC) address of the device.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="slaves" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-device-bond.c"
             line="248">The devices enslaved to the bond device.</doc>
        <array name="GLib.PtrArray">
          <type name="Device"/>
        </array>
      </property>
      <field name="parent">
        <type name="Device" c:type="NMDevice"/>
      </field>
    </class>
    <record name="DeviceBondClass"
            c:type="NMDeviceBondClass"
            glib:is-gtype-struct-for="DeviceBond">
      <source-position filename="libnm/nm-device-bond.h" line="55"/>
      <field name="parent">
        <type name="DeviceClass" c:type="NMDeviceClass"/>
      </field>
      <field name="padding" readable="0" private="1">
        <array zero-terminated="0" fixed-size="4">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <class name="DeviceBridge"
           c:symbol-prefix="device_bridge"
           c:type="NMDeviceBridge"
           parent="Device"
           glib:type-name="NMDeviceBridge"
           glib:get-type="nm_device_bridge_get_type"
           glib:type-struct="DeviceBridgeClass">
      <source-position filename="libnm/nm-device-bridge.h" line="55"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.Initable"/>
      <method name="get_carrier" c:identifier="nm_device_bridge_get_carrier">
        <doc xml:space="preserve"
             filename="libnm/nm-device-bridge.c"
             line="67">Whether the device has carrier.</doc>
        <source-position filename="libnm/nm-device-bridge.h" line="60"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-device-bridge.c"
               line="73">%TRUE if the device has carrier</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device-bridge.c"
                 line="69">a #NMDeviceBridge</doc>
            <type name="DeviceBridge" c:type="NMDeviceBridge*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_hw_address"
              c:identifier="nm_device_bridge_get_hw_address">
        <doc xml:space="preserve"
             filename="libnm/nm-device-bridge.c"
             line="50">Gets the hardware (MAC) address of the #NMDeviceBridge</doc>
        <source-position filename="libnm/nm-device-bridge.h" line="59"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-device-bridge.c"
               line="56">the hardware address. This is the internal string used by the
device, and must not be modified.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device-bridge.c"
                 line="52">a #NMDeviceBridge</doc>
            <type name="DeviceBridge" c:type="NMDeviceBridge*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_slaves" c:identifier="nm_device_bridge_get_slaves">
        <doc xml:space="preserve"
             filename="libnm/nm-device-bridge.c"
             line="83">Gets the devices currently enslaved to @device.</doc>
        <source-position filename="libnm/nm-device-bridge.h" line="61"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-device-bridge.c"
               line="89">the #GPtrArray containing
#NMDevices that are slaves of @device. This is the internal
copy used by the device, and must not be modified.</doc>
          <array name="GLib.PtrArray" c:type="const GPtrArray*">
            <type name="Device"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device-bridge.c"
                 line="85">a #NMDeviceBridge</doc>
            <type name="DeviceBridge" c:type="NMDeviceBridge*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="carrier" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-device-bridge.c"
             line="241">Whether the device has carrier.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="hw-address" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-device-bridge.c"
             line="229">The hardware (MAC) address of the device.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="slaves" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-device-bridge.c"
             line="253">The devices enslaved to the bridge device.</doc>
        <array name="GLib.PtrArray">
          <type name="Device"/>
        </array>
      </property>
      <field name="parent">
        <type name="Device" c:type="NMDevice"/>
      </field>
    </class>
    <record name="DeviceBridgeClass"
            c:type="NMDeviceBridgeClass"
            glib:is-gtype-struct-for="DeviceBridge">
      <source-position filename="libnm/nm-device-bridge.h" line="55"/>
      <field name="parent">
        <type name="DeviceClass" c:type="NMDeviceClass"/>
      </field>
      <field name="padding" readable="0" private="1">
        <array zero-terminated="0" fixed-size="4">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <class name="DeviceBt"
           c:symbol-prefix="device_bt"
           c:type="NMDeviceBt"
           parent="Device"
           glib:type-name="NMDeviceBt"
           glib:get-type="nm_device_bt_get_type"
           glib:type-struct="DeviceBtClass">
      <source-position filename="libnm/nm-device-bt.h" line="56"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.Initable"/>
      <method name="get_capabilities"
              c:identifier="nm_device_bt_get_capabilities">
        <doc xml:space="preserve"
             filename="libnm/nm-device-bt.c"
             line="84">Returns the Bluetooth device's usable capabilities.</doc>
        <source-position filename="libnm/nm-device-bt.h" line="64"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-device-bt.c"
               line="90">a combination of #NMBluetoothCapabilities</doc>
          <type name="BluetoothCapabilities" c:type="NMBluetoothCapabilities"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device-bt.c"
                 line="86">a #NMDeviceBt</doc>
            <type name="DeviceBt" c:type="NMDeviceBt*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_hw_address" c:identifier="nm_device_bt_get_hw_address">
        <doc xml:space="preserve"
             filename="libnm/nm-device-bt.c"
             line="51">Gets the hardware (MAC) address of the #NMDeviceBt</doc>
        <source-position filename="libnm/nm-device-bt.h" line="60"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-device-bt.c"
               line="57">the hardware address. This is the internal string used by the
device, and must not be modified.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device-bt.c"
                 line="53">a #NMDeviceBt</doc>
            <type name="DeviceBt" c:type="NMDeviceBt*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_name" c:identifier="nm_device_bt_get_name">
        <doc xml:space="preserve"
             filename="libnm/nm-device-bt.c"
             line="68">Gets the name of the #NMDeviceBt.</doc>
        <source-position filename="libnm/nm-device-bt.h" line="62"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-device-bt.c"
               line="74">the name of the device</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device-bt.c"
                 line="70">a #NMDeviceBt</doc>
            <type name="DeviceBt" c:type="NMDeviceBt*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="bt-capabilities" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-device-bt.c"
             line="289">The device's bluetooth capabilities, a combination of #NMBluetoothCapabilities.</doc>
        <type name="BluetoothCapabilities"/>
      </property>
      <property name="hw-address" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-device-bt.c"
             line="265">The hardware (MAC) address of the device.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="name" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-device-bt.c"
             line="277">The name of the bluetooth device.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent">
        <type name="Device" c:type="NMDevice"/>
      </field>
    </class>
    <record name="DeviceBtClass"
            c:type="NMDeviceBtClass"
            glib:is-gtype-struct-for="DeviceBt">
      <source-position filename="libnm/nm-device-bt.h" line="56"/>
      <field name="parent">
        <type name="DeviceClass" c:type="NMDeviceClass"/>
      </field>
      <field name="padding" readable="0" private="1">
        <array zero-terminated="0" fixed-size="4">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <bitfield name="DeviceCapabilities"
              glib:type-name="NMDeviceCapabilities"
              glib:get-type="nm_device_capabilities_get_type"
              c:type="NMDeviceCapabilities">
      <doc xml:space="preserve"
           filename="libnm-core/nm-dbus-interface.h"
           line="262">General device capability flags.</doc>
      <member name="none"
              value="0"
              c:identifier="NM_DEVICE_CAP_NONE"
              glib:nick="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="264">device has no special capabilities</doc>
      </member>
      <member name="nm_supported"
              value="1"
              c:identifier="NM_DEVICE_CAP_NM_SUPPORTED"
              glib:nick="nm-supported">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="265">NetworkManager supports this device</doc>
      </member>
      <member name="carrier_detect"
              value="2"
              c:identifier="NM_DEVICE_CAP_CARRIER_DETECT"
              glib:nick="carrier-detect">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="266">this device can indicate carrier status</doc>
      </member>
      <member name="is_software"
              value="4"
              c:identifier="NM_DEVICE_CAP_IS_SOFTWARE"
              glib:nick="is-software">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="267">this device is a software device</doc>
      </member>
      <member name="sriov"
              value="8"
              c:identifier="NM_DEVICE_CAP_SRIOV"
              glib:nick="sriov">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="268">this device supports single-root I/O virtualization</doc>
      </member>
    </bitfield>
    <record name="DeviceClass"
            c:type="NMDeviceClass"
            glib:is-gtype-struct-for="Device">
      <source-position filename="libnm/nm-device.h" line="98"/>
      <field name="parent">
        <type name="ObjectClass" c:type="NMObjectClass"/>
      </field>
      <field name="state_changed">
        <callback name="state_changed">
          <source-position filename="libnm/nm-device.h" line="81"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="device" transfer-ownership="none">
              <type name="Device" c:type="NMDevice*"/>
            </parameter>
            <parameter name="new_state" transfer-ownership="none">
              <type name="DeviceState" c:type="NMDeviceState"/>
            </parameter>
            <parameter name="old_state" transfer-ownership="none">
              <type name="DeviceState" c:type="NMDeviceState"/>
            </parameter>
            <parameter name="reason" transfer-ownership="none">
              <type name="DeviceStateReason" c:type="NMDeviceStateReason"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="connection_compatible">
        <callback name="connection_compatible" throws="1">
          <source-position filename="libnm/nm-device.h" line="87"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device.c"
                 line="2582">%TRUE if the connection may be activated with this device, %FALSE
if is incompatible with the device's capabilities and characteristics.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="device" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="libnm/nm-device.c"
                   line="2566">an #NMDevice to validate @connection against</doc>
              <type name="Device" c:type="NMDevice*"/>
            </parameter>
            <parameter name="connection" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="libnm/nm-device.c"
                   line="2567">an #NMConnection to validate against @device</doc>
              <type name="Connection" c:type="NMConnection*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_type_description">
        <callback name="get_type_description">
          <source-position filename="libnm/nm-device.h" line="91"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device.c"
                 line="1018">the type description of the device. This is the internal
string used by the device, and must not be modified.</doc>
            <type name="utf8" c:type="const char*"/>
          </return-value>
          <parameters>
            <parameter name="device" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="libnm/nm-device.c"
                   line="1013">a #NMDevice</doc>
              <type name="Device" c:type="NMDevice*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_hw_address">
        <callback name="get_hw_address">
          <source-position filename="libnm/nm-device.h" line="92"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device.c"
                 line="1055">the current MAC of the device, or %NULL.
This is the internal string used by the device, and must not be modified.</doc>
            <type name="utf8" c:type="const char*"/>
          </return-value>
          <parameters>
            <parameter name="device" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="libnm/nm-device.c"
                   line="1051">a #NMDevice</doc>
              <type name="Device" c:type="NMDevice*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_setting_type">
        <callback name="get_setting_type">
          <source-position filename="libnm/nm-device.h" line="94"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device.c"
                 line="2638">@device's associated #NMSetting type</doc>
            <type name="GType" c:type="GType"/>
          </return-value>
          <parameters>
            <parameter name="device" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="libnm/nm-device.c"
                   line="2633">an #NMDevice</doc>
              <type name="Device" c:type="NMDevice*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="padding" readable="0" private="1">
        <array zero-terminated="0" fixed-size="8">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <class name="DeviceDummy"
           c:symbol-prefix="device_dummy"
           c:type="NMDeviceDummy"
           parent="Device"
           glib:type-name="NMDeviceDummy"
           glib:get-type="nm_device_dummy_get_type"
           glib:type-struct="DeviceDummyClass">
      <source-position filename="libnm/nm-device-dummy.h" line="53"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.Initable"/>
      <method name="get_hw_address"
              c:identifier="nm_device_dummy_get_hw_address"
              version="1.10">
        <doc xml:space="preserve"
             filename="libnm/nm-device-dummy.c"
             line="46">Gets the hardware (MAC) address of the #NMDeviceDummy</doc>
        <source-position filename="libnm/nm-device-dummy.h" line="57"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-device-dummy.c"
               line="52">the hardware address. This is the internal string used by the
device, and must not be modified.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device-dummy.c"
                 line="48">a #NMDeviceDummy</doc>
            <type name="DeviceDummy" c:type="NMDeviceDummy*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="hw-address" version="1.10" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-device-dummy.c"
             line="170">The active hardware (MAC) address of the device.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent">
        <type name="Device" c:type="NMDevice"/>
      </field>
    </class>
    <record name="DeviceDummyClass"
            c:type="NMDeviceDummyClass"
            glib:is-gtype-struct-for="DeviceDummy">
      <source-position filename="libnm/nm-device-dummy.h" line="53"/>
      <field name="parent">
        <type name="DeviceClass" c:type="NMDeviceClass"/>
      </field>
      <field name="padding" readable="0" private="1">
        <array zero-terminated="0" fixed-size="4">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <enumeration name="DeviceError"
                 glib:type-name="NMDeviceError"
                 glib:get-type="nm_device_error_get_type"
                 c:type="NMDeviceError"
                 glib:error-domain="nm-device-error-quark">
      <doc xml:space="preserve"
           filename="libnm-core/nm-errors.h"
           line="130">Device-related errors.

These errors may be returned directly from #NMDevice methods, or may be
returned from D-Bus operations (where they correspond to errors in the
"org.freedesktop.NetworkManager.Device" namespace).</doc>
      <member name="Failed"
              value="0"
              c:identifier="NM_DEVICE_ERROR_FAILED"
              glib:nick="Failed">
        <doc xml:space="preserve"
             filename="libnm-core/nm-errors.h"
             line="132">unknown or unclassified error</doc>
      </member>
      <member name="CreationFailed"
              value="1"
              c:identifier="NM_DEVICE_ERROR_CREATION_FAILED"
              glib:nick="CreationFailed">
        <doc xml:space="preserve"
             filename="libnm-core/nm-errors.h"
             line="133">NetworkManager failed to create the device</doc>
      </member>
      <member name="InvalidConnection"
              value="2"
              c:identifier="NM_DEVICE_ERROR_INVALID_CONNECTION"
              glib:nick="InvalidConnection">
        <doc xml:space="preserve"
             filename="libnm-core/nm-errors.h"
             line="134">the specified connection is not valid</doc>
      </member>
      <member name="IncompatibleConnection"
              value="3"
              c:identifier="NM_DEVICE_ERROR_INCOMPATIBLE_CONNECTION"
              glib:nick="IncompatibleConnection">
        <doc xml:space="preserve"
             filename="libnm-core/nm-errors.h"
             line="135">the specified connection is not
  compatible with this device.</doc>
      </member>
      <member name="NotActive"
              value="4"
              c:identifier="NM_DEVICE_ERROR_NOT_ACTIVE"
              glib:nick="NotActive">
        <doc xml:space="preserve"
             filename="libnm-core/nm-errors.h"
             line="137">the device does not have an active connection</doc>
      </member>
      <member name="NotSoftware"
              value="5"
              c:identifier="NM_DEVICE_ERROR_NOT_SOFTWARE"
              glib:nick="NotSoftware">
        <doc xml:space="preserve"
             filename="libnm-core/nm-errors.h"
             line="138">the requested operation is only valid on
  software devices.</doc>
      </member>
      <member name="NotAllowed"
              value="6"
              c:identifier="NM_DEVICE_ERROR_NOT_ALLOWED"
              glib:nick="NotAllowed">
        <doc xml:space="preserve"
             filename="libnm-core/nm-errors.h"
             line="140">the requested operation is not allowed at
  this time.</doc>
      </member>
      <member name="SpecificObjectNotFound"
              value="7"
              c:identifier="NM_DEVICE_ERROR_SPECIFIC_OBJECT_NOT_FOUND"
              glib:nick="SpecificObjectNotFound">
        <doc xml:space="preserve"
             filename="libnm-core/nm-errors.h"
             line="142">the "specific object" in the
  activation request (eg, the #NMAccessPoint or #NMWimaxNsp) was not
  found.</doc>
      </member>
      <member name="VersionIdMismatch"
              value="8"
              c:identifier="NM_DEVICE_ERROR_VERSION_ID_MISMATCH"
              glib:nick="VersionIdMismatch">
        <doc xml:space="preserve"
             filename="libnm-core/nm-errors.h"
             line="145">the version id did not match.</doc>
      </member>
      <member name="MissingDependencies"
              value="9"
              c:identifier="NM_DEVICE_ERROR_MISSING_DEPENDENCIES"
              glib:nick="MissingDependencies">
        <doc xml:space="preserve"
             filename="libnm-core/nm-errors.h"
             line="146">the requested operation could not
  be completed due to missing dependencies.</doc>
      </member>
      <member name="InvalidArgument"
              value="10"
              c:identifier="NM_DEVICE_ERROR_INVALID_ARGUMENT"
              glib:nick="InvalidArgument">
        <doc xml:space="preserve"
             filename="libnm-core/nm-errors.h"
             line="148">invalid argument. Since: 1.16</doc>
      </member>
      <function name="quark" c:identifier="nm_device_error_quark">
        <return-value transfer-ownership="none">
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
    </enumeration>
    <class name="DeviceEthernet"
           c:symbol-prefix="device_ethernet"
           c:type="NMDeviceEthernet"
           parent="Device"
           glib:type-name="NMDeviceEthernet"
           glib:get-type="nm_device_ethernet_get_type"
           glib:type-struct="DeviceEthernetClass">
      <source-position filename="libnm/nm-device-ethernet.h" line="58"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.Initable"/>
      <method name="get_carrier" c:identifier="nm_device_ethernet_get_carrier">
        <doc xml:space="preserve"
             filename="libnm/nm-device-ethernet.c"
             line="105">Whether the device has carrier.</doc>
        <source-position filename="libnm/nm-device-ethernet.h" line="65"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-device-ethernet.c"
               line="111">%TRUE if the device has carrier</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device-ethernet.c"
                 line="107">a #NMDeviceEthernet</doc>
            <type name="DeviceEthernet" c:type="NMDeviceEthernet*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_hw_address"
              c:identifier="nm_device_ethernet_get_hw_address">
        <doc xml:space="preserve"
             filename="libnm/nm-device-ethernet.c"
             line="55">Gets the active hardware (MAC) address of the #NMDeviceEthernet</doc>
        <source-position filename="libnm/nm-device-ethernet.h" line="62"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-device-ethernet.c"
               line="61">the active hardware address. This is the internal string used by the
device, and must not be modified.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device-ethernet.c"
                 line="57">a #NMDeviceEthernet</doc>
            <type name="DeviceEthernet" c:type="NMDeviceEthernet*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_permanent_hw_address"
              c:identifier="nm_device_ethernet_get_permanent_hw_address">
        <doc xml:space="preserve"
             filename="libnm/nm-device-ethernet.c"
             line="72">Gets the permanent hardware (MAC) address of the #NMDeviceEthernet</doc>
        <source-position filename="libnm/nm-device-ethernet.h" line="63"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-device-ethernet.c"
               line="78">the permanent hardware address. This is the internal string used by the
device, and must not be modified.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device-ethernet.c"
                 line="74">a #NMDeviceEthernet</doc>
            <type name="DeviceEthernet" c:type="NMDeviceEthernet*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_s390_subchannels"
              c:identifier="nm_device_ethernet_get_s390_subchannels"
              version="1.2">
        <doc xml:space="preserve"
             filename="libnm/nm-device-ethernet.c"
             line="121">Return the list of s390 subchannels if the device supports them.</doc>
        <source-position filename="libnm/nm-device-ethernet.h" line="67"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-device-ethernet.c"
               line="127">array of strings, each specifying
  one subchannel the s390 device uses to communicate to the host.</doc>
          <array c:type="const char* const*">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device-ethernet.c"
                 line="123">a #NMDeviceEthernet</doc>
            <type name="DeviceEthernet" c:type="NMDeviceEthernet*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_speed" c:identifier="nm_device_ethernet_get_speed">
        <doc xml:space="preserve"
             filename="libnm/nm-device-ethernet.c"
             line="89">Gets the speed of the #NMDeviceEthernet in Mbit/s.</doc>
        <source-position filename="libnm/nm-device-ethernet.h" line="64"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-device-ethernet.c"
               line="95">the speed of the device in Mbit/s</doc>
          <type name="guint32" c:type="guint32"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device-ethernet.c"
                 line="91">a #NMDeviceEthernet</doc>
            <type name="DeviceEthernet" c:type="NMDeviceEthernet*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="carrier" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-device-ethernet.c"
             line="404">Whether the device has carrier.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="hw-address" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-device-ethernet.c"
             line="368">The active hardware (MAC) address of the device.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="perm-hw-address" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-device-ethernet.c"
             line="380">The permanent hardware (MAC) address of the device.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="s390-subchannels"
                version="1.2"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-device-ethernet.c"
             line="416">Identifies subchannels of this network device used for
communication with z/VM or s390 host.</doc>
        <array>
          <type name="utf8"/>
        </array>
      </property>
      <property name="speed" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-device-ethernet.c"
             line="392">The speed of the device.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <field name="parent">
        <type name="Device" c:type="NMDevice"/>
      </field>
    </class>
    <record name="DeviceEthernetClass"
            c:type="NMDeviceEthernetClass"
            glib:is-gtype-struct-for="DeviceEthernet">
      <source-position filename="libnm/nm-device-ethernet.h" line="58"/>
      <field name="parent">
        <type name="DeviceClass" c:type="NMDeviceClass"/>
      </field>
      <field name="padding" readable="0" private="1">
        <array zero-terminated="0" fixed-size="4">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <class name="DeviceGeneric"
           c:symbol-prefix="device_generic"
           c:type="NMDeviceGeneric"
           parent="Device"
           glib:type-name="NMDeviceGeneric"
           glib:get-type="nm_device_generic_get_type"
           glib:type-struct="DeviceGenericClass">
      <source-position filename="libnm/nm-device-generic.h" line="54"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.Initable"/>
      <method name="get_hw_address"
              c:identifier="nm_device_generic_get_hw_address">
        <doc xml:space="preserve"
             filename="libnm/nm-device-generic.c"
             line="46">Gets the hardware address of the #NMDeviceGeneric</doc>
        <source-position filename="libnm/nm-device-generic.h" line="58"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-device-generic.c"
               line="52">the hardware address. This is the internal string used by the
device, and must not be modified.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device-generic.c"
                 line="48">a #NMDeviceGeneric</doc>
            <type name="DeviceGeneric" c:type="NMDeviceGeneric*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="hw-address" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-device-generic.c"
             line="185">The hardware address of the device.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="type-description" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-device-generic.c"
             line="197">A description of the specific type of device this is, or %NULL
if not known.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent">
        <type name="Device" c:type="NMDevice"/>
      </field>
    </class>
    <record name="DeviceGenericClass"
            c:type="NMDeviceGenericClass"
            glib:is-gtype-struct-for="DeviceGeneric">
      <source-position filename="libnm/nm-device-generic.h" line="54"/>
      <field name="parent">
        <type name="DeviceClass" c:type="NMDeviceClass"/>
      </field>
      <field name="padding" readable="0" private="1">
        <array zero-terminated="0" fixed-size="4">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <class name="DeviceIPTunnel"
           c:symbol-prefix="device_ip_tunnel"
           c:type="NMDeviceIPTunnel"
           parent="Device"
           glib:type-name="NMDeviceIPTunnel"
           glib:get-type="nm_device_ip_tunnel_get_type"
           glib:type-struct="DeviceIPTunnelClass">
      <source-position filename="libnm/nm-device-ip-tunnel.h" line="65"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.Initable"/>
      <method name="get_encapsulation_limit"
              c:identifier="nm_device_ip_tunnel_get_encapsulation_limit"
              version="1.2">
        <source-position filename="libnm/nm-device-ip-tunnel.h" line="89"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-device-ip-tunnel.c"
               line="217">the maximum permitted encapsulation level</doc>
          <type name="guint8" c:type="guint8"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device-ip-tunnel.c"
                 line="215">a #NMDeviceIPTunnel</doc>
            <type name="DeviceIPTunnel" c:type="NMDeviceIPTunnel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_flags"
              c:identifier="nm_device_ip_tunnel_get_flags"
              version="1.12">
        <source-position filename="libnm/nm-device-ip-tunnel.h" line="93"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-device-ip-tunnel.c"
               line="249">the tunnel flags</doc>
          <type name="IPTunnelFlags" c:type="NMIPTunnelFlags"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device-ip-tunnel.c"
                 line="247">a #NMDeviceIPTunnel</doc>
            <type name="DeviceIPTunnel" c:type="NMDeviceIPTunnel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_flow_label"
              c:identifier="nm_device_ip_tunnel_get_flow_label"
              version="1.2">
        <source-position filename="libnm/nm-device-ip-tunnel.h" line="91"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-device-ip-tunnel.c"
               line="233">the flow label assigned to tunnel packets</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device-ip-tunnel.c"
                 line="231">a #NMDeviceIPTunnel</doc>
            <type name="DeviceIPTunnel" c:type="NMDeviceIPTunnel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_input_key"
              c:identifier="nm_device_ip_tunnel_get_input_key"
              version="1.2">
        <source-position filename="libnm/nm-device-ip-tunnel.h" line="85"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-device-ip-tunnel.c"
               line="185">the key used for incoming packets</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device-ip-tunnel.c"
                 line="183">a #NMDeviceIPTunnel</doc>
            <type name="DeviceIPTunnel" c:type="NMDeviceIPTunnel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_local"
              c:identifier="nm_device_ip_tunnel_get_local"
              version="1.2">
        <source-position filename="libnm/nm-device-ip-tunnel.h" line="75"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-device-ip-tunnel.c"
               line="104">the local endpoint of the tunnel</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device-ip-tunnel.c"
                 line="102">a #NMDeviceIPTunnel</doc>
            <type name="DeviceIPTunnel" c:type="NMDeviceIPTunnel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_mode"
              c:identifier="nm_device_ip_tunnel_get_mode"
              version="1.2">
        <source-position filename="libnm/nm-device-ip-tunnel.h" line="73"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-device-ip-tunnel.c"
               line="72">the tunneling mode</doc>
          <type name="IPTunnelMode" c:type="NMIPTunnelMode"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device-ip-tunnel.c"
                 line="70">a #NMDeviceIPTunnel</doc>
            <type name="DeviceIPTunnel" c:type="NMDeviceIPTunnel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_output_key"
              c:identifier="nm_device_ip_tunnel_get_output_key"
              version="1.2">
        <source-position filename="libnm/nm-device-ip-tunnel.h" line="87"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-device-ip-tunnel.c"
               line="201">the key used for outgoing packets</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device-ip-tunnel.c"
                 line="199">a #NMDeviceIPTunnel</doc>
            <type name="DeviceIPTunnel" c:type="NMDeviceIPTunnel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_parent"
              c:identifier="nm_device_ip_tunnel_get_parent"
              version="1.2">
        <source-position filename="libnm/nm-device-ip-tunnel.h" line="71"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-device-ip-tunnel.c"
               line="88">the device's parent device</doc>
          <type name="Device" c:type="NMDevice*"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device-ip-tunnel.c"
                 line="86">a #NMDeviceIPTunnel</doc>
            <type name="DeviceIPTunnel" c:type="NMDeviceIPTunnel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_path_mtu_discovery"
              c:identifier="nm_device_ip_tunnel_get_path_mtu_discovery"
              version="1.2">
        <source-position filename="libnm/nm-device-ip-tunnel.h" line="83"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-device-ip-tunnel.c"
               line="169">whether path MTU discovery is enabled</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device-ip-tunnel.c"
                 line="167">a #NMDeviceIPTunnel</doc>
            <type name="DeviceIPTunnel" c:type="NMDeviceIPTunnel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_remote"
              c:identifier="nm_device_ip_tunnel_get_remote"
              version="1.2">
        <source-position filename="libnm/nm-device-ip-tunnel.h" line="77"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-device-ip-tunnel.c"
               line="120">the remote endpoint of the tunnel</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device-ip-tunnel.c"
                 line="118">a #NMDeviceIPTunnel</doc>
            <type name="DeviceIPTunnel" c:type="NMDeviceIPTunnel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_tos"
              c:identifier="nm_device_ip_tunnel_get_tos"
              version="1.2">
        <source-position filename="libnm/nm-device-ip-tunnel.h" line="81"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-device-ip-tunnel.c"
               line="152">type of service (IPv4) or traffic class (IPv6) assigned
to tunneled packets.</doc>
          <type name="guint8" c:type="guint8"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device-ip-tunnel.c"
                 line="150">a #NMDeviceIPTunnel</doc>
            <type name="DeviceIPTunnel" c:type="NMDeviceIPTunnel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_ttl"
              c:identifier="nm_device_ip_tunnel_get_ttl"
              version="1.2">
        <source-position filename="libnm/nm-device-ip-tunnel.h" line="79"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-device-ip-tunnel.c"
               line="136">the TTL assigned to tunneled packets</doc>
          <type name="guint8" c:type="guint8"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device-ip-tunnel.c"
                 line="134">a #NMDeviceIPTunnel</doc>
            <type name="DeviceIPTunnel" c:type="NMDeviceIPTunnel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="encapsulation-limit"
                version="1.2"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-device-ip-tunnel.c"
             line="529">How many additional levels of encapsulation are permitted to
be prepended to packets. This property applies only to IPv6
tunnels.</doc>
        <type name="guint8" c:type="guint8"/>
      </property>
      <property name="flags" version="1.12" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-device-ip-tunnel.c"
             line="560">Tunnel flags.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="flow-label" version="1.2" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-device-ip-tunnel.c"
             line="545">The flow label to assign to tunnel packets. This property
applies only to IPv6 tunnels.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="input-key" version="1.2" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-device-ip-tunnel.c"
             line="501">The key used for tunneled input packets, if applicable.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="local" version="1.2" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-device-ip-tunnel.c"
             line="429">The local endpoint of the tunnel.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="mode" version="1.2" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-device-ip-tunnel.c"
             line="401">The tunneling mode of the device.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="output-key" version="1.2" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-device-ip-tunnel.c"
             line="515">The key used for tunneled output packets, if applicable.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="parent" version="1.2" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-device-ip-tunnel.c"
             line="415">The devices's parent device.</doc>
        <type name="Device"/>
      </property>
      <property name="path-mtu-discovery"
                version="1.2"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-device-ip-tunnel.c"
             line="487">Whether path MTU discovery is enabled on this tunnel.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="remote" version="1.2" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-device-ip-tunnel.c"
             line="443">The remote endpoint of the tunnel.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="tos" version="1.2" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-device-ip-tunnel.c"
             line="472">The type of service (IPv4) or traffic class (IPv6) assigned to
tunneled packets.</doc>
        <type name="guint8" c:type="guint8"/>
      </property>
      <property name="ttl" version="1.2" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-device-ip-tunnel.c"
             line="457">The TTL assigned to tunneled packets. 0 is a special value
 meaning that packets inherit the TTL value</doc>
        <type name="guint8" c:type="guint8"/>
      </property>
      <field name="parent">
        <type name="Device" c:type="NMDevice"/>
      </field>
    </class>
    <record name="DeviceIPTunnelClass"
            c:type="NMDeviceIPTunnelClass"
            glib:is-gtype-struct-for="DeviceIPTunnel">
      <source-position filename="libnm/nm-device-ip-tunnel.h" line="65"/>
      <field name="parent">
        <type name="DeviceClass" c:type="NMDeviceClass"/>
      </field>
      <field name="padding" readable="0" private="1">
        <array zero-terminated="0" fixed-size="4">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <class name="DeviceInfiniband"
           c:symbol-prefix="device_infiniband"
           c:type="NMDeviceInfiniband"
           parent="Device"
           glib:type-name="NMDeviceInfiniband"
           glib:get-type="nm_device_infiniband_get_type"
           glib:type-struct="DeviceInfinibandClass">
      <source-position filename="libnm/nm-device-infiniband.h" line="54"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.Initable"/>
      <method name="get_carrier"
              c:identifier="nm_device_infiniband_get_carrier">
        <doc xml:space="preserve"
             filename="libnm/nm-device-infiniband.c"
             line="64">Whether the device has carrier.</doc>
        <source-position filename="libnm/nm-device-infiniband.h" line="59"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-device-infiniband.c"
               line="70">%TRUE if the device has carrier</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device-infiniband.c"
                 line="66">a #NMDeviceInfiniband</doc>
            <type name="DeviceInfiniband" c:type="NMDeviceInfiniband*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_hw_address"
              c:identifier="nm_device_infiniband_get_hw_address">
        <doc xml:space="preserve"
             filename="libnm/nm-device-infiniband.c"
             line="47">Gets the hardware (MAC) address of the #NMDeviceInfiniband</doc>
        <source-position filename="libnm/nm-device-infiniband.h" line="58"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-device-infiniband.c"
               line="53">the hardware address. This is the internal string used by the
device, and must not be modified.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device-infiniband.c"
                 line="49">a #NMDeviceInfiniband</doc>
            <type name="DeviceInfiniband" c:type="NMDeviceInfiniband*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="carrier" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-device-infiniband.c"
             line="215">Whether the device has carrier.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="hw-address" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-device-infiniband.c"
             line="203">The hardware (MAC) address of the device.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent">
        <type name="Device" c:type="NMDevice"/>
      </field>
    </class>
    <record name="DeviceInfinibandClass"
            c:type="NMDeviceInfinibandClass"
            glib:is-gtype-struct-for="DeviceInfiniband">
      <source-position filename="libnm/nm-device-infiniband.h" line="54"/>
      <field name="parent">
        <type name="DeviceClass" c:type="NMDeviceClass"/>
      </field>
      <field name="padding" readable="0" private="1">
        <array zero-terminated="0" fixed-size="4">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <class name="DeviceMacsec"
           c:symbol-prefix="device_macsec"
           c:type="NMDeviceMacsec"
           parent="Device"
           glib:type-name="NMDeviceMacsec"
           glib:get-type="nm_device_macsec_get_type"
           glib:type-struct="DeviceMacsecClass">
      <source-position filename="libnm/nm-device-macsec.h" line="66"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.Initable"/>
      <method name="get_cipher_suite"
              c:identifier="nm_device_macsec_get_cipher_suite"
              version="1.6">
        <doc xml:space="preserve"
             filename="libnm/nm-device-macsec.c"
             line="138">Gets the set of cryptographic algorithms in use</doc>
        <source-position filename="libnm/nm-device-macsec.h" line="80"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-device-macsec.c"
               line="144">the set of cryptographic algorithms in use</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device-macsec.c"
                 line="140">a #NMDeviceMacsec</doc>
            <type name="DeviceMacsec" c:type="NMDeviceMacsec*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_encoding_sa"
              c:identifier="nm_device_macsec_get_encoding_sa"
              version="1.6">
        <doc xml:space="preserve"
             filename="libnm/nm-device-macsec.c"
             line="174">Gets the value of the Association Number (0..3) for the Security
Association in use.</doc>
        <source-position filename="libnm/nm-device-macsec.h" line="84"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-device-macsec.c"
               line="181">the current Security Association</doc>
          <type name="guint8" c:type="guint8"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device-macsec.c"
                 line="176">a #NMDeviceMacsec</doc>
            <type name="DeviceMacsec" c:type="NMDeviceMacsec*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_encrypt"
              c:identifier="nm_device_macsec_get_encrypt"
              version="1.6">
        <doc xml:space="preserve"
             filename="libnm/nm-device-macsec.c"
             line="212">Gets whether encryption of transmitted frames is enabled</doc>
        <source-position filename="libnm/nm-device-macsec.h" line="88"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-device-macsec.c"
               line="218">whether encryption is enabled</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device-macsec.c"
                 line="214">a #NMDeviceMacsec</doc>
            <type name="DeviceMacsec" c:type="NMDeviceMacsec*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_es"
              c:identifier="nm_device_macsec_get_es"
              version="1.6">
        <doc xml:space="preserve"
             filename="libnm/nm-device-macsec.c"
             line="267">Gets whether the ES (End station) bit is enabled in SecTAG for
transmitted frames</doc>
        <source-position filename="libnm/nm-device-macsec.h" line="94"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-device-macsec.c"
               line="274">whether the ES (End station) bit is enabled</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device-macsec.c"
                 line="269">a #NMDeviceMacsec</doc>
            <type name="DeviceMacsec" c:type="NMDeviceMacsec*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_hw_address"
              c:identifier="nm_device_macsec_get_hw_address"
              version="1.6">
        <doc xml:space="preserve"
             filename="libnm/nm-device-macsec.c"
             line="83">Gets the hardware (MAC) address of the #NMDeviceMacsec</doc>
        <source-position filename="libnm/nm-device-macsec.h" line="74"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-device-macsec.c"
               line="89">the hardware address. This is the internal string used by the
device, and must not be modified.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device-macsec.c"
                 line="85">a #NMDeviceMacsec</doc>
            <type name="DeviceMacsec" c:type="NMDeviceMacsec*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_icv_length"
              c:identifier="nm_device_macsec_get_icv_length"
              version="1.6">
        <doc xml:space="preserve"
             filename="libnm/nm-device-macsec.c"
             line="120">Gets the length of ICV (Integrity Check Value)</doc>
        <source-position filename="libnm/nm-device-macsec.h" line="78"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-device-macsec.c"
               line="126">the length of ICV</doc>
          <type name="guint8" c:type="guint8"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device-macsec.c"
                 line="122">a #NMDeviceMacsec</doc>
            <type name="DeviceMacsec" c:type="NMDeviceMacsec*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_include_sci"
              c:identifier="nm_device_macsec_get_include_sci"
              version="1.6">
        <doc xml:space="preserve"
             filename="libnm/nm-device-macsec.c"
             line="248">Gets whether the SCI is always included in SecTAG for transmitted
frames</doc>
        <source-position filename="libnm/nm-device-macsec.h" line="92"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-device-macsec.c"
               line="255">whether the SCI is always included</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device-macsec.c"
                 line="250">a #NMDeviceMacsec</doc>
            <type name="DeviceMacsec" c:type="NMDeviceMacsec*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_parent"
              c:identifier="nm_device_macsec_get_parent"
              version="1.6">
        <source-position filename="libnm/nm-device-macsec.h" line="72"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-device-macsec.c"
               line="71">the device's parent device</doc>
          <type name="Device" c:type="NMDevice*"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device-macsec.c"
                 line="69">a #NMDeviceMacsec</doc>
            <type name="DeviceMacsec" c:type="NMDeviceMacsec*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_protect"
              c:identifier="nm_device_macsec_get_protect"
              version="1.6">
        <doc xml:space="preserve"
             filename="libnm/nm-device-macsec.c"
             line="230">Gets whether protection of transmitted frames is enabled</doc>
        <source-position filename="libnm/nm-device-macsec.h" line="90"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-device-macsec.c"
               line="236">whether protection is enabled</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device-macsec.c"
                 line="232">a #NMDeviceMacsec</doc>
            <type name="DeviceMacsec" c:type="NMDeviceMacsec*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_replay_protect"
              c:identifier="nm_device_macsec_get_replay_protect"
              version="1.6">
        <doc xml:space="preserve"
             filename="libnm/nm-device-macsec.c"
             line="305">Gets whether replay protection is enabled</doc>
        <source-position filename="libnm/nm-device-macsec.h" line="98"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-device-macsec.c"
               line="311">whether replay protection is enabled</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device-macsec.c"
                 line="307">a #NMDeviceMacsec</doc>
            <type name="DeviceMacsec" c:type="NMDeviceMacsec*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_scb"
              c:identifier="nm_device_macsec_get_scb"
              version="1.6">
        <doc xml:space="preserve"
             filename="libnm/nm-device-macsec.c"
             line="286">Gets whether the SCB (Single Copy Broadcast) bit is enabled in
SecTAG for transmitted frames</doc>
        <source-position filename="libnm/nm-device-macsec.h" line="96"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-device-macsec.c"
               line="293">whether the SCB (Single Copy Broadcast) bit is enabled</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device-macsec.c"
                 line="288">a #NMDeviceMacsec</doc>
            <type name="DeviceMacsec" c:type="NMDeviceMacsec*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_sci"
              c:identifier="nm_device_macsec_get_sci"
              version="1.6">
        <doc xml:space="preserve"
             filename="libnm/nm-device-macsec.c"
             line="102">Gets the Secure Channel Identifier in use</doc>
        <source-position filename="libnm/nm-device-macsec.h" line="76"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-device-macsec.c"
               line="108">the SCI</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device-macsec.c"
                 line="104">a #NMDeviceMacsec</doc>
            <type name="DeviceMacsec" c:type="NMDeviceMacsec*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_validation"
              c:identifier="nm_device_macsec_get_validation"
              version="1.6">
        <doc xml:space="preserve"
             filename="libnm/nm-device-macsec.c"
             line="193">Gets the validation mode for incoming packets (strict, check,
disabled)</doc>
        <source-position filename="libnm/nm-device-macsec.h" line="86"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-device-macsec.c"
               line="200">the validation mode</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device-macsec.c"
                 line="195">a #NMDeviceMacsec</doc>
            <type name="DeviceMacsec" c:type="NMDeviceMacsec*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_window"
              c:identifier="nm_device_macsec_get_window"
              version="1.6">
        <doc xml:space="preserve"
             filename="libnm/nm-device-macsec.c"
             line="156">Gets the size of the replay window</doc>
        <source-position filename="libnm/nm-device-macsec.h" line="82"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-device-macsec.c"
               line="162">size of the replay window</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device-macsec.c"
                 line="158">a #NMDeviceMacsec</doc>
            <type name="DeviceMacsec" c:type="NMDeviceMacsec*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="cipher-suite" version="1.6" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-device-macsec.c"
             line="502">The set of cryptographic algorithms in use.</doc>
        <type name="guint64" c:type="guint64"/>
      </property>
      <property name="encoding-sa" version="1.6" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-device-macsec.c"
             line="528">The value of the Association Number (0..3) for the Security
Association in use.</doc>
        <type name="guint8" c:type="guint8"/>
      </property>
      <property name="encrypt" version="1.6" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-device-macsec.c"
             line="556">Whether encryption of transmitted frames is enabled.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="es" version="1.6" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-device-macsec.c"
             line="596">Whether the ES (End station) bit is enabled in SecTAG for
transmitted frames.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="hw-address" version="1.6" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-device-macsec.c"
             line="463">The hardware (MAC) address of the device.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="icv-length" version="1.6" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-device-macsec.c"
             line="489">The length of ICV (Integrity Check Value).</doc>
        <type name="guint8" c:type="guint8"/>
      </property>
      <property name="include-sci" version="1.6" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-device-macsec.c"
             line="582">Whether the SCI is always included in SecTAG for transmitted
frames.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="parent" version="1.6" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-device-macsec.c"
             line="450">The devices's parent device.</doc>
        <type name="Device"/>
      </property>
      <property name="protect" version="1.6" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-device-macsec.c"
             line="569">Whether protection of transmitted frames is enabled.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="replay-protect" version="1.6" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-device-macsec.c"
             line="624">Whether replay protection is enabled.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="scb" version="1.6" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-device-macsec.c"
             line="610">Whether the SCB (Single Copy Broadcast) bit is enabled in
SecTAG for transmitted frames.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="sci" version="1.6" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-device-macsec.c"
             line="476">The Secure Channel Identifier in use.</doc>
        <type name="guint64" c:type="guint64"/>
      </property>
      <property name="validation" version="1.6" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-device-macsec.c"
             line="542">The validation mode for incoming packets (strict, check,
disabled).</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="window" version="1.6" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-device-macsec.c"
             line="515">The size of the replay window.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <field name="parent">
        <type name="Device" c:type="NMDevice"/>
      </field>
    </class>
    <record name="DeviceMacsecClass"
            c:type="NMDeviceMacsecClass"
            glib:is-gtype-struct-for="DeviceMacsec">
      <source-position filename="libnm/nm-device-macsec.h" line="66"/>
      <field name="parent">
        <type name="DeviceClass" c:type="NMDeviceClass"/>
      </field>
      <field name="padding" readable="0" private="1">
        <array zero-terminated="0" fixed-size="4">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <class name="DeviceMacvlan"
           c:symbol-prefix="device_macvlan"
           c:type="NMDeviceMacvlan"
           parent="Device"
           glib:type-name="NMDeviceMacvlan"
           glib:get-type="nm_device_macvlan_get_type"
           glib:type-struct="DeviceMacvlanClass">
      <source-position filename="libnm/nm-device-macvlan.h" line="57"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.Initable"/>
      <method name="get_hw_address"
              c:identifier="nm_device_macvlan_get_hw_address"
              version="1.2">
        <doc xml:space="preserve"
             filename="libnm/nm-device-macvlan.c"
             line="125">Gets the hardware (MAC) address of the #NMDeviceMacvlan</doc>
        <source-position filename="libnm/nm-device-macvlan.h" line="71"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-device-macvlan.c"
               line="131">the hardware address. This is the internal string used by the
device, and must not be modified.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device-macvlan.c"
                 line="127">a #NMDeviceMacvlan</doc>
            <type name="DeviceMacvlan" c:type="NMDeviceMacvlan*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_mode"
              c:identifier="nm_device_macvlan_get_mode"
              version="1.2">
        <doc xml:space="preserve"
             filename="libnm/nm-device-macvlan.c"
             line="70">Gets the MACVLAN mode of the device.</doc>
        <source-position filename="libnm/nm-device-macvlan.h" line="65"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-device-macvlan.c"
               line="76">the MACVLAN mode. This is the internal string used by the
device, and must not be modified.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device-macvlan.c"
                 line="72">a #NMDeviceMacvlan</doc>
            <type name="DeviceMacvlan" c:type="NMDeviceMacvlan*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_no_promisc"
              c:identifier="nm_device_macvlan_get_no_promisc"
              version="1.2">
        <doc xml:space="preserve"
             filename="libnm/nm-device-macvlan.c"
             line="89">Gets the no-promiscuous flag of the device.</doc>
        <source-position filename="libnm/nm-device-macvlan.h" line="67"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-device-macvlan.c"
               line="95">the no-promiscuous flag of the device.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device-macvlan.c"
                 line="91">a #NMDeviceMacvlan</doc>
            <type name="DeviceMacvlan" c:type="NMDeviceMacvlan*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_parent"
              c:identifier="nm_device_macvlan_get_parent"
              version="1.2">
        <source-position filename="libnm/nm-device-macvlan.h" line="63"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-device-macvlan.c"
               line="58">the device's parent device</doc>
          <type name="Device" c:type="NMDevice*"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device-macvlan.c"
                 line="56">a #NMDeviceMacvlan</doc>
            <type name="DeviceMacvlan" c:type="NMDeviceMacvlan*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_tap"
              c:identifier="nm_device_macvlan_get_tap"
              version="1.2">
        <doc xml:space="preserve"
             filename="libnm/nm-device-macvlan.c"
             line="107">Gets the device type (MACVLAN or MACVTAP).</doc>
        <source-position filename="libnm/nm-device-macvlan.h" line="69"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-device-macvlan.c"
               line="113">%TRUE if the device is a MACVTAP, %FALSE if it is a MACVLAN.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device-macvlan.c"
                 line="109">a #NMDeviceMacvlan</doc>
            <type name="DeviceMacvlan" c:type="NMDeviceMacvlan*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="hw-address" version="1.2" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-device-macvlan.c"
             line="326">The hardware (MAC) address of the device.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="mode" version="1.2" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-device-macvlan.c"
             line="284">The MACVLAN mode.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="no-promisc" version="1.2" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-device-macvlan.c"
             line="298">Whether the device has the no-promiscuos flag.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="parent" version="1.2" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-device-macvlan.c"
             line="270">The devices's parent device.</doc>
        <type name="Device"/>
      </property>
      <property name="tap" version="1.2" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-device-macvlan.c"
             line="312">Whether the device is a MACVTAP.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <field name="parent">
        <type name="Device" c:type="NMDevice"/>
      </field>
    </class>
    <record name="DeviceMacvlanClass"
            c:type="NMDeviceMacvlanClass"
            glib:is-gtype-struct-for="DeviceMacvlan">
      <source-position filename="libnm/nm-device-macvlan.h" line="57"/>
      <field name="parent">
        <type name="DeviceClass" c:type="NMDeviceClass"/>
      </field>
      <field name="padding" readable="0" private="1">
        <array zero-terminated="0" fixed-size="4">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <class name="DeviceModem"
           c:symbol-prefix="device_modem"
           c:type="NMDeviceModem"
           parent="Device"
           glib:type-name="NMDeviceModem"
           glib:get-type="nm_device_modem_get_type"
           glib:type-struct="DeviceModemClass">
      <source-position filename="libnm/nm-device-modem.h" line="55"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.Initable"/>
      <method name="get_current_capabilities"
              c:identifier="nm_device_modem_get_current_capabilities">
        <doc xml:space="preserve"
             filename="libnm/nm-device-modem.c"
             line="66">Returns a bitfield of the generic access technology families the modem
supports without a firmware reload or reinitialization.  This value
represents the network types the modem can immediately connect to.</doc>
        <source-position filename="libnm/nm-device-modem.h" line="60"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-device-modem.c"
               line="74">the generic access technology families the modem supports without
a firmware reload or other reinitialization</doc>
          <type name="DeviceModemCapabilities"
                c:type="NMDeviceModemCapabilities"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device-modem.c"
                 line="68">a #NMDeviceModem</doc>
            <type name="DeviceModem" c:type="NMDeviceModem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_modem_capabilities"
              c:identifier="nm_device_modem_get_modem_capabilities">
        <doc xml:space="preserve"
             filename="libnm/nm-device-modem.c"
             line="48">Returns a bitfield of the generic access technology families the modem
supports.  Not all capabilities are available concurrently however; some
may require a firmware reload or reinitialization.</doc>
        <source-position filename="libnm/nm-device-modem.h" line="59"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-device-modem.c"
               line="56">the generic access technology families the modem supports</doc>
          <type name="DeviceModemCapabilities"
                c:type="NMDeviceModemCapabilities"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device-modem.c"
                 line="50">a #NMDeviceModem</doc>
            <type name="DeviceModem" c:type="NMDeviceModem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="current-capabilities" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-device-modem.c"
             line="232">The generic family of access technologies the modem currently supports
without a firmware reload or reinitialization.</doc>
        <type name="DeviceModemCapabilities"/>
      </property>
      <property name="modem-capabilities" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-device-modem.c"
             line="216">The generic family of access technologies the modem supports.  Not all
capabilities are available at the same time however; some modems require
a firmware reload or other reinitialization to switch between eg
CDMA/EVDO and GSM/UMTS.</doc>
        <type name="DeviceModemCapabilities"/>
      </property>
      <field name="parent">
        <type name="Device" c:type="NMDevice"/>
      </field>
    </class>
    <bitfield name="DeviceModemCapabilities"
              glib:type-name="NMDeviceModemCapabilities"
              glib:get-type="nm_device_modem_capabilities_get_type"
              c:type="NMDeviceModemCapabilities">
      <doc xml:space="preserve"
           filename="libnm-core/nm-dbus-interface.h"
           line="410">#NMDeviceModemCapabilities values indicate the generic radio access
technology families a modem device supports.  For more information on the
specific access technologies the device supports use the ModemManager D-Bus
API.</doc>
      <member name="none"
              value="0"
              c:identifier="NM_DEVICE_MODEM_CAPABILITY_NONE"
              glib:nick="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="412">modem has no usable capabilities</doc>
      </member>
      <member name="pots"
              value="1"
              c:identifier="NM_DEVICE_MODEM_CAPABILITY_POTS"
              glib:nick="pots">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="413">modem uses the analog wired telephone
network and is not a wireless/cellular device</doc>
      </member>
      <member name="cdma_evdo"
              value="2"
              c:identifier="NM_DEVICE_MODEM_CAPABILITY_CDMA_EVDO"
              glib:nick="cdma-evdo">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="415">modem supports at least one of CDMA
1xRTT, EVDO revision 0, EVDO revision A, or EVDO revision B</doc>
      </member>
      <member name="gsm_umts"
              value="4"
              c:identifier="NM_DEVICE_MODEM_CAPABILITY_GSM_UMTS"
              glib:nick="gsm-umts">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="417">modem supports at least one of GSM,
GPRS, EDGE, UMTS, HSDPA, HSUPA, or HSPA+ packet switched data capability</doc>
      </member>
      <member name="lte"
              value="8"
              c:identifier="NM_DEVICE_MODEM_CAPABILITY_LTE"
              glib:nick="lte">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="419">modem has LTE data capability</doc>
      </member>
    </bitfield>
    <record name="DeviceModemClass"
            c:type="NMDeviceModemClass"
            glib:is-gtype-struct-for="DeviceModem">
      <source-position filename="libnm/nm-device-modem.h" line="55"/>
      <field name="parent">
        <type name="DeviceClass" c:type="NMDeviceClass"/>
      </field>
      <field name="padding" readable="0" private="1">
        <array zero-terminated="0" fixed-size="4">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <class name="DeviceOlpcMesh"
           c:symbol-prefix="device_olpc_mesh"
           c:type="NMDeviceOlpcMesh"
           parent="Device"
           glib:type-name="NMDeviceOlpcMesh"
           glib:get-type="nm_device_olpc_mesh_get_type"
           glib:type-struct="DeviceOlpcMeshClass">
      <source-position filename="libnm/nm-device-olpc-mesh.h" line="55"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.Initable"/>
      <method name="get_active_channel"
              c:identifier="nm_device_olpc_mesh_get_active_channel">
        <doc xml:space="preserve"
             filename="libnm/nm-device-olpc-mesh.c"
             line="82">Returns the active channel of the #NMDeviceOlpcMesh device.</doc>
        <source-position filename="libnm/nm-device-olpc-mesh.h" line="61"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-device-olpc-mesh.c"
               line="88">active channel of the device</doc>
          <type name="guint32" c:type="guint32"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device-olpc-mesh.c"
                 line="84">a #NMDeviceOlpcMesh</doc>
            <type name="DeviceOlpcMesh" c:type="NMDeviceOlpcMesh*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_companion"
              c:identifier="nm_device_olpc_mesh_get_companion">
        <doc xml:space="preserve"
             filename="libnm/nm-device-olpc-mesh.c"
             line="66">Gets the companion device of the #NMDeviceOlpcMesh.</doc>
        <source-position filename="libnm/nm-device-olpc-mesh.h" line="60"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-device-olpc-mesh.c"
               line="72">the companion of the device of %NULL</doc>
          <type name="DeviceWifi" c:type="NMDeviceWifi*"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device-olpc-mesh.c"
                 line="68">a #NMDeviceOlpcMesh</doc>
            <type name="DeviceOlpcMesh" c:type="NMDeviceOlpcMesh*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_hw_address"
              c:identifier="nm_device_olpc_mesh_get_hw_address">
        <doc xml:space="preserve"
             filename="libnm/nm-device-olpc-mesh.c"
             line="49">Gets the hardware (MAC) address of the #NMDeviceOlpcMesh</doc>
        <source-position filename="libnm/nm-device-olpc-mesh.h" line="59"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-device-olpc-mesh.c"
               line="55">the hardware address. This is the internal string used by the
device, and must not be modified.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device-olpc-mesh.c"
                 line="51">a #NMDeviceOlpcMesh</doc>
            <type name="DeviceOlpcMesh" c:type="NMDeviceOlpcMesh*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="active-channel" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-device-olpc-mesh.c"
             line="240">The device's active channel.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="companion" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-device-olpc-mesh.c"
             line="228">The companion device.</doc>
        <type name="DeviceWifi"/>
      </property>
      <property name="hw-address" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-device-olpc-mesh.c"
             line="216">The hardware (MAC) address of the device.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent">
        <type name="Device" c:type="NMDevice"/>
      </field>
    </class>
    <record name="DeviceOlpcMeshClass"
            c:type="NMDeviceOlpcMeshClass"
            glib:is-gtype-struct-for="DeviceOlpcMesh">
      <source-position filename="libnm/nm-device-olpc-mesh.h" line="55"/>
      <field name="parent">
        <type name="DeviceClass" c:type="NMDeviceClass"/>
      </field>
      <field name="padding" readable="0" private="1">
        <array zero-terminated="0" fixed-size="4">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <class name="DeviceOvsBridge"
           c:symbol-prefix="device_ovs_bridge"
           c:type="NMDeviceOvsBridge"
           parent="Device"
           glib:type-name="NMDeviceOvsBridge"
           glib:get-type="nm_device_ovs_bridge_get_type"
           glib:type-struct="DeviceOvsBridgeClass">
      <source-position filename="libnm/nm-device-ovs-bridge.h" line="40"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.Initable"/>
      <method name="get_slaves"
              c:identifier="nm_device_ovs_bridge_get_slaves"
              version="1.14">
        <doc xml:space="preserve"
             filename="libnm/nm-device-ovs-bridge.c"
             line="53">Gets the ports currently enslaved to @device.</doc>
        <source-position filename="libnm/nm-device-ovs-bridge.h" line="46"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-device-ovs-bridge.c"
               line="59">the #GPtrArray containing
#NMDevices that are slaves of @device. This is the internal
copy used by the device, and must not be modified.</doc>
          <array name="GLib.PtrArray" c:type="const GPtrArray*">
            <type name="Device"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device-ovs-bridge.c"
                 line="55">a #NMDeviceOvsBridge</doc>
            <type name="DeviceOvsBridge" c:type="NMDeviceOvsBridge*"/>
          </instance-parameter>
        </parameters>
      </method>
    </class>
    <record name="DeviceOvsBridgeClass"
            c:type="NMDeviceOvsBridgeClass"
            disguised="1"
            glib:is-gtype-struct-for="DeviceOvsBridge">
      <source-position filename="libnm/nm-device-ovs-bridge.h" line="40"/>
    </record>
    <class name="DeviceOvsInterface"
           c:symbol-prefix="device_ovs_interface"
           c:type="NMDeviceOvsInterface"
           parent="Device"
           glib:type-name="NMDeviceOvsInterface"
           glib:get-type="nm_device_ovs_interface_get_type"
           glib:type-struct="DeviceOvsInterfaceClass">
      <source-position filename="libnm/nm-device-ovs-interface.h" line="38"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.Initable"/>
    </class>
    <record name="DeviceOvsInterfaceClass"
            c:type="NMDeviceOvsInterfaceClass"
            disguised="1"
            glib:is-gtype-struct-for="DeviceOvsInterface">
      <source-position filename="libnm/nm-device-ovs-interface.h" line="38"/>
    </record>
    <class name="DeviceOvsPort"
           c:symbol-prefix="device_ovs_port"
           c:type="NMDeviceOvsPort"
           parent="Device"
           glib:type-name="NMDeviceOvsPort"
           glib:get-type="nm_device_ovs_port_get_type"
           glib:type-struct="DeviceOvsPortClass">
      <source-position filename="libnm/nm-device-ovs-port.h" line="40"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.Initable"/>
      <method name="get_slaves"
              c:identifier="nm_device_ovs_port_get_slaves"
              version="1.14">
        <doc xml:space="preserve"
             filename="libnm/nm-device-ovs-port.c"
             line="53">Gets the interfaces currently enslaved to @device.</doc>
        <source-position filename="libnm/nm-device-ovs-port.h" line="46"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-device-ovs-port.c"
               line="59">the #GPtrArray containing
#NMDevices that are slaves of @device. This is the internal
copy used by the device, and must not be modified.</doc>
          <array name="GLib.PtrArray" c:type="const GPtrArray*">
            <type name="Device"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device-ovs-port.c"
                 line="55">a #NMDeviceOvsPort</doc>
            <type name="DeviceOvsPort" c:type="NMDeviceOvsPort*"/>
          </instance-parameter>
        </parameters>
      </method>
    </class>
    <record name="DeviceOvsPortClass"
            c:type="NMDeviceOvsPortClass"
            disguised="1"
            glib:is-gtype-struct-for="DeviceOvsPort">
      <source-position filename="libnm/nm-device-ovs-port.h" line="40"/>
    </record>
    <class name="DevicePpp"
           c:symbol-prefix="device_ppp"
           c:type="NMDevicePpp"
           parent="Device"
           glib:type-name="NMDevicePpp"
           glib:get-type="nm_device_ppp_get_type"
           glib:type-struct="DevicePppClass">
      <source-position filename="libnm/nm-device-ppp.h" line="30"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.Initable"/>
    </class>
    <record name="DevicePppClass"
            c:type="NMDevicePppClass"
            disguised="1"
            glib:is-gtype-struct-for="DevicePpp">
      <source-position filename="libnm/nm-device-ppp.h" line="30"/>
    </record>
    <enumeration name="DeviceState"
                 glib:type-name="NMDeviceState"
                 glib:get-type="nm_device_state_get_type"
                 c:type="NMDeviceState">
      <member name="unknown"
              value="0"
              c:identifier="NM_DEVICE_STATE_UNKNOWN"
              glib:nick="unknown">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="452">the device's state is unknown</doc>
      </member>
      <member name="unmanaged"
              value="10"
              c:identifier="NM_DEVICE_STATE_UNMANAGED"
              glib:nick="unmanaged">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="453">the device is recognized, but not managed by
  NetworkManager</doc>
      </member>
      <member name="unavailable"
              value="20"
              c:identifier="NM_DEVICE_STATE_UNAVAILABLE"
              glib:nick="unavailable">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="455">the device is managed by NetworkManager, but
  is not available for use.  Reasons may include the wireless switched off,
  missing firmware, no ethernet carrier, missing supplicant or modem manager,
  etc.</doc>
      </member>
      <member name="disconnected"
              value="30"
              c:identifier="NM_DEVICE_STATE_DISCONNECTED"
              glib:nick="disconnected">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="459">the device can be activated, but is currently
  idle and not connected to a network.</doc>
      </member>
      <member name="prepare"
              value="40"
              c:identifier="NM_DEVICE_STATE_PREPARE"
              glib:nick="prepare">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="461">the device is preparing the connection to the
  network.  This may include operations like changing the MAC address,
  setting physical link properties, and anything else required to connect
  to the requested network.</doc>
      </member>
      <member name="config"
              value="50"
              c:identifier="NM_DEVICE_STATE_CONFIG"
              glib:nick="config">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="465">the device is connecting to the requested network.
  This may include operations like associating with the Wi-Fi AP, dialing
  the modem, connecting to the remote Bluetooth device, etc.</doc>
      </member>
      <member name="need_auth"
              value="60"
              c:identifier="NM_DEVICE_STATE_NEED_AUTH"
              glib:nick="need-auth">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="468">the device requires more information to continue
  connecting to the requested network.  This includes secrets like WiFi
  passphrases, login passwords, PIN codes, etc.</doc>
      </member>
      <member name="ip_config"
              value="70"
              c:identifier="NM_DEVICE_STATE_IP_CONFIG"
              glib:nick="ip-config">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="471">the device is requesting IPv4 and/or IPv6
  addresses and routing information from the network.</doc>
      </member>
      <member name="ip_check"
              value="80"
              c:identifier="NM_DEVICE_STATE_IP_CHECK"
              glib:nick="ip-check">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="473">the device is checking whether further action is
  required for the requested network connection.  This may include checking
  whether only local network access is available, whether a captive portal
  is blocking access to the Internet, etc.</doc>
      </member>
      <member name="secondaries"
              value="90"
              c:identifier="NM_DEVICE_STATE_SECONDARIES"
              glib:nick="secondaries">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="477">the device is waiting for a secondary
  connection (like a VPN) which must activated before the device can be
  activated</doc>
      </member>
      <member name="activated"
              value="100"
              c:identifier="NM_DEVICE_STATE_ACTIVATED"
              glib:nick="activated">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="480">the device has a network connection, either local
  or global.</doc>
      </member>
      <member name="deactivating"
              value="110"
              c:identifier="NM_DEVICE_STATE_DEACTIVATING"
              glib:nick="deactivating">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="482">a disconnection from the current network
  connection was requested, and the device is cleaning up resources used for
  that connection.  The network connection may still be valid.</doc>
      </member>
      <member name="failed"
              value="120"
              c:identifier="NM_DEVICE_STATE_FAILED"
              glib:nick="failed">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="485">the device failed to connect to the requested
  network and is cleaning up the connection request</doc>
      </member>
    </enumeration>
    <enumeration name="DeviceStateReason"
                 glib:type-name="NMDeviceStateReason"
                 glib:get-type="nm_device_state_reason_get_type"
                 c:type="NMDeviceStateReason">
      <doc xml:space="preserve"
           filename="libnm-core/nm-dbus-interface.h"
           line="504">Device state change reason codes</doc>
      <member name="none"
              value="0"
              c:identifier="NM_DEVICE_STATE_REASON_NONE"
              glib:nick="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="506">No reason given</doc>
      </member>
      <member name="unknown"
              value="1"
              c:identifier="NM_DEVICE_STATE_REASON_UNKNOWN"
              glib:nick="unknown">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="507">Unknown error</doc>
      </member>
      <member name="now_managed"
              value="2"
              c:identifier="NM_DEVICE_STATE_REASON_NOW_MANAGED"
              glib:nick="now-managed">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="508">Device is now managed</doc>
      </member>
      <member name="now_unmanaged"
              value="3"
              c:identifier="NM_DEVICE_STATE_REASON_NOW_UNMANAGED"
              glib:nick="now-unmanaged">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="509">Device is now unmanaged</doc>
      </member>
      <member name="config_failed"
              value="4"
              c:identifier="NM_DEVICE_STATE_REASON_CONFIG_FAILED"
              glib:nick="config-failed">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="510">The device could not be readied for configuration</doc>
      </member>
      <member name="ip_config_unavailable"
              value="5"
              c:identifier="NM_DEVICE_STATE_REASON_IP_CONFIG_UNAVAILABLE"
              glib:nick="ip-config-unavailable">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="511">IP configuration could not be reserved (no available address, timeout, etc)</doc>
      </member>
      <member name="ip_config_expired"
              value="6"
              c:identifier="NM_DEVICE_STATE_REASON_IP_CONFIG_EXPIRED"
              glib:nick="ip-config-expired">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="512">The IP config is no longer valid</doc>
      </member>
      <member name="no_secrets"
              value="7"
              c:identifier="NM_DEVICE_STATE_REASON_NO_SECRETS"
              glib:nick="no-secrets">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="513">Secrets were required, but not provided</doc>
      </member>
      <member name="supplicant_disconnect"
              value="8"
              c:identifier="NM_DEVICE_STATE_REASON_SUPPLICANT_DISCONNECT"
              glib:nick="supplicant-disconnect">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="514">802.1x supplicant disconnected</doc>
      </member>
      <member name="supplicant_config_failed"
              value="9"
              c:identifier="NM_DEVICE_STATE_REASON_SUPPLICANT_CONFIG_FAILED"
              glib:nick="supplicant-config-failed">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="515">802.1x supplicant configuration failed</doc>
      </member>
      <member name="supplicant_failed"
              value="10"
              c:identifier="NM_DEVICE_STATE_REASON_SUPPLICANT_FAILED"
              glib:nick="supplicant-failed">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="516">802.1x supplicant failed</doc>
      </member>
      <member name="supplicant_timeout"
              value="11"
              c:identifier="NM_DEVICE_STATE_REASON_SUPPLICANT_TIMEOUT"
              glib:nick="supplicant-timeout">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="517">802.1x supplicant took too long to authenticate</doc>
      </member>
      <member name="ppp_start_failed"
              value="12"
              c:identifier="NM_DEVICE_STATE_REASON_PPP_START_FAILED"
              glib:nick="ppp-start-failed">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="518">PPP service failed to start</doc>
      </member>
      <member name="ppp_disconnect"
              value="13"
              c:identifier="NM_DEVICE_STATE_REASON_PPP_DISCONNECT"
              glib:nick="ppp-disconnect">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="519">PPP service disconnected</doc>
      </member>
      <member name="ppp_failed"
              value="14"
              c:identifier="NM_DEVICE_STATE_REASON_PPP_FAILED"
              glib:nick="ppp-failed">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="520">PPP failed</doc>
      </member>
      <member name="dhcp_start_failed"
              value="15"
              c:identifier="NM_DEVICE_STATE_REASON_DHCP_START_FAILED"
              glib:nick="dhcp-start-failed">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="521">DHCP client failed to start</doc>
      </member>
      <member name="dhcp_error"
              value="16"
              c:identifier="NM_DEVICE_STATE_REASON_DHCP_ERROR"
              glib:nick="dhcp-error">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="522">DHCP client error</doc>
      </member>
      <member name="dhcp_failed"
              value="17"
              c:identifier="NM_DEVICE_STATE_REASON_DHCP_FAILED"
              glib:nick="dhcp-failed">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="523">DHCP client failed</doc>
      </member>
      <member name="shared_start_failed"
              value="18"
              c:identifier="NM_DEVICE_STATE_REASON_SHARED_START_FAILED"
              glib:nick="shared-start-failed">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="524">Shared connection service failed to start</doc>
      </member>
      <member name="shared_failed"
              value="19"
              c:identifier="NM_DEVICE_STATE_REASON_SHARED_FAILED"
              glib:nick="shared-failed">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="525">Shared connection service failed</doc>
      </member>
      <member name="autoip_start_failed"
              value="20"
              c:identifier="NM_DEVICE_STATE_REASON_AUTOIP_START_FAILED"
              glib:nick="autoip-start-failed">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="526">AutoIP service failed to start</doc>
      </member>
      <member name="autoip_error"
              value="21"
              c:identifier="NM_DEVICE_STATE_REASON_AUTOIP_ERROR"
              glib:nick="autoip-error">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="527">AutoIP service error</doc>
      </member>
      <member name="autoip_failed"
              value="22"
              c:identifier="NM_DEVICE_STATE_REASON_AUTOIP_FAILED"
              glib:nick="autoip-failed">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="528">AutoIP service failed</doc>
      </member>
      <member name="modem_busy"
              value="23"
              c:identifier="NM_DEVICE_STATE_REASON_MODEM_BUSY"
              glib:nick="modem-busy">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="529">The line is busy</doc>
      </member>
      <member name="modem_no_dial_tone"
              value="24"
              c:identifier="NM_DEVICE_STATE_REASON_MODEM_NO_DIAL_TONE"
              glib:nick="modem-no-dial-tone">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="530">No dial tone</doc>
      </member>
      <member name="modem_no_carrier"
              value="25"
              c:identifier="NM_DEVICE_STATE_REASON_MODEM_NO_CARRIER"
              glib:nick="modem-no-carrier">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="531">No carrier could be established</doc>
      </member>
      <member name="modem_dial_timeout"
              value="26"
              c:identifier="NM_DEVICE_STATE_REASON_MODEM_DIAL_TIMEOUT"
              glib:nick="modem-dial-timeout">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="532">The dialing request timed out</doc>
      </member>
      <member name="modem_dial_failed"
              value="27"
              c:identifier="NM_DEVICE_STATE_REASON_MODEM_DIAL_FAILED"
              glib:nick="modem-dial-failed">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="533">The dialing attempt failed</doc>
      </member>
      <member name="modem_init_failed"
              value="28"
              c:identifier="NM_DEVICE_STATE_REASON_MODEM_INIT_FAILED"
              glib:nick="modem-init-failed">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="534">Modem initialization failed</doc>
      </member>
      <member name="gsm_apn_failed"
              value="29"
              c:identifier="NM_DEVICE_STATE_REASON_GSM_APN_FAILED"
              glib:nick="gsm-apn-failed">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="535">Failed to select the specified APN</doc>
      </member>
      <member name="gsm_registration_not_searching"
              value="30"
              c:identifier="NM_DEVICE_STATE_REASON_GSM_REGISTRATION_NOT_SEARCHING"
              glib:nick="gsm-registration-not-searching">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="536">Not searching for networks</doc>
      </member>
      <member name="gsm_registration_denied"
              value="31"
              c:identifier="NM_DEVICE_STATE_REASON_GSM_REGISTRATION_DENIED"
              glib:nick="gsm-registration-denied">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="537">Network registration denied</doc>
      </member>
      <member name="gsm_registration_timeout"
              value="32"
              c:identifier="NM_DEVICE_STATE_REASON_GSM_REGISTRATION_TIMEOUT"
              glib:nick="gsm-registration-timeout">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="538">Network registration timed out</doc>
      </member>
      <member name="gsm_registration_failed"
              value="33"
              c:identifier="NM_DEVICE_STATE_REASON_GSM_REGISTRATION_FAILED"
              glib:nick="gsm-registration-failed">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="539">Failed to register with the requested network</doc>
      </member>
      <member name="gsm_pin_check_failed"
              value="34"
              c:identifier="NM_DEVICE_STATE_REASON_GSM_PIN_CHECK_FAILED"
              glib:nick="gsm-pin-check-failed">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="540">PIN check failed</doc>
      </member>
      <member name="firmware_missing"
              value="35"
              c:identifier="NM_DEVICE_STATE_REASON_FIRMWARE_MISSING"
              glib:nick="firmware-missing">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="541">Necessary firmware for the device may be missing</doc>
      </member>
      <member name="removed"
              value="36"
              c:identifier="NM_DEVICE_STATE_REASON_REMOVED"
              glib:nick="removed">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="542">The device was removed</doc>
      </member>
      <member name="sleeping"
              value="37"
              c:identifier="NM_DEVICE_STATE_REASON_SLEEPING"
              glib:nick="sleeping">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="543">NetworkManager went to sleep</doc>
      </member>
      <member name="connection_removed"
              value="38"
              c:identifier="NM_DEVICE_STATE_REASON_CONNECTION_REMOVED"
              glib:nick="connection-removed">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="544">The device's active connection disappeared</doc>
      </member>
      <member name="user_requested"
              value="39"
              c:identifier="NM_DEVICE_STATE_REASON_USER_REQUESTED"
              glib:nick="user-requested">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="545">Device disconnected by user or client</doc>
      </member>
      <member name="carrier"
              value="40"
              c:identifier="NM_DEVICE_STATE_REASON_CARRIER"
              glib:nick="carrier">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="546">Carrier/link changed</doc>
      </member>
      <member name="connection_assumed"
              value="41"
              c:identifier="NM_DEVICE_STATE_REASON_CONNECTION_ASSUMED"
              glib:nick="connection-assumed">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="547">The device's existing connection was assumed</doc>
      </member>
      <member name="supplicant_available"
              value="42"
              c:identifier="NM_DEVICE_STATE_REASON_SUPPLICANT_AVAILABLE"
              glib:nick="supplicant-available">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="548">The supplicant is now available</doc>
      </member>
      <member name="modem_not_found"
              value="43"
              c:identifier="NM_DEVICE_STATE_REASON_MODEM_NOT_FOUND"
              glib:nick="modem-not-found">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="549">The modem could not be found</doc>
      </member>
      <member name="bt_failed"
              value="44"
              c:identifier="NM_DEVICE_STATE_REASON_BT_FAILED"
              glib:nick="bt-failed">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="550">The Bluetooth connection failed or timed out</doc>
      </member>
      <member name="gsm_sim_not_inserted"
              value="45"
              c:identifier="NM_DEVICE_STATE_REASON_GSM_SIM_NOT_INSERTED"
              glib:nick="gsm-sim-not-inserted">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="551">GSM Modem's SIM Card not inserted</doc>
      </member>
      <member name="gsm_sim_pin_required"
              value="46"
              c:identifier="NM_DEVICE_STATE_REASON_GSM_SIM_PIN_REQUIRED"
              glib:nick="gsm-sim-pin-required">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="552">GSM Modem's SIM Pin required</doc>
      </member>
      <member name="gsm_sim_puk_required"
              value="47"
              c:identifier="NM_DEVICE_STATE_REASON_GSM_SIM_PUK_REQUIRED"
              glib:nick="gsm-sim-puk-required">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="553">GSM Modem's SIM Puk required</doc>
      </member>
      <member name="gsm_sim_wrong"
              value="48"
              c:identifier="NM_DEVICE_STATE_REASON_GSM_SIM_WRONG"
              glib:nick="gsm-sim-wrong">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="554">GSM Modem's SIM wrong</doc>
      </member>
      <member name="infiniband_mode"
              value="49"
              c:identifier="NM_DEVICE_STATE_REASON_INFINIBAND_MODE"
              glib:nick="infiniband-mode">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="555">InfiniBand device does not support connected mode</doc>
      </member>
      <member name="dependency_failed"
              value="50"
              c:identifier="NM_DEVICE_STATE_REASON_DEPENDENCY_FAILED"
              glib:nick="dependency-failed">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="556">A dependency of the connection failed</doc>
      </member>
      <member name="br2684_failed"
              value="51"
              c:identifier="NM_DEVICE_STATE_REASON_BR2684_FAILED"
              glib:nick="br2684-failed">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="557">Problem with the RFC 2684 Ethernet over ADSL bridge</doc>
      </member>
      <member name="modem_manager_unavailable"
              value="52"
              c:identifier="NM_DEVICE_STATE_REASON_MODEM_MANAGER_UNAVAILABLE"
              glib:nick="modem-manager-unavailable">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="558">ModemManager not running</doc>
      </member>
      <member name="ssid_not_found"
              value="53"
              c:identifier="NM_DEVICE_STATE_REASON_SSID_NOT_FOUND"
              glib:nick="ssid-not-found">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="559">The Wi-Fi network could not be found</doc>
      </member>
      <member name="secondary_connection_failed"
              value="54"
              c:identifier="NM_DEVICE_STATE_REASON_SECONDARY_CONNECTION_FAILED"
              glib:nick="secondary-connection-failed">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="560">A secondary connection of the base connection failed</doc>
      </member>
      <member name="dcb_fcoe_failed"
              value="55"
              c:identifier="NM_DEVICE_STATE_REASON_DCB_FCOE_FAILED"
              glib:nick="dcb-fcoe-failed">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="561">DCB or FCoE setup failed</doc>
      </member>
      <member name="teamd_control_failed"
              value="56"
              c:identifier="NM_DEVICE_STATE_REASON_TEAMD_CONTROL_FAILED"
              glib:nick="teamd-control-failed">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="562">teamd control failed</doc>
      </member>
      <member name="modem_failed"
              value="57"
              c:identifier="NM_DEVICE_STATE_REASON_MODEM_FAILED"
              glib:nick="modem-failed">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="563">Modem failed or no longer available</doc>
      </member>
      <member name="modem_available"
              value="58"
              c:identifier="NM_DEVICE_STATE_REASON_MODEM_AVAILABLE"
              glib:nick="modem-available">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="564">Modem now ready and available</doc>
      </member>
      <member name="sim_pin_incorrect"
              value="59"
              c:identifier="NM_DEVICE_STATE_REASON_SIM_PIN_INCORRECT"
              glib:nick="sim-pin-incorrect">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="565">SIM PIN was incorrect</doc>
      </member>
      <member name="new_activation"
              value="60"
              c:identifier="NM_DEVICE_STATE_REASON_NEW_ACTIVATION"
              glib:nick="new-activation">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="566">New connection activation was enqueued</doc>
      </member>
      <member name="parent_changed"
              value="61"
              c:identifier="NM_DEVICE_STATE_REASON_PARENT_CHANGED"
              glib:nick="parent-changed">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="567">the device's parent changed</doc>
      </member>
      <member name="parent_managed_changed"
              value="62"
              c:identifier="NM_DEVICE_STATE_REASON_PARENT_MANAGED_CHANGED"
              glib:nick="parent-managed-changed">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="568">the device parent's management changed</doc>
      </member>
      <member name="ovsdb_failed"
              value="63"
              c:identifier="NM_DEVICE_STATE_REASON_OVSDB_FAILED"
              glib:nick="ovsdb-failed">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="569">problem communicating with Open vSwitch database</doc>
      </member>
      <member name="ip_address_duplicate"
              value="64"
              c:identifier="NM_DEVICE_STATE_REASON_IP_ADDRESS_DUPLICATE"
              glib:nick="ip-address-duplicate">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="570">a duplicate IP address was detected</doc>
      </member>
      <member name="ip_method_unsupported"
              value="65"
              c:identifier="NM_DEVICE_STATE_REASON_IP_METHOD_UNSUPPORTED"
              glib:nick="ip-method-unsupported">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="571">The selected IP method is not supported</doc>
      </member>
      <member name="sriov_configuration_failed"
              value="66"
              c:identifier="NM_DEVICE_STATE_REASON_SRIOV_CONFIGURATION_FAILED"
              glib:nick="sriov-configuration-failed">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="572">configuration of SR-IOV parameters failed</doc>
      </member>
      <member name="peer_not_found"
              value="67"
              c:identifier="NM_DEVICE_STATE_REASON_PEER_NOT_FOUND"
              glib:nick="peer-not-found">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="573">The Wi-Fi P2P peer could not be found</doc>
      </member>
    </enumeration>
    <class name="DeviceTeam"
           c:symbol-prefix="device_team"
           c:type="NMDeviceTeam"
           parent="Device"
           glib:type-name="NMDeviceTeam"
           glib:get-type="nm_device_team_get_type"
           glib:type-struct="DeviceTeamClass">
      <source-position filename="libnm/nm-device-team.h" line="56"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.Initable"/>
      <method name="get_carrier" c:identifier="nm_device_team_get_carrier">
        <doc xml:space="preserve"
             filename="libnm/nm-device-team.c"
             line="69">Whether the device has carrier.</doc>
        <source-position filename="libnm/nm-device-team.h" line="61"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-device-team.c"
               line="75">%TRUE if the device has carrier</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device-team.c"
                 line="71">a #NMDeviceTeam</doc>
            <type name="DeviceTeam" c:type="NMDeviceTeam*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_config"
              c:identifier="nm_device_team_get_config"
              version="1.4">
        <doc xml:space="preserve"
             filename="libnm/nm-device-team.c"
             line="103">Gets the current JSON configuration of the #NMDeviceTeam</doc>
        <source-position filename="libnm/nm-device-team.h" line="64"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-device-team.c"
               line="109">the current configuration. This is the internal string used by the
device, and must not be modified.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device-team.c"
                 line="105">a #NMDeviceTeam</doc>
            <type name="DeviceTeam" c:type="NMDeviceTeam*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_hw_address"
              c:identifier="nm_device_team_get_hw_address">
        <doc xml:space="preserve"
             filename="libnm/nm-device-team.c"
             line="52">Gets the hardware (MAC) address of the #NMDeviceTeam</doc>
        <source-position filename="libnm/nm-device-team.h" line="60"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-device-team.c"
               line="58">the hardware address. This is the internal string used by the
device, and must not be modified.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device-team.c"
                 line="54">a #NMDeviceTeam</doc>
            <type name="DeviceTeam" c:type="NMDeviceTeam*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_slaves" c:identifier="nm_device_team_get_slaves">
        <doc xml:space="preserve"
             filename="libnm/nm-device-team.c"
             line="85">Gets the devices currently enslaved to @device.</doc>
        <source-position filename="libnm/nm-device-team.h" line="62"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-device-team.c"
               line="91">the #GPtrArray containing
#NMDevices that are slaves of @device. This is the internal
copy used by the device, and must not be modified.</doc>
          <array name="GLib.PtrArray" c:type="const GPtrArray*">
            <type name="Device"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device-team.c"
                 line="87">a #NMDeviceTeam</doc>
            <type name="DeviceTeam" c:type="NMDeviceTeam*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="carrier" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-device-team.c"
             line="262">Whether the device has carrier.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="config" version="1.4" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-device-team.c"
             line="286">The current JSON configuration of the device.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="hw-address" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-device-team.c"
             line="250">The hardware (MAC) address of the device.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="slaves" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-device-team.c"
             line="274">The devices enslaved to the team device.</doc>
        <array name="GLib.PtrArray">
          <type name="Device"/>
        </array>
      </property>
      <field name="parent">
        <type name="Device" c:type="NMDevice"/>
      </field>
    </class>
    <record name="DeviceTeamClass"
            c:type="NMDeviceTeamClass"
            glib:is-gtype-struct-for="DeviceTeam">
      <source-position filename="libnm/nm-device-team.h" line="56"/>
      <field name="parent">
        <type name="DeviceClass" c:type="NMDeviceClass"/>
      </field>
      <field name="padding" readable="0" private="1">
        <array zero-terminated="0" fixed-size="4">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <class name="DeviceTun"
           c:symbol-prefix="device_tun"
           c:type="NMDeviceTun"
           parent="Device"
           glib:type-name="NMDeviceTun"
           glib:get-type="nm_device_tun_get_type"
           glib:type-struct="DeviceTunClass">
      <source-position filename="libnm/nm-device-tun.h" line="59"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.Initable"/>
      <method name="get_group"
              c:identifier="nm_device_tun_get_group"
              version="1.2">
        <doc xml:space="preserve"
             filename="libnm/nm-device-tun.c"
             line="114">Gets the tunnel group.</doc>
        <source-position filename="libnm/nm-device-tun.h" line="71"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-device-tun.c"
               line="120">the gid of the tunnel group, or -1 if it has no owner.</doc>
          <type name="gint64" c:type="gint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device-tun.c"
                 line="116">a #NMDeviceTun</doc>
            <type name="DeviceTun" c:type="NMDeviceTun*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_hw_address"
              c:identifier="nm_device_tun_get_hw_address"
              version="1.2">
        <doc xml:space="preserve"
             filename="libnm/nm-device-tun.c"
             line="59">Gets the hardware (MAC) address of the #NMDeviceTun</doc>
        <source-position filename="libnm/nm-device-tun.h" line="65"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-device-tun.c"
               line="65">the hardware address. This is the internal string used by the
device, and must not be modified.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device-tun.c"
                 line="61">a #NMDeviceTun</doc>
            <type name="DeviceTun" c:type="NMDeviceTun*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_mode"
              c:identifier="nm_device_tun_get_mode"
              version="1.2">
        <doc xml:space="preserve"
             filename="libnm/nm-device-tun.c"
             line="78">Returns the TUN/TAP mode for the device.</doc>
        <source-position filename="libnm/nm-device-tun.h" line="67"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-device-tun.c"
               line="84">'tun' or 'tap'</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device-tun.c"
                 line="80">a #NMDeviceTun</doc>
            <type name="DeviceTun" c:type="NMDeviceTun*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_multi_queue"
              c:identifier="nm_device_tun_get_multi_queue"
              version="1.2">
        <doc xml:space="preserve"
             filename="libnm/nm-device-tun.c"
             line="168">Returns whether the #NMDeviceTun has the IFF_MULTI_QUEUE flag.</doc>
        <source-position filename="libnm/nm-device-tun.h" line="77"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-device-tun.c"
               line="174">%TRUE if the device doesn't have the flag, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device-tun.c"
                 line="170">a #NMDeviceTun</doc>
            <type name="DeviceTun" c:type="NMDeviceTun*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_no_pi" c:identifier="nm_device_tun_get_no_pi">
        <source-position filename="libnm/nm-device-tun.h" line="73"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <type name="DeviceTun" c:type="NMDeviceTun*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_owner"
              c:identifier="nm_device_tun_get_owner"
              version="1.2">
        <doc xml:space="preserve"
             filename="libnm/nm-device-tun.c"
             line="96">Gets the tunnel owner.</doc>
        <source-position filename="libnm/nm-device-tun.h" line="69"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-device-tun.c"
               line="102">the uid of the tunnel owner, or -1 if it has no owner.</doc>
          <type name="gint64" c:type="gint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device-tun.c"
                 line="98">a #NMDeviceTun</doc>
            <type name="DeviceTun" c:type="NMDeviceTun*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_vnet_hdr"
              c:identifier="nm_device_tun_get_vnet_hdr"
              version="1.2">
        <doc xml:space="preserve"
             filename="libnm/nm-device-tun.c"
             line="150">Returns whether the #NMDeviceTun has the IFF_VNET_HDR flag.</doc>
        <source-position filename="libnm/nm-device-tun.h" line="75"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-device-tun.c"
               line="156">%TRUE if the device has the flag, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device-tun.c"
                 line="152">a #NMDeviceTun</doc>
            <type name="DeviceTun" c:type="NMDeviceTun*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="group" version="1.2" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-device-tun.c"
             line="375">The gid of the tunnel group, or -1 if it has no owner.</doc>
        <type name="gint64" c:type="gint64"/>
      </property>
      <property name="hw-address" version="1.2" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-device-tun.c"
             line="333">The hardware (MAC) address of the device.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="mode" version="1.2" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-device-tun.c"
             line="347">The tunnel mode, either "tun" or "tap".</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="multi-queue" version="1.2" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-device-tun.c"
             line="419">The tunnel's "TUN_TAP_MQ" flag; true if callers can connect to
the tap device multiple times, for multiple send/receive
queues.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="no-pi" version="1.2" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-device-tun.c"
             line="389">The tunnel's "TUN_NO_PI" flag; true if no protocol info is
prepended to the tunnel packets.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="owner" version="1.2" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-device-tun.c"
             line="361">The uid of the tunnel owner, or -1 if it has no owner.</doc>
        <type name="gint64" c:type="gint64"/>
      </property>
      <property name="vnet-hdr" version="1.2" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-device-tun.c"
             line="404">The tunnel's "TUN_VNET_HDR" flag; true if the tunnel packets
include a virtio network header.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <field name="parent">
        <type name="Device" c:type="NMDevice"/>
      </field>
    </class>
    <record name="DeviceTunClass"
            c:type="NMDeviceTunClass"
            glib:is-gtype-struct-for="DeviceTun">
      <source-position filename="libnm/nm-device-tun.h" line="59"/>
      <field name="parent">
        <type name="DeviceClass" c:type="NMDeviceClass"/>
      </field>
      <field name="padding" readable="0" private="1">
        <array zero-terminated="0" fixed-size="4">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <enumeration name="DeviceType"
                 glib:type-name="NMDeviceType"
                 glib:get-type="nm_device_type_get_type"
                 c:type="NMDeviceType">
      <doc xml:space="preserve"
           filename="libnm-core/nm-dbus-interface.h"
           line="192">#NMDeviceType values indicate the type of hardware represented by a
device object.</doc>
      <member name="unknown"
              value="0"
              c:identifier="NM_DEVICE_TYPE_UNKNOWN"
              glib:nick="unknown">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="194">unknown device</doc>
      </member>
      <member name="ethernet"
              value="1"
              c:identifier="NM_DEVICE_TYPE_ETHERNET"
              glib:nick="ethernet">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="196">a wired ethernet device</doc>
      </member>
      <member name="wifi"
              value="2"
              c:identifier="NM_DEVICE_TYPE_WIFI"
              glib:nick="wifi">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="197">an 802.11 Wi-Fi device</doc>
      </member>
      <member name="unused1"
              value="3"
              c:identifier="NM_DEVICE_TYPE_UNUSED1"
              glib:nick="unused1">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="198">not used</doc>
      </member>
      <member name="unused2"
              value="4"
              c:identifier="NM_DEVICE_TYPE_UNUSED2"
              glib:nick="unused2">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="199">not used</doc>
      </member>
      <member name="bt"
              value="5"
              c:identifier="NM_DEVICE_TYPE_BT"
              glib:nick="bt">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="200">a Bluetooth device supporting PAN or DUN access protocols</doc>
      </member>
      <member name="olpc_mesh"
              value="6"
              c:identifier="NM_DEVICE_TYPE_OLPC_MESH"
              glib:nick="olpc-mesh">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="201">an OLPC XO mesh networking device</doc>
      </member>
      <member name="wimax"
              value="7"
              c:identifier="NM_DEVICE_TYPE_WIMAX"
              glib:nick="wimax">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="202">an 802.16e Mobile WiMAX broadband device</doc>
      </member>
      <member name="modem"
              value="8"
              c:identifier="NM_DEVICE_TYPE_MODEM"
              glib:nick="modem">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="203">a modem supporting analog telephone, CDMA/EVDO,
GSM/UMTS, or LTE network access protocols</doc>
      </member>
      <member name="infiniband"
              value="9"
              c:identifier="NM_DEVICE_TYPE_INFINIBAND"
              glib:nick="infiniband">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="205">an IP-over-InfiniBand device</doc>
      </member>
      <member name="bond"
              value="10"
              c:identifier="NM_DEVICE_TYPE_BOND"
              glib:nick="bond">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="206">a bond master interface</doc>
      </member>
      <member name="vlan"
              value="11"
              c:identifier="NM_DEVICE_TYPE_VLAN"
              glib:nick="vlan">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="207">an 802.1Q VLAN interface</doc>
      </member>
      <member name="adsl"
              value="12"
              c:identifier="NM_DEVICE_TYPE_ADSL"
              glib:nick="adsl">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="208">ADSL modem</doc>
      </member>
      <member name="bridge"
              value="13"
              c:identifier="NM_DEVICE_TYPE_BRIDGE"
              glib:nick="bridge">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="209">a bridge master interface</doc>
      </member>
      <member name="generic"
              value="14"
              c:identifier="NM_DEVICE_TYPE_GENERIC"
              glib:nick="generic">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="195">generic support for unrecognized device types</doc>
      </member>
      <member name="team"
              value="15"
              c:identifier="NM_DEVICE_TYPE_TEAM"
              glib:nick="team">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="210">a team master interface</doc>
      </member>
      <member name="tun"
              value="16"
              c:identifier="NM_DEVICE_TYPE_TUN"
              glib:nick="tun">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="211">a TUN or TAP interface</doc>
      </member>
      <member name="ip_tunnel"
              value="17"
              c:identifier="NM_DEVICE_TYPE_IP_TUNNEL"
              glib:nick="ip-tunnel">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="212">a IP tunnel interface</doc>
      </member>
      <member name="macvlan"
              value="18"
              c:identifier="NM_DEVICE_TYPE_MACVLAN"
              glib:nick="macvlan">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="213">a MACVLAN interface</doc>
      </member>
      <member name="vxlan"
              value="19"
              c:identifier="NM_DEVICE_TYPE_VXLAN"
              glib:nick="vxlan">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="214">a VXLAN interface</doc>
      </member>
      <member name="veth"
              value="20"
              c:identifier="NM_DEVICE_TYPE_VETH"
              glib:nick="veth">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="215">a VETH interface</doc>
      </member>
      <member name="macsec"
              value="21"
              c:identifier="NM_DEVICE_TYPE_MACSEC"
              glib:nick="macsec">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="216">a MACsec interface</doc>
      </member>
      <member name="dummy"
              value="22"
              c:identifier="NM_DEVICE_TYPE_DUMMY"
              glib:nick="dummy">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="217">a dummy interface</doc>
      </member>
      <member name="ppp"
              value="23"
              c:identifier="NM_DEVICE_TYPE_PPP"
              glib:nick="ppp">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="218">a PPP interface</doc>
      </member>
      <member name="ovs_interface"
              value="24"
              c:identifier="NM_DEVICE_TYPE_OVS_INTERFACE"
              glib:nick="ovs-interface">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="219">a Open vSwitch interface</doc>
      </member>
      <member name="ovs_port"
              value="25"
              c:identifier="NM_DEVICE_TYPE_OVS_PORT"
              glib:nick="ovs-port">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="220">a Open vSwitch port</doc>
      </member>
      <member name="ovs_bridge"
              value="26"
              c:identifier="NM_DEVICE_TYPE_OVS_BRIDGE"
              glib:nick="ovs-bridge">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="221">a Open vSwitch bridge</doc>
      </member>
      <member name="wpan"
              value="27"
              c:identifier="NM_DEVICE_TYPE_WPAN"
              glib:nick="wpan">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="222">a IEEE 802.15.4 (WPAN) MAC Layer Device</doc>
      </member>
      <member name="6lowpan"
              value="28"
              c:identifier="NM_DEVICE_TYPE_6LOWPAN"
              glib:nick="6lowpan">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="223">6LoWPAN interface</doc>
      </member>
      <member name="wireguard"
              value="29"
              c:identifier="NM_DEVICE_TYPE_WIREGUARD"
              glib:nick="wireguard">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="224">a WireGuard interface</doc>
      </member>
    </enumeration>
    <class name="DeviceVlan"
           c:symbol-prefix="device_vlan"
           c:type="NMDeviceVlan"
           parent="Device"
           glib:type-name="NMDeviceVlan"
           glib:get-type="nm_device_vlan_get_type"
           glib:type-struct="DeviceVlanClass">
      <source-position filename="libnm/nm-device-vlan.h" line="56"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.Initable"/>
      <method name="get_carrier" c:identifier="nm_device_vlan_get_carrier">
        <doc xml:space="preserve"
             filename="libnm/nm-device-vlan.c"
             line="69">Whether the device has carrier.</doc>
        <source-position filename="libnm/nm-device-vlan.h" line="61"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-device-vlan.c"
               line="75">%TRUE if the device has carrier</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device-vlan.c"
                 line="71">a #NMDeviceVlan</doc>
            <type name="DeviceVlan" c:type="NMDeviceVlan*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_hw_address"
              c:identifier="nm_device_vlan_get_hw_address">
        <doc xml:space="preserve"
             filename="libnm/nm-device-vlan.c"
             line="52">Gets the hardware (MAC) address of the #NMDeviceVlan</doc>
        <source-position filename="libnm/nm-device-vlan.h" line="60"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-device-vlan.c"
               line="58">the hardware address. This is the internal string used by the
device, and must not be modified.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device-vlan.c"
                 line="54">a #NMDeviceVlan</doc>
            <type name="DeviceVlan" c:type="NMDeviceVlan*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_parent" c:identifier="nm_device_vlan_get_parent">
        <source-position filename="libnm/nm-device-vlan.h" line="62"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-device-vlan.c"
               line="89">the device's parent device</doc>
          <type name="Device" c:type="NMDevice*"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device-vlan.c"
                 line="87">a #NMDeviceVlan</doc>
            <type name="DeviceVlan" c:type="NMDeviceVlan*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_vlan_id" c:identifier="nm_device_vlan_get_vlan_id">
        <source-position filename="libnm/nm-device-vlan.h" line="63"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-device-vlan.c"
               line="103">the device's VLAN ID</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device-vlan.c"
                 line="101">a #NMDeviceVlan</doc>
            <type name="DeviceVlan" c:type="NMDeviceVlan*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="carrier" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-device-vlan.c"
             line="264">Whether the device has carrier.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="hw-address" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-device-vlan.c"
             line="252">The hardware (MAC) address of the device.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="parent" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-device-vlan.c"
             line="276">The devices's parent device.</doc>
        <type name="Device"/>
      </property>
      <property name="vlan-id" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-device-vlan.c"
             line="288">The device's VLAN ID.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <field name="parent">
        <type name="Device" c:type="NMDevice"/>
      </field>
    </class>
    <record name="DeviceVlanClass"
            c:type="NMDeviceVlanClass"
            glib:is-gtype-struct-for="DeviceVlan">
      <source-position filename="libnm/nm-device-vlan.h" line="56"/>
      <field name="parent">
        <type name="DeviceClass" c:type="NMDeviceClass"/>
      </field>
      <field name="padding" readable="0" private="1">
        <array zero-terminated="0" fixed-size="4">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <class name="DeviceVxlan"
           c:symbol-prefix="device_vxlan"
           c:type="NMDeviceVxlan"
           parent="Device"
           glib:type-name="NMDeviceVxlan"
           glib:get-type="nm_device_vxlan_get_type"
           glib:type-struct="DeviceVxlanClass">
      <source-position filename="libnm/nm-device-vxlan.h" line="70"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.Initable"/>
      <method name="get_ageing"
              c:identifier="nm_device_vxlan_get_ageing"
              version="1.2">
        <source-position filename="libnm/nm-device-vxlan.h" line="95"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-device-vxlan.c"
               line="249">the lifetime in seconds of FDB entries learnt by the kernel</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device-vxlan.c"
                 line="247">a #NMDeviceVxlan</doc>
            <type name="DeviceVxlan" c:type="NMDeviceVxlan*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_carrier"
              c:identifier="nm_device_vxlan_get_carrier"
              version="1.2">
        <doc xml:space="preserve"
             filename="libnm/nm-device-vxlan.c"
             line="98">Whether the device has carrier.</doc>
        <source-position filename="libnm/nm-device-vxlan.h" line="77"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-device-vxlan.c"
               line="104">%TRUE if the device has carrier.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device-vxlan.c"
                 line="100">a #NMDeviceVxlan</doc>
            <type name="DeviceVxlan" c:type="NMDeviceVxlan*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_dst_port"
              c:identifier="nm_device_vxlan_get_dst_port"
              version="1.2">
        <source-position filename="libnm/nm-device-vxlan.h" line="91"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-device-vxlan.c"
               line="217">the UDP destination port</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device-vxlan.c"
                 line="215">a #NMDeviceVxlan</doc>
            <type name="DeviceVxlan" c:type="NMDeviceVxlan*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_group"
              c:identifier="nm_device_vxlan_get_group"
              version="1.2">
        <source-position filename="libnm/nm-device-vxlan.h" line="83"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-device-vxlan.c"
               line="152">The unicast destination IP address or the multicast
IP address joined</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device-vxlan.c"
                 line="150">a #NMDeviceVxlan</doc>
            <type name="DeviceVxlan" c:type="NMDeviceVxlan*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_hw_address"
              c:identifier="nm_device_vxlan_get_hw_address"
              version="1.2">
        <doc xml:space="preserve"
             filename="libnm/nm-device-vxlan.c"
             line="79">Gets the hardware (MAC) address of the #NMDeviceVxlan</doc>
        <source-position filename="libnm/nm-device-vxlan.h" line="75"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-device-vxlan.c"
               line="85">the hardware address. This is the internal string used by the
device, and must not be modified.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device-vxlan.c"
                 line="81">a #NMDeviceVxlan</doc>
            <type name="DeviceVxlan" c:type="NMDeviceVxlan*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_id"
              c:identifier="nm_device_vxlan_get_id"
              version="1.2">
        <source-position filename="libnm/nm-device-vxlan.h" line="81"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-device-vxlan.c"
               line="136">the device's VXLAN ID.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device-vxlan.c"
                 line="134">a #NMDeviceVxlan</doc>
            <type name="DeviceVxlan" c:type="NMDeviceVxlan*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_l2miss"
              c:identifier="nm_device_vxlan_get_l2miss"
              version="1.2">
        <source-position filename="libnm/nm-device-vxlan.h" line="107"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-device-vxlan.c"
               line="346">whether netlink LL ADDR miss notifications are generated</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device-vxlan.c"
                 line="344">a #NMDeviceVxlan</doc>
            <type name="DeviceVxlan" c:type="NMDeviceVxlan*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_l3miss"
              c:identifier="nm_device_vxlan_get_l3miss"
              version="1.2">
        <source-position filename="libnm/nm-device-vxlan.h" line="109"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-device-vxlan.c"
               line="362">whether netlink IP ADDR miss notifications are generated</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device-vxlan.c"
                 line="360">a #NMDeviceVxlan</doc>
            <type name="DeviceVxlan" c:type="NMDeviceVxlan*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_learning"
              c:identifier="nm_device_vxlan_get_learning"
              version="1.2">
        <source-position filename="libnm/nm-device-vxlan.h" line="93"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-device-vxlan.c"
               line="233">whether address learning is enabled</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device-vxlan.c"
                 line="231">a #NMDeviceVxlan</doc>
            <type name="DeviceVxlan" c:type="NMDeviceVxlan*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_limit"
              c:identifier="nm_device_vxlan_get_limit"
              version="1.2">
        <source-position filename="libnm/nm-device-vxlan.h" line="101"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-device-vxlan.c"
               line="297">the maximum number of entries that can be added to the
forwarding table</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device-vxlan.c"
                 line="295">a #NMDeviceVxlan</doc>
            <type name="DeviceVxlan" c:type="NMDeviceVxlan*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_local"
              c:identifier="nm_device_vxlan_get_local"
              version="1.2">
        <source-position filename="libnm/nm-device-vxlan.h" line="85"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-device-vxlan.c"
               line="169">the source IP address to use in outgoing packets</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device-vxlan.c"
                 line="167">a #NMDeviceVxlan</doc>
            <type name="DeviceVxlan" c:type="NMDeviceVxlan*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_parent"
              c:identifier="nm_device_vxlan_get_parent"
              version="1.2">
        <source-position filename="libnm/nm-device-vxlan.h" line="79"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-device-vxlan.c"
               line="120">the device's parent device</doc>
          <type name="Device" c:type="NMDevice*"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device-vxlan.c"
                 line="118">a #NMDeviceVxlan</doc>
            <type name="DeviceVxlan" c:type="NMDeviceVxlan*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_proxy"
              c:identifier="nm_device_vxlan_get_proxy"
              version="1.2">
        <source-position filename="libnm/nm-device-vxlan.h" line="103"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-device-vxlan.c"
               line="314">whether ARP proxy is turned on</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device-vxlan.c"
                 line="312">a #NMDeviceVxlan</doc>
            <type name="DeviceVxlan" c:type="NMDeviceVxlan*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_rsc"
              c:identifier="nm_device_vxlan_get_rsc"
              version="1.2">
        <source-position filename="libnm/nm-device-vxlan.h" line="105"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-device-vxlan.c"
               line="330">whether route short circuit is turned on</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device-vxlan.c"
                 line="328">a #NMDeviceVxlan</doc>
            <type name="DeviceVxlan" c:type="NMDeviceVxlan*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_src_port_max"
              c:identifier="nm_device_vxlan_get_src_port_max"
              version="1.2">
        <source-position filename="libnm/nm-device-vxlan.h" line="89"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-device-vxlan.c"
               line="201">the maximum UDP source port</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device-vxlan.c"
                 line="199">a #NMDeviceVxlan</doc>
            <type name="DeviceVxlan" c:type="NMDeviceVxlan*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_src_port_min"
              c:identifier="nm_device_vxlan_get_src_port_min"
              version="1.2">
        <source-position filename="libnm/nm-device-vxlan.h" line="87"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-device-vxlan.c"
               line="185">the minimum UDP source port</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device-vxlan.c"
                 line="183">a #NMDeviceVxlan</doc>
            <type name="DeviceVxlan" c:type="NMDeviceVxlan*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_tos"
              c:identifier="nm_device_vxlan_get_tos"
              version="1.2">
        <source-position filename="libnm/nm-device-vxlan.h" line="97"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-device-vxlan.c"
               line="265">the TOS value to use in outgoing packets</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device-vxlan.c"
                 line="263">a #NMDeviceVxlan</doc>
            <type name="DeviceVxlan" c:type="NMDeviceVxlan*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_ttl"
              c:identifier="nm_device_vxlan_get_ttl"
              version="1.2">
        <source-position filename="libnm/nm-device-vxlan.h" line="99"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-device-vxlan.c"
               line="281">the time-to-live value to use in outgoing packets</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device-vxlan.c"
                 line="279">a #NMDeviceVxlan</doc>
            <type name="DeviceVxlan" c:type="NMDeviceVxlan*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="ageing" version="1.2" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-device-vxlan.c"
             line="682">The lifetime in seconds of FDB entries learnt by the kernel.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="carrier" version="1.2" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-device-vxlan.c"
             line="567">Whether the device has carrier.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="dst-port" version="1.2" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-device-vxlan.c"
             line="710">The UDP destination port used to communicate with the remote VXLAN tunnel
endpoint.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="group" version="1.2" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-device-vxlan.c"
             line="609">The unicast destination IP address used in outgoing packets when the
destination link layer address is not known in the VXLAN device
forwarding database or the multicast IP address joined.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="hw-address" version="1.2" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-device-vxlan.c"
             line="553">The hardware (MAC) address of the device.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="id" version="1.2" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-device-vxlan.c"
             line="595">The device's VXLAN ID.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="l2miss" version="1.2" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-device-vxlan.c"
             line="783">Whether netlink LL ADDR miss notifications are generated.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="l3miss" version="1.2" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-device-vxlan.c"
             line="797">Whether netlink IP ADDR miss notifications are generated.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="learning" version="1.2" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-device-vxlan.c"
             line="667">Whether unknown source link layer addresses and IP addresses are entered
into the VXLAN device forwarding database.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="limit" version="1.2" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-device-vxlan.c"
             line="696">The maximum number of entries that can be added to the forwarding table.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="local" version="1.2" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-device-vxlan.c"
             line="625">The source IP address to use in outgoing packets.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="parent" version="1.2" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-device-vxlan.c"
             line="581">The devices's parent device.</doc>
        <type name="Device"/>
      </property>
      <property name="proxy" version="1.2" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-device-vxlan.c"
             line="755">Whether ARP proxy is turned on.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="rsc" version="1.2" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-device-vxlan.c"
             line="769">Whether route short circuit is turned on.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="src-port-max" version="1.2" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-device-vxlan.c"
             line="740">The maximum UDP source port used to communicate with the remote VXLAN
tunnel endpoint.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="src-port-min" version="1.2" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-device-vxlan.c"
             line="725">The minimum UDP source port used to communicate with the remote VXLAN
tunnel endpoint.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="tos" version="1.2" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-device-vxlan.c"
             line="639">The TOS value to use in outgoing packets.</doc>
        <type name="guint8" c:type="guint8"/>
      </property>
      <property name="ttl" version="1.2" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-device-vxlan.c"
             line="653">The time-to-live value to use in outgoing packets.</doc>
        <type name="guint8" c:type="guint8"/>
      </property>
      <field name="parent">
        <type name="Device" c:type="NMDevice"/>
      </field>
    </class>
    <record name="DeviceVxlanClass"
            c:type="NMDeviceVxlanClass"
            glib:is-gtype-struct-for="DeviceVxlan">
      <source-position filename="libnm/nm-device-vxlan.h" line="70"/>
      <field name="parent">
        <type name="DeviceClass" c:type="NMDeviceClass"/>
      </field>
      <field name="padding" readable="0" private="1">
        <array zero-terminated="0" fixed-size="4">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <class name="DeviceWifi"
           c:symbol-prefix="device_wifi"
           c:type="NMDeviceWifi"
           parent="Device"
           glib:type-name="NMDeviceWifi"
           glib:get-type="nm_device_wifi_get_type"
           glib:type-struct="DeviceWifiClass">
      <source-position filename="libnm/nm-device-wifi.h" line="65"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.Initable"/>
      <virtual-method name="access_point_added">
        <source-position filename="libnm/nm-device-wifi.h" line="60"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <type name="DeviceWifi" c:type="NMDeviceWifi*"/>
          </instance-parameter>
          <parameter name="ap" transfer-ownership="none">
            <type name="AccessPoint" c:type="NMAccessPoint*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="access_point_removed">
        <source-position filename="libnm/nm-device-wifi.h" line="61"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <type name="DeviceWifi" c:type="NMDeviceWifi*"/>
          </instance-parameter>
          <parameter name="ap" transfer-ownership="none">
            <type name="AccessPoint" c:type="NMAccessPoint*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="get_access_point_by_path"
              c:identifier="nm_device_wifi_get_access_point_by_path">
        <doc xml:space="preserve"
             filename="libnm/nm-device-wifi.c"
             line="234">Gets a #NMAccessPoint by path.</doc>
        <source-position filename="libnm/nm-device-wifi.h" line="76"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-device-wifi.c"
               line="241">the access point or %NULL if none is found.</doc>
          <type name="AccessPoint" c:type="NMAccessPoint*"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device-wifi.c"
                 line="236">a #NMDeviceWifi</doc>
            <type name="DeviceWifi" c:type="NMDeviceWifi*"/>
          </instance-parameter>
          <parameter name="path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device-wifi.c"
                 line="237">the object path of the access point</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_access_points"
              c:identifier="nm_device_wifi_get_access_points">
        <doc xml:space="preserve"
             filename="libnm/nm-device-wifi.c"
             line="216">Gets all the scanned access points of the #NMDeviceWifi.</doc>
        <source-position filename="libnm/nm-device-wifi.h" line="79"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-device-wifi.c"
               line="222">a #GPtrArray containing all the
scanned #NMAccessPoints.
The returned array is owned by the client and should not be modified.</doc>
          <array name="GLib.PtrArray" c:type="const GPtrArray*">
            <type name="AccessPoint"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device-wifi.c"
                 line="218">a #NMDeviceWifi</doc>
            <type name="DeviceWifi" c:type="NMDeviceWifi*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_active_access_point"
              c:identifier="nm_device_wifi_get_active_access_point">
        <doc xml:space="preserve"
             filename="libnm/nm-device-wifi.c"
             line="182">Gets the active #NMAccessPoint.</doc>
        <source-position filename="libnm/nm-device-wifi.h" line="74"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-device-wifi.c"
               line="188">the access point or %NULL if none is active</doc>
          <type name="AccessPoint" c:type="NMAccessPoint*"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device-wifi.c"
                 line="184">a #NMDeviceWifi</doc>
            <type name="DeviceWifi" c:type="NMDeviceWifi*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_bitrate" c:identifier="nm_device_wifi_get_bitrate">
        <doc xml:space="preserve"
             filename="libnm/nm-device-wifi.c"
             line="136">Gets the bit rate of the #NMDeviceWifi in kbit/s.</doc>
        <source-position filename="libnm/nm-device-wifi.h" line="72"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-device-wifi.c"
               line="142">the bit rate (kbit/s)</doc>
          <type name="guint32" c:type="guint32"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device-wifi.c"
                 line="138">a #NMDeviceWifi</doc>
            <type name="DeviceWifi" c:type="NMDeviceWifi*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_capabilities"
              c:identifier="nm_device_wifi_get_capabilities">
        <doc xml:space="preserve"
             filename="libnm/nm-device-wifi.c"
             line="166">Gets the Wi-Fi capabilities of the #NMDeviceWifi.</doc>
        <source-position filename="libnm/nm-device-wifi.h" line="73"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-device-wifi.c"
               line="172">the capabilities</doc>
          <type name="DeviceWifiCapabilities"
                c:type="NMDeviceWifiCapabilities"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device-wifi.c"
                 line="168">a #NMDeviceWifi</doc>
            <type name="DeviceWifi" c:type="NMDeviceWifi*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_hw_address"
              c:identifier="nm_device_wifi_get_hw_address">
        <doc xml:space="preserve"
             filename="libnm/nm-device-wifi.c"
             line="86">Gets the actual hardware (MAC) address of the #NMDeviceWifi</doc>
        <source-position filename="libnm/nm-device-wifi.h" line="69"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-device-wifi.c"
               line="92">the actual hardware address. This is the internal string used by the
device, and must not be modified.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device-wifi.c"
                 line="88">a #NMDeviceWifi</doc>
            <type name="DeviceWifi" c:type="NMDeviceWifi*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_last_scan"
              c:identifier="nm_device_wifi_get_last_scan"
              version="1.12">
        <doc xml:space="preserve"
             filename="libnm/nm-device-wifi.c"
             line="269">Returns the timestamp (in CLOCK_BOOTTIME milliseconds) for the last finished
network scan. A value of -1 means the device never scanned for access points.

Use nm_utils_get_timestamp_msec() to obtain current time value suitable for
comparing to this value.</doc>
        <source-position filename="libnm/nm-device-wifi.h" line="82"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-device-wifi.c"
               line="279">the last scan time in seconds</doc>
          <type name="gint64" c:type="gint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device-wifi.c"
                 line="271">a #NMDeviceWifi</doc>
            <type name="DeviceWifi" c:type="NMDeviceWifi*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_mode" c:identifier="nm_device_wifi_get_mode">
        <doc xml:space="preserve"
             filename="libnm/nm-device-wifi.c"
             line="120">Gets the #NMDeviceWifi mode.</doc>
        <source-position filename="libnm/nm-device-wifi.h" line="71"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-device-wifi.c"
               line="126">the mode</doc>
          <type name="80211Mode" c:type="NM80211Mode"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device-wifi.c"
                 line="122">a #NMDeviceWifi</doc>
            <type name="DeviceWifi" c:type="NMDeviceWifi*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_permanent_hw_address"
              c:identifier="nm_device_wifi_get_permanent_hw_address">
        <doc xml:space="preserve"
             filename="libnm/nm-device-wifi.c"
             line="103">Gets the permanent hardware (MAC) address of the #NMDeviceWifi</doc>
        <source-position filename="libnm/nm-device-wifi.h" line="70"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-device-wifi.c"
               line="109">the permanent hardware address. This is the internal string used by the
device, and must not be modified.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device-wifi.c"
                 line="105">a #NMDeviceWifi</doc>
            <type name="DeviceWifi" c:type="NMDeviceWifi*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="request_scan"
              c:identifier="nm_device_wifi_request_scan"
              throws="1">
        <doc xml:space="preserve"
             filename="libnm/nm-device-wifi.c"
             line="337">Request NM to scan for access points on @device. Note that the function
returns immediately after requesting the scan, and it may take some time
after that for the scan to complete.</doc>
        <source-position filename="libnm/nm-device-wifi.h" line="84"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-device-wifi.c"
               line="347">%TRUE on success, %FALSE on error, in which case @error will be
set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device-wifi.c"
                 line="339">a #NMDeviceWifi</doc>
            <type name="DeviceWifi" c:type="NMDeviceWifi*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libnm/nm-device-wifi.c"
                 line="340">a #GCancellable, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="request_scan_async"
              c:identifier="nm_device_wifi_request_scan_async">
        <doc xml:space="preserve"
             filename="libnm/nm-device-wifi.c"
             line="454">Request NM to scan for access points on @device. Note that @callback will be
called immediately after requesting the scan, and it may take some time after
that for the scan to complete.</doc>
        <source-position filename="libnm/nm-device-wifi.h" line="92"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device-wifi.c"
                 line="456">a #NMDeviceWifi</doc>
            <type name="DeviceWifi" c:type="NMDeviceWifi*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libnm/nm-device-wifi.c"
                 line="457">a #GCancellable, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="libnm/nm-device-wifi.c"
                 line="458">callback to be called when the scan has been requested</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libnm/nm-device-wifi.c"
                 line="459">caller-specific data passed to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="request_scan_finish"
              c:identifier="nm_device_wifi_request_scan_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="libnm/nm-device-wifi.c"
             line="506">Gets the result of a call to nm_device_wifi_request_scan_async().</doc>
        <source-position filename="libnm/nm-device-wifi.h" line="102"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-device-wifi.c"
               line="514">%TRUE on success, %FALSE on error, in which case @error will be
set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device-wifi.c"
                 line="508">a #NMDeviceWifi</doc>
            <type name="DeviceWifi" c:type="NMDeviceWifi*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device-wifi.c"
                 line="509">the result passed to the #GAsyncReadyCallback</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="request_scan_options"
              c:identifier="nm_device_wifi_request_scan_options"
              version="1.2"
              throws="1">
        <doc xml:space="preserve"
             filename="libnm/nm-device-wifi.c"
             line="358">Request NM to scan for access points on @device. Note that the function
returns immediately after requesting the scan, and it may take some time
after that for the scan to complete.
This is the same as @nm_device_wifi_request_scan except it accepts @options
for the scanning. The argument is the dictionary passed to RequestScan()
D-Bus call. Valid options inside the dictionary are:
'ssids' =&gt; array of SSIDs (saay)</doc>
        <source-position filename="libnm/nm-device-wifi.h" line="88"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-device-wifi.c"
               line="373">%TRUE on success, %FALSE on error, in which case @error will be
set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device-wifi.c"
                 line="360">a #NMDeviceWifi</doc>
            <type name="DeviceWifi" c:type="NMDeviceWifi*"/>
          </instance-parameter>
          <parameter name="options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device-wifi.c"
                 line="361">dictionary with options for RequestScan(), or %NULL</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libnm/nm-device-wifi.c"
                 line="362">a #GCancellable, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="request_scan_options_async"
              c:identifier="nm_device_wifi_request_scan_options_async"
              version="1.2">
        <doc xml:space="preserve"
             filename="libnm/nm-device-wifi.c"
             line="474">Request NM to scan for access points on @device. Note that @callback will be
called immediately after requesting the scan, and it may take some time after
that for the scan to complete.
This is the same as @nm_device_wifi_request_scan_async except it accepts @options
for the scanning. The argument is the dictionary passed to RequestScan()
D-Bus call. Valid options inside the dictionary are:
'ssids' =&gt; array of SSIDs (saay)</doc>
        <source-position filename="libnm/nm-device-wifi.h" line="97"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device-wifi.c"
                 line="476">a #NMDeviceWifi</doc>
            <type name="DeviceWifi" c:type="NMDeviceWifi*"/>
          </instance-parameter>
          <parameter name="options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device-wifi.c"
                 line="477">dictionary with options for RequestScan(), or %NULL</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libnm/nm-device-wifi.c"
                 line="478">a #GCancellable, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="libnm/nm-device-wifi.c"
                 line="479">callback to be called when the scan has been requested</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libnm/nm-device-wifi.c"
                 line="480">caller-specific data passed to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <property name="access-points" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-device-wifi.c"
             line="915">List of all Wi-Fi access points the device can see.</doc>
        <array name="GLib.PtrArray">
          <type name="AccessPoint"/>
        </array>
      </property>
      <property name="active-access-point" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-device-wifi.c"
             line="890">The active #NMAccessPoint of the device.</doc>
        <type name="AccessPoint"/>
      </property>
      <property name="bitrate" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-device-wifi.c"
             line="878">The bit rate of the device in kbit/s.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="hw-address" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-device-wifi.c"
             line="841">The hardware (MAC) address of the device.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="last-scan" version="1.12" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-device-wifi.c"
             line="927">The timestamp (in CLOCK_BOOTTIME seconds) for the last finished
network scan. A value of -1 means the device never scanned for
access points.</doc>
        <type name="gint64" c:type="gint64"/>
      </property>
      <property name="mode" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-device-wifi.c"
             line="865">The mode of the device.</doc>
        <type name="80211Mode"/>
      </property>
      <property name="perm-hw-address" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-device-wifi.c"
             line="853">The hardware (MAC) address of the device.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="wireless-capabilities" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-device-wifi.c"
             line="902">The wireless capabilities of the device.</doc>
        <type name="DeviceWifiCapabilities"/>
      </property>
      <field name="parent">
        <type name="Device" c:type="NMDevice"/>
      </field>
      <glib:signal name="access-point-added" when="first">
        <doc xml:space="preserve"
             filename="libnm/nm-device-wifi.c"
             line="945">Notifies that a #NMAccessPoint is added to the Wi-Fi device.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="ap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device-wifi.c"
                 line="948">the new access point</doc>
            <type name="GObject.Object"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="access-point-removed" when="first">
        <doc xml:space="preserve"
             filename="libnm/nm-device-wifi.c"
             line="962">Notifies that a #NMAccessPoint is removed from the Wi-Fi device.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="ap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device-wifi.c"
                 line="965">the removed access point</doc>
            <type name="GObject.Object"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <bitfield name="DeviceWifiCapabilities"
              glib:type-name="NMDeviceWifiCapabilities"
              glib:get-type="nm_device_wifi_capabilities_get_type"
              c:type="NMDeviceWifiCapabilities">
      <doc xml:space="preserve"
           filename="libnm-core/nm-dbus-interface.h"
           line="280">802.11 specific device encryption and authentication capabilities.</doc>
      <member name="none"
              value="0"
              c:identifier="NM_WIFI_DEVICE_CAP_NONE"
              glib:nick="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="282">device has no encryption/authentication capabilities</doc>
      </member>
      <member name="cipher_wep40"
              value="1"
              c:identifier="NM_WIFI_DEVICE_CAP_CIPHER_WEP40"
              glib:nick="cipher-wep40">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="283">device supports 40/64-bit WEP encryption</doc>
      </member>
      <member name="cipher_wep104"
              value="2"
              c:identifier="NM_WIFI_DEVICE_CAP_CIPHER_WEP104"
              glib:nick="cipher-wep104">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="284">device supports 104/128-bit WEP encryption</doc>
      </member>
      <member name="cipher_tkip"
              value="4"
              c:identifier="NM_WIFI_DEVICE_CAP_CIPHER_TKIP"
              glib:nick="cipher-tkip">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="285">device supports TKIP encryption</doc>
      </member>
      <member name="cipher_ccmp"
              value="8"
              c:identifier="NM_WIFI_DEVICE_CAP_CIPHER_CCMP"
              glib:nick="cipher-ccmp">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="286">device supports AES/CCMP encryption</doc>
      </member>
      <member name="wpa"
              value="16"
              c:identifier="NM_WIFI_DEVICE_CAP_WPA"
              glib:nick="wpa">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="287">device supports WPA1 authentication</doc>
      </member>
      <member name="rsn"
              value="32"
              c:identifier="NM_WIFI_DEVICE_CAP_RSN"
              glib:nick="rsn">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="288">device supports WPA2/RSN authentication</doc>
      </member>
      <member name="ap"
              value="64"
              c:identifier="NM_WIFI_DEVICE_CAP_AP"
              glib:nick="ap">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="289">device supports Access Point mode</doc>
      </member>
      <member name="adhoc"
              value="128"
              c:identifier="NM_WIFI_DEVICE_CAP_ADHOC"
              glib:nick="adhoc">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="290">device supports Ad-Hoc mode</doc>
      </member>
      <member name="freq_valid"
              value="256"
              c:identifier="NM_WIFI_DEVICE_CAP_FREQ_VALID"
              glib:nick="freq-valid">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="291">device reports frequency capabilities</doc>
      </member>
      <member name="freq_2ghz"
              value="512"
              c:identifier="NM_WIFI_DEVICE_CAP_FREQ_2GHZ"
              glib:nick="freq-2ghz">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="292">device supports 2.4GHz frequencies</doc>
      </member>
      <member name="freq_5ghz"
              value="1024"
              c:identifier="NM_WIFI_DEVICE_CAP_FREQ_5GHZ"
              glib:nick="freq-5ghz">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="293">device supports 5GHz frequencies</doc>
      </member>
    </bitfield>
    <record name="DeviceWifiClass"
            c:type="NMDeviceWifiClass"
            glib:is-gtype-struct-for="DeviceWifi">
      <source-position filename="libnm/nm-device-wifi.h" line="65"/>
      <field name="parent">
        <type name="DeviceClass" c:type="NMDeviceClass"/>
      </field>
      <field name="access_point_added">
        <callback name="access_point_added">
          <source-position filename="libnm/nm-device-wifi.h" line="60"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="device" transfer-ownership="none">
              <type name="DeviceWifi" c:type="NMDeviceWifi*"/>
            </parameter>
            <parameter name="ap" transfer-ownership="none">
              <type name="AccessPoint" c:type="NMAccessPoint*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="access_point_removed">
        <callback name="access_point_removed">
          <source-position filename="libnm/nm-device-wifi.h" line="61"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="device" transfer-ownership="none">
              <type name="DeviceWifi" c:type="NMDeviceWifi*"/>
            </parameter>
            <parameter name="ap" transfer-ownership="none">
              <type name="AccessPoint" c:type="NMAccessPoint*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="padding" readable="0" private="1">
        <array zero-terminated="0" fixed-size="4">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <class name="DeviceWifiP2P"
           c:symbol-prefix="device_wifi_p2p"
           c:type="NMDeviceWifiP2P"
           version="1.16"
           parent="Device"
           glib:type-name="NMDeviceWifiP2P"
           glib:get-type="nm_device_wifi_p2p_get_type"
           glib:type-struct="DeviceWifiP2PClass">
      <source-position filename="libnm/nm-device-wifi-p2p.h" line="42"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.Initable"/>
      <method name="get_hw_address"
              c:identifier="nm_device_wifi_p2p_get_hw_address"
              version="1.16">
        <doc xml:space="preserve"
             filename="libnm/nm-device-wifi-p2p.c"
             line="83">Gets the actual hardware (MAC) address of the #NMDeviceWifiP2P</doc>
        <source-position filename="libnm/nm-device-wifi-p2p.h" line="48"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-device-wifi-p2p.c"
               line="89">the actual hardware address. This is the internal string used by the
device, and must not be modified.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device-wifi-p2p.c"
                 line="85">a #NMDeviceWifiP2P</doc>
            <type name="DeviceWifiP2P" c:type="NMDeviceWifiP2P*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_peer_by_path"
              c:identifier="nm_device_wifi_p2p_get_peer_by_path"
              version="1.16">
        <doc xml:space="preserve"
             filename="libnm/nm-device-wifi-p2p.c"
             line="122">Gets a #NMWifiP2PPeer by path.</doc>
        <source-position filename="libnm/nm-device-wifi-p2p.h" line="51"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-device-wifi-p2p.c"
               line="129">the peer or %NULL if none is found.</doc>
          <type name="WifiP2PPeer" c:type="NMWifiP2PPeer*"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device-wifi-p2p.c"
                 line="124">a #NMDeviceWifiP2P</doc>
            <type name="DeviceWifiP2P" c:type="NMDeviceWifiP2P*"/>
          </instance-parameter>
          <parameter name="path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device-wifi-p2p.c"
                 line="125">the object path of the peer</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_peers"
              c:identifier="nm_device_wifi_p2p_get_peers"
              version="1.16">
        <doc xml:space="preserve"
             filename="libnm/nm-device-wifi-p2p.c"
             line="102">Gets all the found peers of the #NMDeviceWifiP2P.</doc>
        <source-position filename="libnm/nm-device-wifi-p2p.h" line="55"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-device-wifi-p2p.c"
               line="108">a #GPtrArray containing all the
         found #NMWifiP2PPeers.
The returned array is owned by the client and should not be modified.</doc>
          <array name="GLib.PtrArray" c:type="const GPtrArray*">
            <type name="WifiP2PPeer"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device-wifi-p2p.c"
                 line="104">a #NMDeviceWifiP2P</doc>
            <type name="DeviceWifiP2P" c:type="NMDeviceWifiP2P*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="start_find"
              c:identifier="nm_device_wifi_p2p_start_find"
              version="1.16">
        <doc xml:space="preserve"
             filename="libnm/nm-device-wifi-p2p.c"
             line="176">Request NM to search for Wi-Fi P2P peers on @device. Note that the call
returns immediately after requesting the find, and it may take some time
after that for peers to be found.

The find operation will run for 30s by default. You can stop it earlier
using nm_device_p2p_wifi_stop_find().</doc>
        <source-position filename="libnm/nm-device-wifi-p2p.h" line="58"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device-wifi-p2p.c"
                 line="178">a #NMDeviceWifiP2P</doc>
            <type name="DeviceWifiP2P" c:type="NMDeviceWifiP2P*"/>
          </instance-parameter>
          <parameter name="options"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libnm/nm-device-wifi-p2p.c"
                 line="179">optional options passed to StartFind.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libnm/nm-device-wifi-p2p.c"
                 line="180">a #GCancellable, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="libnm/nm-device-wifi-p2p.c"
                 line="181">a #GAsyncReadyCallback, or %NULL</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libnm/nm-device-wifi-p2p.c"
                 line="182">user_data for @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="start_find_finish"
              c:identifier="nm_device_wifi_p2p_start_find_finish"
              version="1.16"
              throws="1">
        <doc xml:space="preserve"
             filename="libnm/nm-device-wifi-p2p.c"
             line="216">Finish an operation started by nm_device_wifi_p2p_start_find().</doc>
        <source-position filename="libnm/nm-device-wifi-p2p.h" line="64"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-device-wifi-p2p.c"
               line="224">%TRUE if the call was successful</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device-wifi-p2p.c"
                 line="218">a #NMDeviceWifiP2P</doc>
            <type name="DeviceWifiP2P" c:type="NMDeviceWifiP2P*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device-wifi-p2p.c"
                 line="219">the #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="stop_find"
              c:identifier="nm_device_wifi_p2p_stop_find"
              version="1.16">
        <doc xml:space="preserve"
             filename="libnm/nm-device-wifi-p2p.c"
             line="253">Request NM to stop any ongoing find operation for Wi-Fi P2P peers on @device.</doc>
        <source-position filename="libnm/nm-device-wifi-p2p.h" line="69"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device-wifi-p2p.c"
                 line="255">a #NMDeviceWifiP2P</doc>
            <type name="DeviceWifiP2P" c:type="NMDeviceWifiP2P*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libnm/nm-device-wifi-p2p.c"
                 line="256">a #GCancellable, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="libnm/nm-device-wifi-p2p.c"
                 line="257">a #GAsyncReadyCallback, or %NULL</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libnm/nm-device-wifi-p2p.c"
                 line="258">user_data for @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="stop_find_finish"
              c:identifier="nm_device_wifi_p2p_stop_find_finish"
              version="1.16"
              throws="1">
        <doc xml:space="preserve"
             filename="libnm/nm-device-wifi-p2p.c"
             line="283">Finish an operation started by nm_device_wifi_p2p_stop_find().</doc>
        <source-position filename="libnm/nm-device-wifi-p2p.h" line="74"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-device-wifi-p2p.c"
               line="291">%TRUE if the call was successful</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device-wifi-p2p.c"
                 line="285">a #NMDeviceWifiP2P</doc>
            <type name="DeviceWifiP2P" c:type="NMDeviceWifiP2P*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device-wifi-p2p.c"
                 line="286">the #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <property name="hw-address" version="1.16" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-device-wifi-p2p.c"
             line="439">The hardware (MAC) address of the device.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="peers" version="1.16" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-device-wifi-p2p.c"
             line="452">List of all Wi-Fi P2P peers the device can see.</doc>
        <array name="GLib.PtrArray">
          <type name="WifiP2PPeer"/>
        </array>
      </property>
      <glib:signal name="peer-added" when="first" version="1.16">
        <doc xml:space="preserve"
             filename="libnm/nm-device-wifi-p2p.c"
             line="467">Notifies that a #NMWifiP2PPeer is added to the Wi-Fi P2P device.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="peer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device-wifi-p2p.c"
                 line="470">the new access point</doc>
            <type name="GObject.Object"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="peer-removed" when="first" version="1.16">
        <doc xml:space="preserve"
             filename="libnm/nm-device-wifi-p2p.c"
             line="485">Notifies that a #NMWifiP2PPeer is removed from the Wi-Fi P2P device.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="peer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device-wifi-p2p.c"
                 line="488">the removed access point</doc>
            <type name="GObject.Object"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="DeviceWifiP2PClass"
            c:type="NMDeviceWifiP2PClass"
            disguised="1"
            glib:is-gtype-struct-for="DeviceWifiP2P">
      <source-position filename="libnm/nm-device-wifi-p2p.h" line="42"/>
    </record>
    <class name="DeviceWimax"
           c:symbol-prefix="device_wimax"
           c:type="NMDeviceWimax"
           parent="Device"
           glib:type-name="NMDeviceWimax"
           glib:get-type="nm_device_wimax_get_type"
           glib:type-struct="DeviceWimaxClass">
      <source-position filename="libnm/nm-device-wimax.h" line="65"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.Initable"/>
      <virtual-method name="nsp_added">
        <source-position filename="libnm/nm-device-wimax.h" line="60"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DeviceWimax" c:type="NMDeviceWimax*"/>
          </instance-parameter>
          <parameter name="nsp" transfer-ownership="none">
            <type name="WimaxNsp" c:type="NMWimaxNsp*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="nsp_removed">
        <source-position filename="libnm/nm-device-wimax.h" line="61"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DeviceWimax" c:type="NMDeviceWimax*"/>
          </instance-parameter>
          <parameter name="nsp" transfer-ownership="none">
            <type name="WimaxNsp" c:type="NMWimaxNsp*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="get_active_nsp"
              c:identifier="nm_device_wimax_get_active_nsp"
              deprecated="1"
              deprecated-version="1.2">
        <doc xml:space="preserve"
             filename="libnm/nm-device-wimax.c"
             line="93">Gets the active #NMWimaxNsp.</doc>
        <doc-deprecated xml:space="preserve">WiMAX is no longer supported.</doc-deprecated>
        <source-position filename="libnm/nm-device-wimax.h" line="73"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libnm/nm-device-wimax.c"
               line="99">the access point or %NULL if none is active</doc>
          <type name="WimaxNsp" c:type="NMWimaxNsp*"/>
        </return-value>
        <parameters>
          <instance-parameter name="wimax" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device-wimax.c"
                 line="95">a #NMDeviceWimax</doc>
            <type name="DeviceWimax" c:type="NMDeviceWimax*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_bsid"
              c:identifier="nm_device_wimax_get_bsid"
              deprecated="1"
              deprecated-version="1.2">
        <doc xml:space="preserve"
             filename="libnm/nm-device-wimax.c"
             line="284">Gets the ID of the serving Base Station when the device is connected.</doc>
        <doc-deprecated xml:space="preserve">WiMAX is no longer supported.</doc-deprecated>
        <source-position filename="libnm/nm-device-wimax.h" line="90"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-device-wimax.c"
               line="290">the ID of the serving Base Station, or %NULL</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device-wimax.c"
                 line="286">a #NMDeviceWimax</doc>
            <type name="DeviceWimax" c:type="NMDeviceWimax*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_center_frequency"
              c:identifier="nm_device_wimax_get_center_frequency"
              deprecated="1"
              deprecated-version="1.2">
        <doc xml:space="preserve"
             filename="libnm/nm-device-wimax.c"
             line="203">Gets the center frequency (in KHz) of the radio channel the device is using
to communicate with the network when connected.  Has no meaning when the
device is not connected.</doc>
        <doc-deprecated xml:space="preserve">WiMAX is no longer supported.</doc-deprecated>
        <source-position filename="libnm/nm-device-wimax.h" line="82"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-device-wimax.c"
               line="211">the center frequency in KHz, or 0</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device-wimax.c"
                 line="205">a #NMDeviceWimax</doc>
            <type name="DeviceWimax" c:type="NMDeviceWimax*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_cinr"
              c:identifier="nm_device_wimax_get_cinr"
              deprecated="1"
              deprecated-version="1.2">
        <doc xml:space="preserve"
             filename="libnm/nm-device-wimax.c"
             line="244">Gets the CINR (Carrier to Interference + Noise Ratio) of the current radio
link in dB.  CINR is a more accurate measure of radio link quality.  Has no
meaning when the device is not connected.</doc>
        <doc-deprecated xml:space="preserve">WiMAX is no longer supported.</doc-deprecated>
        <source-position filename="libnm/nm-device-wimax.h" line="86"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-device-wimax.c"
               line="252">the CINR in dB, or 0</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device-wimax.c"
                 line="246">a #NMDeviceWimax</doc>
            <type name="DeviceWimax" c:type="NMDeviceWimax*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_hw_address"
              c:identifier="nm_device_wimax_get_hw_address"
              deprecated="1"
              deprecated-version="1.2">
        <doc xml:space="preserve"
             filename="libnm/nm-device-wimax.c"
             line="74">Gets the hardware (MAC) address of the #NMDeviceWimax</doc>
        <doc-deprecated xml:space="preserve">WiMAX is no longer supported.</doc-deprecated>
        <source-position filename="libnm/nm-device-wimax.h" line="71"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-device-wimax.c"
               line="80">the hardware address. This is the internal string used by the
         device, and must not be modified.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="wimax" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device-wimax.c"
                 line="76">a #NMDeviceWimax</doc>
            <type name="DeviceWimax" c:type="NMDeviceWimax*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_nsp_by_path"
              c:identifier="nm_device_wimax_get_nsp_by_path"
              deprecated="1"
              deprecated-version="1.2">
        <doc xml:space="preserve"
             filename="libnm/nm-device-wimax.c"
             line="149">Gets a #NMWimaxNsp by path.</doc>
        <doc-deprecated xml:space="preserve">WiMAX is no longer supported.</doc-deprecated>
        <source-position filename="libnm/nm-device-wimax.h" line="75"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-device-wimax.c"
               line="156">the access point or %NULL if none is found.</doc>
          <type name="WimaxNsp" c:type="NMWimaxNsp*"/>
        </return-value>
        <parameters>
          <instance-parameter name="wimax" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device-wimax.c"
                 line="151">a #NMDeviceWimax</doc>
            <type name="DeviceWimax" c:type="NMDeviceWimax*"/>
          </instance-parameter>
          <parameter name="path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device-wimax.c"
                 line="152">the object path of the NSP</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_nsps"
              c:identifier="nm_device_wimax_get_nsps"
              deprecated="1"
              deprecated-version="1.2">
        <doc xml:space="preserve"
             filename="libnm/nm-device-wimax.c"
             line="129">Gets all the scanned NSPs of the #NMDeviceWimax.</doc>
        <doc-deprecated xml:space="preserve">WiMAX is no longer supported.</doc-deprecated>
        <source-position filename="libnm/nm-device-wimax.h" line="79"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-device-wimax.c"
               line="135">a #GPtrArray containing
         all the scanned #NMWimaxNsps.
The returned array is owned by the client and should not be modified.</doc>
          <array name="GLib.PtrArray" c:type="const GPtrArray*">
            <type name="WimaxNsp"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="wimax" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device-wimax.c"
                 line="131">a #NMDeviceWimax</doc>
            <type name="DeviceWimax" c:type="NMDeviceWimax*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_rssi"
              c:identifier="nm_device_wimax_get_rssi"
              deprecated="1"
              deprecated-version="1.2">
        <doc xml:space="preserve"
             filename="libnm/nm-device-wimax.c"
             line="223">Gets the RSSI of the current radio link in dBm.  This value indicates how
strong the raw received RF signal from the base station is, but does not
indicate the overall quality of the radio link.  Has no meaning when the
device is not connected.</doc>
        <doc-deprecated xml:space="preserve">WiMAX is no longer supported.</doc-deprecated>
        <source-position filename="libnm/nm-device-wimax.h" line="84"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-device-wimax.c"
               line="232">the RSSI in dBm, or 0</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device-wimax.c"
                 line="225">a #NMDeviceWimax</doc>
            <type name="DeviceWimax" c:type="NMDeviceWimax*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_tx_power"
              c:identifier="nm_device_wimax_get_tx_power"
              deprecated="1"
              deprecated-version="1.2">
        <doc xml:space="preserve"
             filename="libnm/nm-device-wimax.c"
             line="264">Average power of the last burst transmitted by the device, in units of
0.5 dBm.  i.e. a TxPower of -11 represents an actual device TX power of
-5.5 dBm.  Has no meaning when the device is not connected.</doc>
        <doc-deprecated xml:space="preserve">WiMAX is no longer supported.</doc-deprecated>
        <source-position filename="libnm/nm-device-wimax.h" line="88"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-device-wimax.c"
               line="272">the TX power in dBm, or 0</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device-wimax.c"
                 line="266">a #NMDeviceWimax</doc>
            <type name="DeviceWimax" c:type="NMDeviceWimax*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="active-nsp"
                deprecated="1"
                deprecated-version="1.2"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-device-wimax.c"
             line="556">The active #NMWimaxNsp of the device.</doc>
        <doc-deprecated xml:space="preserve">WiMAX is no longer supported.</doc-deprecated>
        <type name="WimaxNsp"/>
      </property>
      <property name="bsid"
                deprecated="1"
                deprecated-version="1.2"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-device-wimax.c"
             line="635">The ID of the serving base station as received from the network.  Has
no meaning when the device is not connected.</doc>
        <doc-deprecated xml:space="preserve">WiMAX is no longer supported.</doc-deprecated>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="center-frequency"
                deprecated="1"
                deprecated-version="1.2"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-device-wimax.c"
             line="570">The center frequency (in KHz) of the radio channel the device is using to
communicate with the network when connected.  Has no meaning when the
device is not connected.</doc>
        <doc-deprecated xml:space="preserve">WiMAX is no longer supported.</doc-deprecated>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="cinr"
                deprecated="1"
                deprecated-version="1.2"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-device-wimax.c"
             line="603">CINR (Carrier to Interference + Noise Ratio) of the current radio link
in dB.  CINR is a more accurate measure of radio link quality.  Has no
meaning when the device is not connected.</doc>
        <doc-deprecated xml:space="preserve">WiMAX is no longer supported.</doc-deprecated>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="hw-address"
                deprecated="1"
                deprecated-version="1.2"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-device-wimax.c"
             line="542">The hardware (MAC) address of the device.</doc>
        <doc-deprecated xml:space="preserve">WiMAX is no longer supported.</doc-deprecated>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="nsps" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-device-wimax.c"
             line="650">List of all WiMAX Network Service Providers the device can see.</doc>
        <array name="GLib.PtrArray">
          <type name="WimaxNsp"/>
        </array>
      </property>
      <property name="rssi"
                deprecated="1"
                deprecated-version="1.2"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-device-wimax.c"
             line="586">RSSI of the current radio link in dBm.  This value indicates how strong
the raw received RF signal from the base station is, but does not
indicate the overall quality of the radio link.  Has no meaning when the
device is not connected.</doc>
        <doc-deprecated xml:space="preserve">WiMAX is no longer supported.</doc-deprecated>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="tx-power"
                deprecated="1"
                deprecated-version="1.2"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-device-wimax.c"
             line="619">Average power of the last burst transmitted by the device, in units of
0.5 dBm.  i.e. a TxPower of -11 represents an actual device TX power of
-5.5 dBm.  Has no meaning when the device is not connected.</doc>
        <doc-deprecated xml:space="preserve">WiMAX is no longer supported.</doc-deprecated>
        <type name="gint" c:type="gint"/>
      </property>
      <field name="parent">
        <type name="Device" c:type="NMDevice"/>
      </field>
      <glib:signal name="nsp-added"
                   when="first"
                   deprecated="1"
                   deprecated-version="1.2">
        <doc xml:space="preserve"
             filename="libnm/nm-device-wimax.c"
             line="664">Notifies that a #NMWimaxNsp is added to the wimax device.</doc>
        <doc-deprecated xml:space="preserve">WiMAX is no longer supported.</doc-deprecated>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="nsp" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device-wimax.c"
                 line="667">the new NSP</doc>
            <type name="GObject.Object"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="nsp-removed"
                   when="first"
                   deprecated="1"
                   deprecated-version="1.2">
        <doc xml:space="preserve"
             filename="libnm/nm-device-wimax.c"
             line="683">Notifies that a #NMWimaxNsp is removed from the wimax device.</doc>
        <doc-deprecated xml:space="preserve">WiMAX is no longer supported.</doc-deprecated>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="nsp" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device-wimax.c"
                 line="686">the removed NSP</doc>
            <type name="GObject.Object"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="DeviceWimaxClass"
            c:type="NMDeviceWimaxClass"
            glib:is-gtype-struct-for="DeviceWimax">
      <source-position filename="libnm/nm-device-wimax.h" line="65"/>
      <field name="parent">
        <type name="DeviceClass" c:type="NMDeviceClass"/>
      </field>
      <field name="nsp_added">
        <callback name="nsp_added">
          <source-position filename="libnm/nm-device-wimax.h" line="60"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="DeviceWimax" c:type="NMDeviceWimax*"/>
            </parameter>
            <parameter name="nsp" transfer-ownership="none">
              <type name="WimaxNsp" c:type="NMWimaxNsp*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="nsp_removed">
        <callback name="nsp_removed">
          <source-position filename="libnm/nm-device-wimax.h" line="61"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="DeviceWimax" c:type="NMDeviceWimax*"/>
            </parameter>
            <parameter name="nsp" transfer-ownership="none">
              <type name="WimaxNsp" c:type="NMWimaxNsp*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="padding" readable="0" private="1">
        <array zero-terminated="0" fixed-size="4">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <class name="DeviceWireGuard"
           c:symbol-prefix="device_wireguard"
           c:type="NMDeviceWireGuard"
           parent="Device"
           glib:type-name="NMDeviceWireGuard"
           glib:get-type="nm_device_wireguard_get_type"
           glib:type-struct="DeviceWireGuardClass">
      <source-position filename="libnm/nm-device-wireguard.h" line="38"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.Initable"/>
      <method name="get_fwmark"
              c:identifier="nm_device_wireguard_get_fwmark"
              version="1.14">
        <doc xml:space="preserve"
             filename="libnm/nm-device-wireguard.c"
             line="88">Gets the fwmark (firewall mark) for this interface.
It can be used to set routing policy for outgoing encrypted packets.
See: ip-rule(8)</doc>
        <source-position filename="libnm/nm-device-wireguard.h" line="52"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-device-wireguard.c"
               line="96">0 if fwmark not in use, 32-bit fwmark value otherwise</doc>
          <type name="guint32" c:type="guint32"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device-wireguard.c"
                 line="90">a #NMDeviceWireGuard</doc>
            <type name="DeviceWireGuard" c:type="NMDeviceWireGuard*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_listen_port"
              c:identifier="nm_device_wireguard_get_listen_port"
              version="1.14">
        <doc xml:space="preserve"
             filename="libnm/nm-device-wireguard.c"
             line="70">Gets the local UDP port this interface listens on</doc>
        <source-position filename="libnm/nm-device-wireguard.h" line="50"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-device-wireguard.c"
               line="76">UDP listen port</doc>
          <type name="guint16" c:type="guint16"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device-wireguard.c"
                 line="72">a #NMDeviceWireGuard</doc>
            <type name="DeviceWireGuard" c:type="NMDeviceWireGuard*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_public_key"
              c:identifier="nm_device_wireguard_get_public_key"
              version="1.14">
        <doc xml:space="preserve"
             filename="libnm/nm-device-wireguard.c"
             line="52">Gets the public key for this interface</doc>
        <source-position filename="libnm/nm-device-wireguard.h" line="48"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-device-wireguard.c"
               line="58">the #GBytes containing the 32-byte public key</doc>
          <type name="GLib.Bytes" c:type="GBytes*"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device-wireguard.c"
                 line="54">a #NMDeviceWireGuard</doc>
            <type name="DeviceWireGuard" c:type="NMDeviceWireGuard*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="fwmark" version="1.14" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-device-wireguard.c"
             line="205">Optional firewall mark - see ip-rule(8).
Used when setting routing policy for outgoing encrypted packets.
Set to 0 to disable the mark (default).</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="listen-port" version="1.14" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-device-wireguard.c"
             line="192">Local UDP listen port.
Set to 0 to allow a random port to be chosen (default).</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="public-key" version="1.14" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-device-wireguard.c"
             line="180">32-byte public key, derived from the current private key.</doc>
        <type name="GLib.Bytes"/>
      </property>
    </class>
    <record name="DeviceWireGuardClass"
            c:type="NMDeviceWireGuardClass"
            disguised="1"
            glib:is-gtype-struct-for="DeviceWireGuard">
      <source-position filename="libnm/nm-device-wireguard.h" line="38"/>
    </record>
    <class name="DeviceWpan"
           c:symbol-prefix="device_wpan"
           c:type="NMDeviceWpan"
           parent="Device"
           glib:type-name="NMDeviceWpan"
           glib:get-type="nm_device_wpan_get_type">
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.Initable"/>
      <method name="get_hw_address"
              c:identifier="nm_device_wpan_get_hw_address">
        <doc xml:space="preserve"
             filename="libnm/nm-device-wpan.c"
             line="56">Gets the active hardware (MAC) address of the #NMDeviceWpan</doc>
        <source-position filename="libnm/nm-device-wpan.h" line="44"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-device-wpan.c"
               line="62">the active hardware address. This is the internal string used by the
device, and must not be modified.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device-wpan.c"
                 line="58">a #NMDeviceWpan</doc>
            <type name="DeviceWpan" c:type="NMDeviceWpan*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="hw-address" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-device-wpan.c"
             line="167">The active hardware (MAC) address of the device.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
    </class>
    <class name="DhcpConfig"
           c:symbol-prefix="dhcp_config"
           c:type="NMDhcpConfig"
           parent="Object"
           abstract="1"
           glib:type-name="NMDhcpConfig"
           glib:get-type="nm_dhcp_config_get_type"
           glib:type-struct="DhcpConfigClass">
      <source-position filename="libnm/nm-dhcp-config.h" line="51"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.Initable"/>
      <method name="get_family" c:identifier="nm_dhcp_config_get_family">
        <doc xml:space="preserve"
             filename="libnm/nm-dhcp-config.c"
             line="168">Gets the IP address family of the configuration</doc>
        <source-position filename="libnm/nm-dhcp-config.h" line="58"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-dhcp-config.c"
               line="174">the IP address family; either &lt;literal&gt;AF_INET&lt;/literal&gt; or
  &lt;literal&gt;AF_INET6&lt;/literal&gt;</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-dhcp-config.c"
                 line="170">a #NMDhcpConfig</doc>
            <type name="DhcpConfig" c:type="NMDhcpConfig*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_one_option"
              c:identifier="nm_dhcp_config_get_one_option">
        <doc xml:space="preserve"
             filename="libnm/nm-dhcp-config.c"
             line="203">Gets one option by option name.</doc>
        <source-position filename="libnm/nm-dhcp-config.h" line="61"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-dhcp-config.c"
               line="210">the configuration option's value. This is the internal string used by the
configuration, and must not be modified.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-dhcp-config.c"
                 line="205">a #NMDhcpConfig</doc>
            <type name="DhcpConfig" c:type="NMDhcpConfig*"/>
          </instance-parameter>
          <parameter name="option" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-dhcp-config.c"
                 line="206">the option to retrieve</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_options" c:identifier="nm_dhcp_config_get_options">
        <doc xml:space="preserve"
             filename="libnm/nm-dhcp-config.c"
             line="185">Gets all the options contained in the configuration.</doc>
        <source-position filename="libnm/nm-dhcp-config.h" line="60"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-dhcp-config.c"
               line="191">the #GHashTable containing
strings for keys and values.  This is the internal copy used by the
configuration, and must not be modified.</doc>
          <type name="GLib.HashTable" c:type="GHashTable*">
            <type name="utf8"/>
            <type name="utf8"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-dhcp-config.c"
                 line="187">a #NMDhcpConfig</doc>
            <type name="DhcpConfig" c:type="NMDhcpConfig*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="family" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-dhcp-config.c"
             line="142">The IP address family of the configuration; either
&lt;literal&gt;AF_INET&lt;/literal&gt; or &lt;literal&gt;AF_INET6&lt;/literal&gt;.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="options" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-dhcp-config.c"
             line="155">The #GHashTable containing options of the configuration.</doc>
        <type name="GLib.HashTable">
          <type name="utf8"/>
          <type name="utf8"/>
        </type>
      </property>
      <field name="parent">
        <type name="Object" c:type="NMObject"/>
      </field>
    </class>
    <record name="DhcpConfigClass"
            c:type="NMDhcpConfigClass"
            glib:is-gtype-struct-for="DhcpConfig">
      <source-position filename="libnm/nm-dhcp-config.h" line="51"/>
      <field name="parent">
        <type name="ObjectClass" c:type="NMObjectClass"/>
      </field>
      <field name="padding" readable="0" private="1">
        <array zero-terminated="0" fixed-size="8">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <record name="DnsEntry"
            c:type="NMDnsEntry"
            glib:type-name="NMDnsEntry"
            glib:get-type="nm_dns_entry_get_type"
            c:symbol-prefix="dns_entry">
      <source-position filename="libnm/nm-client.h" line="184"/>
      <method name="get_domains"
              c:identifier="nm_dns_entry_get_domains"
              version="1.6">
        <doc xml:space="preserve"
             filename="libnm/nm-dns-manager.c"
             line="199">Gets the list of DNS domains.</doc>
        <source-position filename="libnm/nm-client.h" line="195"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-dns-manager.c"
               line="205">the list of DNS domains</doc>
          <array c:type="const char* const*">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="entry" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-dns-manager.c"
                 line="201">the #NMDnsEntry</doc>
            <type name="DnsEntry" c:type="NMDnsEntry*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_interface"
              c:identifier="nm_dns_entry_get_interface"
              version="1.6">
        <doc xml:space="preserve"
             filename="libnm/nm-dns-manager.c"
             line="161">Gets the interface on which name servers are contacted.</doc>
        <source-position filename="libnm/nm-client.h" line="191"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-dns-manager.c"
               line="167">the interface name</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="entry" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-dns-manager.c"
                 line="163">the #NMDnsEntry</doc>
            <type name="DnsEntry" c:type="NMDnsEntry*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_nameservers"
              c:identifier="nm_dns_entry_get_nameservers"
              version="1.6">
        <doc xml:space="preserve"
             filename="libnm/nm-dns-manager.c"
             line="180">Gets the list of name servers for this entry.</doc>
        <source-position filename="libnm/nm-client.h" line="193"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-dns-manager.c"
               line="186">the list of name servers</doc>
          <array c:type="const char* const*">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="entry" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-dns-manager.c"
                 line="182">the #NMDnsEntry</doc>
            <type name="DnsEntry" c:type="NMDnsEntry*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_priority"
              c:identifier="nm_dns_entry_get_priority"
              version="1.6">
        <doc xml:space="preserve"
             filename="libnm/nm-dns-manager.c"
             line="237">Gets the priority of the entry</doc>
        <source-position filename="libnm/nm-client.h" line="197"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-dns-manager.c"
               line="243">the priority of the entry</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="entry" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-dns-manager.c"
                 line="239">the #NMDnsEntry</doc>
            <type name="DnsEntry" c:type="NMDnsEntry*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_vpn" c:identifier="nm_dns_entry_get_vpn" version="1.6">
        <doc xml:space="preserve"
             filename="libnm/nm-dns-manager.c"
             line="218">Gets whether the entry refers to VPN name servers.</doc>
        <source-position filename="libnm/nm-client.h" line="199"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-dns-manager.c"
               line="224">%TRUE if the entry refers to VPN name servers</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="entry" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-dns-manager.c"
                 line="220">the #NMDnsEntry</doc>
            <type name="DnsEntry" c:type="NMDnsEntry*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="unref" c:identifier="nm_dns_entry_unref" version="1.6">
        <doc xml:space="preserve"
             filename="libnm/nm-dns-manager.c"
             line="137">Decreases the reference count of the object.  If the reference count
reaches zero, the object will be destroyed.</doc>
        <source-position filename="libnm/nm-client.h" line="189"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="entry" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-dns-manager.c"
                 line="139">the #NMDnsEntry</doc>
            <type name="DnsEntry" c:type="NMDnsEntry*"/>
          </instance-parameter>
        </parameters>
      </method>
    </record>
    <constant name="ETHTOOL_OPTNAME_FEATURE_ESP_HW_OFFLOAD"
              value="feature-esp-hw-offload"
              c:type="NM_ETHTOOL_OPTNAME_FEATURE_ESP_HW_OFFLOAD">
      <source-position filename="libnm-core/nm-setting-ethtool.h" line="34"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="ETHTOOL_OPTNAME_FEATURE_ESP_TX_CSUM_HW_OFFLOAD"
              value="feature-esp-tx-csum-hw-offload"
              c:type="NM_ETHTOOL_OPTNAME_FEATURE_ESP_TX_CSUM_HW_OFFLOAD">
      <source-position filename="libnm-core/nm-setting-ethtool.h" line="35"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="ETHTOOL_OPTNAME_FEATURE_FCOE_MTU"
              value="feature-fcoe-mtu"
              c:type="NM_ETHTOOL_OPTNAME_FEATURE_FCOE_MTU">
      <source-position filename="libnm-core/nm-setting-ethtool.h" line="36"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="ETHTOOL_OPTNAME_FEATURE_GRO"
              value="feature-gro"
              c:type="NM_ETHTOOL_OPTNAME_FEATURE_GRO">
      <source-position filename="libnm-core/nm-setting-ethtool.h" line="37"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="ETHTOOL_OPTNAME_FEATURE_GSO"
              value="feature-gso"
              c:type="NM_ETHTOOL_OPTNAME_FEATURE_GSO">
      <source-position filename="libnm-core/nm-setting-ethtool.h" line="38"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="ETHTOOL_OPTNAME_FEATURE_HIGHDMA"
              value="feature-highdma"
              c:type="NM_ETHTOOL_OPTNAME_FEATURE_HIGHDMA">
      <source-position filename="libnm-core/nm-setting-ethtool.h" line="39"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="ETHTOOL_OPTNAME_FEATURE_HW_TC_OFFLOAD"
              value="feature-hw-tc-offload"
              c:type="NM_ETHTOOL_OPTNAME_FEATURE_HW_TC_OFFLOAD">
      <source-position filename="libnm-core/nm-setting-ethtool.h" line="40"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="ETHTOOL_OPTNAME_FEATURE_L2_FWD_OFFLOAD"
              value="feature-l2-fwd-offload"
              c:type="NM_ETHTOOL_OPTNAME_FEATURE_L2_FWD_OFFLOAD">
      <source-position filename="libnm-core/nm-setting-ethtool.h" line="41"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="ETHTOOL_OPTNAME_FEATURE_LOOPBACK"
              value="feature-loopback"
              c:type="NM_ETHTOOL_OPTNAME_FEATURE_LOOPBACK">
      <source-position filename="libnm-core/nm-setting-ethtool.h" line="42"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="ETHTOOL_OPTNAME_FEATURE_LRO"
              value="feature-lro"
              c:type="NM_ETHTOOL_OPTNAME_FEATURE_LRO">
      <source-position filename="libnm-core/nm-setting-ethtool.h" line="43"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="ETHTOOL_OPTNAME_FEATURE_NTUPLE"
              value="feature-ntuple"
              c:type="NM_ETHTOOL_OPTNAME_FEATURE_NTUPLE">
      <source-position filename="libnm-core/nm-setting-ethtool.h" line="44"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="ETHTOOL_OPTNAME_FEATURE_RX"
              value="feature-rx"
              c:type="NM_ETHTOOL_OPTNAME_FEATURE_RX">
      <source-position filename="libnm-core/nm-setting-ethtool.h" line="45"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="ETHTOOL_OPTNAME_FEATURE_RXHASH"
              value="feature-rxhash"
              c:type="NM_ETHTOOL_OPTNAME_FEATURE_RXHASH">
      <source-position filename="libnm-core/nm-setting-ethtool.h" line="46"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="ETHTOOL_OPTNAME_FEATURE_RXVLAN"
              value="feature-rxvlan"
              c:type="NM_ETHTOOL_OPTNAME_FEATURE_RXVLAN">
      <source-position filename="libnm-core/nm-setting-ethtool.h" line="47"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="ETHTOOL_OPTNAME_FEATURE_RX_ALL"
              value="feature-rx-all"
              c:type="NM_ETHTOOL_OPTNAME_FEATURE_RX_ALL">
      <source-position filename="libnm-core/nm-setting-ethtool.h" line="48"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="ETHTOOL_OPTNAME_FEATURE_RX_FCS"
              value="feature-rx-fcs"
              c:type="NM_ETHTOOL_OPTNAME_FEATURE_RX_FCS">
      <source-position filename="libnm-core/nm-setting-ethtool.h" line="49"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="ETHTOOL_OPTNAME_FEATURE_RX_GRO_HW"
              value="feature-rx-gro-hw"
              c:type="NM_ETHTOOL_OPTNAME_FEATURE_RX_GRO_HW">
      <source-position filename="libnm-core/nm-setting-ethtool.h" line="50"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="ETHTOOL_OPTNAME_FEATURE_RX_UDP_TUNNEL_PORT_OFFLOAD"
              value="feature-rx-udp_tunnel-port-offload"
              c:type="NM_ETHTOOL_OPTNAME_FEATURE_RX_UDP_TUNNEL_PORT_OFFLOAD">
      <source-position filename="libnm-core/nm-setting-ethtool.h" line="51"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="ETHTOOL_OPTNAME_FEATURE_RX_VLAN_FILTER"
              value="feature-rx-vlan-filter"
              c:type="NM_ETHTOOL_OPTNAME_FEATURE_RX_VLAN_FILTER">
      <source-position filename="libnm-core/nm-setting-ethtool.h" line="52"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="ETHTOOL_OPTNAME_FEATURE_RX_VLAN_STAG_FILTER"
              value="feature-rx-vlan-stag-filter"
              c:type="NM_ETHTOOL_OPTNAME_FEATURE_RX_VLAN_STAG_FILTER">
      <source-position filename="libnm-core/nm-setting-ethtool.h" line="53"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="ETHTOOL_OPTNAME_FEATURE_RX_VLAN_STAG_HW_PARSE"
              value="feature-rx-vlan-stag-hw-parse"
              c:type="NM_ETHTOOL_OPTNAME_FEATURE_RX_VLAN_STAG_HW_PARSE">
      <source-position filename="libnm-core/nm-setting-ethtool.h" line="54"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="ETHTOOL_OPTNAME_FEATURE_SG"
              value="feature-sg"
              c:type="NM_ETHTOOL_OPTNAME_FEATURE_SG">
      <source-position filename="libnm-core/nm-setting-ethtool.h" line="55"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="ETHTOOL_OPTNAME_FEATURE_TLS_HW_RECORD"
              value="feature-tls-hw-record"
              c:type="NM_ETHTOOL_OPTNAME_FEATURE_TLS_HW_RECORD">
      <source-position filename="libnm-core/nm-setting-ethtool.h" line="56"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="ETHTOOL_OPTNAME_FEATURE_TLS_HW_TX_OFFLOAD"
              value="feature-tls-hw-tx-offload"
              c:type="NM_ETHTOOL_OPTNAME_FEATURE_TLS_HW_TX_OFFLOAD">
      <source-position filename="libnm-core/nm-setting-ethtool.h" line="57"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="ETHTOOL_OPTNAME_FEATURE_TSO"
              value="feature-tso"
              c:type="NM_ETHTOOL_OPTNAME_FEATURE_TSO">
      <source-position filename="libnm-core/nm-setting-ethtool.h" line="58"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="ETHTOOL_OPTNAME_FEATURE_TX"
              value="feature-tx"
              c:type="NM_ETHTOOL_OPTNAME_FEATURE_TX">
      <source-position filename="libnm-core/nm-setting-ethtool.h" line="59"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="ETHTOOL_OPTNAME_FEATURE_TXVLAN"
              value="feature-txvlan"
              c:type="NM_ETHTOOL_OPTNAME_FEATURE_TXVLAN">
      <source-position filename="libnm-core/nm-setting-ethtool.h" line="60"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="ETHTOOL_OPTNAME_FEATURE_TX_CHECKSUM_FCOE_CRC"
              value="feature-tx-checksum-fcoe-crc"
              c:type="NM_ETHTOOL_OPTNAME_FEATURE_TX_CHECKSUM_FCOE_CRC">
      <source-position filename="libnm-core/nm-setting-ethtool.h" line="61"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="ETHTOOL_OPTNAME_FEATURE_TX_CHECKSUM_IPV4"
              value="feature-tx-checksum-ipv4"
              c:type="NM_ETHTOOL_OPTNAME_FEATURE_TX_CHECKSUM_IPV4">
      <source-position filename="libnm-core/nm-setting-ethtool.h" line="62"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="ETHTOOL_OPTNAME_FEATURE_TX_CHECKSUM_IPV6"
              value="feature-tx-checksum-ipv6"
              c:type="NM_ETHTOOL_OPTNAME_FEATURE_TX_CHECKSUM_IPV6">
      <source-position filename="libnm-core/nm-setting-ethtool.h" line="63"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="ETHTOOL_OPTNAME_FEATURE_TX_CHECKSUM_IP_GENERIC"
              value="feature-tx-checksum-ip-generic"
              c:type="NM_ETHTOOL_OPTNAME_FEATURE_TX_CHECKSUM_IP_GENERIC">
      <source-position filename="libnm-core/nm-setting-ethtool.h" line="64"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="ETHTOOL_OPTNAME_FEATURE_TX_CHECKSUM_SCTP"
              value="feature-tx-checksum-sctp"
              c:type="NM_ETHTOOL_OPTNAME_FEATURE_TX_CHECKSUM_SCTP">
      <source-position filename="libnm-core/nm-setting-ethtool.h" line="65"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="ETHTOOL_OPTNAME_FEATURE_TX_ESP_SEGMENTATION"
              value="feature-tx-esp-segmentation"
              c:type="NM_ETHTOOL_OPTNAME_FEATURE_TX_ESP_SEGMENTATION">
      <source-position filename="libnm-core/nm-setting-ethtool.h" line="66"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="ETHTOOL_OPTNAME_FEATURE_TX_FCOE_SEGMENTATION"
              value="feature-tx-fcoe-segmentation"
              c:type="NM_ETHTOOL_OPTNAME_FEATURE_TX_FCOE_SEGMENTATION">
      <source-position filename="libnm-core/nm-setting-ethtool.h" line="67"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="ETHTOOL_OPTNAME_FEATURE_TX_GRE_CSUM_SEGMENTATION"
              value="feature-tx-gre-csum-segmentation"
              c:type="NM_ETHTOOL_OPTNAME_FEATURE_TX_GRE_CSUM_SEGMENTATION">
      <source-position filename="libnm-core/nm-setting-ethtool.h" line="68"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="ETHTOOL_OPTNAME_FEATURE_TX_GRE_SEGMENTATION"
              value="feature-tx-gre-segmentation"
              c:type="NM_ETHTOOL_OPTNAME_FEATURE_TX_GRE_SEGMENTATION">
      <source-position filename="libnm-core/nm-setting-ethtool.h" line="69"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="ETHTOOL_OPTNAME_FEATURE_TX_GSO_PARTIAL"
              value="feature-tx-gso-partial"
              c:type="NM_ETHTOOL_OPTNAME_FEATURE_TX_GSO_PARTIAL">
      <source-position filename="libnm-core/nm-setting-ethtool.h" line="70"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="ETHTOOL_OPTNAME_FEATURE_TX_GSO_ROBUST"
              value="feature-tx-gso-robust"
              c:type="NM_ETHTOOL_OPTNAME_FEATURE_TX_GSO_ROBUST">
      <source-position filename="libnm-core/nm-setting-ethtool.h" line="71"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="ETHTOOL_OPTNAME_FEATURE_TX_IPXIP4_SEGMENTATION"
              value="feature-tx-ipxip4-segmentation"
              c:type="NM_ETHTOOL_OPTNAME_FEATURE_TX_IPXIP4_SEGMENTATION">
      <source-position filename="libnm-core/nm-setting-ethtool.h" line="72"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="ETHTOOL_OPTNAME_FEATURE_TX_IPXIP6_SEGMENTATION"
              value="feature-tx-ipxip6-segmentation"
              c:type="NM_ETHTOOL_OPTNAME_FEATURE_TX_IPXIP6_SEGMENTATION">
      <source-position filename="libnm-core/nm-setting-ethtool.h" line="73"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="ETHTOOL_OPTNAME_FEATURE_TX_NOCACHE_COPY"
              value="feature-tx-nocache-copy"
              c:type="NM_ETHTOOL_OPTNAME_FEATURE_TX_NOCACHE_COPY">
      <source-position filename="libnm-core/nm-setting-ethtool.h" line="74"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="ETHTOOL_OPTNAME_FEATURE_TX_SCATTER_GATHER"
              value="feature-tx-scatter-gather"
              c:type="NM_ETHTOOL_OPTNAME_FEATURE_TX_SCATTER_GATHER">
      <source-position filename="libnm-core/nm-setting-ethtool.h" line="75"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="ETHTOOL_OPTNAME_FEATURE_TX_SCATTER_GATHER_FRAGLIST"
              value="feature-tx-scatter-gather-fraglist"
              c:type="NM_ETHTOOL_OPTNAME_FEATURE_TX_SCATTER_GATHER_FRAGLIST">
      <source-position filename="libnm-core/nm-setting-ethtool.h" line="76"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="ETHTOOL_OPTNAME_FEATURE_TX_SCTP_SEGMENTATION"
              value="feature-tx-sctp-segmentation"
              c:type="NM_ETHTOOL_OPTNAME_FEATURE_TX_SCTP_SEGMENTATION">
      <source-position filename="libnm-core/nm-setting-ethtool.h" line="77"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="ETHTOOL_OPTNAME_FEATURE_TX_TCP6_SEGMENTATION"
              value="feature-tx-tcp6-segmentation"
              c:type="NM_ETHTOOL_OPTNAME_FEATURE_TX_TCP6_SEGMENTATION">
      <source-position filename="libnm-core/nm-setting-ethtool.h" line="78"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="ETHTOOL_OPTNAME_FEATURE_TX_TCP_ECN_SEGMENTATION"
              value="feature-tx-tcp-ecn-segmentation"
              c:type="NM_ETHTOOL_OPTNAME_FEATURE_TX_TCP_ECN_SEGMENTATION">
      <source-position filename="libnm-core/nm-setting-ethtool.h" line="79"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="ETHTOOL_OPTNAME_FEATURE_TX_TCP_MANGLEID_SEGMENTATION"
              value="feature-tx-tcp-mangleid-segmentation"
              c:type="NM_ETHTOOL_OPTNAME_FEATURE_TX_TCP_MANGLEID_SEGMENTATION">
      <source-position filename="libnm-core/nm-setting-ethtool.h" line="80"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="ETHTOOL_OPTNAME_FEATURE_TX_TCP_SEGMENTATION"
              value="feature-tx-tcp-segmentation"
              c:type="NM_ETHTOOL_OPTNAME_FEATURE_TX_TCP_SEGMENTATION">
      <source-position filename="libnm-core/nm-setting-ethtool.h" line="81"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="ETHTOOL_OPTNAME_FEATURE_TX_UDP_SEGMENTATION"
              value="feature-tx-udp-segmentation"
              c:type="NM_ETHTOOL_OPTNAME_FEATURE_TX_UDP_SEGMENTATION">
      <source-position filename="libnm-core/nm-setting-ethtool.h" line="82"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="ETHTOOL_OPTNAME_FEATURE_TX_UDP_TNL_CSUM_SEGMENTATION"
              value="feature-tx-udp_tnl-csum-segmentation"
              c:type="NM_ETHTOOL_OPTNAME_FEATURE_TX_UDP_TNL_CSUM_SEGMENTATION">
      <source-position filename="libnm-core/nm-setting-ethtool.h" line="83"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="ETHTOOL_OPTNAME_FEATURE_TX_UDP_TNL_SEGMENTATION"
              value="feature-tx-udp_tnl-segmentation"
              c:type="NM_ETHTOOL_OPTNAME_FEATURE_TX_UDP_TNL_SEGMENTATION">
      <source-position filename="libnm-core/nm-setting-ethtool.h" line="84"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="ETHTOOL_OPTNAME_FEATURE_TX_VLAN_STAG_HW_INSERT"
              value="feature-tx-vlan-stag-hw-insert"
              c:type="NM_ETHTOOL_OPTNAME_FEATURE_TX_VLAN_STAG_HW_INSERT">
      <source-position filename="libnm-core/nm-setting-ethtool.h" line="85"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <record name="IPAddress"
            c:type="NMIPAddress"
            glib:type-name="NMIPAddress"
            glib:get-type="nm_ip_address_get_type"
            c:symbol-prefix="ip_address">
      <source-position filename="libnm-core/nm-setting-ip-config.h" line="37"/>
      <constructor name="new" c:identifier="nm_ip_address_new" throws="1">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-ip-config.c"
             line="193">Creates a new #NMIPAddress object.</doc>
        <source-position filename="libnm-core/nm-setting-ip-config.h"
                         line="41"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-ip-config.c"
               line="203">the new #NMIPAddress object, or %NULL on error</doc>
          <type name="IPAddress" c:type="NMIPAddress*"/>
        </return-value>
        <parameters>
          <parameter name="family" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ip-config.c"
                 line="195">the IP address family (&lt;literal&gt;AF_INET&lt;/literal&gt; or
  &lt;literal&gt;AF_INET6&lt;/literal&gt;)</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="addr" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ip-config.c"
                 line="197">the IP address</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="prefix" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ip-config.c"
                 line="198">the address prefix length</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_binary"
                   c:identifier="nm_ip_address_new_binary"
                   throws="1">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-ip-config.c"
             line="230">Creates a new #NMIPAddress object. @addr must point to a buffer of the
correct size for @family.</doc>
        <source-position filename="libnm-core/nm-setting-ip-config.h"
                         line="45"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-ip-config.c"
               line="241">the new #NMIPAddress object, or %NULL on error</doc>
          <type name="IPAddress" c:type="NMIPAddress*"/>
        </return-value>
        <parameters>
          <parameter name="family" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ip-config.c"
                 line="232">the IP address family (&lt;literal&gt;AF_INET&lt;/literal&gt; or
  &lt;literal&gt;AF_INET6&lt;/literal&gt;)</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="addr"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ip-config.c"
                 line="234">the IP address</doc>
            <type name="gpointer" c:type="gconstpointer"/>
          </parameter>
          <parameter name="prefix" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ip-config.c"
                 line="235">the address prefix length</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="dup" c:identifier="nm_ip_address_dup">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-ip-config.c"
             line="366">Creates a copy of @address</doc>
        <source-position filename="libnm-core/nm-setting-ip-config.h"
                         line="54"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-ip-config.c"
               line="372">a copy of @address</doc>
          <type name="IPAddress" c:type="NMIPAddress*"/>
        </return-value>
        <parameters>
          <instance-parameter name="address" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ip-config.c"
                 line="368">the #NMIPAddress</doc>
            <type name="IPAddress" c:type="NMIPAddress*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="equal" c:identifier="nm_ip_address_equal">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-ip-config.c"
             line="350">Determines if two #NMIPAddress objects contain the same address and prefix
(attributes are not compared).</doc>
        <source-position filename="libnm-core/nm-setting-ip-config.h"
                         line="52"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-ip-config.c"
               line="358">%TRUE if the objects contain the same values, %FALSE if they do not.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="address" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ip-config.c"
                 line="352">the #NMIPAddress</doc>
            <type name="IPAddress" c:type="NMIPAddress*"/>
          </instance-parameter>
          <parameter name="other" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ip-config.c"
                 line="353">the #NMIPAddress to compare @address to.</doc>
            <type name="IPAddress" c:type="NMIPAddress*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_address" c:identifier="nm_ip_address_get_address">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-ip-config.c"
             line="416">Gets the IP address property of this address object.</doc>
        <source-position filename="libnm-core/nm-setting-ip-config.h"
                         line="57"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-ip-config.c"
               line="422">the IP address</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="address" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ip-config.c"
                 line="418">the #NMIPAddress</doc>
            <type name="IPAddress" c:type="NMIPAddress*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_address_binary"
              c:identifier="nm_ip_address_get_address_binary"
              introspectable="0">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-ip-config.c"
             line="455">Gets the IP address property of this address object.

@addr must point to a buffer that is the correct size for @address's family.</doc>
        <source-position filename="libnm-core/nm-setting-ip-config.h"
                         line="60"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="address" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ip-config.c"
                 line="457">the #NMIPAddress</doc>
            <type name="IPAddress" c:type="NMIPAddress*"/>
          </instance-parameter>
          <parameter name="addr"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ip-config.c"
                 line="458">a buffer in which to store the address in binary format.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_attribute" c:identifier="nm_ip_address_get_attribute">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-ip-config.c"
             line="558">Gets the value of the attribute with name @name on @address</doc>
        <source-position filename="libnm-core/nm-setting-ip-config.h"
                         line="69"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-ip-config.c"
               line="565">the value of the attribute with name @name on
  @address, or %NULL if @address has no such attribute.</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="address" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ip-config.c"
                 line="560">the #NMIPAddress</doc>
            <type name="IPAddress" c:type="NMIPAddress*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ip-config.c"
                 line="561">the name of an address attribute</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_attribute_names"
              c:identifier="nm_ip_address_get_attribute_names">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-ip-config.c"
             line="539">Gets an array of attribute names defined on @address.</doc>
        <source-position filename="libnm-core/nm-setting-ip-config.h"
                         line="68"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-ip-config.c"
               line="545">a %NULL-terminated array of attribute names,</doc>
          <array c:type="char**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="address" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ip-config.c"
                 line="541">the #NMIPAddress</doc>
            <type name="IPAddress" c:type="NMIPAddress*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_family" c:identifier="nm_ip_address_get_family">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-ip-config.c"
             line="398">Gets the IP address family (eg, AF_INET) property of this address
object.</doc>
        <source-position filename="libnm-core/nm-setting-ip-config.h"
                         line="56"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-ip-config.c"
               line="405">the IP address family</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="address" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ip-config.c"
                 line="400">the #NMIPAddress</doc>
            <type name="IPAddress" c:type="NMIPAddress*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_prefix" c:identifier="nm_ip_address_get_prefix">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-ip-config.c"
             line="496">Gets the IP address prefix (ie "24" or "30" etc) property of this address
object.</doc>
        <source-position filename="libnm-core/nm-setting-ip-config.h"
                         line="64"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-ip-config.c"
               line="503">the IP address prefix</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="address" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ip-config.c"
                 line="498">the #NMIPAddress</doc>
            <type name="IPAddress" c:type="NMIPAddress*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="ref" c:identifier="nm_ip_address_ref">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-ip-config.c"
             line="267">Increases the reference count of the object.</doc>
        <source-position filename="libnm-core/nm-setting-ip-config.h"
                         line="50"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="address" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ip-config.c"
                 line="269">the #NMIPAddress</doc>
            <type name="IPAddress" c:type="NMIPAddress*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_address" c:identifier="nm_ip_address_set_address">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-ip-config.c"
             line="433">Sets the IP address property of this address object.

@addr must be a valid address of @address's family. If you aren't sure you
have a valid address, use nm_utils_ipaddr_valid() to check it.</doc>
        <source-position filename="libnm-core/nm-setting-ip-config.h"
                         line="58"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="address" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ip-config.c"
                 line="435">the #NMIPAddress</doc>
            <type name="IPAddress" c:type="NMIPAddress*"/>
          </instance-parameter>
          <parameter name="addr" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ip-config.c"
                 line="436">the IP address, as a string</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_address_binary"
              c:identifier="nm_ip_address_set_address_binary"
              introspectable="0">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-ip-config.c"
             line="474">Sets the IP address property of this address object.

@addr must point to a buffer that is the correct size for @address's family.</doc>
        <source-position filename="libnm-core/nm-setting-ip-config.h"
                         line="62"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="address" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ip-config.c"
                 line="476">the #NMIPAddress</doc>
            <type name="IPAddress" c:type="NMIPAddress*"/>
          </instance-parameter>
          <parameter name="addr"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ip-config.c"
                 line="477">the address, in binary format</doc>
            <type name="gpointer" c:type="gconstpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_attribute" c:identifier="nm_ip_address_set_attribute">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-ip-config.c"
             line="580">Sets or clears the named attribute on @address to the given value.</doc>
        <source-position filename="libnm-core/nm-setting-ip-config.h"
                         line="71"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="address" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ip-config.c"
                 line="582">the #NMIPAddress</doc>
            <type name="IPAddress" c:type="NMIPAddress*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ip-config.c"
                 line="583">the name of an address attribute</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="value"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ip-config.c"
                 line="584">the value</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_prefix" c:identifier="nm_ip_address_set_prefix">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-ip-config.c"
             line="514">Sets the IP address prefix property of this address object.</doc>
        <source-position filename="libnm-core/nm-setting-ip-config.h"
                         line="65"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="address" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ip-config.c"
                 line="516">the #NMIPAddress</doc>
            <type name="IPAddress" c:type="NMIPAddress*"/>
          </instance-parameter>
          <parameter name="prefix" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ip-config.c"
                 line="517">the IP address prefix</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="unref" c:identifier="nm_ip_address_unref">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-ip-config.c"
             line="282">Decreases the reference count of the object.  If the reference count
reaches zero, the object will be destroyed.</doc>
        <source-position filename="libnm-core/nm-setting-ip-config.h"
                         line="51"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="address" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ip-config.c"
                 line="284">the #NMIPAddress</doc>
            <type name="IPAddress" c:type="NMIPAddress*"/>
          </instance-parameter>
        </parameters>
      </method>
    </record>
    <class name="IPConfig"
           c:symbol-prefix="ip_config"
           c:type="NMIPConfig"
           parent="Object"
           abstract="1"
           glib:type-name="NMIPConfig"
           glib:get-type="nm_ip_config_get_type"
           glib:type-struct="IPConfigClass">
      <source-position filename="libnm/nm-ip-config.h" line="52"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.Initable"/>
      <method name="get_addresses" c:identifier="nm_ip_config_get_addresses">
        <doc xml:space="preserve"
             filename="libnm/nm-ip-config.c"
             line="402">Gets the IP addresses (containing the address, prefix, and gateway).</doc>
        <source-position filename="libnm/nm-ip-config.h" line="67"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-ip-config.c"
               line="408">the #GPtrArray
containing #NMIPAddress&lt;!-- --&gt;es.  This is the internal copy used by the
configuration and must not be modified. The library never modifies the
returned array and thus it is safe for callers to reference and keep using it.</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="IPAddress"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-ip-config.c"
                 line="404">a #NMIPConfig</doc>
            <type name="IPConfig" c:type="NMIPConfig*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_domains" c:identifier="nm_ip_config_get_domains">
        <doc xml:space="preserve"
             filename="libnm/nm-ip-config.c"
             line="437">Gets the domain names.</doc>
        <source-position filename="libnm/nm-ip-config.h" line="70"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-ip-config.c"
               line="443">the array of domains.
(This is never %NULL, though it may be 0-length).</doc>
          <array c:type="const char* const*">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-ip-config.c"
                 line="439">a #NMIPConfig</doc>
            <type name="IPConfig" c:type="NMIPConfig*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_family" c:identifier="nm_ip_config_get_family">
        <doc xml:space="preserve"
             filename="libnm/nm-ip-config.c"
             line="369">Gets the IP address family</doc>
        <source-position filename="libnm/nm-ip-config.h" line="65"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-ip-config.c"
               line="375">the IP address family; either &lt;literal&gt;AF_INET&lt;/literal&gt; or
&lt;literal&gt;AF_INET6&lt;/literal&gt;</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-ip-config.c"
                 line="371">a #NMIPConfig</doc>
            <type name="IPConfig" c:type="NMIPConfig*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_gateway" c:identifier="nm_ip_config_get_gateway">
        <doc xml:space="preserve"
             filename="libnm/nm-ip-config.c"
             line="386">Gets the IP gateway address.</doc>
        <source-position filename="libnm/nm-ip-config.h" line="66"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-ip-config.c"
               line="392">the IP address of the gateway.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-ip-config.c"
                 line="388">a #NMIPConfig</doc>
            <type name="IPConfig" c:type="NMIPConfig*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_nameservers"
              c:identifier="nm_ip_config_get_nameservers">
        <doc xml:space="preserve"
             filename="libnm/nm-ip-config.c"
             line="421">Gets the domain name servers (DNS).</doc>
        <source-position filename="libnm/nm-ip-config.h" line="69"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-ip-config.c"
               line="427">the array of nameserver IP addresses</doc>
          <array c:type="const char* const*">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-ip-config.c"
                 line="423">a #NMIPConfig</doc>
            <type name="IPConfig" c:type="NMIPConfig*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_routes" c:identifier="nm_ip_config_get_routes">
        <doc xml:space="preserve"
             filename="libnm/nm-ip-config.c"
             line="488">Gets the routes.</doc>
        <source-position filename="libnm/nm-ip-config.h" line="68"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-ip-config.c"
               line="494">the #GPtrArray containing
#NMIPRoute&lt;!-- --&gt;s. This is the internal copy used by the configuration, and must
not be modified. The library never modifies the returned array and thus it is
safe for callers to reference and keep using it.</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="IPRoute"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-ip-config.c"
                 line="490">a #NMIPConfig</doc>
            <type name="IPConfig" c:type="NMIPConfig*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_searches" c:identifier="nm_ip_config_get_searches">
        <doc xml:space="preserve"
             filename="libnm/nm-ip-config.c"
             line="454">Gets the DNS searches.</doc>
        <source-position filename="libnm/nm-ip-config.h" line="71"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-ip-config.c"
               line="460">the array of DNS search strings.
(This is never %NULL, though it may be 0-length).</doc>
          <array c:type="const char* const*">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-ip-config.c"
                 line="456">a #NMIPConfig</doc>
            <type name="IPConfig" c:type="NMIPConfig*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_wins_servers"
              c:identifier="nm_ip_config_get_wins_servers">
        <doc xml:space="preserve"
             filename="libnm/nm-ip-config.c"
             line="471">Gets the Windows Internet Name Service servers (WINS).</doc>
        <source-position filename="libnm/nm-ip-config.h" line="72"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-ip-config.c"
               line="477">the arry of WINS server IP address strings.
(This is never %NULL, though it may be 0-length.)</doc>
          <array c:type="const char* const*">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-ip-config.c"
                 line="473">a #NMIPConfig</doc>
            <type name="IPConfig" c:type="NMIPConfig*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="addresses" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-ip-config.c"
             line="295">A #GPtrArray containing the addresses (#NMIPAddress) of the configuration.</doc>
        <array name="GLib.PtrArray">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </property>
      <property name="domains" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-ip-config.c"
             line="331">The array containing domain strings of the configuration.</doc>
        <array>
          <type name="utf8"/>
        </array>
      </property>
      <property name="family" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-ip-config.c"
             line="270">The IP address family of the configuration; either
&lt;literal&gt;AF_INET&lt;/literal&gt; or &lt;literal&gt;AF_INET6&lt;/literal&gt;.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="gateway" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-ip-config.c"
             line="283">The IP gateway address of the configuration as string.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="nameservers" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-ip-config.c"
             line="319">The array containing name server IP addresses of the configuration.</doc>
        <array>
          <type name="utf8"/>
        </array>
      </property>
      <property name="routes" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-ip-config.c"
             line="307">A #GPtrArray containing the routes (#NMIPRoute) of the configuration.</doc>
        <array name="GLib.PtrArray">
          <type name="IPRoute"/>
        </array>
      </property>
      <property name="searches" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-ip-config.c"
             line="343">The array containing DNS search strings of the configuration.</doc>
        <array>
          <type name="utf8"/>
        </array>
      </property>
      <property name="wins-servers" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-ip-config.c"
             line="355">The array containing WINS server IP addresses of the configuration.
(This will always be empty for IPv6 configurations.)</doc>
        <array>
          <type name="utf8"/>
        </array>
      </property>
      <field name="parent">
        <type name="Object" c:type="NMObject"/>
      </field>
    </class>
    <record name="IPConfigClass"
            c:type="NMIPConfigClass"
            glib:is-gtype-struct-for="IPConfig">
      <source-position filename="libnm/nm-ip-config.h" line="52"/>
      <field name="parent">
        <type name="ObjectClass" c:type="NMObjectClass"/>
      </field>
      <field name="padding" readable="0" private="1">
        <array zero-terminated="0" fixed-size="8">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <record name="IPRoute"
            c:type="NMIPRoute"
            glib:type-name="NMIPRoute"
            glib:get-type="nm_ip_route_get_type"
            c:symbol-prefix="ip_route">
      <source-position filename="libnm-core/nm-setting-ip-config.h" line="75"/>
      <constructor name="new" c:identifier="nm_ip_route_new" throws="1">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-ip-config.c"
             line="624">Creates a new #NMIPRoute object.</doc>
        <source-position filename="libnm-core/nm-setting-ip-config.h"
                         line="79"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-ip-config.c"
               line="636">the new #NMIPRoute object, or %NULL on error</doc>
          <type name="IPRoute" c:type="NMIPRoute*"/>
        </return-value>
        <parameters>
          <parameter name="family" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ip-config.c"
                 line="626">the IP address family (&lt;literal&gt;AF_INET&lt;/literal&gt; or
  &lt;literal&gt;AF_INET6&lt;/literal&gt;)</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="dest" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ip-config.c"
                 line="628">the IP address of the route's destination</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="prefix" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ip-config.c"
                 line="629">the address prefix length</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="next_hop"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ip-config.c"
                 line="630">the IP address of the next hop (or %NULL)</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="metric" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ip-config.c"
                 line="631">the route metric (or -1 for "default")</doc>
            <type name="gint64" c:type="gint64"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_binary"
                   c:identifier="nm_ip_route_new_binary"
                   throws="1">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-ip-config.c"
             line="672">Creates a new #NMIPRoute object. @dest and @next_hop (if non-%NULL) must
point to buffers of the correct size for @family.</doc>
        <source-position filename="libnm-core/nm-setting-ip-config.h"
                         line="85"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-ip-config.c"
               line="685">the new #NMIPRoute object, or %NULL on error</doc>
          <type name="IPRoute" c:type="NMIPRoute*"/>
        </return-value>
        <parameters>
          <parameter name="family" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ip-config.c"
                 line="674">the IP address family (&lt;literal&gt;AF_INET&lt;/literal&gt; or
  &lt;literal&gt;AF_INET6&lt;/literal&gt;)</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="dest"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ip-config.c"
                 line="676">the IP address of the route's destination</doc>
            <type name="gpointer" c:type="gconstpointer"/>
          </parameter>
          <parameter name="prefix" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ip-config.c"
                 line="677">the address prefix length</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="next_hop"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ip-config.c"
                 line="678">the IP address of the next hop (or %NULL)</doc>
            <type name="gpointer" c:type="gconstpointer"/>
          </parameter>
          <parameter name="metric" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ip-config.c"
                 line="679">the route metric (or -1 for "default")</doc>
            <type name="gint64" c:type="gint64"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="dup" c:identifier="nm_ip_route_dup">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-ip-config.c"
             line="827">Creates a copy of @route</doc>
        <source-position filename="libnm-core/nm-setting-ip-config.h"
                         line="107"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-ip-config.c"
               line="833">a copy of @route</doc>
          <type name="IPRoute" c:type="NMIPRoute*"/>
        </return-value>
        <parameters>
          <instance-parameter name="route" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ip-config.c"
                 line="829">the #NMIPRoute</doc>
            <type name="IPRoute" c:type="NMIPRoute*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="equal" c:identifier="nm_ip_route_equal">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-ip-config.c"
             line="811">Determines if two #NMIPRoute objects contain the same destination, prefix,
next hop, and metric. (Attributes are not compared.)</doc>
        <source-position filename="libnm-core/nm-setting-ip-config.h"
                         line="94"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-ip-config.c"
               line="819">%TRUE if the objects contain the same values, %FALSE if they do not.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="route" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ip-config.c"
                 line="813">the #NMIPRoute</doc>
            <type name="IPRoute" c:type="NMIPRoute*"/>
          </instance-parameter>
          <parameter name="other" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ip-config.c"
                 line="814">the #NMIPRoute to compare @route to.</doc>
            <type name="IPRoute" c:type="NMIPRoute*"/>
          </parameter>
        </parameters>
      </method>
      <method name="equal_full"
              c:identifier="nm_ip_route_equal_full"
              version="1.10">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-ip-config.c"
             line="755">Determines if two #NMIPRoute objects contain the same destination, prefix,
next hop, and metric.</doc>
        <source-position filename="libnm-core/nm-setting-ip-config.h"
                         line="103"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-ip-config.c"
               line="766">%TRUE if the objects contain the same values, %FALSE if they do not.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="route" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ip-config.c"
                 line="757">the #NMIPRoute</doc>
            <type name="IPRoute" c:type="NMIPRoute*"/>
          </instance-parameter>
          <parameter name="other" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ip-config.c"
                 line="758">the #NMIPRoute to compare @route to.</doc>
            <type name="IPRoute" c:type="NMIPRoute*"/>
          </parameter>
          <parameter name="cmp_flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ip-config.c"
                 line="759">tune how to compare attributes. Currently only
  NM_IP_ROUTE_EQUAL_CMP_FLAGS_NONE (0) and NM_IP_ROUTE_EQUAL_CMP_FLAGS_WITH_ATTRS (1)
  is supported.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_attribute" c:identifier="nm_ip_route_get_attribute">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-ip-config.c"
             line="1163">Gets the value of the attribute with name @name on @route</doc>
        <source-position filename="libnm-core/nm-setting-ip-config.h"
                         line="132"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-ip-config.c"
               line="1170">the value of the attribute with name @name on
  @route, or %NULL if @route has no such attribute.</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="route" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ip-config.c"
                 line="1165">the #NMIPRoute</doc>
            <type name="IPRoute" c:type="NMIPRoute*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ip-config.c"
                 line="1166">the name of an route attribute</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_attribute_names"
              c:identifier="nm_ip_route_get_attribute_names">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-ip-config.c"
             line="1144">Gets an array of attribute names defined on @route.</doc>
        <source-position filename="libnm-core/nm-setting-ip-config.h"
                         line="131"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-ip-config.c"
               line="1150">a %NULL-terminated array of attribute names</doc>
          <array c:type="char**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="route" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ip-config.c"
                 line="1146">the #NMIPRoute</doc>
            <type name="IPRoute" c:type="NMIPRoute*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_dest" c:identifier="nm_ip_route_get_dest">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-ip-config.c"
             line="878">Gets the IP destination address property of this route object.</doc>
        <source-position filename="libnm-core/nm-setting-ip-config.h"
                         line="110"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-ip-config.c"
               line="884">the IP address of the route's destination</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="route" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ip-config.c"
                 line="880">the #NMIPRoute</doc>
            <type name="IPRoute" c:type="NMIPRoute*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_dest_binary"
              c:identifier="nm_ip_route_get_dest_binary"
              introspectable="0">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-ip-config.c"
             line="916">Gets the destination property of this route object.

@dest must point to a buffer that is the correct size for @route's family.</doc>
        <source-position filename="libnm-core/nm-setting-ip-config.h"
                         line="113"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="route" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ip-config.c"
                 line="918">the #NMIPRoute</doc>
            <type name="IPRoute" c:type="NMIPRoute*"/>
          </instance-parameter>
          <parameter name="dest"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ip-config.c"
                 line="919">a buffer in which to store the destination in binary format.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_family" c:identifier="nm_ip_route_get_family">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-ip-config.c"
             line="860">Gets the IP address family (eg, AF_INET) property of this route
object.</doc>
        <source-position filename="libnm-core/nm-setting-ip-config.h"
                         line="109"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-ip-config.c"
               line="867">the IP address family</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="route" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ip-config.c"
                 line="862">the #NMIPRoute</doc>
            <type name="IPRoute" c:type="NMIPRoute*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_metric" c:identifier="nm_ip_route_get_metric">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-ip-config.c"
             line="1079">Gets the route metric property of this route object; lower values
indicate "better" or more preferred routes; -1 indicates "default"
(meaning NetworkManager will set it appropriately).</doc>
        <source-position filename="libnm-core/nm-setting-ip-config.h"
                         line="127"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-ip-config.c"
               line="1087">the route metric</doc>
          <type name="gint64" c:type="gint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="route" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ip-config.c"
                 line="1081">the #NMIPRoute</doc>
            <type name="IPRoute" c:type="NMIPRoute*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_next_hop" c:identifier="nm_ip_route_get_next_hop">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-ip-config.c"
             line="991">Gets the IP address of the next hop of this route; this will be %NULL if the
route has no next hop.</doc>
        <source-position filename="libnm-core/nm-setting-ip-config.h"
                         line="120"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-ip-config.c"
               line="998">the IP address of the next hop, or %NULL if this is a device route.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="route" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ip-config.c"
                 line="993">the #NMIPRoute</doc>
            <type name="IPRoute" c:type="NMIPRoute*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_next_hop_binary"
              c:identifier="nm_ip_route_get_next_hop_binary"
              introspectable="0">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-ip-config.c"
             line="1031">Gets the next hop property of this route object.

@next_hop must point to a buffer that is the correct size for @route's family.</doc>
        <source-position filename="libnm-core/nm-setting-ip-config.h"
                         line="123"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-ip-config.c"
               line="1040">%TRUE if @route has a next hop, %FALSE if not (in which case
@next_hop will be zeroed out)</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="route" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ip-config.c"
                 line="1033">the #NMIPRoute</doc>
            <type name="IPRoute" c:type="NMIPRoute*"/>
          </instance-parameter>
          <parameter name="next_hop"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ip-config.c"
                 line="1034">a buffer in which to store the next hop in binary format.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_prefix" c:identifier="nm_ip_route_get_prefix">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-ip-config.c"
             line="957">Gets the IP prefix (ie "24" or "30" etc) of this route.</doc>
        <source-position filename="libnm-core/nm-setting-ip-config.h"
                         line="117"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-ip-config.c"
               line="963">the IP prefix</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="route" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ip-config.c"
                 line="959">the #NMIPRoute</doc>
            <type name="IPRoute" c:type="NMIPRoute*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="ref" c:identifier="nm_ip_route_ref">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-ip-config.c"
             line="717">Increases the reference count of the object.</doc>
        <source-position filename="libnm-core/nm-setting-ip-config.h"
                         line="92"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="route" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ip-config.c"
                 line="719">the #NMIPRoute</doc>
            <type name="IPRoute" c:type="NMIPRoute*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_attribute" c:identifier="nm_ip_route_set_attribute">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-ip-config.c"
             line="1185">Sets the named attribute on @route to the given value.</doc>
        <source-position filename="libnm-core/nm-setting-ip-config.h"
                         line="134"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="route" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ip-config.c"
                 line="1187">the #NMIPRoute</doc>
            <type name="IPRoute" c:type="NMIPRoute*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ip-config.c"
                 line="1188">the name of a route attribute</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="value"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ip-config.c"
                 line="1189">the value</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_dest" c:identifier="nm_ip_route_set_dest">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-ip-config.c"
             line="895">Sets the destination property of this route object.

@dest must be a valid address of @route's family. If you aren't sure you
have a valid address, use nm_utils_ipaddr_valid() to check it.</doc>
        <source-position filename="libnm-core/nm-setting-ip-config.h"
                         line="111"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="route" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ip-config.c"
                 line="897">the #NMIPRoute</doc>
            <type name="IPRoute" c:type="NMIPRoute*"/>
          </instance-parameter>
          <parameter name="dest" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ip-config.c"
                 line="898">the route's destination, as a string</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_dest_binary"
              c:identifier="nm_ip_route_set_dest_binary"
              introspectable="0">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-ip-config.c"
             line="935">Sets the destination property of this route object.

@dest must point to a buffer that is the correct size for @route's family.</doc>
        <source-position filename="libnm-core/nm-setting-ip-config.h"
                         line="115"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="route" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ip-config.c"
                 line="937">the #NMIPRoute</doc>
            <type name="IPRoute" c:type="NMIPRoute*"/>
          </instance-parameter>
          <parameter name="dest"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ip-config.c"
                 line="938">the route's destination, in binary format</doc>
            <type name="gpointer" c:type="gconstpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_metric" c:identifier="nm_ip_route_set_metric">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-ip-config.c"
             line="1098">Sets the metric property of this route object.</doc>
        <source-position filename="libnm-core/nm-setting-ip-config.h"
                         line="128"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="route" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ip-config.c"
                 line="1100">the #NMIPRoute</doc>
            <type name="IPRoute" c:type="NMIPRoute*"/>
          </instance-parameter>
          <parameter name="metric" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ip-config.c"
                 line="1101">the route metric (or -1 for "default")</doc>
            <type name="gint64" c:type="gint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_next_hop" c:identifier="nm_ip_route_set_next_hop">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-ip-config.c"
             line="1009">Sets the next-hop property of this route object.

@next_hop (if non-%NULL) must be a valid address of @route's family. If you
aren't sure you have a valid address, use nm_utils_ipaddr_valid() to check
it.</doc>
        <source-position filename="libnm-core/nm-setting-ip-config.h"
                         line="121"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="route" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ip-config.c"
                 line="1011">the #NMIPRoute</doc>
            <type name="IPRoute" c:type="NMIPRoute*"/>
          </instance-parameter>
          <parameter name="next_hop"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ip-config.c"
                 line="1012">the route's next hop, as a string</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_next_hop_binary"
              c:identifier="nm_ip_route_set_next_hop_binary"
              introspectable="0">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-ip-config.c"
             line="1059">Sets the destination property of this route object.

@next_hop (if non-%NULL) must point to a buffer that is the correct size for
@route's family.</doc>
        <source-position filename="libnm-core/nm-setting-ip-config.h"
                         line="125"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="route" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ip-config.c"
                 line="1061">the #NMIPRoute</doc>
            <type name="IPRoute" c:type="NMIPRoute*"/>
          </instance-parameter>
          <parameter name="next_hop"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ip-config.c"
                 line="1062">the route's next hop, in binary format</doc>
            <type name="gpointer" c:type="gconstpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_prefix" c:identifier="nm_ip_route_set_prefix">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-ip-config.c"
             line="974">Sets the prefix property of this route object.</doc>
        <source-position filename="libnm-core/nm-setting-ip-config.h"
                         line="118"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="route" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ip-config.c"
                 line="976">the #NMIPRoute</doc>
            <type name="IPRoute" c:type="NMIPRoute*"/>
          </instance-parameter>
          <parameter name="prefix" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ip-config.c"
                 line="977">the route prefix</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="unref" c:identifier="nm_ip_route_unref">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-ip-config.c"
             line="732">Decreases the reference count of the object.  If the reference count
reaches zero, the object will be destroyed.</doc>
        <source-position filename="libnm-core/nm-setting-ip-config.h"
                         line="93"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="route" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ip-config.c"
                 line="734">the #NMIPRoute</doc>
            <type name="IPRoute" c:type="NMIPRoute*"/>
          </instance-parameter>
        </parameters>
      </method>
      <function name="attribute_validate"
                c:identifier="nm_ip_route_attribute_validate"
                version="1.8"
                throws="1">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-ip-config.c"
             line="1247">Validates a route attribute, i.e. checks that the attribute is a known one
and the value is of the correct type and well-formed.</doc>
        <source-position filename="libnm-core/nm-setting-ip-config.h"
                         line="140"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-ip-config.c"
               line="1258">%TRUE if the attribute is valid, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ip-config.c"
                 line="1249">the attribute name</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ip-config.c"
                 line="1250">the attribute value</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="family" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ip-config.c"
                 line="1251">IP address family of the route</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="known"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ip-config.c"
                 line="1252">on return, whether the attribute name is a known one</doc>
            <type name="gboolean" c:type="gboolean*"/>
          </parameter>
        </parameters>
      </function>
      <function name="get_variant_attribute_spec"
                c:identifier="nm_ip_route_get_variant_attribute_spec"
                version="1.8">
        <source-position filename="libnm-core/nm-setting-ip-config.h"
                         line="138"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-ip-config.c"
               line="1237">the specifiers for route attributes</doc>
          <type name="VariantAttributeSpec"
                c:type="const NMVariantAttributeSpec* const*"/>
        </return-value>
      </function>
    </record>
    <bitfield name="IPTunnelFlags"
              glib:type-name="NMIPTunnelFlags"
              glib:get-type="nm_ip_tunnel_flags_get_type"
              c:type="NMIPTunnelFlags">
      <member name="none"
              value="0"
              c:identifier="NM_IP_TUNNEL_FLAG_NONE"
              glib:nick="none">
      </member>
      <member name="ip6_ign_encap_limit"
              value="1"
              c:identifier="NM_IP_TUNNEL_FLAG_IP6_IGN_ENCAP_LIMIT"
              glib:nick="ip6-ign-encap-limit">
      </member>
      <member name="ip6_use_orig_tclass"
              value="2"
              c:identifier="NM_IP_TUNNEL_FLAG_IP6_USE_ORIG_TCLASS"
              glib:nick="ip6-use-orig-tclass">
      </member>
      <member name="ip6_use_orig_flowlabel"
              value="4"
              c:identifier="NM_IP_TUNNEL_FLAG_IP6_USE_ORIG_FLOWLABEL"
              glib:nick="ip6-use-orig-flowlabel">
      </member>
      <member name="ip6_mip6_dev"
              value="8"
              c:identifier="NM_IP_TUNNEL_FLAG_IP6_MIP6_DEV"
              glib:nick="ip6-mip6-dev">
      </member>
      <member name="ip6_rcv_dscp_copy"
              value="16"
              c:identifier="NM_IP_TUNNEL_FLAG_IP6_RCV_DSCP_COPY"
              glib:nick="ip6-rcv-dscp-copy">
      </member>
      <member name="ip6_use_orig_fwmark"
              value="32"
              c:identifier="NM_IP_TUNNEL_FLAG_IP6_USE_ORIG_FWMARK"
              glib:nick="ip6-use-orig-fwmark">
      </member>
    </bitfield>
    <enumeration name="IPTunnelMode"
                 version="1.2"
                 glib:type-name="NMIPTunnelMode"
                 glib:get-type="nm_ip_tunnel_mode_get_type"
                 c:type="NMIPTunnelMode">
      <doc xml:space="preserve"
           filename="libnm-core/nm-dbus-interface.h"
           line="848">The tunneling mode.</doc>
      <member name="unknown"
              value="0"
              c:identifier="NM_IP_TUNNEL_MODE_UNKNOWN"
              glib:nick="unknown">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="850">Unknown/unset tunnel mode</doc>
      </member>
      <member name="ipip"
              value="1"
              c:identifier="NM_IP_TUNNEL_MODE_IPIP"
              glib:nick="ipip">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="851">IP in IP tunnel</doc>
      </member>
      <member name="gre"
              value="2"
              c:identifier="NM_IP_TUNNEL_MODE_GRE"
              glib:nick="gre">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="852">GRE tunnel</doc>
      </member>
      <member name="sit"
              value="3"
              c:identifier="NM_IP_TUNNEL_MODE_SIT"
              glib:nick="sit">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="853">SIT tunnel</doc>
      </member>
      <member name="isatap"
              value="4"
              c:identifier="NM_IP_TUNNEL_MODE_ISATAP"
              glib:nick="isatap">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="854">ISATAP tunnel</doc>
      </member>
      <member name="vti"
              value="5"
              c:identifier="NM_IP_TUNNEL_MODE_VTI"
              glib:nick="vti">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="855">VTI tunnel</doc>
      </member>
      <member name="ip6ip6"
              value="6"
              c:identifier="NM_IP_TUNNEL_MODE_IP6IP6"
              glib:nick="ip6ip6">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="856">IPv6 in IPv6 tunnel</doc>
      </member>
      <member name="ipip6"
              value="7"
              c:identifier="NM_IP_TUNNEL_MODE_IPIP6"
              glib:nick="ipip6">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="857">IPv4 in IPv6 tunnel</doc>
      </member>
      <member name="ip6gre"
              value="8"
              c:identifier="NM_IP_TUNNEL_MODE_IP6GRE"
              glib:nick="ip6gre">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="858">IPv6 GRE tunnel</doc>
      </member>
      <member name="vti6"
              value="9"
              c:identifier="NM_IP_TUNNEL_MODE_VTI6"
              glib:nick="vti6">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="859">IPv6 VTI tunnel</doc>
      </member>
      <member name="gretap"
              value="10"
              c:identifier="NM_IP_TUNNEL_MODE_GRETAP"
              glib:nick="gretap">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="860">GRETAP tunnel</doc>
      </member>
      <member name="ip6gretap"
              value="11"
              c:identifier="NM_IP_TUNNEL_MODE_IP6GRETAP"
              glib:nick="ip6gretap">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="861">IPv6 GRETAP tunnel</doc>
      </member>
    </enumeration>
    <constant name="IP_ADDRESS_ATTRIBUTE_LABEL"
              value="label"
              c:type="NM_IP_ADDRESS_ATTRIBUTE_LABEL">
      <source-position filename="libnm-core/nm-setting-ip-config.h" line="35"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="IP_CONFIG_ADDRESSES"
              value="addresses"
              c:type="NM_IP_CONFIG_ADDRESSES">
      <source-position filename="libnm/nm-ip-config.h" line="56"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="IP_CONFIG_DOMAINS"
              value="domains"
              c:type="NM_IP_CONFIG_DOMAINS">
      <source-position filename="libnm/nm-ip-config.h" line="59"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="IP_CONFIG_FAMILY"
              value="family"
              c:type="NM_IP_CONFIG_FAMILY">
      <source-position filename="libnm/nm-ip-config.h" line="54"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="IP_CONFIG_GATEWAY"
              value="gateway"
              c:type="NM_IP_CONFIG_GATEWAY">
      <source-position filename="libnm/nm-ip-config.h" line="55"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="IP_CONFIG_NAMESERVERS"
              value="nameservers"
              c:type="NM_IP_CONFIG_NAMESERVERS">
      <source-position filename="libnm/nm-ip-config.h" line="58"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="IP_CONFIG_ROUTES"
              value="routes"
              c:type="NM_IP_CONFIG_ROUTES">
      <source-position filename="libnm/nm-ip-config.h" line="57"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="IP_CONFIG_SEARCHES"
              value="searches"
              c:type="NM_IP_CONFIG_SEARCHES">
      <source-position filename="libnm/nm-ip-config.h" line="60"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="IP_CONFIG_WINS_SERVERS"
              value="wins-servers"
              c:type="NM_IP_CONFIG_WINS_SERVERS">
      <source-position filename="libnm/nm-ip-config.h" line="61"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="IP_ROUTE_ATTRIBUTE_CWND"
              value="cwnd"
              c:type="NM_IP_ROUTE_ATTRIBUTE_CWND">
      <source-position filename="libnm-core/nm-setting-ip-config.h"
                       line="152"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="IP_ROUTE_ATTRIBUTE_FROM"
              value="from"
              c:type="NM_IP_ROUTE_ATTRIBUTE_FROM">
      <source-position filename="libnm-core/nm-setting-ip-config.h"
                       line="148"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="IP_ROUTE_ATTRIBUTE_INITCWND"
              value="initcwnd"
              c:type="NM_IP_ROUTE_ATTRIBUTE_INITCWND">
      <source-position filename="libnm-core/nm-setting-ip-config.h"
                       line="153"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="IP_ROUTE_ATTRIBUTE_INITRWND"
              value="initrwnd"
              c:type="NM_IP_ROUTE_ATTRIBUTE_INITRWND">
      <source-position filename="libnm-core/nm-setting-ip-config.h"
                       line="154"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="IP_ROUTE_ATTRIBUTE_LOCK_CWND"
              value="lock-cwnd"
              c:type="NM_IP_ROUTE_ATTRIBUTE_LOCK_CWND">
      <source-position filename="libnm-core/nm-setting-ip-config.h"
                       line="157"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="IP_ROUTE_ATTRIBUTE_LOCK_INITCWND"
              value="lock-initcwnd"
              c:type="NM_IP_ROUTE_ATTRIBUTE_LOCK_INITCWND">
      <source-position filename="libnm-core/nm-setting-ip-config.h"
                       line="158"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="IP_ROUTE_ATTRIBUTE_LOCK_INITRWND"
              value="lock-initrwnd"
              c:type="NM_IP_ROUTE_ATTRIBUTE_LOCK_INITRWND">
      <source-position filename="libnm-core/nm-setting-ip-config.h"
                       line="159"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="IP_ROUTE_ATTRIBUTE_LOCK_MTU"
              value="lock-mtu"
              c:type="NM_IP_ROUTE_ATTRIBUTE_LOCK_MTU">
      <source-position filename="libnm-core/nm-setting-ip-config.h"
                       line="160"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="IP_ROUTE_ATTRIBUTE_LOCK_WINDOW"
              value="lock-window"
              c:type="NM_IP_ROUTE_ATTRIBUTE_LOCK_WINDOW">
      <source-position filename="libnm-core/nm-setting-ip-config.h"
                       line="156"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="IP_ROUTE_ATTRIBUTE_MTU"
              value="mtu"
              c:type="NM_IP_ROUTE_ATTRIBUTE_MTU">
      <source-position filename="libnm-core/nm-setting-ip-config.h"
                       line="155"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="IP_ROUTE_ATTRIBUTE_ONLINK"
              value="onlink"
              c:type="NM_IP_ROUTE_ATTRIBUTE_ONLINK">
      <source-position filename="libnm-core/nm-setting-ip-config.h"
                       line="150"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="IP_ROUTE_ATTRIBUTE_SRC"
              value="src"
              c:type="NM_IP_ROUTE_ATTRIBUTE_SRC">
      <source-position filename="libnm-core/nm-setting-ip-config.h"
                       line="147"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="IP_ROUTE_ATTRIBUTE_TABLE"
              value="table"
              c:type="NM_IP_ROUTE_ATTRIBUTE_TABLE">
      <source-position filename="libnm-core/nm-setting-ip-config.h"
                       line="146"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="IP_ROUTE_ATTRIBUTE_TOS"
              value="tos"
              c:type="NM_IP_ROUTE_ATTRIBUTE_TOS">
      <source-position filename="libnm-core/nm-setting-ip-config.h"
                       line="149"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="IP_ROUTE_ATTRIBUTE_WINDOW"
              value="window"
              c:type="NM_IP_ROUTE_ATTRIBUTE_WINDOW">
      <source-position filename="libnm-core/nm-setting-ip-config.h"
                       line="151"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="LLDP_ATTR_CHASSIS_ID"
              value="chassis-id"
              c:type="NM_LLDP_ATTR_CHASSIS_ID">
      <source-position filename="libnm-core/nm-dbus-interface.h" line="831"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="LLDP_ATTR_CHASSIS_ID_TYPE"
              value="chassis-id-type"
              c:type="NM_LLDP_ATTR_CHASSIS_ID_TYPE">
      <source-position filename="libnm-core/nm-dbus-interface.h" line="830"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="LLDP_ATTR_DESTINATION"
              value="destination"
              c:type="NM_LLDP_ATTR_DESTINATION">
      <source-position filename="libnm-core/nm-dbus-interface.h" line="829"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="LLDP_ATTR_IEEE_802_1_PPVID"
              value="ieee-802-1-ppvid"
              c:type="NM_LLDP_ATTR_IEEE_802_1_PPVID">
      <source-position filename="libnm-core/nm-dbus-interface.h" line="839"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="LLDP_ATTR_IEEE_802_1_PPVID_FLAGS"
              value="ieee-802-1-ppvid-flags"
              c:type="NM_LLDP_ATTR_IEEE_802_1_PPVID_FLAGS">
      <source-position filename="libnm-core/nm-dbus-interface.h" line="840"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="LLDP_ATTR_IEEE_802_1_PVID"
              value="ieee-802-1-pvid"
              c:type="NM_LLDP_ATTR_IEEE_802_1_PVID">
      <source-position filename="libnm-core/nm-dbus-interface.h" line="838"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="LLDP_ATTR_IEEE_802_1_VID"
              value="ieee-802-1-vid"
              c:type="NM_LLDP_ATTR_IEEE_802_1_VID">
      <source-position filename="libnm-core/nm-dbus-interface.h" line="841"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="LLDP_ATTR_IEEE_802_1_VLAN_NAME"
              value="ieee-802-1-vlan-name"
              c:type="NM_LLDP_ATTR_IEEE_802_1_VLAN_NAME">
      <source-position filename="libnm-core/nm-dbus-interface.h" line="842"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="LLDP_ATTR_PORT_DESCRIPTION"
              value="port-description"
              c:type="NM_LLDP_ATTR_PORT_DESCRIPTION">
      <source-position filename="libnm-core/nm-dbus-interface.h" line="834"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="LLDP_ATTR_PORT_ID"
              value="port-id"
              c:type="NM_LLDP_ATTR_PORT_ID">
      <source-position filename="libnm-core/nm-dbus-interface.h" line="833"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="LLDP_ATTR_PORT_ID_TYPE"
              value="port-id-type"
              c:type="NM_LLDP_ATTR_PORT_ID_TYPE">
      <source-position filename="libnm-core/nm-dbus-interface.h" line="832"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="LLDP_ATTR_SYSTEM_CAPABILITIES"
              value="system-capabilities"
              c:type="NM_LLDP_ATTR_SYSTEM_CAPABILITIES">
      <source-position filename="libnm-core/nm-dbus-interface.h" line="837"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="LLDP_ATTR_SYSTEM_DESCRIPTION"
              value="system-description"
              c:type="NM_LLDP_ATTR_SYSTEM_DESCRIPTION">
      <source-position filename="libnm-core/nm-dbus-interface.h" line="836"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="LLDP_ATTR_SYSTEM_NAME"
              value="system-name"
              c:type="NM_LLDP_ATTR_SYSTEM_NAME">
      <source-position filename="libnm-core/nm-dbus-interface.h" line="835"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="LLDP_DEST_NEAREST_BRIDGE"
              value="nearest-bridge"
              c:type="NM_LLDP_DEST_NEAREST_BRIDGE">
      <source-position filename="libnm-core/nm-dbus-interface.h" line="844"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="LLDP_DEST_NEAREST_CUSTOMER_BRIDGE"
              value="nearest-customer-bridge"
              c:type="NM_LLDP_DEST_NEAREST_CUSTOMER_BRIDGE">
      <source-position filename="libnm-core/nm-dbus-interface.h" line="846"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="LLDP_DEST_NEAREST_NON_TPMR_BRIDGE"
              value="nearest-non-tpmr-bridge"
              c:type="NM_LLDP_DEST_NEAREST_NON_TPMR_BRIDGE">
      <source-position filename="libnm-core/nm-dbus-interface.h" line="845"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <record name="LldpNeighbor"
            c:type="NMLldpNeighbor"
            glib:type-name="NMLldpNeighbor"
            glib:get-type="nm_lldp_neighbor_get_type"
            c:symbol-prefix="lldp_neighbor">
      <source-position filename="libnm/nm-device.h" line="100"/>
      <constructor name="new"
                   c:identifier="nm_lldp_neighbor_new"
                   version="1.2">
        <doc xml:space="preserve"
             filename="libnm/nm-device.c"
             line="2649">Creates a new #NMLldpNeighbor object.</doc>
        <source-position filename="libnm/nm-device.h" line="222"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libnm/nm-device.c"
               line="2654">the new #NMLldpNeighbor object.</doc>
          <type name="LldpNeighbor" c:type="NMLldpNeighbor*"/>
        </return-value>
      </constructor>
      <method name="get_attr_names"
              c:identifier="nm_lldp_neighbor_get_attr_names"
              version="1.2">
        <doc xml:space="preserve"
             filename="libnm/nm-device.c"
             line="2721">Gets an array of attribute names available for @neighbor.</doc>
        <source-position filename="libnm/nm-device.h" line="228"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libnm/nm-device.c"
               line="2727">a %NULL-terminated array of attribute names.</doc>
          <array c:type="char**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="neighbor" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device.c"
                 line="2723">the #NMLldpNeighbor</doc>
            <type name="LldpNeighbor" c:type="NMLldpNeighbor*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_attr_string_value"
              c:identifier="nm_lldp_neighbor_get_attr_string_value"
              version="1.2">
        <doc xml:space="preserve"
             filename="libnm/nm-device.c"
             line="2752">Gets the string value of attribute with name @name on @neighbor</doc>
        <source-position filename="libnm/nm-device.h" line="230"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-device.c"
               line="2760">%TRUE if a string attribute with name @name was found, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="neighbor" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device.c"
                 line="2754">the #NMLldpNeighbor</doc>
            <type name="LldpNeighbor" c:type="NMLldpNeighbor*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device.c"
                 line="2755">the attribute name</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="out_value"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="none"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libnm/nm-device.c"
                 line="2756">on return, the attribute value</doc>
            <type name="utf8" c:type="const char**"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_attr_type"
              c:identifier="nm_lldp_neighbor_get_attr_type"
              version="1.2">
        <doc xml:space="preserve"
             filename="libnm/nm-device.c"
             line="2812">Get the type of an attribute.</doc>
        <source-position filename="libnm/nm-device.h" line="236"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-device.c"
               line="2819">the #GVariantType of the attribute with name @name</doc>
          <type name="GLib.VariantType" c:type="const GVariantType*"/>
        </return-value>
        <parameters>
          <instance-parameter name="neighbor" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device.c"
                 line="2814">the #NMLldpNeighbor</doc>
            <type name="LldpNeighbor" c:type="NMLldpNeighbor*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device.c"
                 line="2815">the attribute name</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_attr_uint_value"
              c:identifier="nm_lldp_neighbor_get_attr_uint_value"
              version="1.2">
        <doc xml:space="preserve"
             filename="libnm/nm-device.c"
             line="2782">Gets the uint value of attribute with name @name on @neighbor</doc>
        <source-position filename="libnm/nm-device.h" line="233"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-device.c"
               line="2790">%TRUE if a uint attribute with name @name was found, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="neighbor" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device.c"
                 line="2784">the #NMLldpNeighbor</doc>
            <type name="LldpNeighbor" c:type="NMLldpNeighbor*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device.c"
                 line="2785">the attribute name</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="out_value"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libnm/nm-device.c"
                 line="2786">on return, the attribute value</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="ref" c:identifier="nm_lldp_neighbor_ref" version="1.2">
        <doc xml:space="preserve"
             filename="libnm/nm-device.c"
             line="2682">Increases the reference count of the object.</doc>
        <source-position filename="libnm/nm-device.h" line="224"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="neighbor" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device.c"
                 line="2684">the #NMLldpNeighbor</doc>
            <type name="LldpNeighbor" c:type="NMLldpNeighbor*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="unref" c:identifier="nm_lldp_neighbor_unref" version="1.2">
        <doc xml:space="preserve"
             filename="libnm/nm-device.c"
             line="2699">Decreases the reference count of the object.  If the reference count
reaches zero, the object will be destroyed.</doc>
        <source-position filename="libnm/nm-device.h" line="226"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="neighbor" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-device.c"
                 line="2701">the #NMLldpNeighbor</doc>
            <type name="LldpNeighbor" c:type="NMLldpNeighbor*"/>
          </instance-parameter>
        </parameters>
      </method>
    </record>
    <constant name="MAJOR_VERSION" value="1" c:type="NM_MAJOR_VERSION">
      <doc xml:space="preserve"
           filename="shared/nm-version-macros.h"
           line="26">Evaluates to the major version number of NetworkManager which this source
is compiled against.</doc>
      <source-position filename="shared/nm-version-macros.h" line="32"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="MICRO_VERSION" value="0" c:type="NM_MICRO_VERSION">
      <doc xml:space="preserve"
           filename="shared/nm-version-macros.h"
           line="42">Evaluates to the micro version number of NetworkManager which this source
compiled against.</doc>
      <source-position filename="shared/nm-version-macros.h" line="48"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="MINOR_VERSION" value="17" c:type="NM_MINOR_VERSION">
      <doc xml:space="preserve"
           filename="shared/nm-version-macros.h"
           line="34">Evaluates to the minor version number of NetworkManager which this source
is compiled against.</doc>
      <source-position filename="shared/nm-version-macros.h" line="40"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <enumeration name="ManagerError"
                 glib:type-name="NMManagerError"
                 glib:get-type="nm_manager_error_get_type"
                 c:type="NMManagerError"
                 glib:error-domain="nm-manager-error-quark">
      <doc xml:space="preserve"
           filename="libnm-core/nm-errors.h"
           line="173">Errors related to the main "network management" interface of NetworkManager.
These may be returned from #NMClient methods that invoke D-Bus operations on
the "org.freedesktop.NetworkManager" interface, and correspond to D-Bus
errors in that namespace.</doc>
      <member name="Failed"
              value="0"
              c:identifier="NM_MANAGER_ERROR_FAILED"
              glib:nick="Failed">
        <doc xml:space="preserve"
             filename="libnm-core/nm-errors.h"
             line="175">unknown or unclassified error</doc>
      </member>
      <member name="PermissionDenied"
              value="1"
              c:identifier="NM_MANAGER_ERROR_PERMISSION_DENIED"
              glib:nick="PermissionDenied">
        <doc xml:space="preserve"
             filename="libnm-core/nm-errors.h"
             line="176">Permission denied.</doc>
      </member>
      <member name="UnknownConnection"
              value="2"
              c:identifier="NM_MANAGER_ERROR_UNKNOWN_CONNECTION"
              glib:nick="UnknownConnection">
        <doc xml:space="preserve"
             filename="libnm-core/nm-errors.h"
             line="177">The requested connection is not known.</doc>
      </member>
      <member name="UnknownDevice"
              value="3"
              c:identifier="NM_MANAGER_ERROR_UNKNOWN_DEVICE"
              glib:nick="UnknownDevice">
        <doc xml:space="preserve"
             filename="libnm-core/nm-errors.h"
             line="178">The requested device is not known.</doc>
      </member>
      <member name="ConnectionNotAvailable"
              value="4"
              c:identifier="NM_MANAGER_ERROR_CONNECTION_NOT_AVAILABLE"
              glib:nick="ConnectionNotAvailable">
        <doc xml:space="preserve"
             filename="libnm-core/nm-errors.h"
             line="179">The requested connection cannot be
  activated at this time.</doc>
      </member>
      <member name="ConnectionNotActive"
              value="5"
              c:identifier="NM_MANAGER_ERROR_CONNECTION_NOT_ACTIVE"
              glib:nick="ConnectionNotActive">
        <doc xml:space="preserve"
             filename="libnm-core/nm-errors.h"
             line="181">The request could not be completed
  because a required connection is not active.</doc>
      </member>
      <member name="ConnectionAlreadyActive"
              value="6"
              c:identifier="NM_MANAGER_ERROR_CONNECTION_ALREADY_ACTIVE"
              glib:nick="ConnectionAlreadyActive">
        <doc xml:space="preserve"
             filename="libnm-core/nm-errors.h"
             line="183">The connection to be activated was
  already active on another device.</doc>
      </member>
      <member name="DependencyFailed"
              value="7"
              c:identifier="NM_MANAGER_ERROR_DEPENDENCY_FAILED"
              glib:nick="DependencyFailed">
        <doc xml:space="preserve"
             filename="libnm-core/nm-errors.h"
             line="185">An activation request failed due to a
  dependency being unavailable.</doc>
      </member>
      <member name="AlreadyAsleepOrAwake"
              value="8"
              c:identifier="NM_MANAGER_ERROR_ALREADY_ASLEEP_OR_AWAKE"
              glib:nick="AlreadyAsleepOrAwake">
        <doc xml:space="preserve"
             filename="libnm-core/nm-errors.h"
             line="187">The manager is already in the requested
  sleep/wake state.</doc>
      </member>
      <member name="AlreadyEnabledOrDisabled"
              value="9"
              c:identifier="NM_MANAGER_ERROR_ALREADY_ENABLED_OR_DISABLED"
              glib:nick="AlreadyEnabledOrDisabled">
        <doc xml:space="preserve"
             filename="libnm-core/nm-errors.h"
             line="189">The network is already
  enabled/disabled.</doc>
      </member>
      <member name="UnknownLogLevel"
              value="10"
              c:identifier="NM_MANAGER_ERROR_UNKNOWN_LOG_LEVEL"
              glib:nick="UnknownLogLevel">
        <doc xml:space="preserve"
             filename="libnm-core/nm-errors.h"
             line="191">Unknown log level in SetLogging</doc>
      </member>
      <member name="UnknownLogDomain"
              value="11"
              c:identifier="NM_MANAGER_ERROR_UNKNOWN_LOG_DOMAIN"
              glib:nick="UnknownLogDomain">
        <doc xml:space="preserve"
             filename="libnm-core/nm-errors.h"
             line="192">Unknown log domain in SetLogging</doc>
      </member>
      <member name="InvalidArguments"
              value="12"
              c:identifier="NM_MANAGER_ERROR_INVALID_ARGUMENTS"
              glib:nick="InvalidArguments">
        <doc xml:space="preserve"
             filename="libnm-core/nm-errors.h"
             line="193">Invalid arguments for D-Bus request</doc>
      </member>
      <member name="MissingPlugin"
              value="13"
              c:identifier="NM_MANAGER_ERROR_MISSING_PLUGIN"
              glib:nick="MissingPlugin">
        <doc xml:space="preserve"
             filename="libnm-core/nm-errors.h"
             line="194">A plug-in was needed to complete the
  activation but is not available.</doc>
      </member>
      <function name="quark" c:identifier="nm_manager_error_quark">
        <return-value transfer-ownership="none">
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
    </enumeration>
    <enumeration name="Metered"
                 version="1.2"
                 glib:type-name="NMMetered"
                 glib:get-type="nm_metered_get_type"
                 c:type="NMMetered">
      <member name="unknown"
              value="0"
              c:identifier="NM_METERED_UNKNOWN"
              glib:nick="unknown">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="650">The metered status is unknown</doc>
      </member>
      <member name="yes"
              value="1"
              c:identifier="NM_METERED_YES"
              glib:nick="yes">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="651">Metered, the value was statically set</doc>
      </member>
      <member name="no" value="2" c:identifier="NM_METERED_NO" glib:nick="no">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="652">Not metered, the value was statically set</doc>
      </member>
      <member name="guess_yes"
              value="3"
              c:identifier="NM_METERED_GUESS_YES"
              glib:nick="guess-yes">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="653">Metered, the value was guessed</doc>
      </member>
      <member name="guess_no"
              value="4"
              c:identifier="NM_METERED_GUESS_NO"
              glib:nick="guess-no">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="654">Not metered, the value was guessed</doc>
      </member>
    </enumeration>
    <constant name="OBJECT_DBUS_CONNECTION"
              value="dbus-connection"
              c:type="NM_OBJECT_DBUS_CONNECTION">
      <source-position filename="libnm/nm-object.h" line="41"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="OBJECT_DBUS_OBJECT"
              value="dbus-object"
              c:type="NM_OBJECT_DBUS_OBJECT">
      <source-position filename="libnm/nm-object.h" line="42"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="OBJECT_DBUS_OBJECT_MANAGER"
              value="dbus-object-manager"
              c:type="NM_OBJECT_DBUS_OBJECT_MANAGER">
      <source-position filename="libnm/nm-object.h" line="43"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="OBJECT_PATH" value="path" c:type="NM_OBJECT_PATH">
      <source-position filename="libnm/nm-object.h" line="40"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <class name="Object"
           c:symbol-prefix="object"
           c:type="NMObject"
           parent="GObject.Object"
           abstract="1"
           glib:type-name="NMObject"
           glib:get-type="nm_object_get_type"
           glib:type-struct="ObjectClass">
      <source-position filename="libnm/nm-object.h" line="67"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.Initable"/>
      <virtual-method name="init_dbus">
        <source-position filename="libnm/nm-object.h" line="56"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Object" c:type="NMObject*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="object_creation_failed">
        <source-position filename="libnm/nm-object.h" line="62"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="master_object" transfer-ownership="none">
            <type name="Object" c:type="NMObject*"/>
          </instance-parameter>
          <parameter name="failed_path" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="get_path" c:identifier="nm_object_get_path">
        <doc xml:space="preserve"
             filename="libnm/nm-object.c"
             line="100">Gets the DBus path of the #NMObject.</doc>
        <source-position filename="libnm/nm-object.h" line="71"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-object.c"
               line="106">the object's path. This is the internal string used by the
object, and must not be modified.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-object.c"
                 line="102">a #NMObject</doc>
            <type name="Object" c:type="NMObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="dbus-connection"
                introspectable="0"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-object.c"
             line="1301">The #GDBusConnection of the object.</doc>
        <type name="Gio.DBusConnection"/>
      </property>
      <property name="dbus-object"
                introspectable="0"
                readable="0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-object.c"
             line="1313">The #GDBusObject of the object.</doc>
        <type name="Gio.DBusObject"/>
      </property>
      <property name="dbus-object-manager"
                introspectable="0"
                readable="0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-object.c"
             line="1326">The #GDBusObjectManager of the object.</doc>
        <type name="Gio.DBusObjectManager"/>
      </property>
      <property name="path" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-object.c"
             line="1289">The D-Bus object path.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <record name="ObjectClass"
            c:type="NMObjectClass"
            glib:is-gtype-struct-for="Object">
      <source-position filename="libnm/nm-object.h" line="67"/>
      <field name="parent">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="init_dbus">
        <callback name="init_dbus">
          <source-position filename="libnm/nm-object.h" line="56"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Object" c:type="NMObject*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="object_creation_failed">
        <callback name="object_creation_failed">
          <source-position filename="libnm/nm-object.h" line="62"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="master_object" transfer-ownership="none">
              <type name="Object" c:type="NMObject*"/>
            </parameter>
            <parameter name="failed_path" transfer-ownership="none">
              <type name="utf8" c:type="const char*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="padding" readable="0" private="1">
        <array zero-terminated="0" fixed-size="8">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <constant name="REMOTE_CONNECTION_DBUS_CONNECTION"
              value="dbus-connection"
              c:type="NM_REMOTE_CONNECTION_DBUS_CONNECTION">
      <source-position filename="libnm/nm-remote-connection.h" line="41"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="REMOTE_CONNECTION_FILENAME"
              value="filename"
              c:type="NM_REMOTE_CONNECTION_FILENAME">
      <source-position filename="libnm/nm-remote-connection.h" line="45"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="REMOTE_CONNECTION_FLAGS"
              value="flags"
              c:type="NM_REMOTE_CONNECTION_FLAGS">
      <source-position filename="libnm/nm-remote-connection.h" line="44"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="REMOTE_CONNECTION_PATH"
              value="path"
              c:type="NM_REMOTE_CONNECTION_PATH">
      <source-position filename="libnm/nm-remote-connection.h" line="42"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="REMOTE_CONNECTION_UNSAVED"
              value="unsaved"
              c:type="NM_REMOTE_CONNECTION_UNSAVED">
      <source-position filename="libnm/nm-remote-connection.h" line="43"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="REMOTE_CONNECTION_VISIBLE"
              value="visible"
              c:type="NM_REMOTE_CONNECTION_VISIBLE">
      <source-position filename="libnm/nm-remote-connection.h" line="46"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <class name="RemoteConnection"
           c:symbol-prefix="remote_connection"
           c:type="NMRemoteConnection"
           parent="Object"
           glib:type-name="NMRemoteConnection"
           glib:get-type="nm_remote_connection_get_type"
           glib:type-struct="RemoteConnectionClass">
      <source-position filename="libnm/nm-remote-connection.h" line="60"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.Initable"/>
      <implements name="Connection"/>
      <method name="commit_changes"
              c:identifier="nm_remote_connection_commit_changes"
              throws="1">
        <doc xml:space="preserve"
             filename="libnm/nm-remote-connection.c"
             line="187">Send any local changes to the settings and properties of @connection to
NetworkManager. If @save_to_disk is %TRUE, the updated connection will be saved to
disk; if %FALSE, then only the in-memory representation will be changed.</doc>
        <source-position filename="libnm/nm-remote-connection.h" line="77"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-remote-connection.c"
               line="198">%TRUE on success, %FALSE on error, in which case @error will be set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-remote-connection.c"
                 line="189">the #NMRemoteConnection</doc>
            <type name="RemoteConnection" c:type="NMRemoteConnection*"/>
          </instance-parameter>
          <parameter name="save_to_disk" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-remote-connection.c"
                 line="190">whether to persist the changes to disk</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libnm/nm-remote-connection.c"
                 line="191">a #GCancellable, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="commit_changes_async"
              c:identifier="nm_remote_connection_commit_changes_async">
        <doc xml:space="preserve"
             filename="libnm/nm-remote-connection.c"
             line="251">Asynchronously sends any local changes to the settings and properties of
@connection to NetworkManager. If @save is %TRUE, the updated connection will
be saved to disk; if %FALSE, then only the in-memory representation will be
changed.</doc>
        <source-position filename="libnm/nm-remote-connection.h" line="81"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-remote-connection.c"
                 line="253">the #NMRemoteConnection</doc>
            <type name="RemoteConnection" c:type="NMRemoteConnection*"/>
          </instance-parameter>
          <parameter name="save_to_disk" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-remote-connection.c"
                 line="254">whether to save the changes to persistent storage</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libnm/nm-remote-connection.c"
                 line="255">a #GCancellable, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="libnm/nm-remote-connection.c"
                 line="256">callback to be called when the commit operation completes</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libnm/nm-remote-connection.c"
                 line="257">caller-specific data passed to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="commit_changes_finish"
              c:identifier="nm_remote_connection_commit_changes_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="libnm/nm-remote-connection.c"
             line="297">Gets the result of a call to nm_remote_connection_commit_changes_async().</doc>
        <source-position filename="libnm/nm-remote-connection.h" line="86"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-remote-connection.c"
               line="305">%TRUE on success, %FALSE on error, in which case @error will be set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-remote-connection.c"
                 line="299">the #NMRemoteConnection</doc>
            <type name="RemoteConnection" c:type="NMRemoteConnection*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-remote-connection.c"
                 line="300">the result passed to the #GAsyncReadyCallback</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="delete"
              c:identifier="nm_remote_connection_delete"
              throws="1">
        <doc xml:space="preserve"
             filename="libnm/nm-remote-connection.c"
             line="429">Deletes the connection.</doc>
        <source-position filename="libnm/nm-remote-connection.h" line="101"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-remote-connection.c"
               line="437">%TRUE on success, %FALSE on error, in which case @error will be set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-remote-connection.c"
                 line="431">the #NMRemoteConnection</doc>
            <type name="RemoteConnection" c:type="NMRemoteConnection*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libnm/nm-remote-connection.c"
                 line="432">a #GCancellable, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="delete_async"
              c:identifier="nm_remote_connection_delete_async">
        <doc xml:space="preserve"
             filename="libnm/nm-remote-connection.c"
             line="474">Asynchronously deletes the connection.</doc>
        <source-position filename="libnm/nm-remote-connection.h" line="104"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-remote-connection.c"
                 line="476">the #NMRemoteConnection</doc>
            <type name="RemoteConnection" c:type="NMRemoteConnection*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libnm/nm-remote-connection.c"
                 line="477">a #GCancellable, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="libnm/nm-remote-connection.c"
                 line="478">callback to be called when the delete operation completes</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libnm/nm-remote-connection.c"
                 line="479">caller-specific data passed to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="delete_finish"
              c:identifier="nm_remote_connection_delete_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="libnm/nm-remote-connection.c"
             line="503">Gets the result of a call to nm_remote_connection_delete_async().</doc>
        <source-position filename="libnm/nm-remote-connection.h" line="108"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-remote-connection.c"
               line="511">%TRUE on success, %FALSE on error, in which case @error will be set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-remote-connection.c"
                 line="505">the #NMRemoteConnection</doc>
            <type name="RemoteConnection" c:type="NMRemoteConnection*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-remote-connection.c"
                 line="506">the result passed to the #GAsyncReadyCallback</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_filename"
              c:identifier="nm_remote_connection_get_filename"
              version="1.12">
        <source-position filename="libnm/nm-remote-connection.h" line="131"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-remote-connection.c"
               line="684">file that stores the connection in case the connection is file-backed.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-remote-connection.c"
                 line="682">the #NMRemoteConnection</doc>
            <type name="RemoteConnection" c:type="NMRemoteConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_flags"
              c:identifier="nm_remote_connection_get_flags"
              version="1.12">
        <source-position filename="libnm/nm-remote-connection.h" line="128"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-remote-connection.c"
               line="668">the flags of the connection of type #NMSettingsConnectionFlags.</doc>
          <type name="SettingsConnectionFlags"
                c:type="NMSettingsConnectionFlags"/>
        </return-value>
        <parameters>
          <instance-parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-remote-connection.c"
                 line="666">the #NMRemoteConnection</doc>
            <type name="RemoteConnection" c:type="NMRemoteConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_secrets"
              c:identifier="nm_remote_connection_get_secrets"
              throws="1">
        <doc xml:space="preserve"
             filename="libnm/nm-remote-connection.c"
             line="529">Request the connection's secrets. Note that this is a blocking D-Bus call,
not a simple property accessor.</doc>
        <source-position filename="libnm/nm-remote-connection.h" line="112"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libnm/nm-remote-connection.c"
               line="539">a #GVariant of type %NM_VARIANT_TYPE_CONNECTION containing
@connection's secrets, or %NULL on error.</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-remote-connection.c"
                 line="531">the #NMRemoteConnection</doc>
            <type name="RemoteConnection" c:type="NMRemoteConnection*"/>
          </instance-parameter>
          <parameter name="setting_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-remote-connection.c"
                 line="532">the #NMSetting object name to get secrets for</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libnm/nm-remote-connection.c"
                 line="533">a #GCancellable, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_secrets_async"
              c:identifier="nm_remote_connection_get_secrets_async">
        <doc xml:space="preserve"
             filename="libnm/nm-remote-connection.c"
             line="586">Asynchronously requests the connection's secrets.</doc>
        <source-position filename="libnm/nm-remote-connection.h" line="116"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-remote-connection.c"
                 line="588">the #NMRemoteConnection</doc>
            <type name="RemoteConnection" c:type="NMRemoteConnection*"/>
          </instance-parameter>
          <parameter name="setting_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-remote-connection.c"
                 line="589">the #NMSetting object name to get secrets for</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libnm/nm-remote-connection.c"
                 line="590">a #GCancellable, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="libnm/nm-remote-connection.c"
                 line="591">callback to be called when the secret request completes</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libnm/nm-remote-connection.c"
                 line="592">caller-specific data passed to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_secrets_finish"
              c:identifier="nm_remote_connection_get_secrets_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="libnm/nm-remote-connection.c"
             line="621">Gets the result of a call to nm_remote_connection_get_secrets_async().</doc>
        <source-position filename="libnm/nm-remote-connection.h" line="121"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libnm/nm-remote-connection.c"
               line="629">a #GVariant of type %NM_VARIANT_TYPE_CONNECTION
  containing @connection's secrets, or %NULL on error.</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-remote-connection.c"
                 line="623">the #NMRemoteConnection</doc>
            <type name="RemoteConnection" c:type="NMRemoteConnection*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-remote-connection.c"
                 line="624">the result passed to the #GAsyncReadyCallback</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_unsaved"
              c:identifier="nm_remote_connection_get_unsaved">
        <source-position filename="libnm/nm-remote-connection.h" line="125"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-remote-connection.c"
               line="652">%TRUE if the remote connection contains changes that have not
been saved to disk, %FALSE if the connection is the same as its on-disk
representation.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-remote-connection.c"
                 line="650">the #NMRemoteConnection</doc>
            <type name="RemoteConnection" c:type="NMRemoteConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_visible"
              c:identifier="nm_remote_connection_get_visible">
        <doc xml:space="preserve"
             filename="libnm/nm-remote-connection.c"
             line="696">Checks if the connection is visible to the current user.  If the
connection is not visible then it is essentially useless; it will
not contain any settings, and operations such as
nm_remote_connection_save() and nm_remote_connection_delete() will
always fail. (#NMRemoteSettings will not normally return
non-visible connections to callers, but it is possible for a
connection's visibility to change after you already have a
reference to it.)</doc>
        <source-position filename="libnm/nm-remote-connection.h" line="133"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-remote-connection.c"
               line="709">%TRUE if the remote connection is visible to the current
user, %FALSE if not.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-remote-connection.c"
                 line="698">the #NMRemoteConnection</doc>
            <type name="RemoteConnection" c:type="NMRemoteConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="save" c:identifier="nm_remote_connection_save" throws="1">
        <doc xml:space="preserve"
             filename="libnm/nm-remote-connection.c"
             line="325">Saves the connection to disk if the connection has changes that have not yet
been written to disk, or if the connection has never been saved.</doc>
        <source-position filename="libnm/nm-remote-connection.h" line="90"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-remote-connection.c"
               line="334">%TRUE on success, %FALSE on error, in which case @error will be set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-remote-connection.c"
                 line="327">the #NMRemoteConnection</doc>
            <type name="RemoteConnection" c:type="NMRemoteConnection*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libnm/nm-remote-connection.c"
                 line="328">a #GCancellable, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="save_async" c:identifier="nm_remote_connection_save_async">
        <doc xml:space="preserve"
             filename="libnm/nm-remote-connection.c"
             line="371">Saves the connection to disk if the connection has changes that have not yet
been written to disk, or if the connection has never been saved.</doc>
        <source-position filename="libnm/nm-remote-connection.h" line="93"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-remote-connection.c"
                 line="373">the #NMRemoteConnection</doc>
            <type name="RemoteConnection" c:type="NMRemoteConnection*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libnm/nm-remote-connection.c"
                 line="374">a #GCancellable, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="libnm/nm-remote-connection.c"
                 line="375">callback to be called when the save operation completes</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libnm/nm-remote-connection.c"
                 line="376">caller-specific data passed to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="save_finish"
              c:identifier="nm_remote_connection_save_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="libnm/nm-remote-connection.c"
             line="401">Gets the result of a call to nm_remote_connection_save_async().</doc>
        <source-position filename="libnm/nm-remote-connection.h" line="97"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-remote-connection.c"
               line="409">%TRUE on success, %FALSE on error, in which case @error will be set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-remote-connection.c"
                 line="403">the #NMRemoteConnection</doc>
            <type name="RemoteConnection" c:type="NMRemoteConnection*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-remote-connection.c"
                 line="404">the result passed to the #GAsyncReadyCallback</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="update2"
              c:identifier="nm_remote_connection_update2"
              version="1.12">
        <doc xml:space="preserve"
             filename="libnm/nm-remote-connection.c"
             line="102">Asynchronously calls the Update2() D-Bus method.</doc>
        <source-position filename="libnm/nm-remote-connection.h" line="65"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-remote-connection.c"
                 line="104">the #NMRemoteConnection</doc>
            <type name="RemoteConnection" c:type="NMRemoteConnection*"/>
          </instance-parameter>
          <parameter name="settings"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libnm/nm-remote-connection.c"
                 line="105">optional connection to update the settings.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-remote-connection.c"
                 line="106">update-flags</doc>
            <type name="SettingsUpdate2Flags" c:type="NMSettingsUpdate2Flags"/>
          </parameter>
          <parameter name="args"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libnm/nm-remote-connection.c"
                 line="107">optional arguments.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libnm/nm-remote-connection.c"
                 line="108">a #GCancellable, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="5">
            <doc xml:space="preserve"
                 filename="libnm/nm-remote-connection.c"
                 line="109">callback to be called when the commit operation completes</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libnm/nm-remote-connection.c"
                 line="110">caller-specific data passed to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="update2_finish"
              c:identifier="nm_remote_connection_update2_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="libnm/nm-remote-connection.c"
             line="158">Gets the result of a call to nm_remote_connection_commit_changes_async().</doc>
        <source-position filename="libnm/nm-remote-connection.h" line="73"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libnm/nm-remote-connection.c"
               line="166">on success, a #GVariant of type "a{sv}" with the result. On failure,
  %NULL.</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-remote-connection.c"
                 line="160">the #NMRemoteConnection</doc>
            <type name="RemoteConnection" c:type="NMRemoteConnection*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-remote-connection.c"
                 line="161">the result passed to the #GAsyncReadyCallback</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <property name="filename" version="1.12" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-remote-connection.c"
             line="997">File that stores the connection in case the connection is
file-backed.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="flags" version="1.12" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-remote-connection.c"
             line="982">The flags of the connection as unsigned integer. The values
correspond to the #NMSettingsConnectionFlags enum.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="unsaved" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-remote-connection.c"
             line="969">%TRUE if the remote connection contains changes that have not been saved
to disk, %FALSE if the connection is the same as its on-disk representation.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="visible" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-remote-connection.c"
             line="1012">%TRUE if the remote connection is visible to the current user, %FALSE if
not.  If the connection is not visible then it is essentially useless; it
will not contain any settings, and operations such as
nm_remote_connection_save() and nm_remote_connection_delete() will always
fail. (#NMRemoteSettings will not normally return non-visible connections
to callers, but it is possible for a connection's visibility to change
after you already have a reference to it.)</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <field name="parent">
        <type name="Object" c:type="NMObject"/>
      </field>
    </class>
    <record name="RemoteConnectionClass"
            c:type="NMRemoteConnectionClass"
            glib:is-gtype-struct-for="RemoteConnection">
      <source-position filename="libnm/nm-remote-connection.h" line="60"/>
      <field name="parent_class">
        <type name="ObjectClass" c:type="NMObjectClass"/>
      </field>
      <field name="padding" readable="0" private="1">
        <array zero-terminated="0" fixed-size="8">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <enumeration name="RollbackResult" version="1.4" c:type="NMRollbackResult">
      <doc xml:space="preserve"
           filename="libnm-core/nm-dbus-interface.h"
           line="916">The result of a checkpoint Rollback() operation for a specific device.</doc>
      <source-position filename="libnm-core/nm-dbus-interface.h" line="932"/>
      <member name="ok" value="0" c:identifier="NM_ROLLBACK_RESULT_OK">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="918">the rollback succeeded.</doc>
      </member>
      <member name="err_no_device"
              value="1"
              c:identifier="NM_ROLLBACK_RESULT_ERR_NO_DEVICE">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="919">the device no longer exists.</doc>
      </member>
      <member name="err_device_unmanaged"
              value="2"
              c:identifier="NM_ROLLBACK_RESULT_ERR_DEVICE_UNMANAGED">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="920">the device is now unmanaged.</doc>
      </member>
      <member name="err_failed"
              value="3"
              c:identifier="NM_ROLLBACK_RESULT_ERR_FAILED">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="921">other errors during rollback.</doc>
      </member>
    </enumeration>
    <constant name="SECRET_AGENT_OLD_AUTO_REGISTER"
              value="auto-register"
              c:type="NM_SECRET_AGENT_OLD_AUTO_REGISTER">
      <source-position filename="libnm/nm-secret-agent-old.h" line="36"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SECRET_AGENT_OLD_CAPABILITIES"
              value="capabilities"
              c:type="NM_SECRET_AGENT_OLD_CAPABILITIES">
      <source-position filename="libnm/nm-secret-agent-old.h" line="38"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SECRET_AGENT_OLD_IDENTIFIER"
              value="identifier"
              c:type="NM_SECRET_AGENT_OLD_IDENTIFIER">
      <source-position filename="libnm/nm-secret-agent-old.h" line="35"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SECRET_AGENT_OLD_REGISTERED"
              value="registered"
              c:type="NM_SECRET_AGENT_OLD_REGISTERED">
      <source-position filename="libnm/nm-secret-agent-old.h" line="37"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_6LOWPAN_PARENT"
              value="parent"
              c:type="NM_SETTING_6LOWPAN_PARENT">
      <source-position filename="libnm-core/nm-setting-6lowpan.h" line="40"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_6LOWPAN_SETTING_NAME"
              value="6lowpan"
              c:type="NM_SETTING_6LOWPAN_SETTING_NAME">
      <source-position filename="libnm-core/nm-setting-6lowpan.h" line="38"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_802_1X_ALTSUBJECT_MATCHES"
              value="altsubject-matches"
              c:type="NM_SETTING_802_1X_ALTSUBJECT_MATCHES">
      <source-position filename="libnm-core/nm-setting-8021x.h" line="118"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_802_1X_ANONYMOUS_IDENTITY"
              value="anonymous-identity"
              c:type="NM_SETTING_802_1X_ANONYMOUS_IDENTITY">
      <source-position filename="libnm-core/nm-setting-8021x.h" line="111"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_802_1X_AUTH_TIMEOUT"
              value="auth-timeout"
              c:type="NM_SETTING_802_1X_AUTH_TIMEOUT">
      <source-position filename="libnm-core/nm-setting-8021x.h" line="152"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_802_1X_CA_CERT"
              value="ca-cert"
              c:type="NM_SETTING_802_1X_CA_CERT">
      <source-position filename="libnm-core/nm-setting-8021x.h" line="113"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_802_1X_CA_CERT_PASSWORD"
              value="ca-cert-password"
              c:type="NM_SETTING_802_1X_CA_CERT_PASSWORD">
      <source-position filename="libnm-core/nm-setting-8021x.h" line="114"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_802_1X_CA_CERT_PASSWORD_FLAGS"
              value="ca-cert-password-flags"
              c:type="NM_SETTING_802_1X_CA_CERT_PASSWORD_FLAGS">
      <source-position filename="libnm-core/nm-setting-8021x.h" line="115"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_802_1X_CA_PATH"
              value="ca-path"
              c:type="NM_SETTING_802_1X_CA_PATH">
      <source-position filename="libnm-core/nm-setting-8021x.h" line="116"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_802_1X_CERT_SCHEME_PREFIX_PATH"
              value="file://"
              c:type="NM_SETTING_802_1X_CERT_SCHEME_PREFIX_PATH">
      <source-position filename="libnm-core/nm-setting-8021x.h" line="34"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_802_1X_CERT_SCHEME_PREFIX_PKCS11"
              value="pkcs11:"
              c:type="NM_SETTING_802_1X_CERT_SCHEME_PREFIX_PKCS11">
      <source-position filename="libnm-core/nm-setting-8021x.h" line="35"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_802_1X_CLIENT_CERT"
              value="client-cert"
              c:type="NM_SETTING_802_1X_CLIENT_CERT">
      <source-position filename="libnm-core/nm-setting-8021x.h" line="120"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_802_1X_CLIENT_CERT_PASSWORD"
              value="client-cert-password"
              c:type="NM_SETTING_802_1X_CLIENT_CERT_PASSWORD">
      <source-position filename="libnm-core/nm-setting-8021x.h" line="121"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_802_1X_CLIENT_CERT_PASSWORD_FLAGS"
              value="client-cert-password-flags"
              c:type="NM_SETTING_802_1X_CLIENT_CERT_PASSWORD_FLAGS">
      <source-position filename="libnm-core/nm-setting-8021x.h" line="122"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_802_1X_DOMAIN_SUFFIX_MATCH"
              value="domain-suffix-match"
              c:type="NM_SETTING_802_1X_DOMAIN_SUFFIX_MATCH">
      <source-position filename="libnm-core/nm-setting-8021x.h" line="119"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_802_1X_EAP"
              value="eap"
              c:type="NM_SETTING_802_1X_EAP">
      <source-position filename="libnm-core/nm-setting-8021x.h" line="109"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_802_1X_IDENTITY"
              value="identity"
              c:type="NM_SETTING_802_1X_IDENTITY">
      <source-position filename="libnm-core/nm-setting-8021x.h" line="110"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_802_1X_PAC_FILE"
              value="pac-file"
              c:type="NM_SETTING_802_1X_PAC_FILE">
      <source-position filename="libnm-core/nm-setting-8021x.h" line="112"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_802_1X_PASSWORD"
              value="password"
              c:type="NM_SETTING_802_1X_PASSWORD">
      <source-position filename="libnm-core/nm-setting-8021x.h" line="139"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_802_1X_PASSWORD_FLAGS"
              value="password-flags"
              c:type="NM_SETTING_802_1X_PASSWORD_FLAGS">
      <source-position filename="libnm-core/nm-setting-8021x.h" line="140"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_802_1X_PASSWORD_RAW"
              value="password-raw"
              c:type="NM_SETTING_802_1X_PASSWORD_RAW">
      <source-position filename="libnm-core/nm-setting-8021x.h" line="141"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_802_1X_PASSWORD_RAW_FLAGS"
              value="password-raw-flags"
              c:type="NM_SETTING_802_1X_PASSWORD_RAW_FLAGS">
      <source-position filename="libnm-core/nm-setting-8021x.h" line="142"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_802_1X_PHASE1_AUTH_FLAGS"
              value="phase1-auth-flags"
              c:type="NM_SETTING_802_1X_PHASE1_AUTH_FLAGS">
      <source-position filename="libnm-core/nm-setting-8021x.h" line="126"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_802_1X_PHASE1_FAST_PROVISIONING"
              value="phase1-fast-provisioning"
              c:type="NM_SETTING_802_1X_PHASE1_FAST_PROVISIONING">
      <source-position filename="libnm-core/nm-setting-8021x.h" line="125"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_802_1X_PHASE1_PEAPLABEL"
              value="phase1-peaplabel"
              c:type="NM_SETTING_802_1X_PHASE1_PEAPLABEL">
      <source-position filename="libnm-core/nm-setting-8021x.h" line="124"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_802_1X_PHASE1_PEAPVER"
              value="phase1-peapver"
              c:type="NM_SETTING_802_1X_PHASE1_PEAPVER">
      <source-position filename="libnm-core/nm-setting-8021x.h" line="123"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_802_1X_PHASE2_ALTSUBJECT_MATCHES"
              value="phase2-altsubject-matches"
              c:type="NM_SETTING_802_1X_PHASE2_ALTSUBJECT_MATCHES">
      <source-position filename="libnm-core/nm-setting-8021x.h" line="134"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_802_1X_PHASE2_AUTH"
              value="phase2-auth"
              c:type="NM_SETTING_802_1X_PHASE2_AUTH">
      <source-position filename="libnm-core/nm-setting-8021x.h" line="127"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_802_1X_PHASE2_AUTHEAP"
              value="phase2-autheap"
              c:type="NM_SETTING_802_1X_PHASE2_AUTHEAP">
      <source-position filename="libnm-core/nm-setting-8021x.h" line="128"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_802_1X_PHASE2_CA_CERT"
              value="phase2-ca-cert"
              c:type="NM_SETTING_802_1X_PHASE2_CA_CERT">
      <source-position filename="libnm-core/nm-setting-8021x.h" line="129"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_802_1X_PHASE2_CA_CERT_PASSWORD"
              value="phase2-ca-cert-password"
              c:type="NM_SETTING_802_1X_PHASE2_CA_CERT_PASSWORD">
      <source-position filename="libnm-core/nm-setting-8021x.h" line="130"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_802_1X_PHASE2_CA_CERT_PASSWORD_FLAGS"
              value="phase2-ca-cert-password-flags"
              c:type="NM_SETTING_802_1X_PHASE2_CA_CERT_PASSWORD_FLAGS">
      <source-position filename="libnm-core/nm-setting-8021x.h" line="131"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_802_1X_PHASE2_CA_PATH"
              value="phase2-ca-path"
              c:type="NM_SETTING_802_1X_PHASE2_CA_PATH">
      <source-position filename="libnm-core/nm-setting-8021x.h" line="132"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_802_1X_PHASE2_CLIENT_CERT"
              value="phase2-client-cert"
              c:type="NM_SETTING_802_1X_PHASE2_CLIENT_CERT">
      <source-position filename="libnm-core/nm-setting-8021x.h" line="136"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_802_1X_PHASE2_CLIENT_CERT_PASSWORD"
              value="phase2-client-cert-password"
              c:type="NM_SETTING_802_1X_PHASE2_CLIENT_CERT_PASSWORD">
      <source-position filename="libnm-core/nm-setting-8021x.h" line="137"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_802_1X_PHASE2_CLIENT_CERT_PASSWORD_FLAGS"
              value="phase2-client-cert-password-flags"
              c:type="NM_SETTING_802_1X_PHASE2_CLIENT_CERT_PASSWORD_FLAGS">
      <source-position filename="libnm-core/nm-setting-8021x.h" line="138"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_802_1X_PHASE2_DOMAIN_SUFFIX_MATCH"
              value="phase2-domain-suffix-match"
              c:type="NM_SETTING_802_1X_PHASE2_DOMAIN_SUFFIX_MATCH">
      <source-position filename="libnm-core/nm-setting-8021x.h" line="135"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_802_1X_PHASE2_PRIVATE_KEY"
              value="phase2-private-key"
              c:type="NM_SETTING_802_1X_PHASE2_PRIVATE_KEY">
      <source-position filename="libnm-core/nm-setting-8021x.h" line="146"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_802_1X_PHASE2_PRIVATE_KEY_PASSWORD"
              value="phase2-private-key-password"
              c:type="NM_SETTING_802_1X_PHASE2_PRIVATE_KEY_PASSWORD">
      <source-position filename="libnm-core/nm-setting-8021x.h" line="147"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_802_1X_PHASE2_PRIVATE_KEY_PASSWORD_FLAGS"
              value="phase2-private-key-password-flags"
              c:type="NM_SETTING_802_1X_PHASE2_PRIVATE_KEY_PASSWORD_FLAGS">
      <source-position filename="libnm-core/nm-setting-8021x.h" line="148"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_802_1X_PHASE2_SUBJECT_MATCH"
              value="phase2-subject-match"
              c:type="NM_SETTING_802_1X_PHASE2_SUBJECT_MATCH">
      <source-position filename="libnm-core/nm-setting-8021x.h" line="133"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_802_1X_PIN"
              value="pin"
              c:type="NM_SETTING_802_1X_PIN">
      <source-position filename="libnm-core/nm-setting-8021x.h" line="149"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_802_1X_PIN_FLAGS"
              value="pin-flags"
              c:type="NM_SETTING_802_1X_PIN_FLAGS">
      <source-position filename="libnm-core/nm-setting-8021x.h" line="150"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_802_1X_PRIVATE_KEY"
              value="private-key"
              c:type="NM_SETTING_802_1X_PRIVATE_KEY">
      <source-position filename="libnm-core/nm-setting-8021x.h" line="143"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_802_1X_PRIVATE_KEY_PASSWORD"
              value="private-key-password"
              c:type="NM_SETTING_802_1X_PRIVATE_KEY_PASSWORD">
      <source-position filename="libnm-core/nm-setting-8021x.h" line="144"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_802_1X_PRIVATE_KEY_PASSWORD_FLAGS"
              value="private-key-password-flags"
              c:type="NM_SETTING_802_1X_PRIVATE_KEY_PASSWORD_FLAGS">
      <source-position filename="libnm-core/nm-setting-8021x.h" line="145"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_802_1X_SETTING_NAME"
              value="802-1x"
              c:type="NM_SETTING_802_1X_SETTING_NAME">
      <source-position filename="libnm-core/nm-setting-8021x.h" line="107"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_802_1X_SUBJECT_MATCH"
              value="subject-match"
              c:type="NM_SETTING_802_1X_SUBJECT_MATCH">
      <source-position filename="libnm-core/nm-setting-8021x.h" line="117"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_802_1X_SYSTEM_CA_CERTS"
              value="system-ca-certs"
              c:type="NM_SETTING_802_1X_SYSTEM_CA_CERTS">
      <source-position filename="libnm-core/nm-setting-8021x.h" line="151"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_ADSL_ENCAPSULATION"
              value="encapsulation"
              c:type="NM_SETTING_ADSL_ENCAPSULATION">
      <source-position filename="libnm-core/nm-setting-adsl.h" line="46"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_ADSL_ENCAPSULATION_LLC"
              value="llc"
              c:type="NM_SETTING_ADSL_ENCAPSULATION_LLC">
      <source-position filename="libnm-core/nm-setting-adsl.h" line="55"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_ADSL_ENCAPSULATION_VCMUX"
              value="vcmux"
              c:type="NM_SETTING_ADSL_ENCAPSULATION_VCMUX">
      <source-position filename="libnm-core/nm-setting-adsl.h" line="54"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_ADSL_PASSWORD"
              value="password"
              c:type="NM_SETTING_ADSL_PASSWORD">
      <source-position filename="libnm-core/nm-setting-adsl.h" line="43"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_ADSL_PASSWORD_FLAGS"
              value="password-flags"
              c:type="NM_SETTING_ADSL_PASSWORD_FLAGS">
      <source-position filename="libnm-core/nm-setting-adsl.h" line="44"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_ADSL_PROTOCOL"
              value="protocol"
              c:type="NM_SETTING_ADSL_PROTOCOL">
      <source-position filename="libnm-core/nm-setting-adsl.h" line="45"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_ADSL_PROTOCOL_IPOATM"
              value="ipoatm"
              c:type="NM_SETTING_ADSL_PROTOCOL_IPOATM">
      <source-position filename="libnm-core/nm-setting-adsl.h" line="52"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_ADSL_PROTOCOL_PPPOA"
              value="pppoa"
              c:type="NM_SETTING_ADSL_PROTOCOL_PPPOA">
      <source-position filename="libnm-core/nm-setting-adsl.h" line="50"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_ADSL_PROTOCOL_PPPOE"
              value="pppoe"
              c:type="NM_SETTING_ADSL_PROTOCOL_PPPOE">
      <source-position filename="libnm-core/nm-setting-adsl.h" line="51"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_ADSL_SETTING_NAME"
              value="adsl"
              c:type="NM_SETTING_ADSL_SETTING_NAME">
      <source-position filename="libnm-core/nm-setting-adsl.h" line="40"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_ADSL_USERNAME"
              value="username"
              c:type="NM_SETTING_ADSL_USERNAME">
      <source-position filename="libnm-core/nm-setting-adsl.h" line="42"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_ADSL_VCI" value="vci" c:type="NM_SETTING_ADSL_VCI">
      <source-position filename="libnm-core/nm-setting-adsl.h" line="48"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_ADSL_VPI" value="vpi" c:type="NM_SETTING_ADSL_VPI">
      <source-position filename="libnm-core/nm-setting-adsl.h" line="47"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_BLUETOOTH_BDADDR"
              value="bdaddr"
              c:type="NM_SETTING_BLUETOOTH_BDADDR">
      <source-position filename="libnm-core/nm-setting-bluetooth.h" line="43"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_BLUETOOTH_SETTING_NAME"
              value="bluetooth"
              c:type="NM_SETTING_BLUETOOTH_SETTING_NAME">
      <source-position filename="libnm-core/nm-setting-bluetooth.h" line="41"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_BLUETOOTH_TYPE"
              value="type"
              c:type="NM_SETTING_BLUETOOTH_TYPE">
      <source-position filename="libnm-core/nm-setting-bluetooth.h" line="44"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_BLUETOOTH_TYPE_DUN"
              value="dun"
              c:type="NM_SETTING_BLUETOOTH_TYPE_DUN">
      <doc xml:space="preserve"
           filename="libnm-core/nm-setting-bluetooth.h"
           line="46">Connection type describing a connection to devices that support the Bluetooth
DUN profile.</doc>
      <source-position filename="libnm-core/nm-setting-bluetooth.h" line="52"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_BLUETOOTH_TYPE_NAP"
              value="nap"
              c:type="NM_SETTING_BLUETOOTH_TYPE_NAP">
      <doc xml:space="preserve"
           filename="libnm-core/nm-setting-bluetooth.h"
           line="62">Connection type describing a Bluetooth NAP (Network Access Point),
which accepts PANU clients.</doc>
      <source-position filename="libnm-core/nm-setting-bluetooth.h" line="68"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_BLUETOOTH_TYPE_PANU"
              value="panu"
              c:type="NM_SETTING_BLUETOOTH_TYPE_PANU">
      <doc xml:space="preserve"
           filename="libnm-core/nm-setting-bluetooth.h"
           line="54">Connection type describing PANU connection to a Bluetooth NAP (Network
Access Point).</doc>
      <source-position filename="libnm-core/nm-setting-bluetooth.h" line="60"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_BOND_OPTIONS"
              value="options"
              c:type="NM_SETTING_BOND_OPTIONS">
      <source-position filename="libnm-core/nm-setting-bond.h" line="42"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_BOND_OPTION_ACTIVE_SLAVE"
              value="active_slave"
              c:type="NM_SETTING_BOND_OPTION_ACTIVE_SLAVE">
      <source-position filename="libnm-core/nm-setting-bond.h" line="60"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_BOND_OPTION_AD_ACTOR_SYSTEM"
              value="ad_actor_system"
              c:type="NM_SETTING_BOND_OPTION_AD_ACTOR_SYSTEM">
      <source-position filename="libnm-core/nm-setting-bond.h" line="62"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_BOND_OPTION_AD_ACTOR_SYS_PRIO"
              value="ad_actor_sys_prio"
              c:type="NM_SETTING_BOND_OPTION_AD_ACTOR_SYS_PRIO">
      <source-position filename="libnm-core/nm-setting-bond.h" line="61"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_BOND_OPTION_AD_SELECT"
              value="ad_select"
              c:type="NM_SETTING_BOND_OPTION_AD_SELECT">
      <source-position filename="libnm-core/nm-setting-bond.h" line="56"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_BOND_OPTION_AD_USER_PORT_KEY"
              value="ad_user_port_key"
              c:type="NM_SETTING_BOND_OPTION_AD_USER_PORT_KEY">
      <source-position filename="libnm-core/nm-setting-bond.h" line="63"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_BOND_OPTION_ALL_SLAVES_ACTIVE"
              value="all_slaves_active"
              c:type="NM_SETTING_BOND_OPTION_ALL_SLAVES_ACTIVE">
      <source-position filename="libnm-core/nm-setting-bond.h" line="64"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_BOND_OPTION_ARP_ALL_TARGETS"
              value="arp_all_targets"
              c:type="NM_SETTING_BOND_OPTION_ARP_ALL_TARGETS">
      <source-position filename="libnm-core/nm-setting-bond.h" line="65"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_BOND_OPTION_ARP_INTERVAL"
              value="arp_interval"
              c:type="NM_SETTING_BOND_OPTION_ARP_INTERVAL">
      <source-position filename="libnm-core/nm-setting-bond.h" line="49"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_BOND_OPTION_ARP_IP_TARGET"
              value="arp_ip_target"
              c:type="NM_SETTING_BOND_OPTION_ARP_IP_TARGET">
      <source-position filename="libnm-core/nm-setting-bond.h" line="50"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_BOND_OPTION_ARP_VALIDATE"
              value="arp_validate"
              c:type="NM_SETTING_BOND_OPTION_ARP_VALIDATE">
      <source-position filename="libnm-core/nm-setting-bond.h" line="51"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_BOND_OPTION_DOWNDELAY"
              value="downdelay"
              c:type="NM_SETTING_BOND_OPTION_DOWNDELAY">
      <source-position filename="libnm-core/nm-setting-bond.h" line="47"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_BOND_OPTION_FAIL_OVER_MAC"
              value="fail_over_mac"
              c:type="NM_SETTING_BOND_OPTION_FAIL_OVER_MAC">
      <source-position filename="libnm-core/nm-setting-bond.h" line="54"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_BOND_OPTION_LACP_RATE"
              value="lacp_rate"
              c:type="NM_SETTING_BOND_OPTION_LACP_RATE">
      <source-position filename="libnm-core/nm-setting-bond.h" line="59"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_BOND_OPTION_LP_INTERVAL"
              value="lp_interval"
              c:type="NM_SETTING_BOND_OPTION_LP_INTERVAL">
      <source-position filename="libnm-core/nm-setting-bond.h" line="71"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_BOND_OPTION_MIIMON"
              value="miimon"
              c:type="NM_SETTING_BOND_OPTION_MIIMON">
      <source-position filename="libnm-core/nm-setting-bond.h" line="46"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_BOND_OPTION_MIN_LINKS"
              value="min_links"
              c:type="NM_SETTING_BOND_OPTION_MIN_LINKS">
      <source-position filename="libnm-core/nm-setting-bond.h" line="66"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_BOND_OPTION_MODE"
              value="mode"
              c:type="NM_SETTING_BOND_OPTION_MODE">
      <source-position filename="libnm-core/nm-setting-bond.h" line="45"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_BOND_OPTION_NUM_GRAT_ARP"
              value="num_grat_arp"
              c:type="NM_SETTING_BOND_OPTION_NUM_GRAT_ARP">
      <source-position filename="libnm-core/nm-setting-bond.h" line="67"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_BOND_OPTION_NUM_UNSOL_NA"
              value="num_unsol_na"
              c:type="NM_SETTING_BOND_OPTION_NUM_UNSOL_NA">
      <source-position filename="libnm-core/nm-setting-bond.h" line="68"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_BOND_OPTION_PACKETS_PER_SLAVE"
              value="packets_per_slave"
              c:type="NM_SETTING_BOND_OPTION_PACKETS_PER_SLAVE">
      <source-position filename="libnm-core/nm-setting-bond.h" line="69"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_BOND_OPTION_PRIMARY"
              value="primary"
              c:type="NM_SETTING_BOND_OPTION_PRIMARY">
      <source-position filename="libnm-core/nm-setting-bond.h" line="52"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_BOND_OPTION_PRIMARY_RESELECT"
              value="primary_reselect"
              c:type="NM_SETTING_BOND_OPTION_PRIMARY_RESELECT">
      <source-position filename="libnm-core/nm-setting-bond.h" line="53"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_BOND_OPTION_RESEND_IGMP"
              value="resend_igmp"
              c:type="NM_SETTING_BOND_OPTION_RESEND_IGMP">
      <source-position filename="libnm-core/nm-setting-bond.h" line="58"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_BOND_OPTION_TLB_DYNAMIC_LB"
              value="tlb_dynamic_lb"
              c:type="NM_SETTING_BOND_OPTION_TLB_DYNAMIC_LB">
      <source-position filename="libnm-core/nm-setting-bond.h" line="70"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_BOND_OPTION_UPDELAY"
              value="updelay"
              c:type="NM_SETTING_BOND_OPTION_UPDELAY">
      <source-position filename="libnm-core/nm-setting-bond.h" line="48"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_BOND_OPTION_USE_CARRIER"
              value="use_carrier"
              c:type="NM_SETTING_BOND_OPTION_USE_CARRIER">
      <source-position filename="libnm-core/nm-setting-bond.h" line="55"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_BOND_OPTION_XMIT_HASH_POLICY"
              value="xmit_hash_policy"
              c:type="NM_SETTING_BOND_OPTION_XMIT_HASH_POLICY">
      <source-position filename="libnm-core/nm-setting-bond.h" line="57"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_BOND_SETTING_NAME"
              value="bond"
              c:type="NM_SETTING_BOND_SETTING_NAME">
      <source-position filename="libnm-core/nm-setting-bond.h" line="40"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_BRIDGE_AGEING_TIME"
              value="ageing-time"
              c:type="NM_SETTING_BRIDGE_AGEING_TIME">
      <source-position filename="libnm-core/nm-setting-bridge.h" line="48"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_BRIDGE_FORWARD_DELAY"
              value="forward-delay"
              c:type="NM_SETTING_BRIDGE_FORWARD_DELAY">
      <source-position filename="libnm-core/nm-setting-bridge.h" line="45"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_BRIDGE_GROUP_FORWARD_MASK"
              value="group-forward-mask"
              c:type="NM_SETTING_BRIDGE_GROUP_FORWARD_MASK">
      <source-position filename="libnm-core/nm-setting-bridge.h" line="49"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_BRIDGE_HELLO_TIME"
              value="hello-time"
              c:type="NM_SETTING_BRIDGE_HELLO_TIME">
      <source-position filename="libnm-core/nm-setting-bridge.h" line="46"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_BRIDGE_MAC_ADDRESS"
              value="mac-address"
              c:type="NM_SETTING_BRIDGE_MAC_ADDRESS">
      <source-position filename="libnm-core/nm-setting-bridge.h" line="42"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_BRIDGE_MAX_AGE"
              value="max-age"
              c:type="NM_SETTING_BRIDGE_MAX_AGE">
      <source-position filename="libnm-core/nm-setting-bridge.h" line="47"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_BRIDGE_MULTICAST_SNOOPING"
              value="multicast-snooping"
              c:type="NM_SETTING_BRIDGE_MULTICAST_SNOOPING">
      <source-position filename="libnm-core/nm-setting-bridge.h" line="50"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_BRIDGE_PORT_HAIRPIN_MODE"
              value="hairpin-mode"
              c:type="NM_SETTING_BRIDGE_PORT_HAIRPIN_MODE">
      <source-position filename="libnm-core/nm-setting-bridge-port.h"
                       line="44"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_BRIDGE_PORT_PATH_COST"
              value="path-cost"
              c:type="NM_SETTING_BRIDGE_PORT_PATH_COST">
      <source-position filename="libnm-core/nm-setting-bridge-port.h"
                       line="43"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_BRIDGE_PORT_PRIORITY"
              value="priority"
              c:type="NM_SETTING_BRIDGE_PORT_PRIORITY">
      <source-position filename="libnm-core/nm-setting-bridge-port.h"
                       line="42"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_BRIDGE_PORT_SETTING_NAME"
              value="bridge-port"
              c:type="NM_SETTING_BRIDGE_PORT_SETTING_NAME">
      <source-position filename="libnm-core/nm-setting-bridge-port.h"
                       line="40"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_BRIDGE_PRIORITY"
              value="priority"
              c:type="NM_SETTING_BRIDGE_PRIORITY">
      <source-position filename="libnm-core/nm-setting-bridge.h" line="44"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_BRIDGE_SETTING_NAME"
              value="bridge"
              c:type="NM_SETTING_BRIDGE_SETTING_NAME">
      <source-position filename="libnm-core/nm-setting-bridge.h" line="40"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_BRIDGE_STP"
              value="stp"
              c:type="NM_SETTING_BRIDGE_STP">
      <source-position filename="libnm-core/nm-setting-bridge.h" line="43"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_CDMA_MTU" value="mtu" c:type="NM_SETTING_CDMA_MTU">
      <source-position filename="libnm-core/nm-setting-cdma.h" line="47"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_CDMA_NUMBER"
              value="number"
              c:type="NM_SETTING_CDMA_NUMBER">
      <source-position filename="libnm-core/nm-setting-cdma.h" line="43"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_CDMA_PASSWORD"
              value="password"
              c:type="NM_SETTING_CDMA_PASSWORD">
      <source-position filename="libnm-core/nm-setting-cdma.h" line="45"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_CDMA_PASSWORD_FLAGS"
              value="password-flags"
              c:type="NM_SETTING_CDMA_PASSWORD_FLAGS">
      <source-position filename="libnm-core/nm-setting-cdma.h" line="46"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_CDMA_SETTING_NAME"
              value="cdma"
              c:type="NM_SETTING_CDMA_SETTING_NAME">
      <source-position filename="libnm-core/nm-setting-cdma.h" line="41"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_CDMA_USERNAME"
              value="username"
              c:type="NM_SETTING_CDMA_USERNAME">
      <source-position filename="libnm-core/nm-setting-cdma.h" line="44"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_CONNECTION_AUTH_RETRIES"
              value="auth-retries"
              c:type="NM_SETTING_CONNECTION_AUTH_RETRIES">
      <source-position filename="libnm-core/nm-setting-connection.h"
                       line="67"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_CONNECTION_AUTOCONNECT"
              value="autoconnect"
              c:type="NM_SETTING_CONNECTION_AUTOCONNECT">
      <source-position filename="libnm-core/nm-setting-connection.h"
                       line="52"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_CONNECTION_AUTOCONNECT_PRIORITY"
              value="autoconnect-priority"
              c:type="NM_SETTING_CONNECTION_AUTOCONNECT_PRIORITY">
      <source-position filename="libnm-core/nm-setting-connection.h"
                       line="53"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_CONNECTION_AUTOCONNECT_PRIORITY_DEFAULT"
              value="0"
              c:type="NM_SETTING_CONNECTION_AUTOCONNECT_PRIORITY_DEFAULT">
      <source-position filename="libnm-core/nm-setting-connection.h"
                       line="45"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="SETTING_CONNECTION_AUTOCONNECT_PRIORITY_MAX"
              value="999"
              c:type="NM_SETTING_CONNECTION_AUTOCONNECT_PRIORITY_MAX">
      <source-position filename="libnm-core/nm-setting-connection.h"
                       line="44"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="SETTING_CONNECTION_AUTOCONNECT_PRIORITY_MIN"
              value="-999"
              c:type="NM_SETTING_CONNECTION_AUTOCONNECT_PRIORITY_MIN">
      <source-position filename="libnm-core/nm-setting-connection.h"
                       line="43"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="SETTING_CONNECTION_AUTOCONNECT_RETRIES"
              value="autoconnect-retries"
              c:type="NM_SETTING_CONNECTION_AUTOCONNECT_RETRIES">
      <source-position filename="libnm-core/nm-setting-connection.h"
                       line="54"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_CONNECTION_AUTOCONNECT_SLAVES"
              value="autoconnect-slaves"
              c:type="NM_SETTING_CONNECTION_AUTOCONNECT_SLAVES">
      <source-position filename="libnm-core/nm-setting-connection.h"
                       line="62"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_CONNECTION_GATEWAY_PING_TIMEOUT"
              value="gateway-ping-timeout"
              c:type="NM_SETTING_CONNECTION_GATEWAY_PING_TIMEOUT">
      <source-position filename="libnm-core/nm-setting-connection.h"
                       line="64"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_CONNECTION_ID"
              value="id"
              c:type="NM_SETTING_CONNECTION_ID">
      <source-position filename="libnm-core/nm-setting-connection.h"
                       line="47"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_CONNECTION_INTERFACE_NAME"
              value="interface-name"
              c:type="NM_SETTING_CONNECTION_INTERFACE_NAME">
      <source-position filename="libnm-core/nm-setting-connection.h"
                       line="50"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_CONNECTION_LLDP"
              value="lldp"
              c:type="NM_SETTING_CONNECTION_LLDP">
      <source-position filename="libnm-core/nm-setting-connection.h"
                       line="66"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_CONNECTION_LLMNR"
              value="llmnr"
              c:type="NM_SETTING_CONNECTION_LLMNR">
      <source-position filename="libnm-core/nm-setting-connection.h"
                       line="69"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_CONNECTION_MASTER"
              value="master"
              c:type="NM_SETTING_CONNECTION_MASTER">
      <source-position filename="libnm-core/nm-setting-connection.h"
                       line="60"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_CONNECTION_MDNS"
              value="mdns"
              c:type="NM_SETTING_CONNECTION_MDNS">
      <source-position filename="libnm-core/nm-setting-connection.h"
                       line="68"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_CONNECTION_METERED"
              value="metered"
              c:type="NM_SETTING_CONNECTION_METERED">
      <source-position filename="libnm-core/nm-setting-connection.h"
                       line="65"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_CONNECTION_MULTI_CONNECT"
              value="multi-connect"
              c:type="NM_SETTING_CONNECTION_MULTI_CONNECT">
      <source-position filename="libnm-core/nm-setting-connection.h"
                       line="55"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_CONNECTION_PERMISSIONS"
              value="permissions"
              c:type="NM_SETTING_CONNECTION_PERMISSIONS">
      <source-position filename="libnm-core/nm-setting-connection.h"
                       line="58"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_CONNECTION_READ_ONLY"
              value="read-only"
              c:type="NM_SETTING_CONNECTION_READ_ONLY">
      <source-position filename="libnm-core/nm-setting-connection.h"
                       line="57"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_CONNECTION_SECONDARIES"
              value="secondaries"
              c:type="NM_SETTING_CONNECTION_SECONDARIES">
      <source-position filename="libnm-core/nm-setting-connection.h"
                       line="63"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_CONNECTION_SETTING_NAME"
              value="connection"
              c:type="NM_SETTING_CONNECTION_SETTING_NAME">
      <source-position filename="libnm-core/nm-setting-connection.h"
                       line="41"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_CONNECTION_SLAVE_TYPE"
              value="slave-type"
              c:type="NM_SETTING_CONNECTION_SLAVE_TYPE">
      <source-position filename="libnm-core/nm-setting-connection.h"
                       line="61"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_CONNECTION_STABLE_ID"
              value="stable-id"
              c:type="NM_SETTING_CONNECTION_STABLE_ID">
      <source-position filename="libnm-core/nm-setting-connection.h"
                       line="49"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_CONNECTION_TIMESTAMP"
              value="timestamp"
              c:type="NM_SETTING_CONNECTION_TIMESTAMP">
      <source-position filename="libnm-core/nm-setting-connection.h"
                       line="56"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_CONNECTION_TYPE"
              value="type"
              c:type="NM_SETTING_CONNECTION_TYPE">
      <source-position filename="libnm-core/nm-setting-connection.h"
                       line="51"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_CONNECTION_UUID"
              value="uuid"
              c:type="NM_SETTING_CONNECTION_UUID">
      <source-position filename="libnm-core/nm-setting-connection.h"
                       line="48"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_CONNECTION_ZONE"
              value="zone"
              c:type="NM_SETTING_CONNECTION_ZONE">
      <source-position filename="libnm-core/nm-setting-connection.h"
                       line="59"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_DCB_APP_FCOE_FLAGS"
              value="app-fcoe-flags"
              c:type="NM_SETTING_DCB_APP_FCOE_FLAGS">
      <source-position filename="libnm-core/nm-setting-dcb.h" line="74"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_DCB_APP_FCOE_MODE"
              value="app-fcoe-mode"
              c:type="NM_SETTING_DCB_APP_FCOE_MODE">
      <source-position filename="libnm-core/nm-setting-dcb.h" line="76"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_DCB_APP_FCOE_PRIORITY"
              value="app-fcoe-priority"
              c:type="NM_SETTING_DCB_APP_FCOE_PRIORITY">
      <source-position filename="libnm-core/nm-setting-dcb.h" line="75"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_DCB_APP_FIP_FLAGS"
              value="app-fip-flags"
              c:type="NM_SETTING_DCB_APP_FIP_FLAGS">
      <source-position filename="libnm-core/nm-setting-dcb.h" line="81"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_DCB_APP_FIP_PRIORITY"
              value="app-fip-priority"
              c:type="NM_SETTING_DCB_APP_FIP_PRIORITY">
      <source-position filename="libnm-core/nm-setting-dcb.h" line="82"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_DCB_APP_ISCSI_FLAGS"
              value="app-iscsi-flags"
              c:type="NM_SETTING_DCB_APP_ISCSI_FLAGS">
      <source-position filename="libnm-core/nm-setting-dcb.h" line="78"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_DCB_APP_ISCSI_PRIORITY"
              value="app-iscsi-priority"
              c:type="NM_SETTING_DCB_APP_ISCSI_PRIORITY">
      <source-position filename="libnm-core/nm-setting-dcb.h" line="79"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_DCB_FCOE_MODE_FABRIC"
              value="fabric"
              c:type="NM_SETTING_DCB_FCOE_MODE_FABRIC">
      <doc xml:space="preserve"
           filename="libnm-core/nm-setting-dcb.h"
           line="59">Indicates that the FCoE controller should use "fabric" mode (default)</doc>
      <source-position filename="libnm-core/nm-setting-dcb.h" line="64"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_DCB_FCOE_MODE_VN2VN"
              value="vn2vn"
              c:type="NM_SETTING_DCB_FCOE_MODE_VN2VN">
      <doc xml:space="preserve"
           filename="libnm-core/nm-setting-dcb.h"
           line="66">Indicates that the FCoE controller should use "VN2VN" mode.</doc>
      <source-position filename="libnm-core/nm-setting-dcb.h" line="71"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_DCB_PRIORITY_BANDWIDTH"
              value="priority-bandwidth"
              c:type="NM_SETTING_DCB_PRIORITY_BANDWIDTH">
      <source-position filename="libnm-core/nm-setting-dcb.h" line="90"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_DCB_PRIORITY_FLOW_CONTROL"
              value="priority-flow-control"
              c:type="NM_SETTING_DCB_PRIORITY_FLOW_CONTROL">
      <source-position filename="libnm-core/nm-setting-dcb.h" line="85"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_DCB_PRIORITY_FLOW_CONTROL_FLAGS"
              value="priority-flow-control-flags"
              c:type="NM_SETTING_DCB_PRIORITY_FLOW_CONTROL_FLAGS">
      <source-position filename="libnm-core/nm-setting-dcb.h" line="84"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_DCB_PRIORITY_GROUP_BANDWIDTH"
              value="priority-group-bandwidth"
              c:type="NM_SETTING_DCB_PRIORITY_GROUP_BANDWIDTH">
      <source-position filename="libnm-core/nm-setting-dcb.h" line="89"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_DCB_PRIORITY_GROUP_FLAGS"
              value="priority-group-flags"
              c:type="NM_SETTING_DCB_PRIORITY_GROUP_FLAGS">
      <source-position filename="libnm-core/nm-setting-dcb.h" line="87"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_DCB_PRIORITY_GROUP_ID"
              value="priority-group-id"
              c:type="NM_SETTING_DCB_PRIORITY_GROUP_ID">
      <source-position filename="libnm-core/nm-setting-dcb.h" line="88"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_DCB_PRIORITY_STRICT_BANDWIDTH"
              value="priority-strict-bandwidth"
              c:type="NM_SETTING_DCB_PRIORITY_STRICT_BANDWIDTH">
      <source-position filename="libnm-core/nm-setting-dcb.h" line="91"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_DCB_PRIORITY_TRAFFIC_CLASS"
              value="priority-traffic-class"
              c:type="NM_SETTING_DCB_PRIORITY_TRAFFIC_CLASS">
      <source-position filename="libnm-core/nm-setting-dcb.h" line="92"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_DCB_SETTING_NAME"
              value="dcb"
              c:type="NM_SETTING_DCB_SETTING_NAME">
      <source-position filename="libnm-core/nm-setting-dcb.h" line="40"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_DNS_OPTION_ATTEMPTS"
              value="attempts"
              c:type="NM_SETTING_DNS_OPTION_ATTEMPTS">
      <source-position filename="libnm-core/nm-setting-ip-config.h"
                       line="193"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_DNS_OPTION_DEBUG"
              value="debug"
              c:type="NM_SETTING_DNS_OPTION_DEBUG">
      <source-position filename="libnm-core/nm-setting-ip-config.h"
                       line="190"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_DNS_OPTION_EDNS0"
              value="edns0"
              c:type="NM_SETTING_DNS_OPTION_EDNS0">
      <source-position filename="libnm-core/nm-setting-ip-config.h"
                       line="200"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_DNS_OPTION_INET6"
              value="inet6"
              c:type="NM_SETTING_DNS_OPTION_INET6">
      <source-position filename="libnm-core/nm-setting-ip-config.h"
                       line="196"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_DNS_OPTION_IP6_BYTESTRING"
              value="ip6-bytestring"
              c:type="NM_SETTING_DNS_OPTION_IP6_BYTESTRING">
      <source-position filename="libnm-core/nm-setting-ip-config.h"
                       line="197"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_DNS_OPTION_IP6_DOTINT"
              value="ip6-dotint"
              c:type="NM_SETTING_DNS_OPTION_IP6_DOTINT">
      <source-position filename="libnm-core/nm-setting-ip-config.h"
                       line="198"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_DNS_OPTION_NDOTS"
              value="ndots"
              c:type="NM_SETTING_DNS_OPTION_NDOTS">
      <source-position filename="libnm-core/nm-setting-ip-config.h"
                       line="191"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_DNS_OPTION_NO_CHECK_NAMES"
              value="no-check-names"
              c:type="NM_SETTING_DNS_OPTION_NO_CHECK_NAMES">
      <source-position filename="libnm-core/nm-setting-ip-config.h"
                       line="195"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_DNS_OPTION_NO_IP6_DOTINT"
              value="no-ip6-dotint"
              c:type="NM_SETTING_DNS_OPTION_NO_IP6_DOTINT">
      <source-position filename="libnm-core/nm-setting-ip-config.h"
                       line="199"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_DNS_OPTION_NO_TLD_QUERY"
              value="no-tld-query"
              c:type="NM_SETTING_DNS_OPTION_NO_TLD_QUERY">
      <source-position filename="libnm-core/nm-setting-ip-config.h"
                       line="203"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_DNS_OPTION_ROTATE"
              value="rotate"
              c:type="NM_SETTING_DNS_OPTION_ROTATE">
      <source-position filename="libnm-core/nm-setting-ip-config.h"
                       line="194"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_DNS_OPTION_SINGLE_REQUEST"
              value="single-request"
              c:type="NM_SETTING_DNS_OPTION_SINGLE_REQUEST">
      <source-position filename="libnm-core/nm-setting-ip-config.h"
                       line="201"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_DNS_OPTION_SINGLE_REQUEST_REOPEN"
              value="single-request-reopen"
              c:type="NM_SETTING_DNS_OPTION_SINGLE_REQUEST_REOPEN">
      <source-position filename="libnm-core/nm-setting-ip-config.h"
                       line="202"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_DNS_OPTION_TIMEOUT"
              value="timeout"
              c:type="NM_SETTING_DNS_OPTION_TIMEOUT">
      <source-position filename="libnm-core/nm-setting-ip-config.h"
                       line="192"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_DNS_OPTION_USE_VC"
              value="use-vc"
              c:type="NM_SETTING_DNS_OPTION_USE_VC">
      <source-position filename="libnm-core/nm-setting-ip-config.h"
                       line="204"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_DUMMY_SETTING_NAME"
              value="dummy"
              c:type="NM_SETTING_DUMMY_SETTING_NAME">
      <source-position filename="libnm-core/nm-setting-dummy.h" line="40"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_ETHTOOL_SETTING_NAME"
              value="ethtool"
              c:type="NM_SETTING_ETHTOOL_SETTING_NAME">
      <source-position filename="libnm-core/nm-setting-ethtool.h" line="99"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_GENERIC_SETTING_NAME"
              value="generic"
              c:type="NM_SETTING_GENERIC_SETTING_NAME">
      <source-position filename="libnm-core/nm-setting-generic.h" line="40"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_GSM_APN" value="apn" c:type="NM_SETTING_GSM_APN">
      <source-position filename="libnm-core/nm-setting-gsm.h" line="46"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_GSM_DEVICE_ID"
              value="device-id"
              c:type="NM_SETTING_GSM_DEVICE_ID">
      <source-position filename="libnm-core/nm-setting-gsm.h" line="51"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_GSM_HOME_ONLY"
              value="home-only"
              c:type="NM_SETTING_GSM_HOME_ONLY">
      <source-position filename="libnm-core/nm-setting-gsm.h" line="50"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_GSM_MTU" value="mtu" c:type="NM_SETTING_GSM_MTU">
      <source-position filename="libnm-core/nm-setting-gsm.h" line="54"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_GSM_NETWORK_ID"
              value="network-id"
              c:type="NM_SETTING_GSM_NETWORK_ID">
      <source-position filename="libnm-core/nm-setting-gsm.h" line="47"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_GSM_NUMBER"
              value="number"
              c:type="NM_SETTING_GSM_NUMBER">
      <source-position filename="libnm-core/nm-setting-gsm.h" line="57"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_GSM_PASSWORD"
              value="password"
              c:type="NM_SETTING_GSM_PASSWORD">
      <source-position filename="libnm-core/nm-setting-gsm.h" line="44"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_GSM_PASSWORD_FLAGS"
              value="password-flags"
              c:type="NM_SETTING_GSM_PASSWORD_FLAGS">
      <source-position filename="libnm-core/nm-setting-gsm.h" line="45"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_GSM_PIN" value="pin" c:type="NM_SETTING_GSM_PIN">
      <source-position filename="libnm-core/nm-setting-gsm.h" line="48"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_GSM_PIN_FLAGS"
              value="pin-flags"
              c:type="NM_SETTING_GSM_PIN_FLAGS">
      <source-position filename="libnm-core/nm-setting-gsm.h" line="49"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_GSM_SETTING_NAME"
              value="gsm"
              c:type="NM_SETTING_GSM_SETTING_NAME">
      <source-position filename="libnm-core/nm-setting-gsm.h" line="41"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_GSM_SIM_ID"
              value="sim-id"
              c:type="NM_SETTING_GSM_SIM_ID">
      <source-position filename="libnm-core/nm-setting-gsm.h" line="52"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_GSM_SIM_OPERATOR_ID"
              value="sim-operator-id"
              c:type="NM_SETTING_GSM_SIM_OPERATOR_ID">
      <source-position filename="libnm-core/nm-setting-gsm.h" line="53"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_GSM_USERNAME"
              value="username"
              c:type="NM_SETTING_GSM_USERNAME">
      <source-position filename="libnm-core/nm-setting-gsm.h" line="43"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_INFINIBAND_MAC_ADDRESS"
              value="mac-address"
              c:type="NM_SETTING_INFINIBAND_MAC_ADDRESS">
      <source-position filename="libnm-core/nm-setting-infiniband.h"
                       line="42"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_INFINIBAND_MTU"
              value="mtu"
              c:type="NM_SETTING_INFINIBAND_MTU">
      <source-position filename="libnm-core/nm-setting-infiniband.h"
                       line="43"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_INFINIBAND_PARENT"
              value="parent"
              c:type="NM_SETTING_INFINIBAND_PARENT">
      <source-position filename="libnm-core/nm-setting-infiniband.h"
                       line="46"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_INFINIBAND_P_KEY"
              value="p-key"
              c:type="NM_SETTING_INFINIBAND_P_KEY">
      <source-position filename="libnm-core/nm-setting-infiniband.h"
                       line="45"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_INFINIBAND_SETTING_NAME"
              value="infiniband"
              c:type="NM_SETTING_INFINIBAND_SETTING_NAME">
      <source-position filename="libnm-core/nm-setting-infiniband.h"
                       line="40"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_INFINIBAND_TRANSPORT_MODE"
              value="transport-mode"
              c:type="NM_SETTING_INFINIBAND_TRANSPORT_MODE">
      <source-position filename="libnm-core/nm-setting-infiniband.h"
                       line="44"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_IP4_CONFIG_DHCP_CLIENT_ID"
              value="dhcp-client-id"
              c:type="NM_SETTING_IP4_CONFIG_DHCP_CLIENT_ID">
      <source-position filename="libnm-core/nm-setting-ip4-config.h"
                       line="43"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_IP4_CONFIG_DHCP_FQDN"
              value="dhcp-fqdn"
              c:type="NM_SETTING_IP4_CONFIG_DHCP_FQDN">
      <source-position filename="libnm-core/nm-setting-ip4-config.h"
                       line="44"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_IP4_CONFIG_METHOD_AUTO"
              value="auto"
              c:type="NM_SETTING_IP4_CONFIG_METHOD_AUTO">
      <doc xml:space="preserve"
           filename="libnm-core/nm-setting-ip4-config.h"
           line="46">IPv4 configuration should be automatically determined via a method appropriate
for the hardware interface, ie DHCP or PPP or some other device-specific
manner.</doc>
      <source-position filename="libnm-core/nm-setting-ip4-config.h"
                       line="53"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_IP4_CONFIG_METHOD_DISABLED"
              value="disabled"
              c:type="NM_SETTING_IP4_CONFIG_METHOD_DISABLED">
      <doc xml:space="preserve"
           filename="libnm-core/nm-setting-ip4-config.h"
           line="83">This connection does not use or require IPv4 address and it should be disabled.</doc>
      <source-position filename="libnm-core/nm-setting-ip4-config.h"
                       line="88"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_IP4_CONFIG_METHOD_LINK_LOCAL"
              value="link-local"
              c:type="NM_SETTING_IP4_CONFIG_METHOD_LINK_LOCAL">
      <doc xml:space="preserve"
           filename="libnm-core/nm-setting-ip4-config.h"
           line="55">IPv4 configuration should be automatically configured for link-local-only
operation.</doc>
      <source-position filename="libnm-core/nm-setting-ip4-config.h"
                       line="61"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_IP4_CONFIG_METHOD_MANUAL"
              value="manual"
              c:type="NM_SETTING_IP4_CONFIG_METHOD_MANUAL">
      <doc xml:space="preserve"
           filename="libnm-core/nm-setting-ip4-config.h"
           line="63">All necessary IPv4 configuration (addresses, prefix, DNS, etc) is specified
in the setting's properties.</doc>
      <source-position filename="libnm-core/nm-setting-ip4-config.h"
                       line="69"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_IP4_CONFIG_METHOD_SHARED"
              value="shared"
              c:type="NM_SETTING_IP4_CONFIG_METHOD_SHARED">
      <doc xml:space="preserve"
           filename="libnm-core/nm-setting-ip4-config.h"
           line="71">This connection specifies configuration that allows other computers to
connect through it to the default network (usually the Internet).  The
connection's interface will be assigned a private address, and a DHCP server,
caching DNS server, and Network Address Translation (NAT) functionality will
be started on this connection's interface to allow other devices to connect
through that interface to the default network.</doc>
      <source-position filename="libnm-core/nm-setting-ip4-config.h"
                       line="81"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_IP4_CONFIG_SETTING_NAME"
              value="ipv4"
              c:type="NM_SETTING_IP4_CONFIG_SETTING_NAME">
      <source-position filename="libnm-core/nm-setting-ip4-config.h"
                       line="41"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_IP6_CONFIG_ADDR_GEN_MODE"
              value="addr-gen-mode"
              c:type="NM_SETTING_IP6_CONFIG_ADDR_GEN_MODE">
      <source-position filename="libnm-core/nm-setting-ip6-config.h"
                       line="44"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_IP6_CONFIG_DHCP_DUID"
              value="dhcp-duid"
              c:type="NM_SETTING_IP6_CONFIG_DHCP_DUID">
      <source-position filename="libnm-core/nm-setting-ip6-config.h"
                       line="48"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_IP6_CONFIG_IP6_PRIVACY"
              value="ip6-privacy"
              c:type="NM_SETTING_IP6_CONFIG_IP6_PRIVACY">
      <source-position filename="libnm-core/nm-setting-ip6-config.h"
                       line="42"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_IP6_CONFIG_METHOD_AUTO"
              value="auto"
              c:type="NM_SETTING_IP6_CONFIG_METHOD_AUTO">
      <doc xml:space="preserve"
           filename="libnm-core/nm-setting-ip6-config.h"
           line="58">IPv6 configuration should be automatically determined via a method appropriate
for the hardware interface, ie router advertisements, DHCP, or PPP or some
other device-specific manner.</doc>
      <source-position filename="libnm-core/nm-setting-ip6-config.h"
                       line="65"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_IP6_CONFIG_METHOD_DHCP"
              value="dhcp"
              c:type="NM_SETTING_IP6_CONFIG_METHOD_DHCP">
      <doc xml:space="preserve"
           filename="libnm-core/nm-setting-ip6-config.h"
           line="67">IPv6 configuration should be automatically determined via DHCPv6 only and
router advertisements should be ignored.</doc>
      <source-position filename="libnm-core/nm-setting-ip6-config.h"
                       line="73"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_IP6_CONFIG_METHOD_IGNORE"
              value="ignore"
              c:type="NM_SETTING_IP6_CONFIG_METHOD_IGNORE">
      <doc xml:space="preserve"
           filename="libnm-core/nm-setting-ip6-config.h"
           line="50">IPv6 is not required or is handled by some other mechanism, and NetworkManager
should not configure IPv6 for this connection.</doc>
      <source-position filename="libnm-core/nm-setting-ip6-config.h"
                       line="56"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_IP6_CONFIG_METHOD_LINK_LOCAL"
              value="link-local"
              c:type="NM_SETTING_IP6_CONFIG_METHOD_LINK_LOCAL">
      <doc xml:space="preserve"
           filename="libnm-core/nm-setting-ip6-config.h"
           line="75">IPv6 configuration should be automatically configured for link-local-only
operation.</doc>
      <source-position filename="libnm-core/nm-setting-ip6-config.h"
                       line="81"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_IP6_CONFIG_METHOD_MANUAL"
              value="manual"
              c:type="NM_SETTING_IP6_CONFIG_METHOD_MANUAL">
      <doc xml:space="preserve"
           filename="libnm-core/nm-setting-ip6-config.h"
           line="83">All necessary IPv6 configuration (addresses, prefix, DNS, etc) is specified
in the setting's properties.</doc>
      <source-position filename="libnm-core/nm-setting-ip6-config.h"
                       line="89"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_IP6_CONFIG_METHOD_SHARED"
              value="shared"
              c:type="NM_SETTING_IP6_CONFIG_METHOD_SHARED">
      <doc xml:space="preserve"
           filename="libnm-core/nm-setting-ip6-config.h"
           line="91">This connection specifies configuration that allows other computers to
connect through it to the default network (usually the Internet).  The
connection's interface will be assigned a private address, and router
advertisements, a caching DNS server, and Network Address Translation (NAT)
functionality will be started on this connection's interface to allow other
devices to connect through that interface to the default network. (not yet
supported for IPv6)</doc>
      <source-position filename="libnm-core/nm-setting-ip6-config.h"
                       line="102"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_IP6_CONFIG_SETTING_NAME"
              value="ipv6"
              c:type="NM_SETTING_IP6_CONFIG_SETTING_NAME">
      <source-position filename="libnm-core/nm-setting-ip6-config.h"
                       line="40"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_IP6_CONFIG_TOKEN"
              value="token"
              c:type="NM_SETTING_IP6_CONFIG_TOKEN">
      <source-position filename="libnm-core/nm-setting-ip6-config.h"
                       line="46"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_IP_CONFIG_ADDRESSES"
              value="addresses"
              c:type="NM_SETTING_IP_CONFIG_ADDRESSES">
      <source-position filename="libnm-core/nm-setting-ip-config.h"
                       line="176"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_IP_CONFIG_DAD_TIMEOUT"
              value="dad-timeout"
              c:type="NM_SETTING_IP_CONFIG_DAD_TIMEOUT">
      <source-position filename="libnm-core/nm-setting-ip-config.h"
                       line="187"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_IP_CONFIG_DAD_TIMEOUT_MAX"
              value="30000"
              c:type="NM_SETTING_IP_CONFIG_DAD_TIMEOUT_MAX">
      <source-position filename="libnm-core/nm-setting-ip-config.h"
                       line="169"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="SETTING_IP_CONFIG_DHCP_HOSTNAME"
              value="dhcp-hostname"
              c:type="NM_SETTING_IP_CONFIG_DHCP_HOSTNAME">
      <source-position filename="libnm-core/nm-setting-ip-config.h"
                       line="183"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_IP_CONFIG_DHCP_SEND_HOSTNAME"
              value="dhcp-send-hostname"
              c:type="NM_SETTING_IP_CONFIG_DHCP_SEND_HOSTNAME">
      <source-position filename="libnm-core/nm-setting-ip-config.h"
                       line="184"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_IP_CONFIG_DHCP_TIMEOUT"
              value="dhcp-timeout"
              c:type="NM_SETTING_IP_CONFIG_DHCP_TIMEOUT">
      <source-position filename="libnm-core/nm-setting-ip-config.h"
                       line="188"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_IP_CONFIG_DNS"
              value="dns"
              c:type="NM_SETTING_IP_CONFIG_DNS">
      <source-position filename="libnm-core/nm-setting-ip-config.h"
                       line="172"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_IP_CONFIG_DNS_OPTIONS"
              value="dns-options"
              c:type="NM_SETTING_IP_CONFIG_DNS_OPTIONS">
      <source-position filename="libnm-core/nm-setting-ip-config.h"
                       line="174"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_IP_CONFIG_DNS_PRIORITY"
              value="dns-priority"
              c:type="NM_SETTING_IP_CONFIG_DNS_PRIORITY">
      <source-position filename="libnm-core/nm-setting-ip-config.h"
                       line="175"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_IP_CONFIG_DNS_SEARCH"
              value="dns-search"
              c:type="NM_SETTING_IP_CONFIG_DNS_SEARCH">
      <source-position filename="libnm-core/nm-setting-ip-config.h"
                       line="173"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_IP_CONFIG_GATEWAY"
              value="gateway"
              c:type="NM_SETTING_IP_CONFIG_GATEWAY">
      <source-position filename="libnm-core/nm-setting-ip-config.h"
                       line="177"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_IP_CONFIG_IGNORE_AUTO_DNS"
              value="ignore-auto-dns"
              c:type="NM_SETTING_IP_CONFIG_IGNORE_AUTO_DNS">
      <source-position filename="libnm-core/nm-setting-ip-config.h"
                       line="182"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_IP_CONFIG_IGNORE_AUTO_ROUTES"
              value="ignore-auto-routes"
              c:type="NM_SETTING_IP_CONFIG_IGNORE_AUTO_ROUTES">
      <source-position filename="libnm-core/nm-setting-ip-config.h"
                       line="181"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_IP_CONFIG_MAY_FAIL"
              value="may-fail"
              c:type="NM_SETTING_IP_CONFIG_MAY_FAIL">
      <source-position filename="libnm-core/nm-setting-ip-config.h"
                       line="186"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_IP_CONFIG_METHOD"
              value="method"
              c:type="NM_SETTING_IP_CONFIG_METHOD">
      <source-position filename="libnm-core/nm-setting-ip-config.h"
                       line="171"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_IP_CONFIG_NEVER_DEFAULT"
              value="never-default"
              c:type="NM_SETTING_IP_CONFIG_NEVER_DEFAULT">
      <source-position filename="libnm-core/nm-setting-ip-config.h"
                       line="185"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_IP_CONFIG_ROUTES"
              value="routes"
              c:type="NM_SETTING_IP_CONFIG_ROUTES">
      <source-position filename="libnm-core/nm-setting-ip-config.h"
                       line="178"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_IP_CONFIG_ROUTE_METRIC"
              value="route-metric"
              c:type="NM_SETTING_IP_CONFIG_ROUTE_METRIC">
      <source-position filename="libnm-core/nm-setting-ip-config.h"
                       line="179"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_IP_CONFIG_ROUTE_TABLE"
              value="route-table"
              c:type="NM_SETTING_IP_CONFIG_ROUTE_TABLE">
      <source-position filename="libnm-core/nm-setting-ip-config.h"
                       line="180"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_IP_TUNNEL_ENCAPSULATION_LIMIT"
              value="encapsulation-limit"
              c:type="NM_SETTING_IP_TUNNEL_ENCAPSULATION_LIMIT">
      <source-position filename="libnm-core/nm-setting-ip-tunnel.h" line="50"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_IP_TUNNEL_FLAGS"
              value="flags"
              c:type="NM_SETTING_IP_TUNNEL_FLAGS">
      <source-position filename="libnm-core/nm-setting-ip-tunnel.h" line="53"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_IP_TUNNEL_FLOW_LABEL"
              value="flow-label"
              c:type="NM_SETTING_IP_TUNNEL_FLOW_LABEL">
      <source-position filename="libnm-core/nm-setting-ip-tunnel.h" line="51"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_IP_TUNNEL_INPUT_KEY"
              value="input-key"
              c:type="NM_SETTING_IP_TUNNEL_INPUT_KEY">
      <source-position filename="libnm-core/nm-setting-ip-tunnel.h" line="48"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_IP_TUNNEL_LOCAL"
              value="local"
              c:type="NM_SETTING_IP_TUNNEL_LOCAL">
      <source-position filename="libnm-core/nm-setting-ip-tunnel.h" line="43"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_IP_TUNNEL_MODE"
              value="mode"
              c:type="NM_SETTING_IP_TUNNEL_MODE">
      <source-position filename="libnm-core/nm-setting-ip-tunnel.h" line="42"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_IP_TUNNEL_MTU"
              value="mtu"
              c:type="NM_SETTING_IP_TUNNEL_MTU">
      <source-position filename="libnm-core/nm-setting-ip-tunnel.h" line="52"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_IP_TUNNEL_OUTPUT_KEY"
              value="output-key"
              c:type="NM_SETTING_IP_TUNNEL_OUTPUT_KEY">
      <source-position filename="libnm-core/nm-setting-ip-tunnel.h" line="49"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_IP_TUNNEL_PARENT"
              value="parent"
              c:type="NM_SETTING_IP_TUNNEL_PARENT">
      <source-position filename="libnm-core/nm-setting-ip-tunnel.h" line="41"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_IP_TUNNEL_PATH_MTU_DISCOVERY"
              value="path-mtu-discovery"
              c:type="NM_SETTING_IP_TUNNEL_PATH_MTU_DISCOVERY">
      <source-position filename="libnm-core/nm-setting-ip-tunnel.h" line="47"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_IP_TUNNEL_REMOTE"
              value="remote"
              c:type="NM_SETTING_IP_TUNNEL_REMOTE">
      <source-position filename="libnm-core/nm-setting-ip-tunnel.h" line="44"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_IP_TUNNEL_SETTING_NAME"
              value="ip-tunnel"
              c:type="NM_SETTING_IP_TUNNEL_SETTING_NAME">
      <source-position filename="libnm-core/nm-setting-ip-tunnel.h" line="39"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_IP_TUNNEL_TOS"
              value="tos"
              c:type="NM_SETTING_IP_TUNNEL_TOS">
      <source-position filename="libnm-core/nm-setting-ip-tunnel.h" line="46"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_IP_TUNNEL_TTL"
              value="ttl"
              c:type="NM_SETTING_IP_TUNNEL_TTL">
      <source-position filename="libnm-core/nm-setting-ip-tunnel.h" line="45"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_MACSEC_ENCRYPT"
              value="encrypt"
              c:type="NM_SETTING_MACSEC_ENCRYPT">
      <source-position filename="libnm-core/nm-setting-macsec.h" line="44"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_MACSEC_MKA_CAK"
              value="mka-cak"
              c:type="NM_SETTING_MACSEC_MKA_CAK">
      <source-position filename="libnm-core/nm-setting-macsec.h" line="45"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_MACSEC_MKA_CAK_FLAGS"
              value="mka-cak-flags"
              c:type="NM_SETTING_MACSEC_MKA_CAK_FLAGS">
      <source-position filename="libnm-core/nm-setting-macsec.h" line="46"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_MACSEC_MKA_CAK_LENGTH"
              value="32"
              c:type="NM_SETTING_MACSEC_MKA_CAK_LENGTH">
      <source-position filename="libnm-core/nm-setting-macsec.h" line="102"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="SETTING_MACSEC_MKA_CKN"
              value="mka-ckn"
              c:type="NM_SETTING_MACSEC_MKA_CKN">
      <source-position filename="libnm-core/nm-setting-macsec.h" line="47"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_MACSEC_MKA_CKN_LENGTH"
              value="64"
              c:type="NM_SETTING_MACSEC_MKA_CKN_LENGTH">
      <source-position filename="libnm-core/nm-setting-macsec.h" line="103"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="SETTING_MACSEC_MODE"
              value="mode"
              c:type="NM_SETTING_MACSEC_MODE">
      <source-position filename="libnm-core/nm-setting-macsec.h" line="43"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_MACSEC_PARENT"
              value="parent"
              c:type="NM_SETTING_MACSEC_PARENT">
      <source-position filename="libnm-core/nm-setting-macsec.h" line="42"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_MACSEC_PORT"
              value="port"
              c:type="NM_SETTING_MACSEC_PORT">
      <source-position filename="libnm-core/nm-setting-macsec.h" line="48"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_MACSEC_SEND_SCI"
              value="send-sci"
              c:type="NM_SETTING_MACSEC_SEND_SCI">
      <source-position filename="libnm-core/nm-setting-macsec.h" line="50"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_MACSEC_SETTING_NAME"
              value="macsec"
              c:type="NM_SETTING_MACSEC_SETTING_NAME">
      <source-position filename="libnm-core/nm-setting-macsec.h" line="40"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_MACSEC_VALIDATION"
              value="validation"
              c:type="NM_SETTING_MACSEC_VALIDATION">
      <source-position filename="libnm-core/nm-setting-macsec.h" line="49"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_MACVLAN_MODE"
              value="mode"
              c:type="NM_SETTING_MACVLAN_MODE">
      <source-position filename="libnm-core/nm-setting-macvlan.h" line="43"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_MACVLAN_PARENT"
              value="parent"
              c:type="NM_SETTING_MACVLAN_PARENT">
      <source-position filename="libnm-core/nm-setting-macvlan.h" line="42"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_MACVLAN_PROMISCUOUS"
              value="promiscuous"
              c:type="NM_SETTING_MACVLAN_PROMISCUOUS">
      <source-position filename="libnm-core/nm-setting-macvlan.h" line="44"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_MACVLAN_SETTING_NAME"
              value="macvlan"
              c:type="NM_SETTING_MACVLAN_SETTING_NAME">
      <source-position filename="libnm-core/nm-setting-macvlan.h" line="40"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_MACVLAN_TAP"
              value="tap"
              c:type="NM_SETTING_MACVLAN_TAP">
      <source-position filename="libnm-core/nm-setting-macvlan.h" line="45"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_MATCH_INTERFACE_NAME"
              value="interface-name"
              c:type="NM_SETTING_MATCH_INTERFACE_NAME">
      <source-position filename="libnm-core/nm-setting-match.h" line="35"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_MATCH_SETTING_NAME"
              value="match"
              c:type="NM_SETTING_MATCH_SETTING_NAME">
      <source-position filename="libnm-core/nm-setting-match.h" line="33"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_NAME" value="name" c:type="NM_SETTING_NAME">
      <source-position filename="libnm-core/nm-setting.h" line="54"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_OLPC_MESH_CHANNEL"
              value="channel"
              c:type="NM_SETTING_OLPC_MESH_CHANNEL">
      <source-position filename="libnm-core/nm-setting-olpc-mesh.h" line="44"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_OLPC_MESH_DHCP_ANYCAST_ADDRESS"
              value="dhcp-anycast-address"
              c:type="NM_SETTING_OLPC_MESH_DHCP_ANYCAST_ADDRESS">
      <source-position filename="libnm-core/nm-setting-olpc-mesh.h" line="45"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_OLPC_MESH_SETTING_NAME"
              value="802-11-olpc-mesh"
              c:type="NM_SETTING_OLPC_MESH_SETTING_NAME">
      <source-position filename="libnm-core/nm-setting-olpc-mesh.h" line="41"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_OLPC_MESH_SSID"
              value="ssid"
              c:type="NM_SETTING_OLPC_MESH_SSID">
      <source-position filename="libnm-core/nm-setting-olpc-mesh.h" line="43"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_OVS_BRIDGE_FAIL_MODE"
              value="fail-mode"
              c:type="NM_SETTING_OVS_BRIDGE_FAIL_MODE">
      <source-position filename="libnm-core/nm-setting-ovs-bridge.h"
                       line="40"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_OVS_BRIDGE_MCAST_SNOOPING_ENABLE"
              value="mcast-snooping-enable"
              c:type="NM_SETTING_OVS_BRIDGE_MCAST_SNOOPING_ENABLE">
      <source-position filename="libnm-core/nm-setting-ovs-bridge.h"
                       line="41"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_OVS_BRIDGE_RSTP_ENABLE"
              value="rstp-enable"
              c:type="NM_SETTING_OVS_BRIDGE_RSTP_ENABLE">
      <source-position filename="libnm-core/nm-setting-ovs-bridge.h"
                       line="42"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_OVS_BRIDGE_SETTING_NAME"
              value="ovs-bridge"
              c:type="NM_SETTING_OVS_BRIDGE_SETTING_NAME">
      <source-position filename="libnm-core/nm-setting-ovs-bridge.h"
                       line="38"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_OVS_BRIDGE_STP_ENABLE"
              value="stp-enable"
              c:type="NM_SETTING_OVS_BRIDGE_STP_ENABLE">
      <source-position filename="libnm-core/nm-setting-ovs-bridge.h"
                       line="43"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_OVS_INTERFACE_SETTING_NAME"
              value="ovs-interface"
              c:type="NM_SETTING_OVS_INTERFACE_SETTING_NAME">
      <source-position filename="libnm-core/nm-setting-ovs-interface.h"
                       line="38"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_OVS_INTERFACE_TYPE"
              value="type"
              c:type="NM_SETTING_OVS_INTERFACE_TYPE">
      <source-position filename="libnm-core/nm-setting-ovs-interface.h"
                       line="40"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_OVS_PATCH_PEER"
              value="peer"
              c:type="NM_SETTING_OVS_PATCH_PEER">
      <source-position filename="libnm-core/nm-setting-ovs-patch.h" line="40"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_OVS_PATCH_SETTING_NAME"
              value="ovs-patch"
              c:type="NM_SETTING_OVS_PATCH_SETTING_NAME">
      <source-position filename="libnm-core/nm-setting-ovs-patch.h" line="38"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_OVS_PORT_BOND_DOWNDELAY"
              value="bond-downdelay"
              c:type="NM_SETTING_OVS_PORT_BOND_DOWNDELAY">
      <source-position filename="libnm-core/nm-setting-ovs-port.h" line="45"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_OVS_PORT_BOND_MODE"
              value="bond-mode"
              c:type="NM_SETTING_OVS_PORT_BOND_MODE">
      <source-position filename="libnm-core/nm-setting-ovs-port.h" line="43"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_OVS_PORT_BOND_UPDELAY"
              value="bond-updelay"
              c:type="NM_SETTING_OVS_PORT_BOND_UPDELAY">
      <source-position filename="libnm-core/nm-setting-ovs-port.h" line="44"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_OVS_PORT_LACP"
              value="lacp"
              c:type="NM_SETTING_OVS_PORT_LACP">
      <source-position filename="libnm-core/nm-setting-ovs-port.h" line="42"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_OVS_PORT_SETTING_NAME"
              value="ovs-port"
              c:type="NM_SETTING_OVS_PORT_SETTING_NAME">
      <source-position filename="libnm-core/nm-setting-ovs-port.h" line="38"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_OVS_PORT_TAG"
              value="tag"
              c:type="NM_SETTING_OVS_PORT_TAG">
      <source-position filename="libnm-core/nm-setting-ovs-port.h" line="41"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_OVS_PORT_VLAN_MODE"
              value="vlan-mode"
              c:type="NM_SETTING_OVS_PORT_VLAN_MODE">
      <source-position filename="libnm-core/nm-setting-ovs-port.h" line="40"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_PARAM_FUZZY_IGNORE"
              value="8"
              c:type="NM_SETTING_PARAM_FUZZY_IGNORE">
      <source-position filename="libnm-core/nm-setting.h" line="50"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="SETTING_PARAM_REQUIRED"
              value="2"
              c:type="NM_SETTING_PARAM_REQUIRED">
      <source-position filename="libnm-core/nm-setting.h" line="42"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="SETTING_PARAM_SECRET"
              value="4"
              c:type="NM_SETTING_PARAM_SECRET">
      <source-position filename="libnm-core/nm-setting.h" line="45"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="SETTING_PPPOE_PARENT"
              value="parent"
              c:type="NM_SETTING_PPPOE_PARENT">
      <source-position filename="libnm-core/nm-setting-pppoe.h" line="43"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_PPPOE_PASSWORD"
              value="password"
              c:type="NM_SETTING_PPPOE_PASSWORD">
      <source-position filename="libnm-core/nm-setting-pppoe.h" line="46"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_PPPOE_PASSWORD_FLAGS"
              value="password-flags"
              c:type="NM_SETTING_PPPOE_PASSWORD_FLAGS">
      <source-position filename="libnm-core/nm-setting-pppoe.h" line="47"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_PPPOE_SERVICE"
              value="service"
              c:type="NM_SETTING_PPPOE_SERVICE">
      <source-position filename="libnm-core/nm-setting-pppoe.h" line="44"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_PPPOE_SETTING_NAME"
              value="pppoe"
              c:type="NM_SETTING_PPPOE_SETTING_NAME">
      <source-position filename="libnm-core/nm-setting-pppoe.h" line="41"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_PPPOE_USERNAME"
              value="username"
              c:type="NM_SETTING_PPPOE_USERNAME">
      <source-position filename="libnm-core/nm-setting-pppoe.h" line="45"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_PPP_BAUD"
              value="baud"
              c:type="NM_SETTING_PPP_BAUD">
      <source-position filename="libnm-core/nm-setting-ppp.h" line="56"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_PPP_CRTSCTS"
              value="crtscts"
              c:type="NM_SETTING_PPP_CRTSCTS">
      <source-position filename="libnm-core/nm-setting-ppp.h" line="55"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_PPP_LCP_ECHO_FAILURE"
              value="lcp-echo-failure"
              c:type="NM_SETTING_PPP_LCP_ECHO_FAILURE">
      <source-position filename="libnm-core/nm-setting-ppp.h" line="59"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_PPP_LCP_ECHO_INTERVAL"
              value="lcp-echo-interval"
              c:type="NM_SETTING_PPP_LCP_ECHO_INTERVAL">
      <source-position filename="libnm-core/nm-setting-ppp.h" line="60"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_PPP_MPPE_STATEFUL"
              value="mppe-stateful"
              c:type="NM_SETTING_PPP_MPPE_STATEFUL">
      <source-position filename="libnm-core/nm-setting-ppp.h" line="54"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_PPP_MRU" value="mru" c:type="NM_SETTING_PPP_MRU">
      <source-position filename="libnm-core/nm-setting-ppp.h" line="57"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_PPP_MTU" value="mtu" c:type="NM_SETTING_PPP_MTU">
      <source-position filename="libnm-core/nm-setting-ppp.h" line="58"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_PPP_NOAUTH"
              value="noauth"
              c:type="NM_SETTING_PPP_NOAUTH">
      <source-position filename="libnm-core/nm-setting-ppp.h" line="43"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_PPP_NOBSDCOMP"
              value="nobsdcomp"
              c:type="NM_SETTING_PPP_NOBSDCOMP">
      <source-position filename="libnm-core/nm-setting-ppp.h" line="49"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_PPP_NODEFLATE"
              value="nodeflate"
              c:type="NM_SETTING_PPP_NODEFLATE">
      <source-position filename="libnm-core/nm-setting-ppp.h" line="50"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_PPP_NO_VJ_COMP"
              value="no-vj-comp"
              c:type="NM_SETTING_PPP_NO_VJ_COMP">
      <source-position filename="libnm-core/nm-setting-ppp.h" line="51"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_PPP_REFUSE_CHAP"
              value="refuse-chap"
              c:type="NM_SETTING_PPP_REFUSE_CHAP">
      <source-position filename="libnm-core/nm-setting-ppp.h" line="46"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_PPP_REFUSE_EAP"
              value="refuse-eap"
              c:type="NM_SETTING_PPP_REFUSE_EAP">
      <source-position filename="libnm-core/nm-setting-ppp.h" line="44"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_PPP_REFUSE_MSCHAP"
              value="refuse-mschap"
              c:type="NM_SETTING_PPP_REFUSE_MSCHAP">
      <source-position filename="libnm-core/nm-setting-ppp.h" line="47"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_PPP_REFUSE_MSCHAPV2"
              value="refuse-mschapv2"
              c:type="NM_SETTING_PPP_REFUSE_MSCHAPV2">
      <source-position filename="libnm-core/nm-setting-ppp.h" line="48"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_PPP_REFUSE_PAP"
              value="refuse-pap"
              c:type="NM_SETTING_PPP_REFUSE_PAP">
      <source-position filename="libnm-core/nm-setting-ppp.h" line="45"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_PPP_REQUIRE_MPPE"
              value="require-mppe"
              c:type="NM_SETTING_PPP_REQUIRE_MPPE">
      <source-position filename="libnm-core/nm-setting-ppp.h" line="52"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_PPP_REQUIRE_MPPE_128"
              value="require-mppe-128"
              c:type="NM_SETTING_PPP_REQUIRE_MPPE_128">
      <source-position filename="libnm-core/nm-setting-ppp.h" line="53"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_PPP_SETTING_NAME"
              value="ppp"
              c:type="NM_SETTING_PPP_SETTING_NAME">
      <source-position filename="libnm-core/nm-setting-ppp.h" line="41"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_PROXY_BROWSER_ONLY"
              value="browser-only"
              c:type="NM_SETTING_PROXY_BROWSER_ONLY">
      <source-position filename="libnm-core/nm-setting-proxy.h" line="57"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_PROXY_METHOD"
              value="method"
              c:type="NM_SETTING_PROXY_METHOD">
      <source-position filename="libnm-core/nm-setting-proxy.h" line="56"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_PROXY_PAC_SCRIPT"
              value="pac-script"
              c:type="NM_SETTING_PROXY_PAC_SCRIPT">
      <source-position filename="libnm-core/nm-setting-proxy.h" line="59"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_PROXY_PAC_URL"
              value="pac-url"
              c:type="NM_SETTING_PROXY_PAC_URL">
      <source-position filename="libnm-core/nm-setting-proxy.h" line="58"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_PROXY_SETTING_NAME"
              value="proxy"
              c:type="NM_SETTING_PROXY_SETTING_NAME">
      <source-position filename="libnm-core/nm-setting-proxy.h" line="54"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_SERIAL_BAUD"
              value="baud"
              c:type="NM_SETTING_SERIAL_BAUD">
      <source-position filename="libnm-core/nm-setting-serial.h" line="57"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_SERIAL_BITS"
              value="bits"
              c:type="NM_SETTING_SERIAL_BITS">
      <source-position filename="libnm-core/nm-setting-serial.h" line="58"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_SERIAL_PARITY"
              value="parity"
              c:type="NM_SETTING_SERIAL_PARITY">
      <source-position filename="libnm-core/nm-setting-serial.h" line="59"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_SERIAL_SEND_DELAY"
              value="send-delay"
              c:type="NM_SETTING_SERIAL_SEND_DELAY">
      <source-position filename="libnm-core/nm-setting-serial.h" line="61"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_SERIAL_SETTING_NAME"
              value="serial"
              c:type="NM_SETTING_SERIAL_SETTING_NAME">
      <source-position filename="libnm-core/nm-setting-serial.h" line="41"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_SERIAL_STOPBITS"
              value="stopbits"
              c:type="NM_SETTING_SERIAL_STOPBITS">
      <source-position filename="libnm-core/nm-setting-serial.h" line="60"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_SRIOV_AUTOPROBE_DRIVERS"
              value="autoprobe-drivers"
              c:type="NM_SETTING_SRIOV_AUTOPROBE_DRIVERS">
      <source-position filename="libnm-core/nm-setting-sriov.h" line="37"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_SRIOV_SETTING_NAME"
              value="sriov"
              c:type="NM_SETTING_SRIOV_SETTING_NAME">
      <source-position filename="libnm-core/nm-setting-sriov.h" line="33"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_SRIOV_TOTAL_VFS"
              value="total-vfs"
              c:type="NM_SETTING_SRIOV_TOTAL_VFS">
      <source-position filename="libnm-core/nm-setting-sriov.h" line="35"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_SRIOV_VFS"
              value="vfs"
              c:type="NM_SETTING_SRIOV_VFS">
      <source-position filename="libnm-core/nm-setting-sriov.h" line="36"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_TC_CONFIG_QDISCS"
              value="qdiscs"
              c:type="NM_SETTING_TC_CONFIG_QDISCS">
      <source-position filename="libnm-core/nm-setting-tc-config.h"
                       line="139"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_TC_CONFIG_SETTING_NAME"
              value="tc"
              c:type="NM_SETTING_TC_CONFIG_SETTING_NAME">
      <source-position filename="libnm-core/nm-setting-tc-config.h"
                       line="137"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_TC_CONFIG_TFILTERS"
              value="tfilters"
              c:type="NM_SETTING_TC_CONFIG_TFILTERS">
      <source-position filename="libnm-core/nm-setting-tc-config.h"
                       line="140"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_TEAM_CONFIG"
              value="config"
              c:type="NM_SETTING_TEAM_CONFIG">
      <source-position filename="libnm-core/nm-setting-team.h" line="124"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_TEAM_LINK_WATCHERS"
              value="link-watchers"
              c:type="NM_SETTING_TEAM_LINK_WATCHERS">
      <source-position filename="libnm-core/nm-setting-team.h" line="139"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_TEAM_MCAST_REJOIN_COUNT"
              value="mcast-rejoin-count"
              c:type="NM_SETTING_TEAM_MCAST_REJOIN_COUNT">
      <source-position filename="libnm-core/nm-setting-team.h" line="127"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_TEAM_MCAST_REJOIN_INTERVAL"
              value="mcast-rejoin-interval"
              c:type="NM_SETTING_TEAM_MCAST_REJOIN_INTERVAL">
      <source-position filename="libnm-core/nm-setting-team.h" line="128"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_TEAM_NOTIFY_MCAST_COUNT_ACTIVEBACKUP_DEFAULT"
              value="1"
              c:type="NM_SETTING_TEAM_NOTIFY_MCAST_COUNT_ACTIVEBACKUP_DEFAULT">
      <source-position filename="libnm-core/nm-setting-team.h" line="159"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="SETTING_TEAM_NOTIFY_PEERS_COUNT"
              value="notify-peers-count"
              c:type="NM_SETTING_TEAM_NOTIFY_PEERS_COUNT">
      <source-position filename="libnm-core/nm-setting-team.h" line="125"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_TEAM_NOTIFY_PEERS_COUNT_ACTIVEBACKUP_DEFAULT"
              value="1"
              c:type="NM_SETTING_TEAM_NOTIFY_PEERS_COUNT_ACTIVEBACKUP_DEFAULT">
      <source-position filename="libnm-core/nm-setting-team.h" line="158"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="SETTING_TEAM_NOTIFY_PEERS_INTERVAL"
              value="notify-peers-interval"
              c:type="NM_SETTING_TEAM_NOTIFY_PEERS_INTERVAL">
      <source-position filename="libnm-core/nm-setting-team.h" line="126"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_TEAM_PORT_CONFIG"
              value="config"
              c:type="NM_SETTING_TEAM_PORT_CONFIG">
      <source-position filename="libnm-core/nm-setting-team-port.h" line="42"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_TEAM_PORT_LACP_KEY"
              value="lacp-key"
              c:type="NM_SETTING_TEAM_PORT_LACP_KEY">
      <source-position filename="libnm-core/nm-setting-team-port.h" line="47"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_TEAM_PORT_LACP_PRIO"
              value="lacp-prio"
              c:type="NM_SETTING_TEAM_PORT_LACP_PRIO">
      <source-position filename="libnm-core/nm-setting-team-port.h" line="46"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_TEAM_PORT_LACP_PRIO_DEFAULT"
              value="255"
              c:type="NM_SETTING_TEAM_PORT_LACP_PRIO_DEFAULT">
      <source-position filename="libnm-core/nm-setting-team-port.h" line="51"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="SETTING_TEAM_PORT_LINK_WATCHERS"
              value="link-watchers"
              c:type="NM_SETTING_TEAM_PORT_LINK_WATCHERS">
      <source-position filename="libnm-core/nm-setting-team-port.h" line="48"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_TEAM_PORT_PRIO"
              value="prio"
              c:type="NM_SETTING_TEAM_PORT_PRIO">
      <source-position filename="libnm-core/nm-setting-team-port.h" line="44"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_TEAM_PORT_QUEUE_ID"
              value="queue-id"
              c:type="NM_SETTING_TEAM_PORT_QUEUE_ID">
      <source-position filename="libnm-core/nm-setting-team-port.h" line="43"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_TEAM_PORT_QUEUE_ID_DEFAULT"
              value="-1"
              c:type="NM_SETTING_TEAM_PORT_QUEUE_ID_DEFAULT">
      <source-position filename="libnm-core/nm-setting-team-port.h" line="50"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="SETTING_TEAM_PORT_SETTING_NAME"
              value="team-port"
              c:type="NM_SETTING_TEAM_PORT_SETTING_NAME">
      <source-position filename="libnm-core/nm-setting-team-port.h" line="40"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_TEAM_PORT_STICKY"
              value="sticky"
              c:type="NM_SETTING_TEAM_PORT_STICKY">
      <source-position filename="libnm-core/nm-setting-team-port.h" line="45"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_TEAM_RUNNER"
              value="runner"
              c:type="NM_SETTING_TEAM_RUNNER">
      <source-position filename="libnm-core/nm-setting-team.h" line="129"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_TEAM_RUNNER_ACTIVE"
              value="runner-active"
              c:type="NM_SETTING_TEAM_RUNNER_ACTIVE">
      <source-position filename="libnm-core/nm-setting-team.h" line="134"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_TEAM_RUNNER_ACTIVEBACKUP"
              value="activebackup"
              c:type="NM_SETTING_TEAM_RUNNER_ACTIVEBACKUP">
      <source-position filename="libnm-core/nm-setting-team.h" line="144"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_TEAM_RUNNER_AGG_SELECT_POLICY"
              value="runner-agg-select-policy"
              c:type="NM_SETTING_TEAM_RUNNER_AGG_SELECT_POLICY">
      <source-position filename="libnm-core/nm-setting-team.h" line="138"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_TEAM_RUNNER_AGG_SELECT_POLICY_BANDWIDTH"
              value="bandwidth"
              c:type="NM_SETTING_TEAM_RUNNER_AGG_SELECT_POLICY_BANDWIDTH">
      <source-position filename="libnm-core/nm-setting-team.h" line="154"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_TEAM_RUNNER_AGG_SELECT_POLICY_COUNT"
              value="count"
              c:type="NM_SETTING_TEAM_RUNNER_AGG_SELECT_POLICY_COUNT">
      <source-position filename="libnm-core/nm-setting-team.h" line="155"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_TEAM_RUNNER_AGG_SELECT_POLICY_LACP_PRIO"
              value="lacp_prio"
              c:type="NM_SETTING_TEAM_RUNNER_AGG_SELECT_POLICY_LACP_PRIO">
      <source-position filename="libnm-core/nm-setting-team.h" line="152"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_TEAM_RUNNER_AGG_SELECT_POLICY_LACP_PRIO_STABLE"
              value="lacp_prio_stable"
              c:type="NM_SETTING_TEAM_RUNNER_AGG_SELECT_POLICY_LACP_PRIO_STABLE">
      <source-position filename="libnm-core/nm-setting-team.h" line="153"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_TEAM_RUNNER_AGG_SELECT_POLICY_PORT_CONFIG"
              value="port_config"
              c:type="NM_SETTING_TEAM_RUNNER_AGG_SELECT_POLICY_PORT_CONFIG">
      <source-position filename="libnm-core/nm-setting-team.h" line="156"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_TEAM_RUNNER_BROADCAST"
              value="broadcast"
              c:type="NM_SETTING_TEAM_RUNNER_BROADCAST">
      <source-position filename="libnm-core/nm-setting-team.h" line="141"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_TEAM_RUNNER_FAST_RATE"
              value="runner-fast-rate"
              c:type="NM_SETTING_TEAM_RUNNER_FAST_RATE">
      <source-position filename="libnm-core/nm-setting-team.h" line="135"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_TEAM_RUNNER_HWADDR_POLICY"
              value="runner-hwaddr-policy"
              c:type="NM_SETTING_TEAM_RUNNER_HWADDR_POLICY">
      <source-position filename="libnm-core/nm-setting-team.h" line="130"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_TEAM_RUNNER_HWADDR_POLICY_BY_ACTIVE"
              value="by_active"
              c:type="NM_SETTING_TEAM_RUNNER_HWADDR_POLICY_BY_ACTIVE">
      <source-position filename="libnm-core/nm-setting-team.h" line="149"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_TEAM_RUNNER_HWADDR_POLICY_ONLY_ACTIVE"
              value="only_active"
              c:type="NM_SETTING_TEAM_RUNNER_HWADDR_POLICY_ONLY_ACTIVE">
      <source-position filename="libnm-core/nm-setting-team.h" line="150"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_TEAM_RUNNER_HWADDR_POLICY_SAME_ALL"
              value="same_all"
              c:type="NM_SETTING_TEAM_RUNNER_HWADDR_POLICY_SAME_ALL">
      <source-position filename="libnm-core/nm-setting-team.h" line="148"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_TEAM_RUNNER_LACP"
              value="lacp"
              c:type="NM_SETTING_TEAM_RUNNER_LACP">
      <source-position filename="libnm-core/nm-setting-team.h" line="146"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_TEAM_RUNNER_LOADBALANCE"
              value="loadbalance"
              c:type="NM_SETTING_TEAM_RUNNER_LOADBALANCE">
      <source-position filename="libnm-core/nm-setting-team.h" line="145"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_TEAM_RUNNER_MIN_PORTS"
              value="runner-min-ports"
              c:type="NM_SETTING_TEAM_RUNNER_MIN_PORTS">
      <source-position filename="libnm-core/nm-setting-team.h" line="137"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_TEAM_RUNNER_RANDOM"
              value="random"
              c:type="NM_SETTING_TEAM_RUNNER_RANDOM">
      <source-position filename="libnm-core/nm-setting-team.h" line="143"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_TEAM_RUNNER_ROUNDROBIN"
              value="roundrobin"
              c:type="NM_SETTING_TEAM_RUNNER_ROUNDROBIN">
      <source-position filename="libnm-core/nm-setting-team.h" line="142"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_TEAM_RUNNER_SYS_PRIO"
              value="runner-sys-prio"
              c:type="NM_SETTING_TEAM_RUNNER_SYS_PRIO">
      <source-position filename="libnm-core/nm-setting-team.h" line="136"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_TEAM_RUNNER_SYS_PRIO_DEFAULT"
              value="65535"
              c:type="NM_SETTING_TEAM_RUNNER_SYS_PRIO_DEFAULT">
      <source-position filename="libnm-core/nm-setting-team.h" line="163"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="SETTING_TEAM_RUNNER_TX_BALANCER"
              value="runner-tx-balancer"
              c:type="NM_SETTING_TEAM_RUNNER_TX_BALANCER">
      <source-position filename="libnm-core/nm-setting-team.h" line="132"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_TEAM_RUNNER_TX_BALANCER_INTERVAL"
              value="runner-tx-balancer-interval"
              c:type="NM_SETTING_TEAM_RUNNER_TX_BALANCER_INTERVAL">
      <source-position filename="libnm-core/nm-setting-team.h" line="133"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_TEAM_RUNNER_TX_BALANCER_INTERVAL_DEFAULT"
              value="50"
              c:type="NM_SETTING_TEAM_RUNNER_TX_BALANCER_INTERVAL_DEFAULT">
      <source-position filename="libnm-core/nm-setting-team.h" line="162"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="SETTING_TEAM_RUNNER_TX_HASH"
              value="runner-tx-hash"
              c:type="NM_SETTING_TEAM_RUNNER_TX_HASH">
      <source-position filename="libnm-core/nm-setting-team.h" line="131"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_TEAM_SETTING_NAME"
              value="team"
              c:type="NM_SETTING_TEAM_SETTING_NAME">
      <source-position filename="libnm-core/nm-setting-team.h" line="122"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_TUN_GROUP"
              value="group"
              c:type="NM_SETTING_TUN_GROUP">
      <source-position filename="libnm-core/nm-setting-tun.h" line="44"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_TUN_MODE"
              value="mode"
              c:type="NM_SETTING_TUN_MODE">
      <source-position filename="libnm-core/nm-setting-tun.h" line="42"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_TUN_MULTI_QUEUE"
              value="multi-queue"
              c:type="NM_SETTING_TUN_MULTI_QUEUE">
      <source-position filename="libnm-core/nm-setting-tun.h" line="47"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_TUN_OWNER"
              value="owner"
              c:type="NM_SETTING_TUN_OWNER">
      <source-position filename="libnm-core/nm-setting-tun.h" line="43"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_TUN_PI" value="pi" c:type="NM_SETTING_TUN_PI">
      <source-position filename="libnm-core/nm-setting-tun.h" line="45"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_TUN_SETTING_NAME"
              value="tun"
              c:type="NM_SETTING_TUN_SETTING_NAME">
      <source-position filename="libnm-core/nm-setting-tun.h" line="40"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_TUN_VNET_HDR"
              value="vnet-hdr"
              c:type="NM_SETTING_TUN_VNET_HDR">
      <source-position filename="libnm-core/nm-setting-tun.h" line="46"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_USER_DATA"
              value="data"
              c:type="NM_SETTING_USER_DATA">
      <source-position filename="libnm-core/nm-setting-user.h" line="42"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_USER_SETTING_NAME"
              value="user"
              c:type="NM_SETTING_USER_SETTING_NAME">
      <source-position filename="libnm-core/nm-setting-user.h" line="40"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_VLAN_EGRESS_PRIORITY_MAP"
              value="egress-priority-map"
              c:type="NM_SETTING_VLAN_EGRESS_PRIORITY_MAP">
      <source-position filename="libnm-core/nm-setting-vlan.h" line="47"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_VLAN_FLAGS"
              value="flags"
              c:type="NM_SETTING_VLAN_FLAGS">
      <source-position filename="libnm-core/nm-setting-vlan.h" line="45"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_VLAN_ID" value="id" c:type="NM_SETTING_VLAN_ID">
      <source-position filename="libnm-core/nm-setting-vlan.h" line="44"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_VLAN_INGRESS_PRIORITY_MAP"
              value="ingress-priority-map"
              c:type="NM_SETTING_VLAN_INGRESS_PRIORITY_MAP">
      <source-position filename="libnm-core/nm-setting-vlan.h" line="46"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_VLAN_PARENT"
              value="parent"
              c:type="NM_SETTING_VLAN_PARENT">
      <source-position filename="libnm-core/nm-setting-vlan.h" line="43"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_VLAN_SETTING_NAME"
              value="vlan"
              c:type="NM_SETTING_VLAN_SETTING_NAME">
      <source-position filename="libnm-core/nm-setting-vlan.h" line="41"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_VPN_DATA"
              value="data"
              c:type="NM_SETTING_VPN_DATA">
      <source-position filename="libnm-core/nm-setting-vpn.h" line="46"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_VPN_PERSISTENT"
              value="persistent"
              c:type="NM_SETTING_VPN_PERSISTENT">
      <source-position filename="libnm-core/nm-setting-vpn.h" line="45"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_VPN_SECRETS"
              value="secrets"
              c:type="NM_SETTING_VPN_SECRETS">
      <source-position filename="libnm-core/nm-setting-vpn.h" line="47"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_VPN_SERVICE_TYPE"
              value="service-type"
              c:type="NM_SETTING_VPN_SERVICE_TYPE">
      <source-position filename="libnm-core/nm-setting-vpn.h" line="43"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_VPN_SETTING_NAME"
              value="vpn"
              c:type="NM_SETTING_VPN_SETTING_NAME">
      <source-position filename="libnm-core/nm-setting-vpn.h" line="41"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_VPN_TIMEOUT"
              value="timeout"
              c:type="NM_SETTING_VPN_TIMEOUT">
      <source-position filename="libnm-core/nm-setting-vpn.h" line="48"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_VPN_USER_NAME"
              value="user-name"
              c:type="NM_SETTING_VPN_USER_NAME">
      <source-position filename="libnm-core/nm-setting-vpn.h" line="44"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_VXLAN_AGEING"
              value="ageing"
              c:type="NM_SETTING_VXLAN_AGEING">
      <source-position filename="libnm-core/nm-setting-vxlan.h" line="51"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_VXLAN_DESTINATION_PORT"
              value="destination-port"
              c:type="NM_SETTING_VXLAN_DESTINATION_PORT">
      <source-position filename="libnm-core/nm-setting-vxlan.h" line="48"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_VXLAN_ID" value="id" c:type="NM_SETTING_VXLAN_ID">
      <source-position filename="libnm-core/nm-setting-vxlan.h" line="43"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_VXLAN_L2_MISS"
              value="l2-miss"
              c:type="NM_SETTING_VXLAN_L2_MISS">
      <source-position filename="libnm-core/nm-setting-vxlan.h" line="56"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_VXLAN_L3_MISS"
              value="l3-miss"
              c:type="NM_SETTING_VXLAN_L3_MISS">
      <source-position filename="libnm-core/nm-setting-vxlan.h" line="57"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_VXLAN_LEARNING"
              value="learning"
              c:type="NM_SETTING_VXLAN_LEARNING">
      <source-position filename="libnm-core/nm-setting-vxlan.h" line="54"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_VXLAN_LIMIT"
              value="limit"
              c:type="NM_SETTING_VXLAN_LIMIT">
      <source-position filename="libnm-core/nm-setting-vxlan.h" line="52"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_VXLAN_LOCAL"
              value="local"
              c:type="NM_SETTING_VXLAN_LOCAL">
      <source-position filename="libnm-core/nm-setting-vxlan.h" line="44"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_VXLAN_PARENT"
              value="parent"
              c:type="NM_SETTING_VXLAN_PARENT">
      <source-position filename="libnm-core/nm-setting-vxlan.h" line="42"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_VXLAN_PROXY"
              value="proxy"
              c:type="NM_SETTING_VXLAN_PROXY">
      <source-position filename="libnm-core/nm-setting-vxlan.h" line="53"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_VXLAN_REMOTE"
              value="remote"
              c:type="NM_SETTING_VXLAN_REMOTE">
      <source-position filename="libnm-core/nm-setting-vxlan.h" line="45"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_VXLAN_RSC"
              value="rsc"
              c:type="NM_SETTING_VXLAN_RSC">
      <source-position filename="libnm-core/nm-setting-vxlan.h" line="55"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_VXLAN_SETTING_NAME"
              value="vxlan"
              c:type="NM_SETTING_VXLAN_SETTING_NAME">
      <source-position filename="libnm-core/nm-setting-vxlan.h" line="40"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_VXLAN_SOURCE_PORT_MAX"
              value="source-port-max"
              c:type="NM_SETTING_VXLAN_SOURCE_PORT_MAX">
      <source-position filename="libnm-core/nm-setting-vxlan.h" line="47"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_VXLAN_SOURCE_PORT_MIN"
              value="source-port-min"
              c:type="NM_SETTING_VXLAN_SOURCE_PORT_MIN">
      <source-position filename="libnm-core/nm-setting-vxlan.h" line="46"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_VXLAN_TOS"
              value="tos"
              c:type="NM_SETTING_VXLAN_TOS">
      <source-position filename="libnm-core/nm-setting-vxlan.h" line="49"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_VXLAN_TTL"
              value="ttl"
              c:type="NM_SETTING_VXLAN_TTL">
      <source-position filename="libnm-core/nm-setting-vxlan.h" line="50"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_WIFI_P2P_PEER"
              value="peer"
              c:type="NM_SETTING_WIFI_P2P_PEER">
      <doc xml:space="preserve"
           filename="libnm-core/nm-setting-wifi-p2p.h"
           line="41">The mac address of the peer to connect to.</doc>
      <source-position filename="libnm-core/nm-setting-wifi-p2p.h" line="46"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_WIFI_P2P_SETTING_NAME"
              value="wifi-p2p"
              c:type="NM_SETTING_WIFI_P2P_SETTING_NAME">
      <source-position filename="libnm-core/nm-setting-wifi-p2p.h" line="39"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_WIFI_P2P_WFD_IES"
              value="wfd-ies"
              c:type="NM_SETTING_WIFI_P2P_WFD_IES">
      <source-position filename="libnm-core/nm-setting-wifi-p2p.h" line="48"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_WIFI_P2P_WPS_METHOD"
              value="wps-method"
              c:type="NM_SETTING_WIFI_P2P_WPS_METHOD">
      <source-position filename="libnm-core/nm-setting-wifi-p2p.h" line="47"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_WIMAX_MAC_ADDRESS"
              value="mac-address"
              c:type="NM_SETTING_WIMAX_MAC_ADDRESS">
      <source-position filename="libnm-core/nm-setting-wimax.h" line="43"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_WIMAX_NETWORK_NAME"
              value="network-name"
              c:type="NM_SETTING_WIMAX_NETWORK_NAME">
      <source-position filename="libnm-core/nm-setting-wimax.h" line="42"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_WIMAX_SETTING_NAME"
              value="wimax"
              c:type="NM_SETTING_WIMAX_SETTING_NAME">
      <source-position filename="libnm-core/nm-setting-wimax.h" line="40"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_WIRED_AUTO_NEGOTIATE"
              value="auto-negotiate"
              c:type="NM_SETTING_WIRED_AUTO_NEGOTIATE">
      <source-position filename="libnm-core/nm-setting-wired.h" line="84"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_WIRED_CLONED_MAC_ADDRESS"
              value="cloned-mac-address"
              c:type="NM_SETTING_WIRED_CLONED_MAC_ADDRESS">
      <source-position filename="libnm-core/nm-setting-wired.h" line="86"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_WIRED_DUPLEX"
              value="duplex"
              c:type="NM_SETTING_WIRED_DUPLEX">
      <source-position filename="libnm-core/nm-setting-wired.h" line="83"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_WIRED_GENERATE_MAC_ADDRESS_MASK"
              value="generate-mac-address-mask"
              c:type="NM_SETTING_WIRED_GENERATE_MAC_ADDRESS_MASK">
      <source-position filename="libnm-core/nm-setting-wired.h" line="87"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_WIRED_MAC_ADDRESS"
              value="mac-address"
              c:type="NM_SETTING_WIRED_MAC_ADDRESS">
      <source-position filename="libnm-core/nm-setting-wired.h" line="85"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_WIRED_MAC_ADDRESS_BLACKLIST"
              value="mac-address-blacklist"
              c:type="NM_SETTING_WIRED_MAC_ADDRESS_BLACKLIST">
      <source-position filename="libnm-core/nm-setting-wired.h" line="88"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_WIRED_MTU"
              value="mtu"
              c:type="NM_SETTING_WIRED_MTU">
      <source-position filename="libnm-core/nm-setting-wired.h" line="89"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_WIRED_PORT"
              value="port"
              c:type="NM_SETTING_WIRED_PORT">
      <source-position filename="libnm-core/nm-setting-wired.h" line="81"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_WIRED_S390_NETTYPE"
              value="s390-nettype"
              c:type="NM_SETTING_WIRED_S390_NETTYPE">
      <source-position filename="libnm-core/nm-setting-wired.h" line="91"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_WIRED_S390_OPTIONS"
              value="s390-options"
              c:type="NM_SETTING_WIRED_S390_OPTIONS">
      <source-position filename="libnm-core/nm-setting-wired.h" line="92"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_WIRED_S390_SUBCHANNELS"
              value="s390-subchannels"
              c:type="NM_SETTING_WIRED_S390_SUBCHANNELS">
      <source-position filename="libnm-core/nm-setting-wired.h" line="90"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_WIRED_SETTING_NAME"
              value="802-3-ethernet"
              c:type="NM_SETTING_WIRED_SETTING_NAME">
      <source-position filename="libnm-core/nm-setting-wired.h" line="41"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_WIRED_SPEED"
              value="speed"
              c:type="NM_SETTING_WIRED_SPEED">
      <source-position filename="libnm-core/nm-setting-wired.h" line="82"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_WIRED_WAKE_ON_LAN"
              value="wake-on-lan"
              c:type="NM_SETTING_WIRED_WAKE_ON_LAN">
      <source-position filename="libnm-core/nm-setting-wired.h" line="93"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_WIRED_WAKE_ON_LAN_PASSWORD"
              value="wake-on-lan-password"
              c:type="NM_SETTING_WIRED_WAKE_ON_LAN_PASSWORD">
      <source-position filename="libnm-core/nm-setting-wired.h" line="94"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_WIREGUARD_FWMARK"
              value="fwmark"
              c:type="NM_SETTING_WIREGUARD_FWMARK">
      <source-position filename="libnm-core/nm-setting-wireguard.h"
                       line="129"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_WIREGUARD_LISTEN_PORT"
              value="listen-port"
              c:type="NM_SETTING_WIREGUARD_LISTEN_PORT">
      <source-position filename="libnm-core/nm-setting-wireguard.h"
                       line="130"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_WIREGUARD_MTU"
              value="mtu"
              c:type="NM_SETTING_WIREGUARD_MTU">
      <source-position filename="libnm-core/nm-setting-wireguard.h"
                       line="136"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_WIREGUARD_PEERS"
              value="peers"
              c:type="NM_SETTING_WIREGUARD_PEERS">
      <source-position filename="libnm-core/nm-setting-wireguard.h"
                       line="134"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_WIREGUARD_PEER_ROUTES"
              value="peer-routes"
              c:type="NM_SETTING_WIREGUARD_PEER_ROUTES">
      <source-position filename="libnm-core/nm-setting-wireguard.h"
                       line="137"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_WIREGUARD_PRIVATE_KEY"
              value="private-key"
              c:type="NM_SETTING_WIREGUARD_PRIVATE_KEY">
      <source-position filename="libnm-core/nm-setting-wireguard.h"
                       line="131"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_WIREGUARD_PRIVATE_KEY_FLAGS"
              value="private-key-flags"
              c:type="NM_SETTING_WIREGUARD_PRIVATE_KEY_FLAGS">
      <source-position filename="libnm-core/nm-setting-wireguard.h"
                       line="132"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_WIREGUARD_SETTING_NAME"
              value="wireguard"
              c:type="NM_SETTING_WIREGUARD_SETTING_NAME">
      <source-position filename="libnm-core/nm-setting-wireguard.h"
                       line="127"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_WIRELESS_BAND"
              value="band"
              c:type="NM_SETTING_WIRELESS_BAND">
      <source-position filename="libnm-core/nm-setting-wireless.h" line="88"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_WIRELESS_BSSID"
              value="bssid"
              c:type="NM_SETTING_WIRELESS_BSSID">
      <source-position filename="libnm-core/nm-setting-wireless.h" line="90"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_WIRELESS_CHANNEL"
              value="channel"
              c:type="NM_SETTING_WIRELESS_CHANNEL">
      <source-position filename="libnm-core/nm-setting-wireless.h" line="89"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_WIRELESS_CLONED_MAC_ADDRESS"
              value="cloned-mac-address"
              c:type="NM_SETTING_WIRELESS_CLONED_MAC_ADDRESS">
      <source-position filename="libnm-core/nm-setting-wireless.h" line="94"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_WIRELESS_GENERATE_MAC_ADDRESS_MASK"
              value="generate-mac-address-mask"
              c:type="NM_SETTING_WIRELESS_GENERATE_MAC_ADDRESS_MASK">
      <source-position filename="libnm-core/nm-setting-wireless.h" line="95"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_WIRELESS_HIDDEN"
              value="hidden"
              c:type="NM_SETTING_WIRELESS_HIDDEN">
      <source-position filename="libnm-core/nm-setting-wireless.h" line="99"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_WIRELESS_MAC_ADDRESS"
              value="mac-address"
              c:type="NM_SETTING_WIRELESS_MAC_ADDRESS">
      <source-position filename="libnm-core/nm-setting-wireless.h" line="93"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_WIRELESS_MAC_ADDRESS_BLACKLIST"
              value="mac-address-blacklist"
              c:type="NM_SETTING_WIRELESS_MAC_ADDRESS_BLACKLIST">
      <source-position filename="libnm-core/nm-setting-wireless.h" line="96"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_WIRELESS_MAC_ADDRESS_RANDOMIZATION"
              value="mac-address-randomization"
              c:type="NM_SETTING_WIRELESS_MAC_ADDRESS_RANDOMIZATION">
      <source-position filename="libnm-core/nm-setting-wireless.h" line="101"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_WIRELESS_MODE"
              value="mode"
              c:type="NM_SETTING_WIRELESS_MODE">
      <source-position filename="libnm-core/nm-setting-wireless.h" line="87"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_WIRELESS_MODE_ADHOC"
              value="adhoc"
              c:type="NM_SETTING_WIRELESS_MODE_ADHOC">
      <doc xml:space="preserve"
           filename="libnm-core/nm-setting-wireless.h"
           line="104">Indicates Ad-Hoc mode where no access point is expected to be present.</doc>
      <source-position filename="libnm-core/nm-setting-wireless.h" line="109"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_WIRELESS_MODE_AP"
              value="ap"
              c:type="NM_SETTING_WIRELESS_MODE_AP">
      <doc xml:space="preserve"
           filename="libnm-core/nm-setting-wireless.h"
           line="111">Indicates AP/master mode where the wireless device is started as an access
point/hotspot.</doc>
      <source-position filename="libnm-core/nm-setting-wireless.h" line="117"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_WIRELESS_MODE_INFRA"
              value="infrastructure"
              c:type="NM_SETTING_WIRELESS_MODE_INFRA">
      <doc xml:space="preserve"
           filename="libnm-core/nm-setting-wireless.h"
           line="119">Indicates infrastructure mode where an access point is expected to be present
for this connection.</doc>
      <source-position filename="libnm-core/nm-setting-wireless.h" line="125"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_WIRELESS_MTU"
              value="mtu"
              c:type="NM_SETTING_WIRELESS_MTU">
      <source-position filename="libnm-core/nm-setting-wireless.h" line="97"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_WIRELESS_POWERSAVE"
              value="powersave"
              c:type="NM_SETTING_WIRELESS_POWERSAVE">
      <source-position filename="libnm-core/nm-setting-wireless.h" line="100"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_WIRELESS_RATE"
              value="rate"
              c:type="NM_SETTING_WIRELESS_RATE">
      <source-position filename="libnm-core/nm-setting-wireless.h" line="91"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_WIRELESS_SECURITY_AUTH_ALG"
              value="auth-alg"
              c:type="NM_SETTING_WIRELESS_SECURITY_AUTH_ALG">
      <source-position filename="libnm-core/nm-setting-wireless-security.h"
                       line="139"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_WIRELESS_SECURITY_FILS"
              value="fils"
              c:type="NM_SETTING_WIRELESS_SECURITY_FILS">
      <source-position filename="libnm-core/nm-setting-wireless-security.h"
                       line="156"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_WIRELESS_SECURITY_GROUP"
              value="group"
              c:type="NM_SETTING_WIRELESS_SECURITY_GROUP">
      <source-position filename="libnm-core/nm-setting-wireless-security.h"
                       line="142"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_WIRELESS_SECURITY_KEY_MGMT"
              value="key-mgmt"
              c:type="NM_SETTING_WIRELESS_SECURITY_KEY_MGMT">
      <source-position filename="libnm-core/nm-setting-wireless-security.h"
                       line="137"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_WIRELESS_SECURITY_LEAP_PASSWORD"
              value="leap-password"
              c:type="NM_SETTING_WIRELESS_SECURITY_LEAP_PASSWORD">
      <source-position filename="libnm-core/nm-setting-wireless-security.h"
                       line="153"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_WIRELESS_SECURITY_LEAP_PASSWORD_FLAGS"
              value="leap-password-flags"
              c:type="NM_SETTING_WIRELESS_SECURITY_LEAP_PASSWORD_FLAGS">
      <source-position filename="libnm-core/nm-setting-wireless-security.h"
                       line="154"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_WIRELESS_SECURITY_LEAP_USERNAME"
              value="leap-username"
              c:type="NM_SETTING_WIRELESS_SECURITY_LEAP_USERNAME">
      <source-position filename="libnm-core/nm-setting-wireless-security.h"
                       line="144"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_WIRELESS_SECURITY_PAIRWISE"
              value="pairwise"
              c:type="NM_SETTING_WIRELESS_SECURITY_PAIRWISE">
      <source-position filename="libnm-core/nm-setting-wireless-security.h"
                       line="141"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_WIRELESS_SECURITY_PMF"
              value="pmf"
              c:type="NM_SETTING_WIRELESS_SECURITY_PMF">
      <source-position filename="libnm-core/nm-setting-wireless-security.h"
                       line="143"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_WIRELESS_SECURITY_PROTO"
              value="proto"
              c:type="NM_SETTING_WIRELESS_SECURITY_PROTO">
      <source-position filename="libnm-core/nm-setting-wireless-security.h"
                       line="140"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_WIRELESS_SECURITY_PSK"
              value="psk"
              c:type="NM_SETTING_WIRELESS_SECURITY_PSK">
      <source-position filename="libnm-core/nm-setting-wireless-security.h"
                       line="151"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_WIRELESS_SECURITY_PSK_FLAGS"
              value="psk-flags"
              c:type="NM_SETTING_WIRELESS_SECURITY_PSK_FLAGS">
      <source-position filename="libnm-core/nm-setting-wireless-security.h"
                       line="152"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_WIRELESS_SECURITY_SETTING_NAME"
              value="802-11-wireless-security"
              c:type="NM_SETTING_WIRELESS_SECURITY_SETTING_NAME">
      <source-position filename="libnm-core/nm-setting-wireless-security.h"
                       line="41"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_WIRELESS_SECURITY_WEP_KEY0"
              value="wep-key0"
              c:type="NM_SETTING_WIRELESS_SECURITY_WEP_KEY0">
      <source-position filename="libnm-core/nm-setting-wireless-security.h"
                       line="145"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_WIRELESS_SECURITY_WEP_KEY1"
              value="wep-key1"
              c:type="NM_SETTING_WIRELESS_SECURITY_WEP_KEY1">
      <source-position filename="libnm-core/nm-setting-wireless-security.h"
                       line="146"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_WIRELESS_SECURITY_WEP_KEY2"
              value="wep-key2"
              c:type="NM_SETTING_WIRELESS_SECURITY_WEP_KEY2">
      <source-position filename="libnm-core/nm-setting-wireless-security.h"
                       line="147"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_WIRELESS_SECURITY_WEP_KEY3"
              value="wep-key3"
              c:type="NM_SETTING_WIRELESS_SECURITY_WEP_KEY3">
      <source-position filename="libnm-core/nm-setting-wireless-security.h"
                       line="148"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_WIRELESS_SECURITY_WEP_KEY_FLAGS"
              value="wep-key-flags"
              c:type="NM_SETTING_WIRELESS_SECURITY_WEP_KEY_FLAGS">
      <source-position filename="libnm-core/nm-setting-wireless-security.h"
                       line="149"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_WIRELESS_SECURITY_WEP_KEY_TYPE"
              value="wep-key-type"
              c:type="NM_SETTING_WIRELESS_SECURITY_WEP_KEY_TYPE">
      <source-position filename="libnm-core/nm-setting-wireless-security.h"
                       line="150"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_WIRELESS_SECURITY_WEP_TX_KEYIDX"
              value="wep-tx-keyidx"
              c:type="NM_SETTING_WIRELESS_SECURITY_WEP_TX_KEYIDX">
      <source-position filename="libnm-core/nm-setting-wireless-security.h"
                       line="138"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_WIRELESS_SECURITY_WPS_METHOD"
              value="wps-method"
              c:type="NM_SETTING_WIRELESS_SECURITY_WPS_METHOD">
      <source-position filename="libnm-core/nm-setting-wireless-security.h"
                       line="155"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_WIRELESS_SEEN_BSSIDS"
              value="seen-bssids"
              c:type="NM_SETTING_WIRELESS_SEEN_BSSIDS">
      <source-position filename="libnm-core/nm-setting-wireless.h" line="98"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_WIRELESS_SETTING_NAME"
              value="802-11-wireless"
              c:type="NM_SETTING_WIRELESS_SETTING_NAME">
      <source-position filename="libnm-core/nm-setting-wireless.h" line="42"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_WIRELESS_SSID"
              value="ssid"
              c:type="NM_SETTING_WIRELESS_SSID">
      <source-position filename="libnm-core/nm-setting-wireless.h" line="86"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_WIRELESS_TX_POWER"
              value="tx-power"
              c:type="NM_SETTING_WIRELESS_TX_POWER">
      <source-position filename="libnm-core/nm-setting-wireless.h" line="92"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_WIRELESS_WAKE_ON_WLAN"
              value="wake-on-wlan"
              c:type="NM_SETTING_WIRELESS_WAKE_ON_WLAN">
      <source-position filename="libnm-core/nm-setting-wireless.h" line="102"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_WPAN_CHANNEL"
              value="channel"
              c:type="NM_SETTING_WPAN_CHANNEL">
      <source-position filename="libnm-core/nm-setting-wpan.h" line="43"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_WPAN_CHANNEL_DEFAULT"
              value="-1"
              c:type="NM_SETTING_WPAN_CHANNEL_DEFAULT">
      <source-position filename="libnm-core/nm-setting-wpan.h" line="46"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="SETTING_WPAN_MAC_ADDRESS"
              value="mac-address"
              c:type="NM_SETTING_WPAN_MAC_ADDRESS">
      <source-position filename="libnm-core/nm-setting-wpan.h" line="39"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_WPAN_PAGE"
              value="page"
              c:type="NM_SETTING_WPAN_PAGE">
      <source-position filename="libnm-core/nm-setting-wpan.h" line="42"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_WPAN_PAGE_DEFAULT"
              value="-1"
              c:type="NM_SETTING_WPAN_PAGE_DEFAULT">
      <source-position filename="libnm-core/nm-setting-wpan.h" line="45"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="SETTING_WPAN_PAN_ID"
              value="pan-id"
              c:type="NM_SETTING_WPAN_PAN_ID">
      <source-position filename="libnm-core/nm-setting-wpan.h" line="40"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_WPAN_SETTING_NAME"
              value="wpan"
              c:type="NM_SETTING_WPAN_SETTING_NAME">
      <source-position filename="libnm-core/nm-setting-wpan.h" line="38"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SETTING_WPAN_SHORT_ADDRESS"
              value="short-address"
              c:type="NM_SETTING_WPAN_SHORT_ADDRESS">
      <source-position filename="libnm-core/nm-setting-wpan.h" line="41"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SRIOV_VF_ATTRIBUTE_MAC"
              value="mac"
              c:type="NM_SRIOV_VF_ATTRIBUTE_MAC">
      <source-position filename="libnm-core/nm-setting-sriov.h" line="39"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SRIOV_VF_ATTRIBUTE_MAX_TX_RATE"
              value="max-tx-rate"
              c:type="NM_SRIOV_VF_ATTRIBUTE_MAX_TX_RATE">
      <source-position filename="libnm-core/nm-setting-sriov.h" line="43"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SRIOV_VF_ATTRIBUTE_MIN_TX_RATE"
              value="min-tx-rate"
              c:type="NM_SRIOV_VF_ATTRIBUTE_MIN_TX_RATE">
      <source-position filename="libnm-core/nm-setting-sriov.h" line="42"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SRIOV_VF_ATTRIBUTE_SPOOF_CHECK"
              value="spoof-check"
              c:type="NM_SRIOV_VF_ATTRIBUTE_SPOOF_CHECK">
      <source-position filename="libnm-core/nm-setting-sriov.h" line="40"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SRIOV_VF_ATTRIBUTE_TRUST"
              value="trust"
              c:type="NM_SRIOV_VF_ATTRIBUTE_TRUST">
      <source-position filename="libnm-core/nm-setting-sriov.h" line="41"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <bitfield name="SecretAgentCapabilities"
              glib:type-name="NMSecretAgentCapabilities"
              glib:get-type="nm_secret_agent_capabilities_get_type"
              c:type="NMSecretAgentCapabilities">
      <doc xml:space="preserve"
           filename="libnm-core/nm-dbus-interface.h"
           line="807">#NMSecretAgentCapabilities indicate various capabilities of the agent.</doc>
      <member name="none"
              value="0"
              c:identifier="NM_SECRET_AGENT_CAPABILITY_NONE"
              glib:nick="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="809">the agent supports no special capabilities</doc>
      </member>
      <member name="vpn_hints"
              value="1"
              c:identifier="NM_SECRET_AGENT_CAPABILITY_VPN_HINTS"
              glib:nick="vpn-hints">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="810">the agent supports passing hints to
VPN plugin authentication dialogs.</doc>
      </member>
      <member name="last"
              value="1"
              c:identifier="NM_SECRET_AGENT_CAPABILITY_LAST"
              glib:nick="last">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="812">bounds checking value; should not be used.</doc>
      </member>
    </bitfield>
    <enumeration name="SecretAgentError"
                 glib:type-name="NMSecretAgentError"
                 glib:get-type="nm_secret_agent_error_get_type"
                 c:type="NMSecretAgentError"
                 glib:error-domain="nm-secret-agent-error-quark">
      <doc xml:space="preserve"
           filename="libnm-core/nm-errors.h"
           line="222">#NMSecretAgentError values are passed by secret agents back to NetworkManager
when they encounter problems retrieving secrets on behalf of NM. They
correspond to errors in the "org.freedesktop.NetworkManager.SecretManager"
namespace.

Client APIs such as nm_client_activate_connection() will not see these error
codes; instead, the secret agent manager will translate them to the
corresponding #NMAgentManagerError codes.</doc>
      <member name="Failed"
              value="0"
              c:identifier="NM_SECRET_AGENT_ERROR_FAILED"
              glib:nick="Failed">
        <doc xml:space="preserve"
             filename="libnm-core/nm-errors.h"
             line="224">unknown or unclassified error</doc>
      </member>
      <member name="PermissionDenied"
              value="1"
              c:identifier="NM_SECRET_AGENT_ERROR_PERMISSION_DENIED"
              glib:nick="PermissionDenied">
        <doc xml:space="preserve"
             filename="libnm-core/nm-errors.h"
             line="225">the caller (ie, NetworkManager) is
  not authorized to make this request</doc>
      </member>
      <member name="InvalidConnection"
              value="2"
              c:identifier="NM_SECRET_AGENT_ERROR_INVALID_CONNECTION"
              glib:nick="InvalidConnection">
        <doc xml:space="preserve"
             filename="libnm-core/nm-errors.h"
             line="227">the connection for which secrets
  were requested is invalid</doc>
      </member>
      <member name="UserCanceled"
              value="3"
              c:identifier="NM_SECRET_AGENT_ERROR_USER_CANCELED"
              glib:nick="UserCanceled">
        <doc xml:space="preserve"
             filename="libnm-core/nm-errors.h"
             line="229">the request was canceled by the user</doc>
      </member>
      <member name="AgentCanceled"
              value="4"
              c:identifier="NM_SECRET_AGENT_ERROR_AGENT_CANCELED"
              glib:nick="AgentCanceled">
        <doc xml:space="preserve"
             filename="libnm-core/nm-errors.h"
             line="230">the agent canceled the request
  because it was requested to do so by NetworkManager</doc>
      </member>
      <member name="NoSecrets"
              value="5"
              c:identifier="NM_SECRET_AGENT_ERROR_NO_SECRETS"
              glib:nick="NoSecrets">
        <doc xml:space="preserve"
             filename="libnm-core/nm-errors.h"
             line="232">the agent cannot find any secrets for this
  connection</doc>
      </member>
      <function name="quark" c:identifier="nm_secret_agent_error_quark">
        <return-value transfer-ownership="none">
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
    </enumeration>
    <bitfield name="SecretAgentGetSecretsFlags"
              glib:type-name="NMSecretAgentGetSecretsFlags"
              glib:get-type="nm_secret_agent_get_secrets_flags_get_type"
              c:type="NMSecretAgentGetSecretsFlags">
      <doc xml:space="preserve"
           filename="libnm-core/nm-dbus-interface.h"
           line="769">#NMSecretAgentGetSecretsFlags values modify the behavior of a GetSecrets request.</doc>
      <member name="none"
              value="0"
              c:identifier="NM_SECRET_AGENT_GET_SECRETS_FLAG_NONE"
              glib:nick="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="771">no special behavior; by default no
  user interaction is allowed and requests for secrets are fulfilled from
  persistent storage, or if no secrets are available an error is returned.</doc>
      </member>
      <member name="allow_interaction"
              value="1"
              c:identifier="NM_SECRET_AGENT_GET_SECRETS_FLAG_ALLOW_INTERACTION"
              glib:nick="allow-interaction">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="774">allows the request to
  interact with the user, possibly prompting via UI for secrets if any are
  required, or if none are found in persistent storage.</doc>
      </member>
      <member name="request_new"
              value="2"
              c:identifier="NM_SECRET_AGENT_GET_SECRETS_FLAG_REQUEST_NEW"
              glib:nick="request-new">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="777">explicitly prompt for new
  secrets from the user.  This flag signals that NetworkManager thinks any
  existing secrets are invalid or wrong.  This flag implies that interaction
  is allowed.</doc>
      </member>
      <member name="user_requested"
              value="4"
              c:identifier="NM_SECRET_AGENT_GET_SECRETS_FLAG_USER_REQUESTED"
              glib:nick="user-requested">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="781">set if the request was
  initiated by user-requested action via the D-Bus interface, as opposed to
  automatically initiated by NetworkManager in response to (for example) scan
  results or carrier changes.</doc>
      </member>
      <member name="wps_pbc_active"
              value="8"
              c:identifier="NM_SECRET_AGENT_GET_SECRETS_FLAG_WPS_PBC_ACTIVE"
              glib:nick="wps-pbc-active">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="785">indicates that WPS enrollment
  is active with PBC method. The agent may suggest that the user pushes a button
  on the router instead of supplying a PSK.</doc>
      </member>
      <member name="only_system"
              value="2147483648"
              c:identifier="NM_SECRET_AGENT_GET_SECRETS_FLAG_ONLY_SYSTEM"
              glib:nick="only-system">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="788">Internal flag, not part of
  the D-Bus API.</doc>
      </member>
      <member name="no_errors"
              value="1073741824"
              c:identifier="NM_SECRET_AGENT_GET_SECRETS_FLAG_NO_ERRORS"
              glib:nick="no-errors">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="790">Internal flag, not part of
  the D-Bus API.</doc>
      </member>
    </bitfield>
    <class name="SecretAgentOld"
           c:symbol-prefix="secret_agent_old"
           c:type="NMSecretAgentOld"
           parent="GObject.Object"
           abstract="1"
           glib:type-name="NMSecretAgentOld"
           glib:get-type="nm_secret_agent_old_get_type"
           glib:type-struct="SecretAgentOldClass">
      <source-position filename="libnm/nm-secret-agent-old.h" line="193"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.Initable"/>
      <virtual-method name="cancel_get_secrets">
        <source-position filename="libnm/nm-secret-agent-old.h" line="163"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SecretAgentOld" c:type="NMSecretAgentOld*"/>
          </instance-parameter>
          <parameter name="connection_path" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="setting_name" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="delete_secrets" invoker="delete_secrets">
        <doc xml:space="preserve"
             filename="libnm/nm-secret-agent-old.c"
             line="938">Asynchronously asks the agent to delete all saved secrets belonging to
@connection.</doc>
        <source-position filename="libnm/nm-secret-agent-old.h" line="185"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-secret-agent-old.c"
                 line="940">a #NMSecretAgentOld</doc>
            <type name="SecretAgentOld" c:type="NMSecretAgentOld*"/>
          </instance-parameter>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-secret-agent-old.c"
                 line="941">a #NMConnection</doc>
            <type name="Connection" c:type="NMConnection*"/>
          </parameter>
          <parameter name="connection_path" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="libnm/nm-secret-agent-old.c"
                 line="942">a callback, to be invoked when the operation is done</doc>
            <type name="SecretAgentOldDeleteSecretsFunc"
                  c:type="NMSecretAgentOldDeleteSecretsFunc"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     closure="3">
            <doc xml:space="preserve"
                 filename="libnm/nm-secret-agent-old.c"
                 line="943">caller-specific data to be passed to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_secrets" invoker="get_secrets">
        <doc xml:space="preserve"
             filename="libnm/nm-secret-agent-old.c"
             line="867">Asynchronously retrieves secrets belonging to @connection for the
setting @setting_name.  @flags indicate specific behavior that the secret
agent should use when performing the request, for example returning only
existing secrets without user interaction, or requesting entirely new
secrets from the user.</doc>
        <source-position filename="libnm/nm-secret-agent-old.h" line="148"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-secret-agent-old.c"
                 line="869">a #NMSecretAgentOld</doc>
            <type name="SecretAgentOld" c:type="NMSecretAgentOld*"/>
          </instance-parameter>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-secret-agent-old.c"
                 line="870">the #NMConnection for which we're asked secrets</doc>
            <type name="Connection" c:type="NMConnection*"/>
          </parameter>
          <parameter name="connection_path" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="setting_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-secret-agent-old.c"
                 line="871">the name of the secret setting</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="hints" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-secret-agent-old.c"
                 line="872">hints to the agent</doc>
            <array c:type="const char**">
              <type name="utf8" c:type="char*"/>
            </array>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-secret-agent-old.c"
                 line="873">flags that modify the behavior of the request</doc>
            <type name="SecretAgentGetSecretsFlags"
                  c:type="NMSecretAgentGetSecretsFlags"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="libnm/nm-secret-agent-old.c"
                 line="874">a callback, to be invoked when the operation is done</doc>
            <type name="SecretAgentOldGetSecretsFunc"
                  c:type="NMSecretAgentOldGetSecretsFunc"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     closure="6">
            <doc xml:space="preserve"
                 filename="libnm/nm-secret-agent-old.c"
                 line="875">caller-specific data to be passed to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="save_secrets" invoker="save_secrets">
        <doc xml:space="preserve"
             filename="libnm/nm-secret-agent-old.c"
             line="911">Asynchronously ensures that all secrets inside @connection are stored to
disk.</doc>
        <source-position filename="libnm/nm-secret-agent-old.h" line="173"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-secret-agent-old.c"
                 line="913">a #NMSecretAgentOld</doc>
            <type name="SecretAgentOld" c:type="NMSecretAgentOld*"/>
          </instance-parameter>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-secret-agent-old.c"
                 line="914">a #NMConnection</doc>
            <type name="Connection" c:type="NMConnection*"/>
          </parameter>
          <parameter name="connection_path" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="libnm/nm-secret-agent-old.c"
                 line="915">a callback, to be invoked when the operation is done</doc>
            <type name="SecretAgentOldSaveSecretsFunc"
                  c:type="NMSecretAgentOldSaveSecretsFunc"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     closure="3">
            <doc xml:space="preserve"
                 filename="libnm/nm-secret-agent-old.c"
                 line="916">caller-specific data to be passed to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="delete_secrets"
              c:identifier="nm_secret_agent_old_delete_secrets">
        <doc xml:space="preserve"
             filename="libnm/nm-secret-agent-old.c"
             line="938">Asynchronously asks the agent to delete all saved secrets belonging to
@connection.</doc>
        <source-position filename="libnm/nm-secret-agent-old.h" line="234"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-secret-agent-old.c"
                 line="940">a #NMSecretAgentOld</doc>
            <type name="SecretAgentOld" c:type="NMSecretAgentOld*"/>
          </instance-parameter>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-secret-agent-old.c"
                 line="941">a #NMConnection</doc>
            <type name="Connection" c:type="NMConnection*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="libnm/nm-secret-agent-old.c"
                 line="942">a callback, to be invoked when the operation is done</doc>
            <type name="SecretAgentOldDeleteSecretsFunc"
                  c:type="NMSecretAgentOldDeleteSecretsFunc"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libnm/nm-secret-agent-old.c"
                 line="943">caller-specific data to be passed to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_registered"
              c:identifier="nm_secret_agent_old_get_registered">
        <source-position filename="libnm/nm-secret-agent-old.h" line="219"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-secret-agent-old.c"
               line="855">a %TRUE if the agent is registered, %FALSE if it is not.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-secret-agent-old.c"
                 line="853">a #NMSecretAgentOld</doc>
            <type name="SecretAgentOld" c:type="NMSecretAgentOld*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_secrets"
              c:identifier="nm_secret_agent_old_get_secrets">
        <doc xml:space="preserve"
             filename="libnm/nm-secret-agent-old.c"
             line="867">Asynchronously retrieves secrets belonging to @connection for the
setting @setting_name.  @flags indicate specific behavior that the secret
agent should use when performing the request, for example returning only
existing secrets without user interaction, or requesting entirely new
secrets from the user.</doc>
        <source-position filename="libnm/nm-secret-agent-old.h" line="221"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-secret-agent-old.c"
                 line="869">a #NMSecretAgentOld</doc>
            <type name="SecretAgentOld" c:type="NMSecretAgentOld*"/>
          </instance-parameter>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-secret-agent-old.c"
                 line="870">the #NMConnection for which we're asked secrets</doc>
            <type name="Connection" c:type="NMConnection*"/>
          </parameter>
          <parameter name="setting_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-secret-agent-old.c"
                 line="871">the name of the secret setting</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="hints" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-secret-agent-old.c"
                 line="872">hints to the agent</doc>
            <array c:type="const char**">
              <type name="utf8" c:type="char*"/>
            </array>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-secret-agent-old.c"
                 line="873">flags that modify the behavior of the request</doc>
            <type name="SecretAgentGetSecretsFlags"
                  c:type="NMSecretAgentGetSecretsFlags"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     scope="async"
                     closure="5">
            <doc xml:space="preserve"
                 filename="libnm/nm-secret-agent-old.c"
                 line="874">a callback, to be invoked when the operation is done</doc>
            <type name="SecretAgentOldGetSecretsFunc"
                  c:type="NMSecretAgentOldGetSecretsFunc"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libnm/nm-secret-agent-old.c"
                 line="875">caller-specific data to be passed to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="register"
              c:identifier="nm_secret_agent_old_register"
              throws="1">
        <doc xml:space="preserve"
             filename="libnm/nm-secret-agent-old.c"
             line="482">Registers the #NMSecretAgentOld with the NetworkManager secret manager,
indicating to NetworkManager that the agent is able to provide and save
secrets for connections on behalf of its user.

It is a programmer error to attempt to register an agent that is already
registered, or in the process of registering.</doc>
        <source-position filename="libnm/nm-secret-agent-old.h" line="197"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-secret-agent-old.c"
               line="495">%TRUE if registration was successful, %FALSE on error.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-secret-agent-old.c"
                 line="484">a #NMSecretAgentOld</doc>
            <type name="SecretAgentOld" c:type="NMSecretAgentOld*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libnm/nm-secret-agent-old.c"
                 line="485">a #GCancellable, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="register_async"
              c:identifier="nm_secret_agent_old_register_async">
        <doc xml:space="preserve"
             filename="libnm/nm-secret-agent-old.c"
             line="626">Asynchronously registers the #NMSecretAgentOld with the NetworkManager secret
manager, indicating to NetworkManager that the agent is able to provide and
save secrets for connections on behalf of its user.

It is a programmer error to attempt to register an agent that is already
registered, or in the process of registering.</doc>
        <source-position filename="libnm/nm-secret-agent-old.h" line="200"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-secret-agent-old.c"
                 line="628">a #NMSecretAgentOld</doc>
            <type name="SecretAgentOld" c:type="NMSecretAgentOld*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libnm/nm-secret-agent-old.c"
                 line="629">a #GCancellable, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="libnm/nm-secret-agent-old.c"
                 line="630">callback to call when the agent is registered</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libnm/nm-secret-agent-old.c"
                 line="631">data for @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="register_finish"
              c:identifier="nm_secret_agent_old_register_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="libnm/nm-secret-agent-old.c"
             line="698">Gets the result of a call to nm_secret_agent_old_register_async().</doc>
        <source-position filename="libnm/nm-secret-agent-old.h" line="204"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-secret-agent-old.c"
               line="706">%TRUE if registration was successful, %FALSE on error.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-secret-agent-old.c"
                 line="700">a #NMSecretAgentOld</doc>
            <type name="SecretAgentOld" c:type="NMSecretAgentOld*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-secret-agent-old.c"
                 line="701">the result passed to the #GAsyncReadyCallback</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="save_secrets"
              c:identifier="nm_secret_agent_old_save_secrets">
        <doc xml:space="preserve"
             filename="libnm/nm-secret-agent-old.c"
             line="911">Asynchronously ensures that all secrets inside @connection are stored to
disk.</doc>
        <source-position filename="libnm/nm-secret-agent-old.h" line="229"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-secret-agent-old.c"
                 line="913">a #NMSecretAgentOld</doc>
            <type name="SecretAgentOld" c:type="NMSecretAgentOld*"/>
          </instance-parameter>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-secret-agent-old.c"
                 line="914">a #NMConnection</doc>
            <type name="Connection" c:type="NMConnection*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="libnm/nm-secret-agent-old.c"
                 line="915">a callback, to be invoked when the operation is done</doc>
            <type name="SecretAgentOldSaveSecretsFunc"
                  c:type="NMSecretAgentOldSaveSecretsFunc"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libnm/nm-secret-agent-old.c"
                 line="916">caller-specific data to be passed to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="unregister"
              c:identifier="nm_secret_agent_old_unregister"
              throws="1">
        <doc xml:space="preserve"
             filename="libnm/nm-secret-agent-old.c"
             line="721">Unregisters the #NMSecretAgentOld with the NetworkManager secret manager,
indicating to NetworkManager that the agent will no longer provide or
store secrets on behalf of this user.</doc>
        <source-position filename="libnm/nm-secret-agent-old.h" line="208"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-secret-agent-old.c"
               line="731">%TRUE if unregistration was successful, %FALSE on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-secret-agent-old.c"
                 line="723">a #NMSecretAgentOld</doc>
            <type name="SecretAgentOld" c:type="NMSecretAgentOld*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libnm/nm-secret-agent-old.c"
                 line="724">a #GCancellable, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="unregister_async"
              c:identifier="nm_secret_agent_old_unregister_async">
        <doc xml:space="preserve"
             filename="libnm/nm-secret-agent-old.c"
             line="781">Asynchronously unregisters the #NMSecretAgentOld with the NetworkManager secret
manager, indicating to NetworkManager that the agent will no longer provide
or store secrets on behalf of this user.</doc>
        <source-position filename="libnm/nm-secret-agent-old.h" line="211"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-secret-agent-old.c"
                 line="783">a #NMSecretAgentOld</doc>
            <type name="SecretAgentOld" c:type="NMSecretAgentOld*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libnm/nm-secret-agent-old.c"
                 line="784">a #GCancellable, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="libnm/nm-secret-agent-old.c"
                 line="785">callback to call when the agent is unregistered</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libnm/nm-secret-agent-old.c"
                 line="786">data for @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="unregister_finish"
              c:identifier="nm_secret_agent_old_unregister_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="libnm/nm-secret-agent-old.c"
             line="828">Gets the result of a call to nm_secret_agent_old_unregister_async().</doc>
        <source-position filename="libnm/nm-secret-agent-old.h" line="215"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-secret-agent-old.c"
               line="836">%TRUE if unregistration was successful, %FALSE on error.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-secret-agent-old.c"
                 line="830">a #NMSecretAgentOld</doc>
            <type name="SecretAgentOld" c:type="NMSecretAgentOld*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-secret-agent-old.c"
                 line="831">the result passed to the #GAsyncReadyCallback</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <property name="auto-register"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-secret-agent-old.c"
             line="1284">If %TRUE (the default), the agent will always be registered when
NetworkManager is running; if NetworkManager exits and restarts, the
agent will re-register itself automatically.

In particular, if this property is %TRUE at construct time, then the
agent will register itself with NetworkManager during
construction/initialization, and initialization will fail with an error
if the agent is unable to register itself.

If the property is %FALSE, the agent will not automatically register with
NetworkManager, and nm_secret_agent_old_register() or
nm_secret_agent_old_register_async() must be called to register it.

Calling nm_secret_agent_old_unregister() will suppress auto-registration
until nm_secret_agent_old_register() is called, which re-enables
auto-registration. This ensures that the agent remains un-registered when
you expect it to be unregistered.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="capabilities"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-secret-agent-old.c"
             line="1323">A bitfield of %NMSecretAgentCapabilities.</doc>
        <type name="SecretAgentCapabilities"/>
      </property>
      <property name="identifier"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-secret-agent-old.c"
             line="1266">Identifies this agent; only one agent in each user session may use the
same identifier.  Identifier formatting follows the same rules as
D-Bus bus names with the exception that the ':' character is not
allowed.  The valid set of characters is "[A-Z][a-z][0-9]_-." and the
identifier is limited in length to 255 characters with a minimum
of 3 characters.  An example valid identifier is 'org.gnome.nm-applet'
(without quotes).</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="registered" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-secret-agent-old.c"
             line="1312">%TRUE if the agent is registered with NetworkManager, %FALSE if not.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <record name="SecretAgentOldClass"
            c:type="NMSecretAgentOldClass"
            glib:is-gtype-struct-for="SecretAgentOld">
      <source-position filename="libnm/nm-secret-agent-old.h" line="193"/>
      <field name="parent">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="get_secrets">
        <callback name="get_secrets">
          <source-position filename="libnm/nm-secret-agent-old.h" line="148"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="libnm/nm-secret-agent-old.c"
                   line="869">a #NMSecretAgentOld</doc>
              <type name="SecretAgentOld" c:type="NMSecretAgentOld*"/>
            </parameter>
            <parameter name="connection" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="libnm/nm-secret-agent-old.c"
                   line="870">the #NMConnection for which we're asked secrets</doc>
              <type name="Connection" c:type="NMConnection*"/>
            </parameter>
            <parameter name="connection_path" transfer-ownership="none">
              <type name="utf8" c:type="const char*"/>
            </parameter>
            <parameter name="setting_name" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="libnm/nm-secret-agent-old.c"
                   line="871">the name of the secret setting</doc>
              <type name="utf8" c:type="const char*"/>
            </parameter>
            <parameter name="hints" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="libnm/nm-secret-agent-old.c"
                   line="872">hints to the agent</doc>
              <array c:type="const char**">
                <type name="utf8" c:type="char*"/>
              </array>
            </parameter>
            <parameter name="flags" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="libnm/nm-secret-agent-old.c"
                   line="873">flags that modify the behavior of the request</doc>
              <type name="SecretAgentGetSecretsFlags"
                    c:type="NMSecretAgentGetSecretsFlags"/>
            </parameter>
            <parameter name="callback"
                       transfer-ownership="none"
                       scope="async"
                       closure="7">
              <doc xml:space="preserve"
                   filename="libnm/nm-secret-agent-old.c"
                   line="874">a callback, to be invoked when the operation is done</doc>
              <type name="SecretAgentOldGetSecretsFunc"
                    c:type="NMSecretAgentOldGetSecretsFunc"/>
            </parameter>
            <parameter name="user_data"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       closure="7">
              <doc xml:space="preserve"
                   filename="libnm/nm-secret-agent-old.c"
                   line="875">caller-specific data to be passed to @callback</doc>
              <type name="gpointer" c:type="gpointer"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="cancel_get_secrets">
        <callback name="cancel_get_secrets">
          <source-position filename="libnm/nm-secret-agent-old.h" line="163"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="SecretAgentOld" c:type="NMSecretAgentOld*"/>
            </parameter>
            <parameter name="connection_path" transfer-ownership="none">
              <type name="utf8" c:type="const char*"/>
            </parameter>
            <parameter name="setting_name" transfer-ownership="none">
              <type name="utf8" c:type="const char*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="save_secrets">
        <callback name="save_secrets">
          <source-position filename="libnm/nm-secret-agent-old.h" line="173"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="libnm/nm-secret-agent-old.c"
                   line="913">a #NMSecretAgentOld</doc>
              <type name="SecretAgentOld" c:type="NMSecretAgentOld*"/>
            </parameter>
            <parameter name="connection" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="libnm/nm-secret-agent-old.c"
                   line="914">a #NMConnection</doc>
              <type name="Connection" c:type="NMConnection*"/>
            </parameter>
            <parameter name="connection_path" transfer-ownership="none">
              <type name="utf8" c:type="const char*"/>
            </parameter>
            <parameter name="callback"
                       transfer-ownership="none"
                       scope="async"
                       closure="4">
              <doc xml:space="preserve"
                   filename="libnm/nm-secret-agent-old.c"
                   line="915">a callback, to be invoked when the operation is done</doc>
              <type name="SecretAgentOldSaveSecretsFunc"
                    c:type="NMSecretAgentOldSaveSecretsFunc"/>
            </parameter>
            <parameter name="user_data"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       closure="4">
              <doc xml:space="preserve"
                   filename="libnm/nm-secret-agent-old.c"
                   line="916">caller-specific data to be passed to @callback</doc>
              <type name="gpointer" c:type="gpointer"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="delete_secrets">
        <callback name="delete_secrets">
          <source-position filename="libnm/nm-secret-agent-old.h" line="185"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="libnm/nm-secret-agent-old.c"
                   line="940">a #NMSecretAgentOld</doc>
              <type name="SecretAgentOld" c:type="NMSecretAgentOld*"/>
            </parameter>
            <parameter name="connection" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="libnm/nm-secret-agent-old.c"
                   line="941">a #NMConnection</doc>
              <type name="Connection" c:type="NMConnection*"/>
            </parameter>
            <parameter name="connection_path" transfer-ownership="none">
              <type name="utf8" c:type="const char*"/>
            </parameter>
            <parameter name="callback"
                       transfer-ownership="none"
                       scope="async"
                       closure="4">
              <doc xml:space="preserve"
                   filename="libnm/nm-secret-agent-old.c"
                   line="942">a callback, to be invoked when the operation is done</doc>
              <type name="SecretAgentOldDeleteSecretsFunc"
                    c:type="NMSecretAgentOldDeleteSecretsFunc"/>
            </parameter>
            <parameter name="user_data"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       closure="4">
              <doc xml:space="preserve"
                   filename="libnm/nm-secret-agent-old.c"
                   line="943">caller-specific data to be passed to @callback</doc>
              <type name="gpointer" c:type="gpointer"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="padding" readable="0" private="1">
        <array zero-terminated="0" fixed-size="8">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <callback name="SecretAgentOldDeleteSecretsFunc"
              c:type="NMSecretAgentOldDeleteSecretsFunc">
      <doc xml:space="preserve"
           filename="libnm/nm-secret-agent-old.h"
           line="117">Called as a result of a request by NM to delete secrets.  When the
#NMSecretAgentOld subclass has finished deleting the secrets, this function
should be called.</doc>
      <source-position filename="libnm/nm-secret-agent-old.h" line="131"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="agent" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-secret-agent-old.h"
               line="119">the secret agent object</doc>
          <type name="SecretAgentOld" c:type="NMSecretAgentOld*"/>
        </parameter>
        <parameter name="connection" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-secret-agent-old.h"
               line="120">the connection for which secrets were to be deleted,
note that this object will be unrefed after the callback has returned, use
g_object_ref()/g_object_unref() if you want to use this object after the callback
has returned</doc>
          <type name="Connection" c:type="NMConnection*"/>
        </parameter>
        <parameter name="error" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-secret-agent-old.h"
               line="124">if the deleting secrets failed, give a descriptive error here</doc>
          <type name="GLib.Error" c:type="GError*"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="3">
          <doc xml:space="preserve"
               filename="libnm/nm-secret-agent-old.h"
               line="125">caller-specific data to be passed to the function</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="SecretAgentOldGetSecretsFunc"
              c:type="NMSecretAgentOldGetSecretsFunc">
      <doc xml:space="preserve"
           filename="libnm/nm-secret-agent-old.h"
           line="47">Called as a result of a request by NM to retrieve secrets.  When the
#NMSecretAgentOld subclass has finished retrieving secrets and is ready to
return them, or to return an error, this function should be called with
those secrets or the error.

To easily create the dictionary to return the Wi-Fi PSK, you could do
something like this:
&lt;example&gt;
 &lt;title&gt;Creating a secrets dictionary&lt;/title&gt;
 &lt;programlisting&gt;
  NMConnection *secrets;
  NMSettingWirelessSecurity *s_wsec;
  GVariant *secrets_dict;

  secrets = nm_simple_connection_new ();
  s_wsec = (NMSettingWirelessSecurity *) nm_setting_wireless_security_new ();
  g_object_set (G_OBJECT (s_wsec),
                NM_SETTING_WIRELESS_SECURITY_PSK, "my really cool PSK",
                NULL);
  nm_connection_add_setting (secrets, NM_SETTING (s_wsec));
  secrets_dict = nm_connection_to_dbus (secrets, NM_CONNECTION_SERIALIZE_ALL);

  (call the NMSecretAgentOldGetSecretsFunc with secrets_dict)

  g_object_unref (secrets);
  g_variant_unref (secrets_dict);
 &lt;/programlisting&gt;
&lt;/example&gt;</doc>
      <source-position filename="libnm/nm-secret-agent-old.h" line="92"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="agent" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-secret-agent-old.h"
               line="49">the secret agent object</doc>
          <type name="SecretAgentOld" c:type="NMSecretAgentOld*"/>
        </parameter>
        <parameter name="connection" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-secret-agent-old.h"
               line="50">the connection for which secrets were requested,
note that this object will be unrefed after the callback has returned, use
g_object_ref()/g_object_unref() if you want to use this object after the callback
has returned</doc>
          <type name="Connection" c:type="NMConnection*"/>
        </parameter>
        <parameter name="secrets" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-secret-agent-old.h"
               line="54">the #GVariant of type %NM_VARIANT_TYPE_CONNECTION containing the requested
secrets (as created by nm_connection_to_dbus() for example).  Each key in @secrets
should be the name of a #NMSetting object (like "802-11-wireless-security")
and each value should be an %NM_VARIANT_TYPE_SETTING variant.  The sub-dicts
map string:value, where the string is the setting property name (like "psk")
and the value is the secret</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </parameter>
        <parameter name="error" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-secret-agent-old.h"
               line="60">if the secrets request failed, give a descriptive error here</doc>
          <type name="GLib.Error" c:type="GError*"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="4">
          <doc xml:space="preserve"
               filename="libnm/nm-secret-agent-old.h"
               line="61">caller-specific data to be passed to the function</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="SecretAgentOldSaveSecretsFunc"
              c:type="NMSecretAgentOldSaveSecretsFunc">
      <doc xml:space="preserve"
           filename="libnm/nm-secret-agent-old.h"
           line="98">Called as a result of a request by NM to save secrets.  When the
#NMSecretAgentOld subclass has finished saving the secrets, this function
should be called.</doc>
      <source-position filename="libnm/nm-secret-agent-old.h" line="112"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="agent" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-secret-agent-old.h"
               line="100">the secret agent object</doc>
          <type name="SecretAgentOld" c:type="NMSecretAgentOld*"/>
        </parameter>
        <parameter name="connection" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-secret-agent-old.h"
               line="101">the connection for which secrets were to be saved,
note that this object will be unrefed after the callback has returned, use
g_object_ref()/g_object_unref() if you want to use this object after the callback
has returned</doc>
          <type name="Connection" c:type="NMConnection*"/>
        </parameter>
        <parameter name="error" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-secret-agent-old.h"
               line="105">if the saving secrets failed, give a descriptive error here</doc>
          <type name="GLib.Error" c:type="GError*"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="3">
          <doc xml:space="preserve"
               filename="libnm/nm-secret-agent-old.h"
               line="106">caller-specific data to be passed to the function</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <class name="Setting"
           c:symbol-prefix="setting"
           c:type="NMSetting"
           parent="GObject.Object"
           abstract="1"
           glib:type-name="NMSetting"
           glib:get-type="nm_setting_get_type"
           glib:type-struct="SettingClass">
      <doc xml:space="preserve"
           filename="libnm-core/nm-setting.h"
           line="147">The NMSetting struct contains only private data.
It should only be accessed through the functions described below.</doc>
      <source-position filename="libnm-core/nm-setting.h" line="273"/>
      <function name="lookup_type" c:identifier="nm_setting_lookup_type">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting.c"
             line="125">Returns the #GType of the setting's class for a given setting name.</doc>
        <source-position filename="libnm-core/nm-setting.h" line="277"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting.c"
               line="131">the #GType of the setting's class, or %G_TYPE_INVALID if
  @name is not recognized.</doc>
          <type name="GType" c:type="GType"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting.c"
                 line="127">a setting name</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="aggregate">
        <source-position filename="libnm-core/nm-setting.h" line="255"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <type name="Setting" c:type="NMSetting*"/>
          </instance-parameter>
          <parameter name="type_i" transfer-ownership="none">
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="arg"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="for_each_secret" introspectable="0">
        <source-position filename="libnm-core/nm-setting.h" line="260"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <type name="Setting" c:type="NMSetting*"/>
          </instance-parameter>
          <parameter name="secret_name" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="val" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="remove_non_secrets" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="callback" transfer-ownership="none">
            <type c:type="_NMConnectionForEachSecretFunc"/>
          </parameter>
          <parameter name="callback_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="setting_builder" transfer-ownership="none">
            <type name="GLib.VariantBuilder" c:type="GVariantBuilder*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_secret_flags"
                      invoker="get_secret_flags"
                      throws="1">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting.c"
             line="2178">For a given secret, retrieves the #NMSettingSecretFlags describing how to
handle that secret.</doc>
        <source-position filename="libnm-core/nm-setting.h" line="213"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting.c"
               line="2188">%TRUE on success (if the given secret name was a valid property of
this setting, and if that property is secret), %FALSE if not</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting.c"
                 line="2180">the #NMSetting</doc>
            <type name="Setting" c:type="NMSetting*"/>
          </instance-parameter>
          <parameter name="secret_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting.c"
                 line="2181">the secret key name to get flags for</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="out_flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting.c"
                 line="2182">on success, the #NMSettingSecretFlags for the secret</doc>
            <type name="SettingSecretFlags" c:type="NMSettingSecretFlags*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="need_secrets" introspectable="0">
        <source-position filename="libnm-core/nm-setting.h" line="206"/>
        <return-value>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="gpointer" c:type="gpointer"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <type name="Setting" c:type="NMSetting*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="set_secret_flags"
                      invoker="set_secret_flags"
                      throws="1">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting.c"
             line="2231">For a given secret, stores the #NMSettingSecretFlags describing how to
handle that secret.</doc>
        <source-position filename="libnm-core/nm-setting.h" line="218"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting.c"
               line="2241">%TRUE on success (if the given secret name was a valid property of
this setting, and if that property is secret), %FALSE if not</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting.c"
                 line="2233">the #NMSetting</doc>
            <type name="Setting" c:type="NMSetting*"/>
          </instance-parameter>
          <parameter name="secret_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting.c"
                 line="2234">the secret key name to set flags for</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting.c"
                 line="2235">the #NMSettingSecretFlags for the secret</doc>
            <type name="SettingSecretFlags" c:type="NMSettingSecretFlags"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="update_one_secret" throws="1">
        <source-position filename="libnm-core/nm-setting.h" line="208"/>
        <return-value transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <type name="Setting" c:type="NMSetting*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="verify" throws="1">
        <source-position filename="libnm-core/nm-setting.h" line="198"/>
        <return-value transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <type name="Setting" c:type="NMSetting*"/>
          </instance-parameter>
          <parameter name="connection" transfer-ownership="none">
            <type name="Connection" c:type="NMConnection*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="verify_secrets"
                      invoker="verify_secrets"
                      version="1.2"
                      throws="1">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting.c"
             line="1238">Verifies the secrets in the setting.
The returned #GError contains information about which secret of the setting
failed validation, and in what way that secret failed validation.
The secret validation is done separately from main setting validation, because
in some cases connection failure is not desired just for the secrets.</doc>
        <source-position filename="libnm-core/nm-setting.h" line="202"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting.c"
               line="1251">%TRUE if the setting secrets are valid, %FALSE if they are not</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting.c"
                 line="1240">the #NMSetting to verify secrets in</doc>
            <type name="Setting" c:type="NMSetting*"/>
          </instance-parameter>
          <parameter name="connection"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting.c"
                 line="1241">the #NMConnection that @setting came from, or
  %NULL if @setting is being verified in isolation.</doc>
            <type name="Connection" c:type="NMConnection*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="compare" c:identifier="nm_setting_compare">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting.c"
             line="1429">Compares two #NMSetting objects for similarity, with comparison behavior
modified by a set of flags.  See the documentation for #NMSettingCompareFlags
for a description of each flag's behavior.</doc>
        <source-position filename="libnm-core/nm-setting.h" line="292"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting.c"
               line="1439">%TRUE if the comparison succeeds, %FALSE if it does not</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="a" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting.c"
                 line="1431">a #NMSetting</doc>
            <type name="Setting" c:type="NMSetting*"/>
          </instance-parameter>
          <parameter name="b" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting.c"
                 line="1432">a second #NMSetting to compare with the first</doc>
            <type name="Setting" c:type="NMSetting*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting.c"
                 line="1433">compare flags, e.g. %NM_SETTING_COMPARE_FLAG_EXACT</doc>
            <type name="SettingCompareFlags" c:type="NMSettingCompareFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="diff" c:identifier="nm_setting_diff">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting.c"
             line="1491">Compares two #NMSetting objects for similarity, with comparison behavior
modified by a set of flags.  See the documentation for #NMSettingCompareFlags
for a description of each flag's behavior.  If the settings differ, the keys
of each setting that differ from the other are added to @results, mapped to
one or more #NMSettingDiffResult values.</doc>
        <source-position filename="libnm-core/nm-setting.h" line="316"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting.c"
               line="1510">%TRUE if the settings contain the same values, %FALSE if they do not</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="a" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting.c"
                 line="1493">a #NMSetting</doc>
            <type name="Setting" c:type="NMSetting*"/>
          </instance-parameter>
          <parameter name="b" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting.c"
                 line="1494">a second #NMSetting to compare with the first</doc>
            <type name="Setting" c:type="NMSetting*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting.c"
                 line="1495">compare flags, e.g. %NM_SETTING_COMPARE_FLAG_EXACT</doc>
            <type name="SettingCompareFlags" c:type="NMSettingCompareFlags"/>
          </parameter>
          <parameter name="invert_results" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting.c"
                 line="1496">this parameter is used internally by libnm and should
be set to %FALSE.  If %TRUE inverts the meaning of the #NMSettingDiffResult.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="results"
                     direction="inout"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting.c"
                 line="1498">if the
settings differ, on return a hash table mapping the differing keys to one or
more %NMSettingDiffResult values OR-ed together.  If the settings do not
differ, any hash table passed in is unmodified.  If no hash table is passed
in and the settings differ, a new one is created and returned.</doc>
            <type name="GLib.HashTable" c:type="GHashTable**">
              <type name="utf8"/>
              <type name="guint32"/>
            </type>
          </parameter>
        </parameters>
      </method>
      <method name="duplicate" c:identifier="nm_setting_duplicate">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting.c"
             line="1149">Duplicates a #NMSetting.</doc>
        <source-position filename="libnm-core/nm-setting.h" line="279"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting.c"
               line="1155">a new #NMSetting containing the same properties and values as the
source #NMSetting</doc>
          <type name="Setting" c:type="NMSetting*"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting.c"
                 line="1151">the #NMSetting to duplicate</doc>
            <type name="Setting" c:type="NMSetting*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="enumerate_values"
              c:identifier="nm_setting_enumerate_values">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting.c"
             line="1742">Iterates over each property of the #NMSetting object, calling the supplied
user function for each property.</doc>
        <source-position filename="libnm-core/nm-setting.h" line="322"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting.c"
                 line="1744">the #NMSetting</doc>
            <type name="Setting" c:type="NMSetting*"/>
          </instance-parameter>
          <parameter name="func"
                     transfer-ownership="none"
                     scope="call"
                     closure="1">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting.c"
                 line="1745">user-supplied function called for each property of the setting</doc>
            <type name="SettingValueIterFn" c:type="NMSettingValueIterFn"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting.c"
                 line="1746">user data passed to @func at each invocation</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_dbus_property_type"
              c:identifier="nm_setting_get_dbus_property_type">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting.c"
             line="1011">Gets the D-Bus marshalling type of a property. @property_name is a D-Bus
property name, which may not necessarily be a #GObject property.</doc>
        <source-position filename="libnm-core/nm-setting.h" line="342"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting.c"
               line="1019">the D-Bus marshalling type of @property on @setting.</doc>
          <type name="GLib.VariantType" c:type="const GVariantType*"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting.c"
                 line="1013">an #NMSetting</doc>
            <type name="Setting" c:type="NMSetting*"/>
          </instance-parameter>
          <parameter name="property_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting.c"
                 line="1014">the property of @setting to get the type of</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_name" c:identifier="nm_setting_get_name">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting.c"
             line="1180">Returns the type name of the #NMSetting object</doc>
        <source-position filename="libnm-core/nm-setting.h" line="281"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting.c"
               line="1186">a string containing the type name of the #NMSetting object,
like 'ppp' or 'wireless' or 'wired'.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting.c"
                 line="1182">the #NMSetting</doc>
            <type name="Setting" c:type="NMSetting*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_secret_flags"
              c:identifier="nm_setting_get_secret_flags"
              throws="1">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting.c"
             line="2178">For a given secret, retrieves the #NMSettingSecretFlags describing how to
handle that secret.</doc>
        <source-position filename="libnm-core/nm-setting.h" line="330"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting.c"
               line="2188">%TRUE on success (if the given secret name was a valid property of
this setting, and if that property is secret), %FALSE if not</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting.c"
                 line="2180">the #NMSetting</doc>
            <type name="Setting" c:type="NMSetting*"/>
          </instance-parameter>
          <parameter name="secret_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting.c"
                 line="2181">the secret key name to get flags for</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="out_flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting.c"
                 line="2182">on success, the #NMSettingSecretFlags for the secret</doc>
            <type name="SettingSecretFlags" c:type="NMSettingSecretFlags*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_secret_flags"
              c:identifier="nm_setting_set_secret_flags"
              throws="1">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting.c"
             line="2231">For a given secret, stores the #NMSettingSecretFlags describing how to
handle that secret.</doc>
        <source-position filename="libnm-core/nm-setting.h" line="335"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting.c"
               line="2241">%TRUE on success (if the given secret name was a valid property of
this setting, and if that property is secret), %FALSE if not</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting.c"
                 line="2233">the #NMSetting</doc>
            <type name="Setting" c:type="NMSetting*"/>
          </instance-parameter>
          <parameter name="secret_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting.c"
                 line="2234">the secret key name to set flags for</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting.c"
                 line="2235">the #NMSettingSecretFlags for the secret</doc>
            <type name="SettingSecretFlags" c:type="NMSettingSecretFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="to_string" c:identifier="nm_setting_to_string">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting.c"
             line="2257">Convert the setting (including secrets!) into a string. For debugging
purposes ONLY, should NOT be used for serialization of the setting,
or machine-parsed in any way. The output format is not guaranteed to
be stable and may change at any time.</doc>
        <source-position filename="libnm-core/nm-setting.h" line="326"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting.c"
               line="2266">an allocated string containing a textual representation of the
setting's properties and values, which the caller should
free with g_free()</doc>
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting.c"
                 line="2259">the #NMSetting</doc>
            <type name="Setting" c:type="NMSetting*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="verify" c:identifier="nm_setting_verify" throws="1">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting.c"
             line="1200">Validates the setting.  Each setting's properties have allowed values, and
some are dependent on other values (hence the need for @connection).  The
returned #GError contains information about which property of the setting
failed validation, and in what way that property failed validation.</doc>
        <source-position filename="libnm-core/nm-setting.h" line="283"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting.c"
               line="1212">%TRUE if the setting is valid, %FALSE if it is not</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting.c"
                 line="1202">the #NMSetting to verify</doc>
            <type name="Setting" c:type="NMSetting*"/>
          </instance-parameter>
          <parameter name="connection"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting.c"
                 line="1203">the #NMConnection that @setting came from, or
  %NULL if @setting is being verified in isolation.</doc>
            <type name="Connection" c:type="NMConnection*"/>
          </parameter>
        </parameters>
      </method>
      <method name="verify_secrets"
              c:identifier="nm_setting_verify_secrets"
              version="1.2"
              throws="1">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting.c"
             line="1238">Verifies the secrets in the setting.
The returned #GError contains information about which secret of the setting
failed validation, and in what way that secret failed validation.
The secret validation is done separately from main setting validation, because
in some cases connection failure is not desired just for the secrets.</doc>
        <source-position filename="libnm-core/nm-setting.h" line="288"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting.c"
               line="1251">%TRUE if the setting secrets are valid, %FALSE if they are not</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting.c"
                 line="1240">the #NMSetting to verify secrets in</doc>
            <type name="Setting" c:type="NMSetting*"/>
          </instance-parameter>
          <parameter name="connection"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting.c"
                 line="1241">the #NMConnection that @setting came from, or
  %NULL if @setting is being verified in isolation.</doc>
            <type name="Connection" c:type="NMConnection*"/>
          </parameter>
        </parameters>
      </method>
      <property name="name" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting.c"
             line="2646">The setting's name, which uniquely identifies the setting within the
connection.  Each setting type has a name unique to that type, for
example "ppp" or "802-11-wireless" or "802-3-ethernet".</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <class name="Setting6Lowpan"
           c:symbol-prefix="setting_6lowpan"
           c:type="NMSetting6Lowpan"
           parent="Setting"
           glib:type-name="NMSetting6Lowpan"
           glib:get-type="nm_setting_6lowpan_get_type"
           glib:type-struct="Setting6LowpanClass">
      <doc xml:space="preserve"
           filename="libnm-core/nm-setting-6lowpan.c"
           line="44">6LoWPAN Settings</doc>
      <source-position filename="libnm-core/nm-setting-6lowpan.h" line="42"/>
      <constructor name="new"
                   c:identifier="nm_setting_6lowpan_new"
                   version="1.14">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-6lowpan.c"
             line="179">Creates a new #NMSetting6Lowpan object with default values.</doc>
        <source-position filename="libnm-core/nm-setting-6lowpan.h" line="47"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-6lowpan.c"
               line="184">the new empty #NMSetting6Lowpan object</doc>
          <type name="Setting" c:type="NMSetting*"/>
        </return-value>
      </constructor>
      <method name="get_parent"
              c:identifier="nm_setting_6lowpan_get_parent"
              version="1.14">
        <source-position filename="libnm-core/nm-setting-6lowpan.h" line="50"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-6lowpan.c"
               line="67">the #NMSetting6Lowpan:parent property of the setting</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-6lowpan.c"
                 line="65">the #NMSetting6Lowpan</doc>
            <type name="Setting6Lowpan" c:type="NMSetting6Lowpan*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="parent"
                version="1.14"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-6lowpan.c"
             line="219">If given, specifies the parent interface name or parent connection UUID
from which this 6LowPAN interface should be created.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
    </class>
    <record name="Setting6LowpanClass"
            c:type="NMSetting6LowpanClass"
            disguised="1"
            glib:is-gtype-struct-for="Setting6Lowpan">
      <source-position filename="libnm-core/nm-setting-6lowpan.h" line="42"/>
    </record>
    <class name="Setting8021x"
           c:symbol-prefix="setting_802_1x"
           c:type="NMSetting8021x"
           parent="Setting"
           glib:type-name="NMSetting8021x"
           glib:get-type="nm_setting_802_1x_get_type"
           glib:type-struct="Setting8021xClass">
      <doc xml:space="preserve"
           filename="libnm-core/nm-setting-8021x.h"
           line="174">IEEE 802.1x Authentication Settings</doc>
      <source-position filename="libnm-core/nm-setting-8021x.h" line="188"/>
      <constructor name="new" c:identifier="nm_setting_802_1x_new">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-8021x.c"
             line="3351">Creates a new #NMSetting8021x object with default values.</doc>
        <source-position filename="libnm-core/nm-setting-8021x.h" line="192"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-8021x.c"
               line="3356">the new empty #NMSetting8021x object</doc>
          <type name="Setting" c:type="NMSetting*"/>
        </return-value>
      </constructor>
      <function name="check_cert_scheme"
                c:identifier="nm_setting_802_1x_check_cert_scheme"
                version="1.2"
                throws="1">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-8021x.c"
             line="199">Determines and verifies the blob type.
When setting certificate properties of NMSetting8021x
the blob must be not UNKNOWN (or NULL).</doc>
        <source-position filename="libnm-core/nm-setting-8021x.h" line="195"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-8021x.c"
               line="209">the scheme of the blob or %NM_SETTING_802_1X_CK_SCHEME_UNKNOWN.
For NULL it also returns NM_SETTING_802_1X_CK_SCHEME_UNKNOWN.</doc>
          <type name="Setting8021xCKScheme" c:type="NMSetting8021xCKScheme"/>
        </return-value>
        <parameters>
          <parameter name="pdata"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-8021x.c"
                 line="201">the data pointer</doc>
            <type name="gpointer" c:type="gconstpointer"/>
          </parameter>
          <parameter name="length" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-8021x.c"
                 line="202">the length of the data</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
        </parameters>
      </function>
      <method name="add_altsubject_match"
              c:identifier="nm_setting_802_1x_add_altsubject_match">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-8021x.c"
             line="1137">Adds an allowed alternate subject name match.  Until at least one
match is added, the altSubjectName of the remote authentication
server is not verified.</doc>
        <source-position filename="libnm-core/nm-setting-8021x.h" line="235"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-8021x.c"
               line="1146">%TRUE if the alternative subject name match was
 successfully added, %FALSE if it was already allowed.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-8021x.c"
                 line="1139">the #NMSetting8021x</doc>
            <type name="Setting8021x" c:type="NMSetting8021x*"/>
          </instance-parameter>
          <parameter name="altsubject_match" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-8021x.c"
                 line="1140">the altSubjectName to allow for this connection</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_eap_method"
              c:identifier="nm_setting_802_1x_add_eap_method">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-8021x.c"
             line="742">Adds an allowed EAP method.  The setting is not valid until at least one
EAP method has been added.  See #NMSetting8021x:eap property for a list of
allowed EAP methods.</doc>
        <source-position filename="libnm-core/nm-setting-8021x.h" line="199"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-8021x.c"
               line="751">%TRUE if the EAP method was successfully added, %FALSE if it was
 not a valid method or if it was already allowed.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-8021x.c"
                 line="744">the #NMSetting8021x</doc>
            <type name="Setting8021x" c:type="NMSetting8021x*"/>
          </instance-parameter>
          <parameter name="eap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-8021x.c"
                 line="745">the name of the EAP method to allow for this connection</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_phase2_altsubject_match"
              c:identifier="nm_setting_802_1x_add_phase2_altsubject_match">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-8021x.c"
             line="1730">Adds an allowed alternate subject name match for "phase 2".  Until
at least one match is added, the altSubjectName of the "phase 2"
remote authentication server is not verified.</doc>
        <source-position filename="libnm-core/nm-setting-8021x.h" line="292"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-8021x.c"
               line="1740">%TRUE if the "phase 2" alternative subject name match was
 successfully added, %FALSE if it was already allowed.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-8021x.c"
                 line="1732">the #NMSetting8021x</doc>
            <type name="Setting8021x" c:type="NMSetting8021x*"/>
          </instance-parameter>
          <parameter name="phase2_altsubject_match" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-8021x.c"
                 line="1733">the "phase 2" altSubjectName to allow for this
connection</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="clear_altsubject_matches"
              c:identifier="nm_setting_802_1x_clear_altsubject_matches">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-8021x.c"
             line="1226">Clears all altSubjectName matches.</doc>
        <source-position filename="libnm-core/nm-setting-8021x.h" line="241"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-8021x.c"
                 line="1228">the #NMSetting8021x</doc>
            <type name="Setting8021x" c:type="NMSetting8021x*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="clear_eap_methods"
              c:identifier="nm_setting_802_1x_clear_eap_methods">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-8021x.c"
             line="828">Clears all allowed EAP methods.</doc>
        <source-position filename="libnm-core/nm-setting-8021x.h" line="202"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-8021x.c"
                 line="830">the #NMSetting8021x</doc>
            <type name="Setting8021x" c:type="NMSetting8021x*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="clear_phase2_altsubject_matches"
              c:identifier="nm_setting_802_1x_clear_phase2_altsubject_matches">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-8021x.c"
             line="1820">Clears all "phase 2" altSubjectName matches.</doc>
        <source-position filename="libnm-core/nm-setting-8021x.h" line="298"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-8021x.c"
                 line="1822">the #NMSetting8021x</doc>
            <type name="Setting8021x" c:type="NMSetting8021x*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_altsubject_match"
              c:identifier="nm_setting_802_1x_get_altsubject_match">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-8021x.c"
             line="1115">Returns the altSubjectName match at index @i.</doc>
        <source-position filename="libnm-core/nm-setting-8021x.h" line="233"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-8021x.c"
               line="1122">the altSubjectName match at index @i</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-8021x.c"
                 line="1117">the #NMSettingConnection</doc>
            <type name="Setting8021x" c:type="NMSetting8021x*"/>
          </instance-parameter>
          <parameter name="i" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-8021x.c"
                 line="1118">the zero-based index of the array of altSubjectName matches</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_anonymous_identity"
              c:identifier="nm_setting_802_1x_get_anonymous_identity">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-8021x.c"
             line="864">Returns the anonymous identifier used by some EAP methods (like TTLS) to
authenticate the user in the outer unencrypted "phase 1" authentication.  The
inner "phase 2" authentication will use the #NMSetting8021x:identity in
a secure form, if applicable for that EAP method.</doc>
        <source-position filename="libnm-core/nm-setting-8021x.h" line="206"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-8021x.c"
               line="873">the anonymous identifier</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-8021x.c"
                 line="866">the #NMSetting8021x</doc>
            <type name="Setting8021x" c:type="NMSetting8021x*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_auth_timeout"
              c:identifier="nm_setting_802_1x_get_auth_timeout"
              version="1.8">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-8021x.c"
             line="2415">Returns the value contained in the #NMSetting8021x:auth-timeout property.</doc>
        <source-position filename="libnm-core/nm-setting-8021x.h" line="361"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-8021x.c"
               line="2421">the configured authentication timeout in seconds. Zero means the
global default value.</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-8021x.c"
                 line="2417">the #NMSetting8021x</doc>
            <type name="Setting8021x" c:type="NMSetting8021x*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_ca_cert_blob"
              c:identifier="nm_setting_802_1x_get_ca_cert_blob">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-8021x.c"
             line="957">Returns the CA certificate blob if the CA certificate is stored using the
%NM_SETTING_802_1X_CK_SCHEME_BLOB scheme.  Not all EAP methods use a
CA certificate (LEAP for example), and those that can take advantage of the
CA certificate allow it to be unset.  Note that lack of a CA certificate
reduces security by allowing man-in-the-middle attacks, because the identity
of the network cannot be confirmed by the client.</doc>
        <source-position filename="libnm-core/nm-setting-8021x.h" line="215"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-8021x.c"
               line="968">the CA certificate data</doc>
          <type name="GLib.Bytes" c:type="GBytes*"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-8021x.c"
                 line="959">the #NMSetting8021x</doc>
            <type name="Setting8021x" c:type="NMSetting8021x*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_ca_cert_password"
              c:identifier="nm_setting_802_1x_get_ca_cert_password"
              version="1.8">
        <source-position filename="libnm-core/nm-setting-8021x.h" line="226"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-8021x.c"
               line="1050">the password used to access the CA certificate stored in
#NMSetting8021x:ca-cert property. Only makes sense if the certificate
is stored on a PKCS#&lt;!-- --&gt;11 token that requires a login.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-8021x.c"
                 line="1048">the #NMSetting8021x</doc>
            <type name="Setting8021x" c:type="NMSetting8021x*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_ca_cert_password_flags"
              c:identifier="nm_setting_802_1x_get_ca_cert_password_flags"
              version="1.8">
        <source-position filename="libnm-core/nm-setting-8021x.h" line="228"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-8021x.c"
               line="1068">the #NMSettingSecretFlags pertaining to the
#NMSetting8021x:ca-cert-password</doc>
          <type name="SettingSecretFlags" c:type="NMSettingSecretFlags"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-8021x.c"
                 line="1066">the #NMSetting8021x</doc>
            <type name="Setting8021x" c:type="NMSetting8021x*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_ca_cert_path"
              c:identifier="nm_setting_802_1x_get_ca_cert_path">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-8021x.c"
             line="976">Returns the CA certificate path if the CA certificate is stored using the
%NM_SETTING_802_1X_CK_SCHEME_PATH scheme.  Not all EAP methods use a
CA certificate (LEAP for example), and those that can take advantage of the
CA certificate allow it to be unset.  Note that lack of a CA certificate
reduces security by allowing man-in-the-middle attacks, because the identity
of the network cannot be confirmed by the client.</doc>
        <source-position filename="libnm-core/nm-setting-8021x.h" line="216"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-8021x.c"
               line="987">path to the CA certificate file</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-8021x.c"
                 line="978">the #NMSetting8021x</doc>
            <type name="Setting8021x" c:type="NMSetting8021x*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_ca_cert_scheme"
              c:identifier="nm_setting_802_1x_get_ca_cert_scheme">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-8021x.c"
             line="940">Returns the scheme used to store the CA certificate.  If the returned scheme
is %NM_SETTING_802_1X_CK_SCHEME_BLOB, use nm_setting_802_1x_get_ca_cert_blob();
if %NM_SETTING_802_1X_CK_SCHEME_PATH, use nm_setting_802_1x_get_ca_cert_path();
if %NM_SETTING_802_1X_CK_SCHEME_PKCS11, use nm_setting_802_1x_get_ca_cert_uri().</doc>
        <source-position filename="libnm-core/nm-setting-8021x.h" line="214"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-8021x.c"
               line="949">scheme used to store the CA certificate (blob or path)</doc>
          <type name="Setting8021xCKScheme" c:type="NMSetting8021xCKScheme"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-8021x.c"
                 line="942">the #NMSetting8021x</doc>
            <type name="Setting8021x" c:type="NMSetting8021x*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_ca_cert_uri"
              c:identifier="nm_setting_802_1x_get_ca_cert_uri"
              version="1.6">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-8021x.c"
             line="995">Returns the CA certificate URI analogously to
nm_setting_802_1x_get_ca_cert_blob() and
nm_setting_802_1x_get_ca_cert_path().

Currently it's limited to PKCS#11 URIs ('pkcs11' scheme as defined by RFC
7512), but may be extended to other schemes in future (such as 'file' URIs
for local files and 'data' URIs for inline certificate data).</doc>
        <source-position filename="libnm-core/nm-setting-8021x.h" line="218"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-8021x.c"
               line="1007">the URI string</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-8021x.c"
                 line="997">the #NMSetting8021x</doc>
            <type name="Setting8021x" c:type="NMSetting8021x*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_ca_path" c:identifier="nm_setting_802_1x_get_ca_path">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-8021x.c"
             line="899">Returns the path of the CA certificate directory if previously set.  Systems
will often have a directory that contains multiple individual CA certificates
which the supplicant can then add to the verification chain.  This may be
used in addition to the #NMSetting8021x:ca-cert property to add more CA
certificates for verifying the network to client.</doc>
        <source-position filename="libnm-core/nm-setting-8021x.h" line="211"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-8021x.c"
               line="909">the CA certificate directory path</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-8021x.c"
                 line="901">the #NMSetting8021x</doc>
            <type name="Setting8021x" c:type="NMSetting8021x*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_client_cert_blob"
              c:identifier="nm_setting_802_1x_get_client_cert_blob">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-8021x.c"
             line="1278">Client certificates are used to identify the connecting client to the network
when EAP-TLS is used as either the "phase 1" or "phase 2" 802.1x
authentication method.</doc>
        <source-position filename="libnm-core/nm-setting-8021x.h" line="246"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-8021x.c"
               line="1286">the client certificate data</doc>
          <type name="GLib.Bytes" c:type="GBytes*"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-8021x.c"
                 line="1280">the #NMSetting8021x</doc>
            <type name="Setting8021x" c:type="NMSetting8021x*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_client_cert_password"
              c:identifier="nm_setting_802_1x_get_client_cert_password"
              version="1.8">
        <source-position filename="libnm-core/nm-setting-8021x.h" line="257"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-8021x.c"
               line="1369">the password used to access the client certificate stored in
#NMSetting8021x:client-cert property. Only makes sense if the certificate
is stored on a PKCS#&lt;!-- --&gt;11 token that requires a login.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-8021x.c"
                 line="1367">the #NMSetting8021x</doc>
            <type name="Setting8021x" c:type="NMSetting8021x*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_client_cert_password_flags"
              c:identifier="nm_setting_802_1x_get_client_cert_password_flags"
              version="1.8">
        <source-position filename="libnm-core/nm-setting-8021x.h" line="259"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-8021x.c"
               line="1387">the #NMSettingSecretFlags pertaining to the
#NMSetting8021x:client-cert-password</doc>
          <type name="SettingSecretFlags" c:type="NMSettingSecretFlags"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-8021x.c"
                 line="1385">the #NMSetting8021x</doc>
            <type name="Setting8021x" c:type="NMSetting8021x*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_client_cert_path"
              c:identifier="nm_setting_802_1x_get_client_cert_path">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-8021x.c"
             line="1294">Client certificates are used to identify the connecting client to the network
when EAP-TLS is used as either the "phase 1" or "phase 2" 802.1x
authentication method.</doc>
        <source-position filename="libnm-core/nm-setting-8021x.h" line="247"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-8021x.c"
               line="1302">path to the client certificate file</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-8021x.c"
                 line="1296">the #NMSetting8021x</doc>
            <type name="Setting8021x" c:type="NMSetting8021x*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_client_cert_scheme"
              c:identifier="nm_setting_802_1x_get_client_cert_scheme">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-8021x.c"
             line="1261">Returns the scheme used to store the client certificate.  If the returned scheme
is %NM_SETTING_802_1X_CK_SCHEME_BLOB, use nm_setting_802_1x_get_client_cert_blob();
if %NM_SETTING_802_1X_CK_SCHEME_PATH, use nm_setting_802_1x_get_client_cert_path();
if %NM_SETTING_802_1X_CK_SCHEME_PKCS11, use nm_setting_802_1x_get_client_cert_uri().</doc>
        <source-position filename="libnm-core/nm-setting-8021x.h" line="245"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-8021x.c"
               line="1270">scheme used to store the client certificate (blob or path)</doc>
          <type name="Setting8021xCKScheme" c:type="NMSetting8021xCKScheme"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-8021x.c"
                 line="1263">the #NMSetting8021x</doc>
            <type name="Setting8021x" c:type="NMSetting8021x*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_client_cert_uri"
              c:identifier="nm_setting_802_1x_get_client_cert_uri"
              version="1.6">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-8021x.c"
             line="1310">Returns the client certificate URI analogously to
nm_setting_802_1x_get_client_cert_blob() and
nm_setting_802_1x_get_client_cert_path().

Currently it's limited to PKCS#11 URIs ('pkcs11' scheme as defined by RFC
7512), but may be extended to other schemes in future (such as 'file' URIs
for local files and 'data' URIs for inline certificate data).</doc>
        <source-position filename="libnm-core/nm-setting-8021x.h" line="249"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-8021x.c"
               line="1322">the URI string</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-8021x.c"
                 line="1312">the #NMSetting8021x</doc>
            <type name="Setting8021x" c:type="NMSetting8021x*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_domain_suffix_match"
              c:identifier="nm_setting_802_1x_get_domain_suffix_match"
              version="1.2">
        <source-position filename="libnm-core/nm-setting-8021x.h" line="243"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-8021x.c"
               line="1249">the #NMSetting8021x:domain-suffix-match property.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-8021x.c"
                 line="1247">the #NMSetting8021x</doc>
            <type name="Setting8021x" c:type="NMSetting8021x*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_eap_method"
              c:identifier="nm_setting_802_1x_get_eap_method">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-8021x.c"
             line="720">Returns the name of the allowed EAP method at index @i.</doc>
        <source-position filename="libnm-core/nm-setting-8021x.h" line="198"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-8021x.c"
               line="727">the name of the allowed EAP method at index @i</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-8021x.c"
                 line="722">the #NMSetting8021x</doc>
            <type name="Setting8021x" c:type="NMSetting8021x*"/>
          </instance-parameter>
          <parameter name="i" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-8021x.c"
                 line="723">the index of the EAP method name to return</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_identity"
              c:identifier="nm_setting_802_1x_get_identity">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-8021x.c"
             line="847">Returns the identifier used by some EAP methods (like TLS) to
authenticate the user.  Often this is a username or login name.</doc>
        <source-position filename="libnm-core/nm-setting-8021x.h" line="204"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-8021x.c"
               line="854">the user identifier</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-8021x.c"
                 line="849">the #NMSetting8021x</doc>
            <type name="Setting8021x" c:type="NMSetting8021x*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_num_altsubject_matches"
              c:identifier="nm_setting_802_1x_get_num_altsubject_matches">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-8021x.c"
             line="1098">Returns the number of entries in the
#NMSetting8021x:altsubject-matches property of this setting.</doc>
        <source-position filename="libnm-core/nm-setting-8021x.h" line="232"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-8021x.c"
               line="1105">the number of altsubject-matches entries.</doc>
          <type name="guint32" c:type="guint32"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-8021x.c"
                 line="1100">the #NMSetting8021x</doc>
            <type name="Setting8021x" c:type="NMSetting8021x*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_num_eap_methods"
              c:identifier="nm_setting_802_1x_get_num_eap_methods">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-8021x.c"
             line="700">Returns the number of eap methods allowed for use when connecting to the
network.  Generally only one EAP method is used.  Use the functions
nm_setting_802_1x_get_eap_method(), nm_setting_802_1x_add_eap_method(),
and nm_setting_802_1x_remove_eap_method() for adding, removing, and retrieving
allowed EAP methods.</doc>
        <source-position filename="libnm-core/nm-setting-8021x.h" line="197"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-8021x.c"
               line="710">the number of allowed EAP methods</doc>
          <type name="guint32" c:type="guint32"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-8021x.c"
                 line="702">the #NMSetting8021x</doc>
            <type name="Setting8021x" c:type="NMSetting8021x*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_num_phase2_altsubject_matches"
              c:identifier="nm_setting_802_1x_get_num_phase2_altsubject_matches">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-8021x.c"
             line="1675">Returns the number of entries in the
#NMSetting8021x:phase2-altsubject-matches property of this setting.</doc>
        <source-position filename="libnm-core/nm-setting-8021x.h" line="289"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-8021x.c"
               line="1682">the number of phase2-altsubject-matches entries.</doc>
          <type name="guint32" c:type="guint32"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-8021x.c"
                 line="1677">the #NMSetting8021x</doc>
            <type name="Setting8021x" c:type="NMSetting8021x*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_pac_file"
              c:identifier="nm_setting_802_1x_get_pac_file">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-8021x.c"
             line="883">Returns the file containing PAC credentials used by EAP-FAST method.</doc>
        <source-position filename="libnm-core/nm-setting-8021x.h" line="208"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-8021x.c"
               line="889">the PAC file</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-8021x.c"
                 line="885">the #NMSetting8021x</doc>
            <type name="Setting8021x" c:type="NMSetting8021x*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_password"
              c:identifier="nm_setting_802_1x_get_password">
        <source-position filename="libnm-core/nm-setting-8021x.h" line="318"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-8021x.c"
               line="1985">the password used by the authentication method, if any, as specified
  by the #NMSetting8021x:password property</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-8021x.c"
                 line="1983">the #NMSetting8021x</doc>
            <type name="Setting8021x" c:type="NMSetting8021x*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_password_flags"
              c:identifier="nm_setting_802_1x_get_password_flags">
        <source-position filename="libnm-core/nm-setting-8021x.h" line="319"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-8021x.c"
               line="2000">the #NMSettingSecretFlags pertaining to the #NMSetting8021x:password</doc>
          <type name="SettingSecretFlags" c:type="NMSettingSecretFlags"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-8021x.c"
                 line="1998">the #NMSetting8021x</doc>
            <type name="Setting8021x" c:type="NMSetting8021x*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_password_raw"
              c:identifier="nm_setting_802_1x_get_password_raw">
        <source-position filename="libnm-core/nm-setting-8021x.h" line="320"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-8021x.c"
               line="2014">the password used by the authentication method as a
UTF-8-encoded array of bytes, as specified by the
#NMSetting8021x:password-raw property</doc>
          <type name="GLib.Bytes" c:type="GBytes*"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-8021x.c"
                 line="2012">the #NMSetting8021x</doc>
            <type name="Setting8021x" c:type="NMSetting8021x*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_password_raw_flags"
              c:identifier="nm_setting_802_1x_get_password_raw_flags">
        <source-position filename="libnm-core/nm-setting-8021x.h" line="321"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-8021x.c"
               line="2030">the #NMSettingSecretFlags pertaining to the
  #NMSetting8021x:password-raw</doc>
          <type name="SettingSecretFlags" c:type="NMSettingSecretFlags"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-8021x.c"
                 line="2028">the #NMSetting8021x</doc>
            <type name="Setting8021x" c:type="NMSetting8021x*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_phase1_auth_flags"
              c:identifier="nm_setting_802_1x_get_phase1_auth_flags"
              version="1.8">
        <source-position filename="libnm-core/nm-setting-8021x.h" line="359"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-8021x.c"
               line="1454">the authentication flags for "phase 1".</doc>
          <type name="Setting8021xAuthFlags" c:type="NMSetting8021xAuthFlags"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-8021x.c"
                 line="1452">the #NMSetting8021x</doc>
            <type name="Setting8021x" c:type="NMSetting8021x*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_phase1_fast_provisioning"
              c:identifier="nm_setting_802_1x_get_phase1_fast_provisioning">
        <source-position filename="libnm-core/nm-setting-8021x.h" line="265"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-8021x.c"
               line="1438">whether "phase 1" PEAP fast provisioning should be used, as specified
 by the #NMSetting8021x:phase1-fast-provisioning property.  See the
 wpa_supplicant documentation for more details.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-8021x.c"
                 line="1436">the #NMSetting8021x</doc>
            <type name="Setting8021x" c:type="NMSetting8021x*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_phase1_peaplabel"
              c:identifier="nm_setting_802_1x_get_phase1_peaplabel">
        <source-position filename="libnm-core/nm-setting-8021x.h" line="263"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-8021x.c"
               line="1420">whether the "phase 1" PEAP label is new-style or old-style, to be
 used when authenticating with EAP-PEAP, as contained in the
 #NMSetting8021x:phase1-peaplabel property.  Valid values are %NULL (unset),
 "0" (use old-style label), and "1" (use new-style label).  See the
 wpa_supplicant documentation for more details.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-8021x.c"
                 line="1418">the #NMSetting8021x</doc>
            <type name="Setting8021x" c:type="NMSetting8021x*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_phase1_peapver"
              c:identifier="nm_setting_802_1x_get_phase1_peapver">
        <source-position filename="libnm-core/nm-setting-8021x.h" line="261"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-8021x.c"
               line="1404">the "phase 1" PEAP version to be used when authenticating with
 EAP-PEAP as contained in the #NMSetting8021x:phase1-peapver property.  Valid
 values are %NULL (unset), "0" (PEAP version 0), and "1" (PEAP version 1).</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-8021x.c"
                 line="1402">the #NMSetting8021x</doc>
            <type name="Setting8021x" c:type="NMSetting8021x*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_phase2_altsubject_match"
              c:identifier="nm_setting_802_1x_get_phase2_altsubject_match">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-8021x.c"
             line="1708">Returns the "phase 2" altSubjectName match at index @i.</doc>
        <source-position filename="libnm-core/nm-setting-8021x.h" line="290"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-8021x.c"
               line="1715">the "phase 2" altSubjectName match at index @i</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-8021x.c"
                 line="1710">the #NMSettingConnection</doc>
            <type name="Setting8021x" c:type="NMSetting8021x*"/>
          </instance-parameter>
          <parameter name="i" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-8021x.c"
                 line="1711">the zero-based index of the array of "phase 2" altSubjectName matches</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_phase2_auth"
              c:identifier="nm_setting_802_1x_get_phase2_auth">
        <source-position filename="libnm-core/nm-setting-8021x.h" line="267"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-8021x.c"
               line="1470">the "phase 2" non-EAP (ex MD5) allowed authentication method as
  specified by the #NMSetting8021x:phase2-auth property.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-8021x.c"
                 line="1468">the #NMSetting8021x</doc>
            <type name="Setting8021x" c:type="NMSetting8021x*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_phase2_autheap"
              c:identifier="nm_setting_802_1x_get_phase2_autheap">
        <source-position filename="libnm-core/nm-setting-8021x.h" line="269"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-8021x.c"
               line="1485">the "phase 2" EAP-based (ex TLS) allowed authentication method as
  specified by the #NMSetting8021x:phase2-autheap property.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-8021x.c"
                 line="1483">the #NMSetting8021x</doc>
            <type name="Setting8021x" c:type="NMSetting8021x*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_phase2_ca_cert_blob"
              c:identifier="nm_setting_802_1x_get_phase2_ca_cert_blob">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-8021x.c"
             line="1534">Returns the "phase 2" CA certificate blob if the CA certificate is stored
using the %NM_SETTING_802_1X_CK_SCHEME_BLOB scheme.  Not all EAP methods use
a CA certificate (LEAP for example), and those that can take advantage of the
CA certificate allow it to be unset.  Note that lack of a CA certificate
reduces security by allowing man-in-the-middle attacks, because the identity
of the network cannot be confirmed by the client.</doc>
        <source-position filename="libnm-core/nm-setting-8021x.h" line="272"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-8021x.c"
               line="1545">the "phase 2" CA certificate data</doc>
          <type name="GLib.Bytes" c:type="GBytes*"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-8021x.c"
                 line="1536">the #NMSetting8021x</doc>
            <type name="Setting8021x" c:type="NMSetting8021x*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_phase2_ca_cert_password"
              c:identifier="nm_setting_802_1x_get_phase2_ca_cert_password"
              version="1.8">
        <source-position filename="libnm-core/nm-setting-8021x.h" line="283"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-8021x.c"
               line="1627">the password used to access the "phase2" CA certificate stored in
#NMSetting8021x:phase2-ca-cert property. Only makes sense if the certificate
is stored on a PKCS#&lt;!-- --&gt;11 token that requires a login.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-8021x.c"
                 line="1625">the #NMSetting8021x</doc>
            <type name="Setting8021x" c:type="NMSetting8021x*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_phase2_ca_cert_password_flags"
              c:identifier="nm_setting_802_1x_get_phase2_ca_cert_password_flags"
              version="1.8">
        <source-position filename="libnm-core/nm-setting-8021x.h" line="285"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-8021x.c"
               line="1645">the #NMSettingSecretFlags pertaining to the
#NMSetting8021x:phase2-private-key-password</doc>
          <type name="SettingSecretFlags" c:type="NMSettingSecretFlags"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-8021x.c"
                 line="1643">the #NMSetting8021x</doc>
            <type name="Setting8021x" c:type="NMSetting8021x*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_phase2_ca_cert_path"
              c:identifier="nm_setting_802_1x_get_phase2_ca_cert_path">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-8021x.c"
             line="1553">Returns the "phase 2" CA certificate path if the CA certificate is stored
using the %NM_SETTING_802_1X_CK_SCHEME_PATH scheme.  Not all EAP methods use
a CA certificate (LEAP for example), and those that can take advantage of the
CA certificate allow it to be unset.  Note that lack of a CA certificate
reduces security by allowing man-in-the-middle attacks, because the identity
of the network cannot be confirmed by the client.</doc>
        <source-position filename="libnm-core/nm-setting-8021x.h" line="273"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-8021x.c"
               line="1564">path to the "phase 2" CA certificate file</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-8021x.c"
                 line="1555">the #NMSetting8021x</doc>
            <type name="Setting8021x" c:type="NMSetting8021x*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_phase2_ca_cert_scheme"
              c:identifier="nm_setting_802_1x_get_phase2_ca_cert_scheme">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-8021x.c"
             line="1516">Returns the scheme used to store the "phase 2" CA certificate.  If the
returned scheme is %NM_SETTING_802_1X_CK_SCHEME_BLOB, use
nm_setting_802_1x_get_ca_cert_blob(); if %NM_SETTING_802_1X_CK_SCHEME_PATH,
use nm_setting_802_1x_get_ca_cert_path(); if %NM_SETTING_802_1X_CK_SCHEME_PKCS11,
use nm_setting_802_1x_get_ca_cert_uri().</doc>
        <source-position filename="libnm-core/nm-setting-8021x.h" line="271"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-8021x.c"
               line="1526">scheme used to store the "phase 2" CA certificate (blob or path)</doc>
          <type name="Setting8021xCKScheme" c:type="NMSetting8021xCKScheme"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-8021x.c"
                 line="1518">the #NMSetting8021x</doc>
            <type name="Setting8021x" c:type="NMSetting8021x*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_phase2_ca_cert_uri"
              c:identifier="nm_setting_802_1x_get_phase2_ca_cert_uri"
              version="1.6">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-8021x.c"
             line="1572">Returns the "phase 2" CA certificate URI analogously to
nm_setting_802_1x_get_phase2_ca_cert_blob() and
nm_setting_802_1x_get_phase2_ca_cert_path().

Currently it's limited to PKCS#11 URIs ('pkcs11' scheme as defined by RFC
7512), but may be extended to other schemes in future (such as 'file' URIs
for local files and 'data' URIs for inline certificate data).</doc>
        <source-position filename="libnm-core/nm-setting-8021x.h" line="275"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-8021x.c"
               line="1584">the URI string</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-8021x.c"
                 line="1574">the #NMSetting8021x</doc>
            <type name="Setting8021x" c:type="NMSetting8021x*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_phase2_ca_path"
              c:identifier="nm_setting_802_1x_get_phase2_ca_path">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-8021x.c"
             line="1496">Returns the path of the "phase 2" CA certificate directory if previously set.
Systems will often have a directory that contains multiple individual CA
certificates which the supplicant can then add to the verification chain.
This may be used in addition to the #NMSetting8021x:phase2-ca-cert property
to add more CA certificates for verifying the network to client.</doc>
        <source-position filename="libnm-core/nm-setting-8021x.h" line="212"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-8021x.c"
               line="1506">the "phase 2" CA certificate directory path</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-8021x.c"
                 line="1498">the #NMSetting8021x</doc>
            <type name="Setting8021x" c:type="NMSetting8021x*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_phase2_client_cert_blob"
              c:identifier="nm_setting_802_1x_get_phase2_client_cert_blob">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-8021x.c"
             line="1859">Client certificates are used to identify the connecting client to the network
when EAP-TLS is used as either the "phase 1" or "phase 2" 802.1x
authentication method.</doc>
        <source-position filename="libnm-core/nm-setting-8021x.h" line="303"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-8021x.c"
               line="1867">the "phase 2" client certificate data</doc>
          <type name="GLib.Bytes" c:type="GBytes*"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-8021x.c"
                 line="1861">the #NMSetting8021x</doc>
            <type name="Setting8021x" c:type="NMSetting8021x*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_phase2_client_cert_password"
              c:identifier="nm_setting_802_1x_get_phase2_client_cert_password"
              version="1.8">
        <source-position filename="libnm-core/nm-setting-8021x.h" line="314"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-8021x.c"
               line="1950">the password used to access the "phase2" client certificate stored in
#NMSetting8021x:phase2-client-cert property. Only makes sense if the certificate
is stored on a PKCS#&lt;!-- --&gt;11 token that requires a login.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-8021x.c"
                 line="1948">the #NMSetting8021x</doc>
            <type name="Setting8021x" c:type="NMSetting8021x*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_phase2_client_cert_password_flags"
              c:identifier="nm_setting_802_1x_get_phase2_client_cert_password_flags"
              version="1.8">
        <source-position filename="libnm-core/nm-setting-8021x.h" line="316"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-8021x.c"
               line="1968">the #NMSettingSecretFlags pertaining to the
#NMSetting8021x:phase2-client-cert-password</doc>
          <type name="SettingSecretFlags" c:type="NMSettingSecretFlags"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-8021x.c"
                 line="1966">the #NMSetting8021x</doc>
            <type name="Setting8021x" c:type="NMSetting8021x*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_phase2_client_cert_path"
              c:identifier="nm_setting_802_1x_get_phase2_client_cert_path">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-8021x.c"
             line="1875">Client certificates are used to identify the connecting client to the network
when EAP-TLS is used as either the "phase 1" or "phase 2" 802.1x
authentication method.</doc>
        <source-position filename="libnm-core/nm-setting-8021x.h" line="304"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-8021x.c"
               line="1883">path to the "phase 2" client certificate file</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-8021x.c"
                 line="1877">the #NMSetting8021x</doc>
            <type name="Setting8021x" c:type="NMSetting8021x*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_phase2_client_cert_scheme"
              c:identifier="nm_setting_802_1x_get_phase2_client_cert_scheme">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-8021x.c"
             line="1839">Returns the scheme used to store the "phase 2" client certificate.  If the
returned scheme is %NM_SETTING_802_1X_CK_SCHEME_BLOB, use
nm_setting_802_1x_get_client_cert_blob(); if
%NM_SETTING_802_1X_CK_SCHEME_PATH, use
nm_setting_802_1x_get_client_cert_path(); if
%NM_SETTING_802_1X_CK_SCHEME_PKCS11, use
nm_setting_802_1x_get_client_cert_uri().</doc>
        <source-position filename="libnm-core/nm-setting-8021x.h" line="302"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-8021x.c"
               line="1851">scheme used to store the "phase 2" client certificate (blob or path)</doc>
          <type name="Setting8021xCKScheme" c:type="NMSetting8021xCKScheme"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-8021x.c"
                 line="1841">the #NMSetting8021x</doc>
            <type name="Setting8021x" c:type="NMSetting8021x*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_phase2_client_cert_uri"
              c:identifier="nm_setting_802_1x_get_phase2_client_cert_uri"
              version="1.6">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-8021x.c"
             line="1891">Returns the "phase 2" client certificate URI analogously to
nm_setting_802_1x_get_phase2_ca_cert_blob() and
nm_setting_802_1x_get_phase2_ca_cert_path().

Currently it's limited to PKCS#11 URIs ('pkcs11' scheme as defined by RFC
7512), but may be extended to other schemes in future (such as 'file' URIs
for local files and 'data' URIs for inline certificate data).</doc>
        <source-position filename="libnm-core/nm-setting-8021x.h" line="306"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-8021x.c"
               line="1903">the URI string</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-8021x.c"
                 line="1893">the #NMSetting8021x</doc>
            <type name="Setting8021x" c:type="NMSetting8021x*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_phase2_domain_suffix_match"
              c:identifier="nm_setting_802_1x_get_phase2_domain_suffix_match"
              version="1.2">
        <source-position filename="libnm-core/nm-setting-8021x.h" line="300"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-8021x.c"
               line="1696">the #NMSetting8021x:phase2-domain-suffix-match property.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-8021x.c"
                 line="1694">the #NMSetting8021x</doc>
            <type name="Setting8021x" c:type="NMSetting8021x*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_phase2_private_key_blob"
              c:identifier="nm_setting_802_1x_get_phase2_private_key_blob">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-8021x.c"
             line="2294">Private keys are used to authenticate the connecting client to the network
when EAP-TLS is used as either the "phase 1" or "phase 2" 802.1x
authentication method.

WARNING: the phase2 private key property is not a "secret" property, and thus
unencrypted private key data may be readable by unprivileged users.  Private
keys should always be encrypted with a private key password.</doc>
        <source-position filename="libnm-core/nm-setting-8021x.h" line="343"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-8021x.c"
               line="2306">the "phase 2" private key data</doc>
          <type name="GLib.Bytes" c:type="GBytes*"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-8021x.c"
                 line="2296">the #NMSetting8021x</doc>
            <type name="Setting8021x" c:type="NMSetting8021x*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_phase2_private_key_format"
              c:identifier="nm_setting_802_1x_get_phase2_private_key_format">
        <source-position filename="libnm-core/nm-setting-8021x.h" line="356"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-8021x.c"
               line="2406">the data format of the "phase 2" private key data stored in the
  #NMSetting8021x:phase2-private-key property</doc>
          <type name="Setting8021xCKFormat" c:type="NMSetting8021xCKFormat"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-8021x.c"
                 line="2404">the #NMSetting8021x</doc>
            <type name="Setting8021x" c:type="NMSetting8021x*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_phase2_private_key_password"
              c:identifier="nm_setting_802_1x_get_phase2_private_key_password">
        <source-position filename="libnm-core/nm-setting-8021x.h" line="353"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-8021x.c"
               line="2247">the private key password used to decrypt the private key if
 previously set with nm_setting_802_1x_set_phase2_private_key() or the
 #NMSetting8021x:phase2-private-key-password property.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-8021x.c"
                 line="2245">the #NMSetting8021x</doc>
            <type name="Setting8021x" c:type="NMSetting8021x*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_phase2_private_key_password_flags"
              c:identifier="nm_setting_802_1x_get_phase2_private_key_password_flags">
        <source-position filename="libnm-core/nm-setting-8021x.h" line="354"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-8021x.c"
               line="2263">the #NMSettingSecretFlags pertaining to the
#NMSetting8021x:phase2-private-key-password</doc>
          <type name="SettingSecretFlags" c:type="NMSettingSecretFlags"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-8021x.c"
                 line="2261">the #NMSetting8021x</doc>
            <type name="Setting8021x" c:type="NMSetting8021x*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_phase2_private_key_path"
              c:identifier="nm_setting_802_1x_get_phase2_private_key_path">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-8021x.c"
             line="2314">Private keys are used to authenticate the connecting client to the network
when EAP-TLS is used as either the "phase 1" or "phase 2" 802.1x
authentication method.</doc>
        <source-position filename="libnm-core/nm-setting-8021x.h" line="344"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-8021x.c"
               line="2322">path to the "phase 2" private key file</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-8021x.c"
                 line="2316">the #NMSetting8021x</doc>
            <type name="Setting8021x" c:type="NMSetting8021x*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_phase2_private_key_scheme"
              c:identifier="nm_setting_802_1x_get_phase2_private_key_scheme">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-8021x.c"
             line="2274">Returns the scheme used to store the "phase 2" private key.  If the returned
scheme is %NM_SETTING_802_1X_CK_SCHEME_BLOB, use
nm_setting_802_1x_get_client_cert_blob(); if
%NM_SETTING_802_1X_CK_SCHEME_PATH, use
nm_setting_802_1x_get_client_cert_path(); if
%NM_SETTING_802_1X_CK_SCHEME_PKCS11, use
nm_setting_802_1x_get_client_cert_uri().</doc>
        <source-position filename="libnm-core/nm-setting-8021x.h" line="342"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-8021x.c"
               line="2286">scheme used to store the "phase 2" private key (blob or path)</doc>
          <type name="Setting8021xCKScheme" c:type="NMSetting8021xCKScheme"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-8021x.c"
                 line="2276">the #NMSetting8021x</doc>
            <type name="Setting8021x" c:type="NMSetting8021x*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_phase2_private_key_uri"
              c:identifier="nm_setting_802_1x_get_phase2_private_key_uri"
              version="1.6">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-8021x.c"
             line="2330">Returns the "phase 2" private key URI analogously to
nm_setting_802_1x_get_phase2_private_key_blob() and
nm_setting_802_1x_get_phase2_private_key_path().

Currently it's limited to PKCS#11 URIs ('pkcs11' scheme as defined by RFC
7512), but may be extended to other schemes in future (such as 'file' URIs
for local files and 'data' URIs for inline certificate data).</doc>
        <source-position filename="libnm-core/nm-setting-8021x.h" line="346"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-8021x.c"
               line="2342">the URI string</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-8021x.c"
                 line="2332">the #NMSetting8021x</doc>
            <type name="Setting8021x" c:type="NMSetting8021x*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_phase2_subject_match"
              c:identifier="nm_setting_802_1x_get_phase2_subject_match">
        <source-position filename="libnm-core/nm-setting-8021x.h" line="287"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-8021x.c"
               line="1662">the #NMSetting8021x:phase2-subject-match property. This is
the substring to be matched against the subject of the "phase 2"
authentication server certificate, or %NULL no subject verification
is to be performed.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-8021x.c"
                 line="1660">the #NMSetting8021x</doc>
            <type name="Setting8021x" c:type="NMSetting8021x*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_pin" c:identifier="nm_setting_802_1x_get_pin">
        <source-position filename="libnm-core/nm-setting-8021x.h" line="323"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-8021x.c"
               line="2045">the PIN used by the authentication method, if any, as specified
  by the #NMSetting8021x:pin property</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-8021x.c"
                 line="2043">the #NMSetting8021x</doc>
            <type name="Setting8021x" c:type="NMSetting8021x*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_pin_flags"
              c:identifier="nm_setting_802_1x_get_pin_flags">
        <source-position filename="libnm-core/nm-setting-8021x.h" line="324"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-8021x.c"
               line="2060">the #NMSettingSecretFlags pertaining to the
#NMSetting8021x:pin</doc>
          <type name="SettingSecretFlags" c:type="NMSettingSecretFlags"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-8021x.c"
                 line="2058">the #NMSetting8021x</doc>
            <type name="Setting8021x" c:type="NMSetting8021x*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_private_key_blob"
              c:identifier="nm_setting_802_1x_get_private_key_blob">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-8021x.c"
             line="2091">Private keys are used to authenticate the connecting client to the network
when EAP-TLS is used as either the "phase 1" or "phase 2" 802.1x
authentication method.

WARNING: the private key property is not a "secret" property, and thus
unencrypted private key data may be readable by unprivileged users.  Private
keys should always be encrypted with a private key password.</doc>
        <source-position filename="libnm-core/nm-setting-8021x.h" line="327"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-8021x.c"
               line="2103">the private key data</doc>
          <type name="GLib.Bytes" c:type="GBytes*"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-8021x.c"
                 line="2093">the #NMSetting8021x</doc>
            <type name="Setting8021x" c:type="NMSetting8021x*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_private_key_format"
              c:identifier="nm_setting_802_1x_get_private_key_format">
        <source-position filename="libnm-core/nm-setting-8021x.h" line="340"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-8021x.c"
               line="2234">the data format of the private key data stored in the
  #NMSetting8021x:private-key property</doc>
          <type name="Setting8021xCKFormat" c:type="NMSetting8021xCKFormat"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-8021x.c"
                 line="2232">the #NMSetting8021x</doc>
            <type name="Setting8021x" c:type="NMSetting8021x*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_private_key_password"
              c:identifier="nm_setting_802_1x_get_private_key_password">
        <source-position filename="libnm-core/nm-setting-8021x.h" line="337"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-8021x.c"
               line="2203">the private key password used to decrypt the private key if
 previously set with nm_setting_802_1x_set_private_key(), or the
 #NMSetting8021x:private-key-password property.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-8021x.c"
                 line="2201">the #NMSetting8021x</doc>
            <type name="Setting8021x" c:type="NMSetting8021x*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_private_key_password_flags"
              c:identifier="nm_setting_802_1x_get_private_key_password_flags">
        <source-position filename="libnm-core/nm-setting-8021x.h" line="338"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-8021x.c"
               line="2219">the #NMSettingSecretFlags pertaining to the
#NMSetting8021x:private-key-password</doc>
          <type name="SettingSecretFlags" c:type="NMSettingSecretFlags"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-8021x.c"
                 line="2217">the #NMSetting8021x</doc>
            <type name="Setting8021x" c:type="NMSetting8021x*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_private_key_path"
              c:identifier="nm_setting_802_1x_get_private_key_path">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-8021x.c"
             line="2111">Private keys are used to authenticate the connecting client to the network
when EAP-TLS is used as either the "phase 1" or "phase 2" 802.1x
authentication method.</doc>
        <source-position filename="libnm-core/nm-setting-8021x.h" line="328"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-8021x.c"
               line="2119">path to the private key file</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-8021x.c"
                 line="2113">the #NMSetting8021x</doc>
            <type name="Setting8021x" c:type="NMSetting8021x*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_private_key_scheme"
              c:identifier="nm_setting_802_1x_get_private_key_scheme">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-8021x.c"
             line="2071">Returns the scheme used to store the private key.  If the returned scheme is
%NM_SETTING_802_1X_CK_SCHEME_BLOB, use
nm_setting_802_1x_get_client_cert_blob(); if
%NM_SETTING_802_1X_CK_SCHEME_PATH, use
nm_setting_802_1x_get_client_cert_path(); if
%NM_SETTING_802_1X_CK_SCHEME_PKCS11, use
nm_setting_802_1x_get_client_cert_uri().</doc>
        <source-position filename="libnm-core/nm-setting-8021x.h" line="326"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-8021x.c"
               line="2083">scheme used to store the private key (blob or path)</doc>
          <type name="Setting8021xCKScheme" c:type="NMSetting8021xCKScheme"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-8021x.c"
                 line="2073">the #NMSetting8021x</doc>
            <type name="Setting8021x" c:type="NMSetting8021x*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_private_key_uri"
              c:identifier="nm_setting_802_1x_get_private_key_uri"
              version="1.6">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-8021x.c"
             line="2127">Returns the private key URI analogously to
nm_setting_802_1x_get_private_key_blob() and
nm_setting_802_1x_get_private_key_path().

Currently it's limited to PKCS#11 URIs ('pkcs11' scheme as defined by RFC
7512), but may be extended to other schemes in future (such as 'file' URIs
for local files and 'data' URIs for inline certificate data).</doc>
        <source-position filename="libnm-core/nm-setting-8021x.h" line="330"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-8021x.c"
               line="2139">the URI string</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-8021x.c"
                 line="2129">the #NMSetting8021x</doc>
            <type name="Setting8021x" c:type="NMSetting8021x*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_subject_match"
              c:identifier="nm_setting_802_1x_get_subject_match">
        <source-position filename="libnm-core/nm-setting-8021x.h" line="230"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-8021x.c"
               line="1085">the #NMSetting8021x:subject-match property. This is the
substring to be matched against the subject of the authentication
server certificate, or %NULL no subject verification is to be
performed.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-8021x.c"
                 line="1083">the #NMSetting8021x</doc>
            <type name="Setting8021x" c:type="NMSetting8021x*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_system_ca_certs"
              c:identifier="nm_setting_802_1x_get_system_ca_certs">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-8021x.c"
             line="919">Sets the #NMSetting8021x:system-ca-certs property. The
#NMSetting8021x:ca-path and #NMSetting8021x:phase2-ca-path
properties are ignored if the #NMSetting8021x:system-ca-certs property is
%TRUE, in which case a system-wide CA certificate directory specified at
compile time (using the --system-ca-path configure option) is used in place
of these properties.</doc>
        <source-position filename="libnm-core/nm-setting-8021x.h" line="210"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-8021x.c"
               line="930">%TRUE if a system CA certificate path should be used, %FALSE if not</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-8021x.c"
                 line="921">the #NMSetting8021x</doc>
            <type name="Setting8021x" c:type="NMSetting8021x*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="remove_altsubject_match"
              c:identifier="nm_setting_802_1x_remove_altsubject_match">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-8021x.c"
             line="1171">Removes the allowed altSubjectName at the specified index.</doc>
        <source-position filename="libnm-core/nm-setting-8021x.h" line="237"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-8021x.c"
                 line="1173">the #NMSetting8021x</doc>
            <type name="Setting8021x" c:type="NMSetting8021x*"/>
          </instance-parameter>
          <parameter name="i" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-8021x.c"
                 line="1174">the index of the altSubjectName match to remove</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_altsubject_match_by_value"
              c:identifier="nm_setting_802_1x_remove_altsubject_match_by_value">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-8021x.c"
             line="1195">Removes the allowed altSubjectName @altsubject_match.</doc>
        <source-position filename="libnm-core/nm-setting-8021x.h" line="239"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-8021x.c"
               line="1202">%TRUE if the alternative subject name match was found and removed,
         %FALSE if it was not.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-8021x.c"
                 line="1197">the #NMSetting8021x</doc>
            <type name="Setting8021x" c:type="NMSetting8021x*"/>
          </instance-parameter>
          <parameter name="altsubject_match" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-8021x.c"
                 line="1198">the altSubjectName to remove</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_eap_method"
              c:identifier="nm_setting_802_1x_remove_eap_method">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-8021x.c"
             line="774">Removes the allowed EAP method at the specified index.</doc>
        <source-position filename="libnm-core/nm-setting-8021x.h" line="200"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-8021x.c"
                 line="776">the #NMSetting8021x</doc>
            <type name="Setting8021x" c:type="NMSetting8021x*"/>
          </instance-parameter>
          <parameter name="i" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-8021x.c"
                 line="777">the index of the EAP method to remove</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_eap_method_by_value"
              c:identifier="nm_setting_802_1x_remove_eap_method_by_value">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-8021x.c"
             line="798">Removes the allowed EAP method @method.</doc>
        <source-position filename="libnm-core/nm-setting-8021x.h" line="201"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-8021x.c"
               line="805">%TRUE if the EAP method was founs and removed, %FALSE if it was not.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-8021x.c"
                 line="800">the #NMSetting8021x</doc>
            <type name="Setting8021x" c:type="NMSetting8021x*"/>
          </instance-parameter>
          <parameter name="eap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-8021x.c"
                 line="801">the name of the EAP method to remove</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_phase2_altsubject_match"
              c:identifier="nm_setting_802_1x_remove_phase2_altsubject_match">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-8021x.c"
             line="1765">Removes the allowed "phase 2" altSubjectName at the specified index.</doc>
        <source-position filename="libnm-core/nm-setting-8021x.h" line="294"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-8021x.c"
                 line="1767">the #NMSetting8021x</doc>
            <type name="Setting8021x" c:type="NMSetting8021x*"/>
          </instance-parameter>
          <parameter name="i" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-8021x.c"
                 line="1768">the index of the "phase 2" altSubjectName match to remove</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_phase2_altsubject_match_by_value"
              c:identifier="nm_setting_802_1x_remove_phase2_altsubject_match_by_value">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-8021x.c"
             line="1789">Removes the allowed "phase 2" altSubjectName @phase2_altsubject_match.</doc>
        <source-position filename="libnm-core/nm-setting-8021x.h" line="296"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-8021x.c"
               line="1796">%TRUE if the alternative subject name match for "phase 2" was found and removed,
         %FALSE if it was not.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-8021x.c"
                 line="1791">the #NMSetting8021x</doc>
            <type name="Setting8021x" c:type="NMSetting8021x*"/>
          </instance-parameter>
          <parameter name="phase2_altsubject_match" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-8021x.c"
                 line="1792">the "phase 2" altSubjectName to remove</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_ca_cert"
              c:identifier="nm_setting_802_1x_set_ca_cert"
              throws="1">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-8021x.c"
             line="1017">Reads a certificate from disk and sets the #NMSetting8021x:ca-cert property
with the raw certificate data if using the %NM_SETTING_802_1X_CK_SCHEME_BLOB
scheme, or with the path to the certificate file if using the
%NM_SETTING_802_1X_CK_SCHEME_PATH scheme.</doc>
        <source-position filename="libnm-core/nm-setting-8021x.h" line="219"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-8021x.c"
               line="1034">%TRUE if the operation succeeded, %FALSE if it was unsuccessful</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-8021x.c"
                 line="1019">the #NMSetting8021x</doc>
            <type name="Setting8021x" c:type="NMSetting8021x*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-8021x.c"
                 line="1020">when @scheme is set to either %NM_SETTING_802_1X_CK_SCHEME_PATH
  or %NM_SETTING_802_1X_CK_SCHEME_BLOB, pass the path of the CA certificate
  file (PEM or DER format).  The path must be UTF-8 encoded; use
  g_filename_to_utf8() to convert if needed.  Passing %NULL with any @scheme
  clears the CA certificate.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="scheme" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-8021x.c"
                 line="1025">desired storage scheme for the certificate</doc>
            <type name="Setting8021xCKScheme" c:type="NMSetting8021xCKScheme"/>
          </parameter>
          <parameter name="out_format" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-8021x.c"
                 line="1026">on successful return, the type of the certificate added</doc>
            <type name="Setting8021xCKFormat"
                  c:type="NMSetting8021xCKFormat*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_client_cert"
              c:identifier="nm_setting_802_1x_set_client_cert"
              throws="1">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-8021x.c"
             line="1332">Reads a certificate from disk and sets the #NMSetting8021x:client-cert
property with the raw certificate data if using the
%NM_SETTING_802_1X_CK_SCHEME_BLOB scheme, or with the path to the certificate
file if using the %NM_SETTING_802_1X_CK_SCHEME_PATH scheme.

Client certificates are used to identify the connecting client to the network
when EAP-TLS is used as either the "phase 1" or "phase 2" 802.1x
authentication method.</doc>
        <source-position filename="libnm-core/nm-setting-8021x.h" line="250"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-8021x.c"
               line="1353">%TRUE if the operation succeeded, %FALSE if it was unsuccessful</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-8021x.c"
                 line="1334">the #NMSetting8021x</doc>
            <type name="Setting8021x" c:type="NMSetting8021x*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-8021x.c"
                 line="1335">when @scheme is set to either %NM_SETTING_802_1X_CK_SCHEME_PATH
  or %NM_SETTING_802_1X_CK_SCHEME_BLOB, pass the path of the client
  certificate file (PEM, DER, or PKCS#&lt;!-- --&gt;12 format).  The path must be UTF-8
  encoded; use g_filename_to_utf8() to convert if needed.  Passing %NULL with
  any @scheme clears the client certificate.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="scheme" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-8021x.c"
                 line="1340">desired storage scheme for the certificate</doc>
            <type name="Setting8021xCKScheme" c:type="NMSetting8021xCKScheme"/>
          </parameter>
          <parameter name="out_format" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-8021x.c"
                 line="1341">on successful return, the type of the certificate added</doc>
            <type name="Setting8021xCKFormat"
                  c:type="NMSetting8021xCKFormat*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_phase2_ca_cert"
              c:identifier="nm_setting_802_1x_set_phase2_ca_cert"
              throws="1">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-8021x.c"
             line="1594">Reads a certificate from disk and sets the #NMSetting8021x:phase2-ca-cert
property with the raw certificate data if using the
%NM_SETTING_802_1X_CK_SCHEME_BLOB scheme, or with the path to the certificate
file if using the %NM_SETTING_802_1X_CK_SCHEME_PATH scheme.</doc>
        <source-position filename="libnm-core/nm-setting-8021x.h" line="276"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-8021x.c"
               line="1611">%TRUE if the operation succeeded, %FALSE if it was unsuccessful</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-8021x.c"
                 line="1596">the #NMSetting8021x</doc>
            <type name="Setting8021x" c:type="NMSetting8021x*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-8021x.c"
                 line="1597">when @scheme is set to either %NM_SETTING_802_1X_CK_SCHEME_PATH
  or %NM_SETTING_802_1X_CK_SCHEME_BLOB, pass the path of the "phase2" CA
  certificate file (PEM or DER format).  The path must be UTF-8 encoded; use
  g_filename_to_utf8() to convert if needed.  Passing %NULL with any @scheme
  clears the "phase2" CA certificate.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="scheme" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-8021x.c"
                 line="1602">desired storage scheme for the certificate</doc>
            <type name="Setting8021xCKScheme" c:type="NMSetting8021xCKScheme"/>
          </parameter>
          <parameter name="out_format" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-8021x.c"
                 line="1603">on successful return, the type of the certificate added</doc>
            <type name="Setting8021xCKFormat"
                  c:type="NMSetting8021xCKFormat*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_phase2_client_cert"
              c:identifier="nm_setting_802_1x_set_phase2_client_cert"
              throws="1">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-8021x.c"
             line="1913">Reads a certificate from disk and sets the #NMSetting8021x:phase2-client-cert
property with the raw certificate data if using the
%NM_SETTING_802_1X_CK_SCHEME_BLOB scheme, or with the path to the certificate
file if using the %NM_SETTING_802_1X_CK_SCHEME_PATH scheme.

Client certificates are used to identify the connecting client to the network
when EAP-TLS is used as either the "phase 1" or "phase 2" 802.1x
authentication method.</doc>
        <source-position filename="libnm-core/nm-setting-8021x.h" line="307"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-8021x.c"
               line="1934">%TRUE if the operation succeeded, %FALSE if it was unsuccessful</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-8021x.c"
                 line="1915">the #NMSetting8021x</doc>
            <type name="Setting8021x" c:type="NMSetting8021x*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-8021x.c"
                 line="1916">when @scheme is set to either %NM_SETTING_802_1X_CK_SCHEME_PATH
  or %NM_SETTING_802_1X_CK_SCHEME_BLOB, pass the path of the "phase2" client
  certificate file (PEM, DER, or PKCS#&lt;!-- --&gt;12 format).  The path must be UTF-8
  encoded; use g_filename_to_utf8() to convert if needed.  Passing %NULL with
  any @scheme clears the "phase2" client certificate.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="scheme" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-8021x.c"
                 line="1921">desired storage scheme for the certificate</doc>
            <type name="Setting8021xCKScheme" c:type="NMSetting8021xCKScheme"/>
          </parameter>
          <parameter name="out_format" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-8021x.c"
                 line="1922">on successful return, the type of the certificate added</doc>
            <type name="Setting8021xCKFormat"
                  c:type="NMSetting8021xCKFormat*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_phase2_private_key"
              c:identifier="nm_setting_802_1x_set_phase2_private_key"
              throws="1">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-8021x.c"
             line="2352">Private keys are used to authenticate the connecting client to the network
when EAP-TLS is used as either the "phase 1" or "phase 2" 802.1x
authentication method.

This function reads a private key from disk and sets the
#NMSetting8021x:phase2-private-key property with the private key file data if
using the %NM_SETTING_802_1X_CK_SCHEME_BLOB scheme, or with the path to the
private key file if using the %NM_SETTING_802_1X_CK_SCHEME_PATH scheme.

If @password is given, this function attempts to decrypt the private key to
verify that @password is correct, and if it is, updates the
#NMSetting8021x:phase2-private-key-password property with the given
@password.  If the decryption is unsuccessful, %FALSE is returned, @error is
set, and no internal data is changed.  If no @password is given, the private
key is assumed to be valid, no decryption is performed, and the password may
be set at a later time.

WARNING: the "phase2" private key property is not a "secret" property, and
thus unencrypted private key data using the BLOB scheme may be readable by
unprivileged users.  Private keys should always be encrypted with a private
key password to prevent unauthorized access to unencrypted private key data.</doc>
        <source-position filename="libnm-core/nm-setting-8021x.h" line="347"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-8021x.c"
               line="2389">%TRUE if the operation succeeded, %FALSE if it was unsuccessful</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-8021x.c"
                 line="2354">the #NMSetting8021x</doc>
            <type name="Setting8021x" c:type="NMSetting8021x*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-8021x.c"
                 line="2355">when @scheme is set to either %NM_SETTING_802_1X_CK_SCHEME_PATH or
  %NM_SETTING_802_1X_CK_SCHEME_BLOB, pass the path of the "phase2" private
  key file (PEM, DER, or PKCS#&lt;!-- --&gt;12 format).  The path must be UTF-8 encoded;
  use g_filename_to_utf8() to convert if needed.  Passing %NULL with any
  @scheme clears the private key.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="password" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-8021x.c"
                 line="2360">password used to decrypt the private key, or %NULL if the password
  is unknown.  If the password is given but fails to decrypt the private key,
  an error is returned.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="scheme" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-8021x.c"
                 line="2363">desired storage scheme for the private key</doc>
            <type name="Setting8021xCKScheme" c:type="NMSetting8021xCKScheme"/>
          </parameter>
          <parameter name="out_format" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-8021x.c"
                 line="2364">on successful return, the type of the private key added</doc>
            <type name="Setting8021xCKFormat"
                  c:type="NMSetting8021xCKFormat*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_private_key"
              c:identifier="nm_setting_802_1x_set_private_key"
              throws="1">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-8021x.c"
             line="2149">Private keys are used to authenticate the connecting client to the network
when EAP-TLS is used as either the "phase 1" or "phase 2" 802.1x
authentication method.

This function reads a private key from disk and sets the
#NMSetting8021x:private-key property with the private key file data if using
the %NM_SETTING_802_1X_CK_SCHEME_BLOB scheme, or with the path to the private
key file if using the %NM_SETTING_802_1X_CK_SCHEME_PATH scheme.

If @password is given, this function attempts to decrypt the private key to
verify that @password is correct, and if it is, updates the
#NMSetting8021x:private-key-password property with the given @password.  If
the decryption is unsuccessful, %FALSE is returned, @error is set, and no
internal data is changed.  If no @password is given, the private key is
assumed to be valid, no decryption is performed, and the password may be set
at a later time.

WARNING: the private key property is not a "secret" property, and thus
unencrypted private key data using the BLOB scheme may be readable by
unprivileged users.  Private keys should always be encrypted with a private
key password to prevent unauthorized access to unencrypted private key data.</doc>
        <source-position filename="libnm-core/nm-setting-8021x.h" line="331"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-8021x.c"
               line="2186">%TRUE if the operation succeeded, %FALSE if it was unsuccessful</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-8021x.c"
                 line="2151">the #NMSetting8021x</doc>
            <type name="Setting8021x" c:type="NMSetting8021x*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-8021x.c"
                 line="2152">when @scheme is set to either %NM_SETTING_802_1X_CK_SCHEME_PATH or
  %NM_SETTING_802_1X_CK_SCHEME_BLOB, pass the path of the private key file
  (PEM, DER, or PKCS#&lt;!-- --&gt;12 format).  The path must be UTF-8 encoded; use
  g_filename_to_utf8() to convert if needed.  Passing %NULL with any @scheme
  clears the private key.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="password" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-8021x.c"
                 line="2157">password used to decrypt the private key, or %NULL if the password
  is unknown.  If the password is given but fails to decrypt the private key,
  an error is returned.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="scheme" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-8021x.c"
                 line="2160">desired storage scheme for the private key</doc>
            <type name="Setting8021xCKScheme" c:type="NMSetting8021xCKScheme"/>
          </parameter>
          <parameter name="out_format" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-8021x.c"
                 line="2161">on successful return, the type of the private key added</doc>
            <type name="Setting8021xCKFormat"
                  c:type="NMSetting8021xCKFormat*"/>
          </parameter>
        </parameters>
      </method>
      <property name="altsubject-matches"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-8021x.c"
             line="3609">List of strings to be matched against the altSubjectName of the
certificate presented by the authentication server. If the list is empty,
no verification of the server certificate's altSubjectName is performed.</doc>
        <array>
          <type name="utf8"/>
        </array>
      </property>
      <property name="anonymous-identity"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-8021x.c"
             line="3464">Anonymous identity string for EAP authentication methods.  Used as the
unencrypted identity with EAP types that support different tunneled
identity like EAP-TTLS.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="auth-timeout"
                version="1.8"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-8021x.c"
             line="4385">A timeout for the authentication. Zero means the global default; if the
global default is not set, the authentication timeout is 25 seconds.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="ca-cert" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-8021x.c"
             line="3501">Contains the CA certificate if used by the EAP method specified in the
#NMSetting8021x:eap property.

Certificate data is specified using a "scheme"; two are currently
supported: blob and path. When using the blob scheme (which is backwards
compatible with NM 0.7.x) this property should be set to the
certificate's DER encoded data. When using the path scheme, this property
should be set to the full UTF-8 encoded path of the certificate, prefixed
with the string "file://" and ending with a terminating NUL byte. This
property can be unset even if the EAP method supports CA certificates,
but this allows man-in-the-middle attacks and is NOT recommended.

Setting this property directly is discouraged; use the
nm_setting_802_1x_set_ca_cert() function instead.</doc>
        <type name="GLib.Bytes"/>
      </property>
      <property name="ca-cert-password"
                version="1.8"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-8021x.c"
             line="3532">The password used to access the CA certificate stored in
#NMSetting8021x:ca-cert property. Only makes sense if the certificate
is stored on a PKCS#&lt;!-- --&gt;11 token that requires a login.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="ca-cert-password-flags"
                version="1.8"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-8021x.c"
             line="3551">Flags indicating how to handle the #NMSetting8021x:ca-cert-password property.</doc>
        <type name="SettingSecretFlags"/>
      </property>
      <property name="ca-path" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-8021x.c"
             line="3568">UTF-8 encoded path to a directory containing PEM or DER formatted
certificates to be added to the verification chain in addition to the
certificate specified in the #NMSetting8021x:ca-cert property.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="client-cert" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-8021x.c"
             line="3652">Contains the client certificate if used by the EAP method specified in
the #NMSetting8021x:eap property.

Certificate data is specified using a "scheme"; two are currently
supported: blob and path. When using the blob scheme (which is backwards
compatible with NM 0.7.x) this property should be set to the
certificate's DER encoded data. When using the path scheme, this property
should be set to the full UTF-8 encoded path of the certificate, prefixed
with the string "file://" and ending with a terminating NUL byte.

Setting this property directly is discouraged; use the
nm_setting_802_1x_set_client_cert() function instead.</doc>
        <type name="GLib.Bytes"/>
      </property>
      <property name="client-cert-password"
                version="1.8"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-8021x.c"
             line="3681">The password used to access the client certificate stored in
#NMSetting8021x:client-cert property. Only makes sense if the certificate
is stored on a PKCS#&lt;!-- --&gt;11 token that requires a login.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="client-cert-password-flags"
                version="1.8"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-8021x.c"
             line="3700">Flags indicating how to handle the #NMSetting8021x:client-cert-password property.</doc>
        <type name="SettingSecretFlags"/>
      </property>
      <property name="domain-suffix-match"
                version="1.2"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-8021x.c"
             line="3629">Constraint for server domain name. If set, this FQDN is used as a suffix
match requirement for dNSName element(s) of the certificate presented by
the authentication server.  If a matching dNSName is found, this
constraint is met.  If no dNSName values are present, this constraint is
matched against SubjectName CN using same suffix match comparison.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="eap" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-8021x.c"
             line="3422">The allowed EAP method to be used when authenticating to the network with
802.1x.  Valid methods are: "leap", "md5", "tls", "peap", "ttls", "pwd",
and "fast".  Each method requires different configuration using the
properties of this setting; refer to wpa_supplicant documentation for the
allowed combinations.</doc>
        <array>
          <type name="utf8"/>
        </array>
      </property>
      <property name="identity" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-8021x.c"
             line="3445">Identity string for EAP authentication methods.  Often the user's user or
login name.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="pac-file" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-8021x.c"
             line="3483">UTF-8 encoded file path containing PAC for EAP-FAST.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="password" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-8021x.c"
             line="4071">UTF-8 encoded password used for EAP authentication methods. If both the
#NMSetting8021x:password property and the #NMSetting8021x:password-raw
property are specified, #NMSetting8021x:password is preferred.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="password-flags" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-8021x.c"
             line="4092">Flags indicating how to handle the #NMSetting8021x:password property.</doc>
        <type name="SettingSecretFlags"/>
      </property>
      <property name="password-raw" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-8021x.c"
             line="4111">Password used for EAP authentication methods, given as a byte array to
allow passwords in other encodings than UTF-8 to be used. If both the
#NMSetting8021x:password property and the #NMSetting8021x:password-raw
property are specified, #NMSetting8021x:password is preferred.</doc>
        <type name="GLib.Bytes"/>
      </property>
      <property name="password-raw-flags"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-8021x.c"
             line="4134">Flags indicating how to handle the #NMSetting8021x:password-raw property.</doc>
        <type name="SettingSecretFlags"/>
      </property>
      <property name="phase1-auth-flags"
                version="1.8"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-8021x.c"
             line="3786">Specifies authentication flags to use in "phase 1" outer
authentication using #NMSetting8021xAuthFlags options.
The individual TLS versions can be explicitly disabled. If a certain
TLS disable flag is not set, it is up to the supplicant to allow
or forbid it. The TLS options map to tls_disable_tlsv1_x settings.
See the wpa_supplicant documentation for more details.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="phase1-fast-provisioning"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-8021x.c"
             line="3762">Enables or disables in-line provisioning of EAP-FAST credentials when
FAST is specified as the EAP method in the #NMSetting8021x:eap property.
Recognized values are "0" (disabled), "1" (allow unauthenticated
provisioning), "2" (allow authenticated provisioning), and "3" (allow
both authenticated and unauthenticated provisioning).  See the
wpa_supplicant documentation for more details.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="phase1-peaplabel" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-8021x.c"
             line="3740">Forces use of the new PEAP label during key derivation.  Some RADIUS
servers may require forcing the new PEAP label to interoperate with
PEAPv1.  Set to "1" to force use of the new PEAP label.  See the
wpa_supplicant documentation for more details.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="phase1-peapver" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-8021x.c"
             line="3717">Forces which PEAP version is used when PEAP is set as the EAP method in
the #NMSetting8021x:eap property.  When unset, the version reported by
the server will be used.  Sometimes when using older RADIUS servers, it
is necessary to force the client to use a particular PEAP version.  To do
so, this property may be set to "0" or "1" to force that specific PEAP
version.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="phase2-altsubject-matches"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-8021x.c"
             line="3960">List of strings to be matched against the altSubjectName of the
certificate presented by the authentication server during the inner
"phase 2" authentication. If the list is empty, no verification of the
server certificate's altSubjectName is performed.</doc>
        <array>
          <type name="utf8"/>
        </array>
      </property>
      <property name="phase2-auth" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-8021x.c"
             line="3813">Specifies the allowed "phase 2" inner non-EAP authentication methods when
an EAP method that uses an inner TLS tunnel is specified in the
#NMSetting8021x:eap property.  Recognized non-EAP "phase 2" methods are
"pap", "chap", "mschap", "mschapv2", "gtc", "otp", "md5", and "tls".
Each "phase 2" inner method requires specific parameters for successful
authentication; see the wpa_supplicant documentation for more details.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="phase2-autheap" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-8021x.c"
             line="3838">Specifies the allowed "phase 2" inner EAP-based authentication methods
when an EAP method that uses an inner TLS tunnel is specified in the
#NMSetting8021x:eap property.  Recognized EAP-based "phase 2" methods are
"md5", "mschapv2", "otp", "gtc", and "tls". Each "phase 2" inner method
requires specific parameters for successful authentication; see the
wpa_supplicant documentation for more details.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="phase2-ca-cert" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-8021x.c"
             line="3863">Contains the "phase 2" CA certificate if used by the EAP method specified
in the #NMSetting8021x:phase2-auth or #NMSetting8021x:phase2-autheap
properties.

Certificate data is specified using a "scheme"; two are currently
supported: blob and path. When using the blob scheme (which is backwards
compatible with NM 0.7.x) this property should be set to the
certificate's DER encoded data. When using the path scheme, this property
should be set to the full UTF-8 encoded path of the certificate, prefixed
with the string "file://" and ending with a terminating NUL byte. This
property can be unset even if the EAP method supports CA certificates,
but this allows man-in-the-middle attacks and is NOT recommended.

Setting this property directly is discouraged; use the
nm_setting_802_1x_set_phase2_ca_cert() function instead.</doc>
        <type name="GLib.Bytes"/>
      </property>
      <property name="phase2-ca-cert-password"
                version="1.8"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-8021x.c"
             line="3888">The password used to access the "phase2" CA certificate stored in
#NMSetting8021x:phase2-ca-cert property. Only makes sense if the certificate
is stored on a PKCS#&lt;!-- --&gt;11 token that requires a login.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="phase2-ca-cert-password-flags"
                version="1.8"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-8021x.c"
             line="3907">Flags indicating how to handle the #NMSetting8021x:phase2-ca-cert-password property.</doc>
        <type name="SettingSecretFlags"/>
      </property>
      <property name="phase2-ca-path" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-8021x.c"
             line="3924">UTF-8 encoded path to a directory containing PEM or DER formatted
certificates to be added to the verification chain in addition to the
certificate specified in the #NMSetting8021x:phase2-ca-cert property.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="phase2-client-cert"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-8021x.c"
             line="4003">Contains the "phase 2" client certificate if used by the EAP method
specified in the #NMSetting8021x:phase2-auth or
#NMSetting8021x:phase2-autheap properties.

Certificate data is specified using a "scheme"; two are currently
supported: blob and path. When using the blob scheme (which is backwards
compatible with NM 0.7.x) this property should be set to the
certificate's DER encoded data. When using the path scheme, this property
should be set to the full UTF-8 encoded path of the certificate, prefixed
with the string "file://" and ending with a terminating NUL byte. This
property can be unset even if the EAP method supports CA certificates,
but this allows man-in-the-middle attacks and is NOT recommended.

Setting this property directly is discouraged; use the
nm_setting_802_1x_set_phase2_client_cert() function instead.</doc>
        <type name="GLib.Bytes"/>
      </property>
      <property name="phase2-client-cert-password"
                version="1.8"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-8021x.c"
             line="4035">The password used to access the "phase2" client certificate stored in
#NMSetting8021x:phase2-client-cert property. Only makes sense if the certificate
is stored on a PKCS#&lt;!-- --&gt;11 token that requires a login.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="phase2-client-cert-password-flags"
                version="1.8"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-8021x.c"
             line="4054">Flags indicating how to handle the #NMSetting8021x:phase2-client-cert-password property.</doc>
        <type name="SettingSecretFlags"/>
      </property>
      <property name="phase2-domain-suffix-match"
                version="1.2"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-8021x.c"
             line="3979">Constraint for server domain name. If set, this FQDN is used as a suffix
match requirement for dNSName element(s) of the certificate presented by
the authentication server during the inner "phase 2" authentication.  If
a matching dNSName is found, this constraint is met.  If no dNSName
values are present, this constraint is matched against SubjectName CN
using same suffix match comparison.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="phase2-private-key"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-8021x.c"
             line="4240">Contains the "phase 2" inner private key when the
#NMSetting8021x:phase2-auth or #NMSetting8021x:phase2-autheap property is
set to "tls".

Key data is specified using a "scheme"; two are currently supported: blob
and path. When using the blob scheme and private keys, this property
should be set to the key's encrypted PEM encoded data. When using private
keys with the path scheme, this property should be set to the full UTF-8
encoded path of the key, prefixed with the string "file://" and ending
with a terminating NUL byte. When using PKCS#&lt;!-- --&gt;12 format private
keys and the blob scheme, this property should be set to the
PKCS#&lt;!-- --&gt;12 data and the #NMSetting8021x:phase2-private-key-password
property must be set to password used to decrypt the PKCS#&lt;!-- --&gt;12
certificate and key. When using PKCS#&lt;!-- --&gt;12 files and the path
scheme, this property should be set to the full UTF-8 encoded path of the
key, prefixed with the string "file://" and ending with a terminating
NUL byte, and as with the blob scheme the
#NMSetting8021x:phase2-private-key-password property must be set to the
password used to decode the PKCS#&lt;!-- --&gt;12 private key and certificate.

Setting this property directly is discouraged; use the
nm_setting_802_1x_set_phase2_private_key() function instead.</doc>
        <type name="GLib.Bytes"/>
      </property>
      <property name="phase2-private-key-password"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-8021x.c"
             line="4278">The password used to decrypt the "phase 2" private key specified in the
#NMSetting8021x:phase2-private-key property when the private key either
uses the path scheme, or is a PKCS#&lt;!-- --&gt;12 format key.  Setting this
property directly is not generally necessary except when returning
secrets to NetworkManager; it is generally set automatically when setting
the private key by the nm_setting_802_1x_set_phase2_private_key()
function.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="phase2-private-key-password-flags"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-8021x.c"
             line="4303">Flags indicating how to handle the
#NMSetting8021x:phase2-private-key-password property.</doc>
        <type name="SettingSecretFlags"/>
      </property>
      <property name="phase2-subject-match"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-8021x.c"
             line="3937">Substring to be matched against the subject of the certificate presented
by the authentication server during the inner "phase 2"
authentication. When unset, no verification of the authentication server
certificate's subject is performed.  This property provides little security,
if any, and its use is deprecated in favor of
NMSetting8021x:phase2-domain-suffix-match.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="pin" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-8021x.c"
             line="4323">PIN used for EAP authentication methods.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="pin-flags" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-8021x.c"
             line="4341">Flags indicating how to handle the #NMSetting8021x:pin property.</doc>
        <type name="SettingSecretFlags"/>
      </property>
      <property name="private-key" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-8021x.c"
             line="4152">Contains the private key when the #NMSetting8021x:eap property is set to
"tls".

Key data is specified using a "scheme"; two are currently supported: blob
and path. When using the blob scheme and private keys, this property
should be set to the key's encrypted PEM encoded data. When using private
keys with the path scheme, this property should be set to the full UTF-8
encoded path of the key, prefixed with the string "file://" and ending
with a terminating NUL byte. When using PKCS#&lt;!-- --&gt;12 format private
keys and the blob scheme, this property should be set to the
PKCS#&lt;!-- --&gt;12 data and the #NMSetting8021x:private-key-password
property must be set to password used to decrypt the PKCS#&lt;!-- --&gt;12
certificate and key. When using PKCS#&lt;!-- --&gt;12 files and the path
scheme, this property should be set to the full UTF-8 encoded path of the
key, prefixed with the string "file://" and ending with a terminating
NUL byte, and as with the blob scheme the "private-key-password" property
must be set to the password used to decode the PKCS#&lt;!-- --&gt;12 private
key and certificate.

Setting this property directly is discouraged; use the
nm_setting_802_1x_set_private_key() function instead.

WARNING: #NMSetting8021x:private-key is not a "secret" property, and thus
unencrypted private key data using the BLOB scheme may be readable by
unprivileged users.  Private keys should always be encrypted with a
private key password to prevent unauthorized access to unencrypted
private key data.</doc>
        <type name="GLib.Bytes"/>
      </property>
      <property name="private-key-password"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-8021x.c"
             line="4196">The password used to decrypt the private key specified in the
#NMSetting8021x:private-key property when the private key either uses the
path scheme, or if the private key is a PKCS#&lt;!-- --&gt;12 format key.  Setting this
property directly is not generally necessary except when returning
secrets to NetworkManager; it is generally set automatically when setting
the private key by the nm_setting_802_1x_set_private_key() function.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="private-key-password-flags"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-8021x.c"
             line="4220">Flags indicating how to handle the #NMSetting8021x:private-key-password
property.</doc>
        <type name="SettingSecretFlags"/>
      </property>
      <property name="subject-match" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-8021x.c"
             line="3587">Substring to be matched against the subject of the certificate presented
by the authentication server. When unset, no verification of the
authentication server certificate's subject is performed.  This property
provides little security, if any, and its use is deprecated in favor of
NMSetting8021x:domain-suffix-match.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="system-ca-certs"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-8021x.c"
             line="4359">When %TRUE, overrides the #NMSetting8021x:ca-path and
#NMSetting8021x:phase2-ca-path properties using the system CA directory
specified at configure time with the --system-ca-path switch.  The
certificates in this directory are added to the verification chain in
addition to any certificates specified by the #NMSetting8021x:ca-cert and
#NMSetting8021x:phase2-ca-cert properties. If the path provided with
--system-ca-path is rather a file name (bundle of trusted CA certificates),
it overrides #NMSetting8021x:ca-cert and #NMSetting8021x:phase2-ca-cert
properties instead (sets ca_cert/ca_cert2 options for wpa_supplicant).</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <field name="parent">
        <type name="Setting" c:type="NMSetting"/>
      </field>
    </class>
    <enumeration name="Setting8021xAuthFlags"
                 version="1.8"
                 glib:type-name="NMSetting8021xAuthFlags"
                 glib:get-type="nm_setting_802_1x_auth_flags_get_type"
                 c:type="NMSetting8021xAuthFlags">
      <doc xml:space="preserve"
           filename="libnm-core/nm-setting-8021x.h"
           line="78">#NMSetting8021xAuthFlags values indicate which authentication settings
should be used.</doc>
      <member name="none"
              value="0"
              c:identifier="NM_SETTING_802_1X_AUTH_FLAGS_NONE"
              glib:nick="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-8021x.h"
             line="80">No flags</doc>
      </member>
      <member name="tls_1_0_disable"
              value="1"
              c:identifier="NM_SETTING_802_1X_AUTH_FLAGS_TLS_1_0_DISABLE"
              glib:nick="tls-1-0-disable">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-8021x.h"
             line="81">Disable TLSv1.0</doc>
      </member>
      <member name="tls_1_1_disable"
              value="2"
              c:identifier="NM_SETTING_802_1X_AUTH_FLAGS_TLS_1_1_DISABLE"
              glib:nick="tls-1-1-disable">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-8021x.h"
             line="82">Disable TLSv1.1</doc>
      </member>
      <member name="tls_1_2_disable"
              value="4"
              c:identifier="NM_SETTING_802_1X_AUTH_FLAGS_TLS_1_2_DISABLE"
              glib:nick="tls-1-2-disable">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-8021x.h"
             line="83">Disable TLSv1.2</doc>
      </member>
      <member name="all"
              value="7"
              c:identifier="NM_SETTING_802_1X_AUTH_FLAGS_ALL"
              glib:nick="all">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-8021x.h"
             line="84">All supported flags</doc>
      </member>
    </enumeration>
    <enumeration name="Setting8021xCKFormat"
                 glib:type-name="NMSetting8021xCKFormat"
                 glib:get-type="nm_setting_802_1x_ck_format_get_type"
                 c:type="NMSetting8021xCKFormat">
      <doc xml:space="preserve"
           filename="libnm-core/nm-setting-8021x.h"
           line="37">#NMSetting8021xCKFormat values indicate the general type of a certificate
or private key</doc>
      <member name="unknown"
              value="0"
              c:identifier="NM_SETTING_802_1X_CK_FORMAT_UNKNOWN"
              glib:nick="unknown">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-8021x.h"
             line="39">unknown file format</doc>
      </member>
      <member name="x509"
              value="1"
              c:identifier="NM_SETTING_802_1X_CK_FORMAT_X509"
              glib:nick="x509">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-8021x.h"
             line="40">file contains an X.509 format certificate</doc>
      </member>
      <member name="raw_key"
              value="2"
              c:identifier="NM_SETTING_802_1X_CK_FORMAT_RAW_KEY"
              glib:nick="raw-key">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-8021x.h"
             line="41">file contains an old-style OpenSSL PEM
or DER private key</doc>
      </member>
      <member name="pkcs12"
              value="3"
              c:identifier="NM_SETTING_802_1X_CK_FORMAT_PKCS12"
              glib:nick="pkcs12">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-8021x.h"
             line="43">file contains a PKCS#&lt;!-- --&gt;12 certificate
and private key</doc>
      </member>
    </enumeration>
    <enumeration name="Setting8021xCKScheme"
                 glib:type-name="NMSetting8021xCKScheme"
                 glib:get-type="nm_setting_802_1x_ck_scheme_get_type"
                 c:type="NMSetting8021xCKScheme">
      <doc xml:space="preserve"
           filename="libnm-core/nm-setting-8021x.h"
           line="56">#NMSetting8021xCKScheme values indicate how a certificate or private key is
stored in the setting properties, either as a blob of the item's data, or as
a path to a certificate or private key file on the filesystem</doc>
      <member name="unknown"
              value="0"
              c:identifier="NM_SETTING_802_1X_CK_SCHEME_UNKNOWN"
              glib:nick="unknown">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-8021x.h"
             line="58">unknown certificate or private key
scheme</doc>
      </member>
      <member name="blob"
              value="1"
              c:identifier="NM_SETTING_802_1X_CK_SCHEME_BLOB"
              glib:nick="blob">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-8021x.h"
             line="60">certificate or key is stored as the raw
item data</doc>
      </member>
      <member name="path"
              value="2"
              c:identifier="NM_SETTING_802_1X_CK_SCHEME_PATH"
              glib:nick="path">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-8021x.h"
             line="62">certificate or key is stored as a path
to a file containing the certificate or key data</doc>
      </member>
      <member name="pkcs11"
              value="3"
              c:identifier="NM_SETTING_802_1X_CK_SCHEME_PKCS11"
              glib:nick="pkcs11">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-8021x.h"
             line="64">certificate or key is stored as a
URI of an object on a PKCS#11 token</doc>
      </member>
    </enumeration>
    <record name="Setting8021xClass"
            c:type="NMSetting8021xClass"
            glib:is-gtype-struct-for="Setting8021x">
      <source-position filename="libnm-core/nm-setting-8021x.h" line="188"/>
      <field name="parent">
        <type name="SettingClass" c:type="NMSettingClass"/>
      </field>
      <field name="padding" readable="0" private="1">
        <array zero-terminated="0" fixed-size="4">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <class name="SettingAdsl"
           c:symbol-prefix="setting_adsl"
           c:type="NMSettingAdsl"
           parent="Setting"
           glib:type-name="NMSettingAdsl"
           glib:get-type="nm_setting_adsl_get_type"
           glib:type-struct="SettingAdslClass">
      <doc xml:space="preserve"
           filename="libnm-core/nm-setting-adsl.h"
           line="57">ADSL Settings</doc>
      <source-position filename="libnm-core/nm-setting-adsl.h" line="71"/>
      <constructor name="new" c:identifier="nm_setting_adsl_new">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-adsl.c"
             line="324">Creates a new #NMSettingAdsl object with default values.</doc>
        <source-position filename="libnm-core/nm-setting-adsl.h" line="75"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-adsl.c"
               line="329">the new empty #NMSettingAdsl object</doc>
          <type name="Setting" c:type="NMSetting*"/>
        </return-value>
      </constructor>
      <method name="get_encapsulation"
              c:identifier="nm_setting_adsl_get_encapsulation">
        <source-position filename="libnm-core/nm-setting-adsl.h" line="79"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-adsl.c"
               line="127">the #NMSettingAdsl:encapsulation property of the setting</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-adsl.c"
                 line="125">the #NMSettingAdsl</doc>
            <type name="SettingAdsl" c:type="NMSettingAdsl*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_password" c:identifier="nm_setting_adsl_get_password">
        <source-position filename="libnm-core/nm-setting-adsl.h" line="77"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-adsl.c"
               line="85">the #NMSettingAdsl:password property of the setting</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-adsl.c"
                 line="83">the #NMSettingAdsl</doc>
            <type name="SettingAdsl" c:type="NMSettingAdsl*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_password_flags"
              c:identifier="nm_setting_adsl_get_password_flags">
        <source-position filename="libnm-core/nm-setting-adsl.h" line="82"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-adsl.c"
               line="99">the #NMSettingSecretFlags pertaining to the #NMSettingAdsl:password</doc>
          <type name="SettingSecretFlags" c:type="NMSettingSecretFlags"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-adsl.c"
                 line="97">the #NMSettingAdsl</doc>
            <type name="SettingAdsl" c:type="NMSettingAdsl*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_protocol" c:identifier="nm_setting_adsl_get_protocol">
        <source-position filename="libnm-core/nm-setting-adsl.h" line="78"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-adsl.c"
               line="113">the #NMSettingAdsl:protocol property of the setting</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-adsl.c"
                 line="111">the #NMSettingAdsl</doc>
            <type name="SettingAdsl" c:type="NMSettingAdsl*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_username" c:identifier="nm_setting_adsl_get_username">
        <source-position filename="libnm-core/nm-setting-adsl.h" line="76"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-adsl.c"
               line="71">the #NMSettingAdsl:username property of the setting</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-adsl.c"
                 line="69">the #NMSettingAdsl</doc>
            <type name="SettingAdsl" c:type="NMSettingAdsl*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_vci" c:identifier="nm_setting_adsl_get_vci">
        <source-position filename="libnm-core/nm-setting-adsl.h" line="81"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-adsl.c"
               line="155">the #NMSettingAdsl:vci property of the setting</doc>
          <type name="guint32" c:type="guint32"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-adsl.c"
                 line="153">the #NMSettingAdsl</doc>
            <type name="SettingAdsl" c:type="NMSettingAdsl*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_vpi" c:identifier="nm_setting_adsl_get_vpi">
        <source-position filename="libnm-core/nm-setting-adsl.h" line="80"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-adsl.c"
               line="141">the #NMSettingAdsl:vpi property of the setting</doc>
          <type name="guint32" c:type="guint32"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-adsl.c"
                 line="139">the #NMSettingAdsl</doc>
            <type name="SettingAdsl" c:type="NMSettingAdsl*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="encapsulation" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-adsl.c"
             line="412">Encapsulation of ADSL connection.  Can be "vcmux" or "llc".</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="password" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-adsl.c"
             line="377">Password used to authenticate with the ADSL service.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="password-flags" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-adsl.c"
             line="389">Flags indicating how to handle the #NMSettingAdsl:password property.</doc>
        <type name="SettingSecretFlags"/>
      </property>
      <property name="protocol" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-adsl.c"
             line="401">ADSL connection protocol.  Can be "pppoa", "pppoe" or "ipoatm".</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="username" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-adsl.c"
             line="366">Username used to authenticate with the ADSL service.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="vci" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-adsl.c"
             line="434">VCI of ADSL connection</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="vpi" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-adsl.c"
             line="423">VPI of ADSL connection</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <field name="parent">
        <type name="Setting" c:type="NMSetting"/>
      </field>
    </class>
    <record name="SettingAdslClass"
            c:type="NMSettingAdslClass"
            glib:is-gtype-struct-for="SettingAdsl">
      <source-position filename="libnm-core/nm-setting-adsl.h" line="71"/>
      <field name="parent">
        <type name="SettingClass" c:type="NMSettingClass"/>
      </field>
      <field name="padding" readable="0" private="1">
        <array zero-terminated="0" fixed-size="4">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <class name="SettingBluetooth"
           c:symbol-prefix="setting_bluetooth"
           c:type="NMSettingBluetooth"
           parent="Setting"
           glib:type-name="NMSettingBluetooth"
           glib:get-type="nm_setting_bluetooth_get_type"
           glib:type-struct="SettingBluetoothClass">
      <doc xml:space="preserve"
           filename="libnm-core/nm-setting-bluetooth.h"
           line="70">Bluetooth Settings</doc>
      <source-position filename="libnm-core/nm-setting-bluetooth.h" line="84"/>
      <constructor name="new" c:identifier="nm_setting_bluetooth_new">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-bluetooth.c"
             line="265">Creates a new #NMSettingBluetooth object with default values.</doc>
        <source-position filename="libnm-core/nm-setting-bluetooth.h"
                         line="88"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-bluetooth.c"
               line="270">the new empty #NMSettingBluetooth object</doc>
          <type name="Setting" c:type="NMSetting*"/>
        </return-value>
      </constructor>
      <method name="get_bdaddr" c:identifier="nm_setting_bluetooth_get_bdaddr">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-bluetooth.c"
             line="82">Gets the Bluetooth address of the remote device which this setting
describes a connection to.</doc>
        <source-position filename="libnm-core/nm-setting-bluetooth.h"
                         line="89"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-bluetooth.c"
               line="89">the Bluetooth address</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-bluetooth.c"
                 line="84">the #NMSettingBluetooth</doc>
            <type name="SettingBluetooth" c:type="NMSettingBluetooth*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_connection_type"
              c:identifier="nm_setting_bluetooth_get_connection_type">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-bluetooth.c"
             line="64">Returns the connection method for communicating with the remote device (i.e.
either DUN to a DUN-capable device or PANU to a NAP-capable device).</doc>
        <source-position filename="libnm-core/nm-setting-bluetooth.h"
                         line="90"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-bluetooth.c"
               line="71">the type, either %NM_SETTING_BLUETOOTH_TYPE_PANU,
%NM_SETTING_BLUETOOTH_TYPE_NAP or %NM_SETTING_BLUETOOTH_TYPE_DUN</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-bluetooth.c"
                 line="66">the #NMSettingBluetooth</doc>
            <type name="SettingBluetooth" c:type="NMSettingBluetooth*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="bdaddr" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-bluetooth.c"
             line="303">The Bluetooth address of the device.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="type" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-bluetooth.c"
             line="321">Either "dun" for Dial-Up Networking connections or "panu" for Personal
Area Networking connections to devices supporting the NAP profile.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent">
        <type name="Setting" c:type="NMSetting"/>
      </field>
    </class>
    <record name="SettingBluetoothClass"
            c:type="NMSettingBluetoothClass"
            glib:is-gtype-struct-for="SettingBluetooth">
      <source-position filename="libnm-core/nm-setting-bluetooth.h" line="84"/>
      <field name="parent">
        <type name="SettingClass" c:type="NMSettingClass"/>
      </field>
      <field name="padding" readable="0" private="1">
        <array zero-terminated="0" fixed-size="4">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <class name="SettingBond"
           c:symbol-prefix="setting_bond"
           c:type="NMSettingBond"
           parent="Setting"
           glib:type-name="NMSettingBond"
           glib:get-type="nm_setting_bond_get_type"
           glib:type-struct="SettingBondClass">
      <doc xml:space="preserve"
           filename="libnm-core/nm-setting-bond.h"
           line="73">Bonding Settings</doc>
      <source-position filename="libnm-core/nm-setting-bond.h" line="87"/>
      <constructor name="new" c:identifier="nm_setting_bond_new">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-bond.c"
             line="924">Creates a new #NMSettingBond object with default values.</doc>
        <source-position filename="libnm-core/nm-setting-bond.h" line="91"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-bond.c"
               line="929">the new empty #NMSettingBond object</doc>
          <type name="Setting" c:type="NMSetting*"/>
        </return-value>
      </constructor>
      <function name="validate_option"
                c:identifier="nm_setting_bond_validate_option">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-bond.c"
             line="247">Checks whether @name is a valid bond option and @value is a valid value for
the @name. If @value is %NULL, the function only validates the option name.</doc>
        <source-position filename="libnm-core/nm-setting-bond.h" line="105"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-bond.c"
               line="255">%TRUE, if the @value is valid for the given name.
If the @name is not a valid option, %FALSE will be returned.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-bond.c"
                 line="249">the name of the option to validate</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-bond.c"
                 line="250">the value of the option to validate</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </function>
      <method name="add_option" c:identifier="nm_setting_bond_add_option">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-bond.c"
             line="315">Add an option to the table.  The option is compared to an internal list
of allowed options.  Option names may contain only alphanumeric characters
(ie [a-zA-Z0-9]).  Adding a new name replaces any existing name/value pair
that may already exist.

The order of how to set several options is relevant because there are options
that conflict with each other.</doc>
        <source-position filename="libnm-core/nm-setting-bond.h" line="99"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-bond.c"
               line="329">%TRUE if the option was valid and was added to the internal option
list, %FALSE if it was not.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-bond.c"
                 line="317">the #NMSettingBond</doc>
            <type name="SettingBond" c:type="NMSettingBond*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-bond.c"
                 line="318">name for the option</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-bond.c"
                 line="319">value for the option</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_num_options"
              c:identifier="nm_setting_bond_get_num_options">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-bond.c"
             line="111">Returns the number of options that should be set for this bond when it
is activated. This can be used to retrieve each option individually
using nm_setting_bond_get_option().</doc>
        <source-position filename="libnm-core/nm-setting-bond.h" line="92"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-bond.c"
               line="119">the number of bonding options</doc>
          <type name="guint32" c:type="guint32"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-bond.c"
                 line="113">the #NMSettingBond</doc>
            <type name="SettingBond" c:type="NMSettingBond*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_option" c:identifier="nm_setting_bond_get_option">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-bond.c"
             line="129">Given an index, return the value of the bonding option at that index.  Indexes
are *not* guaranteed to be static across modifications to options done by
nm_setting_bond_add_option() and nm_setting_bond_remove_option(),
and should not be used to refer to options except for short periods of time
such as during option iteration.</doc>
        <source-position filename="libnm-core/nm-setting-bond.h" line="93"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-bond.c"
               line="146">%TRUE on success if the index was valid and an option was found,
%FALSE if the index was invalid (ie, greater than the number of options
currently held by the setting)</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-bond.c"
                 line="131">the #NMSettingBond</doc>
            <type name="SettingBond" c:type="NMSettingBond*"/>
          </instance-parameter>
          <parameter name="idx" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-bond.c"
                 line="132">index of the desired option, from 0 to
nm_setting_bond_get_num_options() - 1</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
          <parameter name="out_name"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-bond.c"
                 line="134">on return, the name of the bonding option;
  this value is owned by the setting and should not be modified</doc>
            <type name="utf8" c:type="const char**"/>
          </parameter>
          <parameter name="out_value"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-bond.c"
                 line="136">on return, the value of the name of the
  bonding option; this value is owned by the setting and should not be
  modified</doc>
            <type name="utf8" c:type="const char**"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_option_by_name"
              c:identifier="nm_setting_bond_get_option_by_name">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-bond.c"
             line="292">Returns the value associated with the bonding option specified by
@name, if it exists.</doc>
        <source-position filename="libnm-core/nm-setting-bond.h" line="97"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-bond.c"
               line="300">the value, or %NULL if the key/value pair was never added to the
setting; the value is owned by the setting and must not be modified</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-bond.c"
                 line="294">the #NMSettingBond</doc>
            <type name="SettingBond" c:type="NMSettingBond*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-bond.c"
                 line="295">the option name for which to retrieve the value</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_option_default"
              c:identifier="nm_setting_bond_get_option_default">
        <source-position filename="libnm-core/nm-setting-bond.h" line="110"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-bond.c"
               line="427">the value of the bond option if not overridden by an entry in
  the #NMSettingBond:options property.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-bond.c"
                 line="424">the #NMSettingBond</doc>
            <type name="SettingBond" c:type="NMSettingBond*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-bond.c"
                 line="425">the name of the option</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_valid_options"
              c:identifier="nm_setting_bond_get_valid_options">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-bond.c"
             line="397">Returns a list of valid bond options.

The @setting argument is unused and may be passed as %NULL.</doc>
        <source-position filename="libnm-core/nm-setting-bond.h" line="108"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-bond.c"
               line="405">a %NULL-terminated array of strings of valid bond options.</doc>
          <array c:type="const char**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="setting"
                              transfer-ownership="none"
                              nullable="1"
                              allow-none="1">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-bond.c"
                 line="399">the #NMSettingBond</doc>
            <type name="SettingBond" c:type="NMSettingBond*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="remove_option"
              c:identifier="nm_setting_bond_remove_option">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-bond.c"
             line="365">Remove the bonding option referenced by @name from the internal option
list.</doc>
        <source-position filename="libnm-core/nm-setting-bond.h" line="102"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-bond.c"
               line="373">%TRUE if the option was found and removed from the internal option
list, %FALSE if it was not.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-bond.c"
                 line="367">the #NMSettingBond</doc>
            <type name="SettingBond" c:type="NMSettingBond*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-bond.c"
                 line="368">name of the option to remove</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <property name="options" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-bond.c"
             line="964">Dictionary of key/value pairs of bonding options.  Both keys and values
must be strings. Option names must contain only alphanumeric characters
(ie, [a-zA-Z0-9]).</doc>
        <type name="GLib.HashTable">
          <type name="utf8"/>
          <type name="utf8"/>
        </type>
      </property>
      <field name="parent">
        <type name="Setting" c:type="NMSetting"/>
      </field>
    </class>
    <record name="SettingBondClass"
            c:type="NMSettingBondClass"
            glib:is-gtype-struct-for="SettingBond">
      <source-position filename="libnm-core/nm-setting-bond.h" line="87"/>
      <field name="parent">
        <type name="SettingClass" c:type="NMSettingClass"/>
      </field>
      <field name="padding" readable="0" private="1">
        <array zero-terminated="0" fixed-size="4">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <class name="SettingBridge"
           c:symbol-prefix="setting_bridge"
           c:type="NMSettingBridge"
           parent="Setting"
           glib:type-name="NMSettingBridge"
           glib:get-type="nm_setting_bridge_get_type"
           glib:type-struct="SettingBridgeClass">
      <doc xml:space="preserve"
           filename="libnm-core/nm-setting-bridge.h"
           line="52">Bridging Settings</doc>
      <source-position filename="libnm-core/nm-setting-bridge.h" line="66"/>
      <constructor name="new" c:identifier="nm_setting_bridge_new">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-bridge.c"
             line="376">Creates a new #NMSettingBridge object with default values.</doc>
        <source-position filename="libnm-core/nm-setting-bridge.h" line="70"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-bridge.c"
               line="381">the new empty #NMSettingBridge object</doc>
          <type name="Setting" c:type="NMSetting*"/>
        </return-value>
      </constructor>
      <method name="get_ageing_time"
              c:identifier="nm_setting_bridge_get_ageing_time">
        <source-position filename="libnm-core/nm-setting-bridge.h" line="84"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-bridge.c"
               line="161">the #NMSettingBridge:ageing-time property of the setting</doc>
          <type name="guint32" c:type="guint32"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-bridge.c"
                 line="159">the #NMSettingBridge</doc>
            <type name="SettingBridge" c:type="NMSettingBridge*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_forward_delay"
              c:identifier="nm_setting_bridge_get_forward_delay">
        <source-position filename="libnm-core/nm-setting-bridge.h" line="78"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-bridge.c"
               line="119">the #NMSettingBridge:forward-delay property of the setting</doc>
          <type name="guint16" c:type="guint16"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-bridge.c"
                 line="117">the #NMSettingBridge</doc>
            <type name="SettingBridge" c:type="NMSettingBridge*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_group_forward_mask"
              c:identifier="nm_setting_bridge_get_group_forward_mask"
              version="1.10">
        <source-position filename="libnm-core/nm-setting-bridge.h" line="86"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-bridge.c"
               line="175">the #NMSettingBridge:group-forward-mask property of the setting</doc>
          <type name="guint16" c:type="guint16"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-bridge.c"
                 line="173">the #NMSettingBridge</doc>
            <type name="SettingBridge" c:type="NMSettingBridge*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_hello_time"
              c:identifier="nm_setting_bridge_get_hello_time">
        <source-position filename="libnm-core/nm-setting-bridge.h" line="80"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-bridge.c"
               line="133">the #NMSettingBridge:hello-time property of the setting</doc>
          <type name="guint16" c:type="guint16"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-bridge.c"
                 line="131">the #NMSettingBridge</doc>
            <type name="SettingBridge" c:type="NMSettingBridge*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_mac_address"
              c:identifier="nm_setting_bridge_get_mac_address">
        <source-position filename="libnm-core/nm-setting-bridge.h" line="72"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-bridge.c"
               line="77">the #NMSettingBridge:mac-address property of the setting</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-bridge.c"
                 line="75">the #NMSettingBridge</doc>
            <type name="SettingBridge" c:type="NMSettingBridge*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_max_age" c:identifier="nm_setting_bridge_get_max_age">
        <source-position filename="libnm-core/nm-setting-bridge.h" line="82"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-bridge.c"
               line="147">the #NMSettingBridge:max-age property of the setting</doc>
          <type name="guint16" c:type="guint16"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-bridge.c"
                 line="145">the #NMSettingBridge</doc>
            <type name="SettingBridge" c:type="NMSettingBridge*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_multicast_snooping"
              c:identifier="nm_setting_bridge_get_multicast_snooping"
              version="1.2">
        <source-position filename="libnm-core/nm-setting-bridge.h" line="88"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-bridge.c"
               line="191">the #NMSettingBridge:multicast-snooping property of the setting</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-bridge.c"
                 line="189">the #NMSettingBridge</doc>
            <type name="SettingBridge" c:type="NMSettingBridge*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_priority"
              c:identifier="nm_setting_bridge_get_priority">
        <source-position filename="libnm-core/nm-setting-bridge.h" line="76"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-bridge.c"
               line="105">the #NMSettingBridge:priority property of the setting</doc>
          <type name="guint16" c:type="guint16"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-bridge.c"
                 line="103">the #NMSettingBridge</doc>
            <type name="SettingBridge" c:type="NMSettingBridge*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_stp" c:identifier="nm_setting_bridge_get_stp">
        <source-position filename="libnm-core/nm-setting-bridge.h" line="74"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-bridge.c"
               line="91">the #NMSettingBridge:stp property of the setting</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-bridge.c"
                 line="89">the #NMSettingBridge</doc>
            <type name="SettingBridge" c:type="NMSettingBridge*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="ageing-time"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-bridge.c"
             line="563">The Ethernet MAC address aging time, in seconds.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="forward-delay"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-bridge.c"
             line="500">The Spanning Tree Protocol (STP) forwarding delay, in seconds.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="group-forward-mask"
                version="1.10"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-bridge.c"
             line="584">A mask of group addresses to forward. Usually, group addresses in
the range from 01:80:C2:00:00:00 to 01:80:C2:00:00:0F are not
forwarded according to standards. This property is a mask of 16 bits,
each corresponding to a group address in that range that must be
forwarded. The mask can't have bits 0, 1 or 2 set because they are
used for STP, MAC pause frames and LACP.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="hello-time"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-bridge.c"
             line="521">The Spanning Tree Protocol (STP) hello time, in seconds.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="mac-address"
                deprecated="1"
                deprecated-version="1.12"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-bridge.c"
             line="414">If specified, the MAC address of bridge. When creating a new bridge, this
MAC address will be set.

If this field is left unspecified, the "ethernet.cloned-mac-address" is
referred instead to generate the initial MAC address. Note that setting
"ethernet.cloned-mac-address" anyway overwrites the MAC address of
the bridge later while activating the bridge. Hence, this property
is deprecated.</doc>
        <doc-deprecated xml:space="preserve">Use the ethernet.cloned-mac-address property instead.</doc-deprecated>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="max-age"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-bridge.c"
             line="542">The Spanning Tree Protocol (STP) maximum message age, in seconds.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="multicast-snooping"
                version="1.2"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-bridge.c"
             line="604">Controls whether IGMP snooping is enabled for this bridge.
Note that if snooping was automatically disabled due to hash collisions,
the system may refuse to enable the feature until the collisions are
resolved.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="priority"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-bridge.c"
             line="477">Sets the Spanning Tree Protocol (STP) priority for this bridge.  Lower
values are "better"; the lowest priority bridge will be elected the root
bridge.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="stp"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-bridge.c"
             line="457">Controls whether Spanning Tree Protocol (STP) is enabled for this bridge.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <field name="parent">
        <type name="Setting" c:type="NMSetting"/>
      </field>
    </class>
    <record name="SettingBridgeClass"
            c:type="NMSettingBridgeClass"
            glib:is-gtype-struct-for="SettingBridge">
      <source-position filename="libnm-core/nm-setting-bridge.h" line="66"/>
      <field name="parent">
        <type name="SettingClass" c:type="NMSettingClass"/>
      </field>
      <field name="padding" readable="0" private="1">
        <array zero-terminated="0" fixed-size="4">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <class name="SettingBridgePort"
           c:symbol-prefix="setting_bridge_port"
           c:type="NMSettingBridgePort"
           parent="Setting"
           glib:type-name="NMSettingBridgePort"
           glib:get-type="nm_setting_bridge_port_get_type"
           glib:type-struct="SettingBridgePortClass">
      <doc xml:space="preserve"
           filename="libnm-core/nm-setting-bridge-port.h"
           line="46">Bridge Port Settings</doc>
      <source-position filename="libnm-core/nm-setting-bridge-port.h"
                       line="60"/>
      <constructor name="new" c:identifier="nm_setting_bridge_port_new">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-bridge-port.c"
             line="195">Creates a new #NMSettingBridgePort object with default values.</doc>
        <source-position filename="libnm-core/nm-setting-bridge-port.h"
                         line="64"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-bridge-port.c"
               line="200">the new empty #NMSettingBridgePort object</doc>
          <type name="Setting" c:type="NMSetting*"/>
        </return-value>
      </constructor>
      <method name="get_hairpin_mode"
              c:identifier="nm_setting_bridge_port_get_hairpin_mode">
        <source-position filename="libnm-core/nm-setting-bridge-port.h"
                         line="70"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-bridge-port.c"
               line="95">the #NMSettingBridgePort:hairpin-mode property of the setting</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-bridge-port.c"
                 line="93">the #NMSettingBridgePort</doc>
            <type name="SettingBridgePort" c:type="NMSettingBridgePort*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_path_cost"
              c:identifier="nm_setting_bridge_port_get_path_cost">
        <source-position filename="libnm-core/nm-setting-bridge-port.h"
                         line="68"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-bridge-port.c"
               line="81">the #NMSettingBridgePort:path-cost property of the setting</doc>
          <type name="guint16" c:type="guint16"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-bridge-port.c"
                 line="79">the #NMSettingBridgePort</doc>
            <type name="SettingBridgePort" c:type="NMSettingBridgePort*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_priority"
              c:identifier="nm_setting_bridge_port_get_priority">
        <source-position filename="libnm-core/nm-setting-bridge-port.h"
                         line="66"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-bridge-port.c"
               line="67">the #NMSettingBridgePort:priority property of the setting</doc>
          <type name="guint16" c:type="guint16"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-bridge-port.c"
                 line="65">the #NMSettingBridgePort</doc>
            <type name="SettingBridgePort" c:type="NMSettingBridgePort*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="hairpin-mode" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-bridge-port.c"
             line="263">Enables or disables "hairpin mode" for the port, which allows frames to
be sent back out through the port the frame was received on.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="path-cost"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-bridge-port.c"
             line="242">The Spanning Tree Protocol (STP) port cost for destinations via this
port.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="priority"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-bridge-port.c"
             line="221">The Spanning Tree Protocol (STP) priority of this bridge port.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <field name="parent">
        <type name="Setting" c:type="NMSetting"/>
      </field>
    </class>
    <record name="SettingBridgePortClass"
            c:type="NMSettingBridgePortClass"
            glib:is-gtype-struct-for="SettingBridgePort">
      <source-position filename="libnm-core/nm-setting-bridge-port.h"
                       line="60"/>
      <field name="parent">
        <type name="SettingClass" c:type="NMSettingClass"/>
      </field>
      <field name="padding" readable="0" private="1">
        <array zero-terminated="0" fixed-size="4">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <class name="SettingCdma"
           c:symbol-prefix="setting_cdma"
           c:type="NMSettingCdma"
           parent="Setting"
           glib:type-name="NMSettingCdma"
           glib:get-type="nm_setting_cdma_get_type"
           glib:type-struct="SettingCdmaClass">
      <doc xml:space="preserve"
           filename="libnm-core/nm-setting-cdma.h"
           line="49">CDMA-based Mobile Broadband Settings</doc>
      <source-position filename="libnm-core/nm-setting-cdma.h" line="63"/>
      <constructor name="new" c:identifier="nm_setting_cdma_new">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-cdma.c"
             line="264">Creates a new #NMSettingCdma object with default values.</doc>
        <source-position filename="libnm-core/nm-setting-cdma.h" line="67"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-cdma.c"
               line="269">the new empty #NMSettingCdma object</doc>
          <type name="Setting" c:type="NMSetting*"/>
        </return-value>
      </constructor>
      <method name="get_mtu"
              c:identifier="nm_setting_cdma_get_mtu"
              version="1.8">
        <source-position filename="libnm-core/nm-setting-cdma.h" line="74"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-cdma.c"
               line="123">the #NMSettingCdma:mtu property of the setting</doc>
          <type name="guint32" c:type="guint32"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-cdma.c"
                 line="121">the #NMSettingCdma</doc>
            <type name="SettingCdma" c:type="NMSettingCdma*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_number" c:identifier="nm_setting_cdma_get_number">
        <source-position filename="libnm-core/nm-setting-cdma.h" line="68"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-cdma.c"
               line="67">the #NMSettingCdma:number property of the setting</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-cdma.c"
                 line="65">the #NMSettingCdma</doc>
            <type name="SettingCdma" c:type="NMSettingCdma*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_password" c:identifier="nm_setting_cdma_get_password">
        <source-position filename="libnm-core/nm-setting-cdma.h" line="70"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-cdma.c"
               line="95">the #NMSettingCdma:password property of the setting</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-cdma.c"
                 line="93">the #NMSettingCdma</doc>
            <type name="SettingCdma" c:type="NMSettingCdma*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_password_flags"
              c:identifier="nm_setting_cdma_get_password_flags">
        <source-position filename="libnm-core/nm-setting-cdma.h" line="71"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-cdma.c"
               line="109">the #NMSettingSecretFlags pertaining to the #NMSettingCdma:password</doc>
          <type name="SettingSecretFlags" c:type="NMSettingSecretFlags"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-cdma.c"
                 line="107">the #NMSettingCdma</doc>
            <type name="SettingCdma" c:type="NMSettingCdma*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_username" c:identifier="nm_setting_cdma_get_username">
        <source-position filename="libnm-core/nm-setting-cdma.h" line="69"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-cdma.c"
               line="81">the #NMSettingCdma:username property of the setting</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-cdma.c"
                 line="79">the #NMSettingCdma</doc>
            <type name="SettingCdma" c:type="NMSettingCdma*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="mtu"
                version="1.8"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-cdma.c"
             line="357">If non-zero, only transmit packets of the specified size or smaller,
breaking larger packets up into multiple frames.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="number" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-cdma.c"
             line="305">The number to dial to establish the connection to the CDMA-based mobile
broadband network, if any.  If not specified, the default number (#777)
is used when required.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="password" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-cdma.c"
             line="331">The password used to authenticate with the network, if required.  Many
providers do not require a password, or accept any password.  But if a
password is required, it is specified here.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="password-flags" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-cdma.c"
             line="345">Flags indicating how to handle the #NMSettingCdma:password property.</doc>
        <type name="SettingSecretFlags"/>
      </property>
      <property name="username" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-cdma.c"
             line="318">The username used to authenticate with the network, if required.  Many
providers do not require a username, or accept any username.  But if a
username is required, it is specified here.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent">
        <type name="Setting" c:type="NMSetting"/>
      </field>
    </class>
    <record name="SettingCdmaClass"
            c:type="NMSettingCdmaClass"
            glib:is-gtype-struct-for="SettingCdma">
      <source-position filename="libnm-core/nm-setting-cdma.h" line="63"/>
      <field name="parent">
        <type name="SettingClass" c:type="NMSettingClass"/>
      </field>
      <field name="padding" readable="0" private="1">
        <array zero-terminated="0" fixed-size="4">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <record name="SettingClass"
            c:type="NMSettingClass"
            glib:is-gtype-struct-for="Setting">
      <source-position filename="libnm-core/nm-setting.h" line="273"/>
      <field name="parent">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="verify">
        <callback name="verify" throws="1">
          <source-position filename="libnm-core/nm-setting.h" line="198"/>
          <return-value transfer-ownership="none">
            <type name="gint" c:type="int"/>
          </return-value>
          <parameters>
            <parameter name="setting" transfer-ownership="none">
              <type name="Setting" c:type="NMSetting*"/>
            </parameter>
            <parameter name="connection" transfer-ownership="none">
              <type name="Connection" c:type="NMConnection*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="verify_secrets">
        <callback name="verify_secrets" throws="1">
          <source-position filename="libnm-core/nm-setting.h" line="202"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting.c"
                 line="1251">%TRUE if the setting secrets are valid, %FALSE if they are not</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="setting" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="libnm-core/nm-setting.c"
                   line="1240">the #NMSetting to verify secrets in</doc>
              <type name="Setting" c:type="NMSetting*"/>
            </parameter>
            <parameter name="connection"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="libnm-core/nm-setting.c"
                   line="1241">the #NMConnection that @setting came from, or
  %NULL if @setting is being verified in isolation.</doc>
              <type name="Connection" c:type="NMConnection*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="need_secrets" introspectable="0">
        <callback name="need_secrets" introspectable="0">
          <source-position filename="libnm-core/nm-setting.h" line="206"/>
          <return-value>
            <array name="GLib.PtrArray" c:type="GPtrArray*">
              <type name="gpointer" c:type="gpointer"/>
            </array>
          </return-value>
          <parameters>
            <parameter name="setting" transfer-ownership="none">
              <type name="Setting" c:type="NMSetting*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="update_one_secret">
        <callback name="update_one_secret" throws="1">
          <source-position filename="libnm-core/nm-setting.h" line="208"/>
          <return-value transfer-ownership="none">
            <type name="gint" c:type="int"/>
          </return-value>
          <parameters>
            <parameter name="setting" transfer-ownership="none">
              <type name="Setting" c:type="NMSetting*"/>
            </parameter>
            <parameter name="key" transfer-ownership="none">
              <type name="utf8" c:type="const char*"/>
            </parameter>
            <parameter name="value" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_secret_flags">
        <callback name="get_secret_flags" throws="1">
          <source-position filename="libnm-core/nm-setting.h" line="213"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting.c"
                 line="2188">%TRUE on success (if the given secret name was a valid property of
this setting, and if that property is secret), %FALSE if not</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="setting" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="libnm-core/nm-setting.c"
                   line="2180">the #NMSetting</doc>
              <type name="Setting" c:type="NMSetting*"/>
            </parameter>
            <parameter name="secret_name" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="libnm-core/nm-setting.c"
                   line="2181">the secret key name to get flags for</doc>
              <type name="utf8" c:type="const char*"/>
            </parameter>
            <parameter name="out_flags" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="libnm-core/nm-setting.c"
                   line="2182">on success, the #NMSettingSecretFlags for the secret</doc>
              <type name="SettingSecretFlags" c:type="NMSettingSecretFlags*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="set_secret_flags">
        <callback name="set_secret_flags" throws="1">
          <source-position filename="libnm-core/nm-setting.h" line="218"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting.c"
                 line="2241">%TRUE on success (if the given secret name was a valid property of
this setting, and if that property is secret), %FALSE if not</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="setting" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="libnm-core/nm-setting.c"
                   line="2233">the #NMSetting</doc>
              <type name="Setting" c:type="NMSetting*"/>
            </parameter>
            <parameter name="secret_name" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="libnm-core/nm-setting.c"
                   line="2234">the secret key name to set flags for</doc>
              <type name="utf8" c:type="const char*"/>
            </parameter>
            <parameter name="flags" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="libnm-core/nm-setting.c"
                   line="2235">the #NMSettingSecretFlags for the secret</doc>
              <type name="SettingSecretFlags" c:type="NMSettingSecretFlags"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="clear_secrets" introspectable="0">
        <callback name="clear_secrets" introspectable="0">
          <source-position filename="libnm-core/nm-setting.h" line="224"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="sett_info" transfer-ownership="none">
              <type name="gpointer" c:type="const _NMSettInfoSetting*"/>
            </parameter>
            <parameter name="property_idx" transfer-ownership="none">
              <type name="guint" c:type="guint"/>
            </parameter>
            <parameter name="setting" transfer-ownership="none">
              <type name="Setting" c:type="NMSetting*"/>
            </parameter>
            <parameter name="func" transfer-ownership="none" closure="4">
              <type name="SettingClearSecretsWithFlagsFn"
                    c:type="NMSettingClearSecretsWithFlagsFn"/>
            </parameter>
            <parameter name="user_data"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       closure="4">
              <type name="gpointer" c:type="gpointer"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="compare_property">
        <callback name="compare_property">
          <source-position filename="libnm-core/nm-setting.h" line="237"/>
          <return-value transfer-ownership="none">
            <type name="Ternary" c:type="NMTernary"/>
          </return-value>
          <parameters>
            <parameter name="sett_info" transfer-ownership="none">
              <type name="gpointer" c:type="const _NMSettInfoSetting*"/>
            </parameter>
            <parameter name="property_idx" transfer-ownership="none">
              <type name="guint" c:type="guint"/>
            </parameter>
            <parameter name="setting" transfer-ownership="none">
              <type name="Setting" c:type="NMSetting*"/>
            </parameter>
            <parameter name="other" transfer-ownership="none">
              <type name="Setting" c:type="NMSetting*"/>
            </parameter>
            <parameter name="flags" transfer-ownership="none">
              <type name="SettingCompareFlags" c:type="NMSettingCompareFlags"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="duplicate_copy_properties">
        <callback name="duplicate_copy_properties">
          <source-position filename="libnm-core/nm-setting.h" line="244"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="sett_info" transfer-ownership="none">
              <type name="gpointer" c:type="const _NMSettInfoSetting*"/>
            </parameter>
            <parameter name="src" transfer-ownership="none">
              <type name="Setting" c:type="NMSetting*"/>
            </parameter>
            <parameter name="dst" transfer-ownership="none">
              <type name="Setting" c:type="NMSetting*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="enumerate_values" introspectable="0">
        <callback name="enumerate_values" introspectable="0">
          <source-position filename="libnm-core/nm-setting.h" line="249"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="property_info" transfer-ownership="none">
              <type name="gpointer" c:type="const _NMSettInfoProperty*"/>
            </parameter>
            <parameter name="setting" transfer-ownership="none">
              <type name="Setting" c:type="NMSetting*"/>
            </parameter>
            <parameter name="func" transfer-ownership="none" closure="3">
              <type name="SettingValueIterFn" c:type="NMSettingValueIterFn"/>
            </parameter>
            <parameter name="user_data"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       closure="3">
              <type name="gpointer" c:type="gpointer"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="aggregate">
        <callback name="aggregate">
          <source-position filename="libnm-core/nm-setting.h" line="255"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="setting" transfer-ownership="none">
              <type name="Setting" c:type="NMSetting*"/>
            </parameter>
            <parameter name="type_i" transfer-ownership="none">
              <type name="gint" c:type="int"/>
            </parameter>
            <parameter name="arg"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <type name="gpointer" c:type="gpointer"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="for_each_secret" introspectable="0">
        <callback name="for_each_secret" introspectable="0">
          <source-position filename="libnm-core/nm-setting.h" line="260"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="setting" transfer-ownership="none">
              <type name="Setting" c:type="NMSetting*"/>
            </parameter>
            <parameter name="secret_name" transfer-ownership="none">
              <type name="utf8" c:type="const char*"/>
            </parameter>
            <parameter name="val" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
            <parameter name="remove_non_secrets" transfer-ownership="none">
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
            <parameter name="callback" transfer-ownership="none">
              <type c:type="_NMConnectionForEachSecretFunc"/>
            </parameter>
            <parameter name="callback_data"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <type name="gpointer" c:type="gpointer"/>
            </parameter>
            <parameter name="setting_builder" transfer-ownership="none">
              <type name="GLib.VariantBuilder" c:type="GVariantBuilder*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="padding" readable="0" private="1">
        <array zero-terminated="0" fixed-size="2">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
      <field name="setting_info">
        <type name="gpointer" c:type="const _NMMetaSettingInfo*"/>
      </field>
    </record>
    <callback name="SettingClearSecretsWithFlagsFn"
              c:type="NMSettingClearSecretsWithFlagsFn">
      <source-position filename="libnm-core/nm-setting.h" line="166"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting.h"
             line="164">%TRUE to clear the secret, %FALSE to not clear the secret</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="setting" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting.h"
               line="159">The setting for which secrets are being iterated</doc>
          <type name="Setting" c:type="NMSetting*"/>
        </parameter>
        <parameter name="secret" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting.h"
               line="160">The secret's name</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="flags" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting.h"
               line="161">The secret's flags, eg %NM_SETTING_SECRET_FLAG_AGENT_OWNED</doc>
          <type name="SettingSecretFlags" c:type="NMSettingSecretFlags"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="3">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting.h"
               line="162">User data passed to nm_connection_clear_secrets_with_flags()</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <enumeration name="SettingCompareFlags"
                 glib:type-name="NMSettingCompareFlags"
                 glib:get-type="nm_setting_compare_flags_get_type"
                 c:type="NMSettingCompareFlags">
      <doc xml:space="preserve"
           filename="libnm-core/nm-setting.h"
           line="84">These flags modify the comparison behavior when comparing two settings or
two connections.</doc>
      <member name="exact"
              value="0"
              c:identifier="NM_SETTING_COMPARE_FLAG_EXACT"
              glib:nick="exact">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting.h"
             line="86">match all properties exactly</doc>
      </member>
      <member name="fuzzy"
              value="1"
              c:identifier="NM_SETTING_COMPARE_FLAG_FUZZY"
              glib:nick="fuzzy">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting.h"
             line="87">match only important attributes, like SSID,
  type, security settings, etc.  Does not match, for example, connection ID
  or UUID.</doc>
      </member>
      <member name="ignore_id"
              value="2"
              c:identifier="NM_SETTING_COMPARE_FLAG_IGNORE_ID"
              glib:nick="ignore-id">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting.h"
             line="90">ignore the connection's ID</doc>
      </member>
      <member name="ignore_secrets"
              value="4"
              c:identifier="NM_SETTING_COMPARE_FLAG_IGNORE_SECRETS"
              glib:nick="ignore-secrets">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting.h"
             line="91">ignore all secrets</doc>
      </member>
      <member name="ignore_agent_owned_secrets"
              value="8"
              c:identifier="NM_SETTING_COMPARE_FLAG_IGNORE_AGENT_OWNED_SECRETS"
              glib:nick="ignore-agent-owned-secrets">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting.h"
             line="92">ignore secrets for which
  the secret's flags indicate the secret is owned by a user secret agent
  (ie, the secret's flag includes @NM_SETTING_SECRET_FLAG_AGENT_OWNED)</doc>
      </member>
      <member name="ignore_not_saved_secrets"
              value="16"
              c:identifier="NM_SETTING_COMPARE_FLAG_IGNORE_NOT_SAVED_SECRETS"
              glib:nick="ignore-not-saved-secrets">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting.h"
             line="95">ignore secrets for which
  the secret's flags indicate the secret should not be saved to persistent
  storage (ie, the secret's flag includes @NM_SETTING_SECRET_FLAG_NOT_SAVED)</doc>
      </member>
      <member name="diff_result_with_default"
              value="32"
              c:identifier="NM_SETTING_COMPARE_FLAG_DIFF_RESULT_WITH_DEFAULT"
              glib:nick="diff-result-with-default">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting.h"
             line="98">if this flag is set,
  nm_setting_diff() and nm_connection_diff() will also include properties that
  are set to their default value. See also @NM_SETTING_COMPARE_FLAG_DIFF_RESULT_NO_DEFAULT.</doc>
      </member>
      <member name="diff_result_no_default"
              value="64"
              c:identifier="NM_SETTING_COMPARE_FLAG_DIFF_RESULT_NO_DEFAULT"
              glib:nick="diff-result-no-default">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting.h"
             line="101">if this flag is set,
  nm_setting_diff() and nm_connection_diff() will not include properties that
  are set to their default value. This is the opposite of
  @NM_SETTING_COMPARE_FLAG_DIFF_RESULT_WITH_DEFAULT. If both flags are set together,
  @NM_SETTING_COMPARE_FLAG_DIFF_RESULT_WITH_DEFAULT wins. If both flags are unset,
  this means to exclude default properties if there is a setting to compare,
  but include all properties, if the setting 'b' is missing. This is the legacy
  behaviour of libnm-util, where nm_setting_diff() behaved differently depending
  on whether the setting 'b' was available. If @NM_SETTING_COMPARE_FLAG_DIFF_RESULT_WITH_DEFAULT
  is set, nm_setting_diff() will also set the flags @NM_SETTING_DIFF_RESULT_IN_A_DEFAULT
  and @NM_SETTING_DIFF_RESULT_IN_B_DEFAULT, if the values are default values.</doc>
      </member>
      <member name="ignore_timestamp"
              value="128"
              c:identifier="NM_SETTING_COMPARE_FLAG_IGNORE_TIMESTAMP"
              glib:nick="ignore-timestamp">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting.h"
             line="112">ignore the connection's timestamp</doc>
      </member>
    </enumeration>
    <class name="SettingConnection"
           c:symbol-prefix="setting_connection"
           c:type="NMSettingConnection"
           parent="Setting"
           glib:type-name="NMSettingConnection"
           glib:get-type="nm_setting_connection_get_type"
           glib:type-struct="SettingConnectionClass">
      <doc xml:space="preserve"
           filename="libnm-core/nm-setting-connection.h"
           line="139">General Connection Profile Settings</doc>
      <source-position filename="libnm-core/nm-setting-connection.h"
                       line="153"/>
      <constructor name="new" c:identifier="nm_setting_connection_new">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-connection.c"
             line="1513">Creates a new #NMSettingConnection object with default values.</doc>
        <source-position filename="libnm-core/nm-setting-connection.h"
                         line="157"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-connection.c"
               line="1518">the new empty #NMSettingConnection object</doc>
          <type name="Setting" c:type="NMSetting*"/>
        </return-value>
      </constructor>
      <method name="add_permission"
              c:identifier="nm_setting_connection_add_permission">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-connection.c"
             line="374">Adds a permission to the connection's permission list.  At this time, only
the "user" permission type is supported, and @pitem must be a username. See
#NMSettingConnection:permissions: for more details.</doc>
        <source-position filename="libnm-core/nm-setting-connection.h"
                         line="181"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-connection.c"
               line="385">%TRUE if the permission was unique and was successfully added to the
list, %FALSE if @ptype or @pitem was invalid or it the permission was already
present in the list</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-connection.c"
                 line="376">the #NMSettingConnection</doc>
            <type name="SettingConnection" c:type="NMSettingConnection*"/>
          </instance-parameter>
          <parameter name="ptype" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-connection.c"
                 line="377">the permission type; at this time only "user" is supported</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="pitem" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-connection.c"
                 line="378">the permission item formatted as required for @ptype</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="detail"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-connection.c"
                 line="379">unused at this time; must be %NULL</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_secondary"
              c:identifier="nm_setting_connection_add_secondary">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-connection.c"
             line="731">Adds a new secondary connection UUID to the setting.</doc>
        <source-position filename="libnm-core/nm-setting-connection.h"
                         line="201"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-connection.c"
               line="738">%TRUE if the secondary connection UUID was added; %FALSE if the UUID
was already present</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-connection.c"
                 line="733">the #NMSettingConnection</doc>
            <type name="SettingConnection" c:type="NMSettingConnection*"/>
          </instance-parameter>
          <parameter name="sec_uuid" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-connection.c"
                 line="734">the secondary connection UUID to add</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_auth_retries"
              c:identifier="nm_setting_connection_get_auth_retries"
              version="1.10">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-connection.c"
             line="561">Returns the value contained in the #NMSettingConnection:auth-retries property.</doc>
        <source-position filename="libnm-core/nm-setting-connection.h"
                         line="212"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-connection.c"
               line="567">the configured authentication retries. Zero means
infinity and -1 means a global default value.</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-connection.c"
                 line="563">the #NMSettingConnection</doc>
            <type name="SettingConnection" c:type="NMSettingConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_autoconnect"
              c:identifier="nm_setting_connection_get_autoconnect">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-connection.c"
             line="493">Returns the #NMSettingConnection:autoconnect property of the connection.</doc>
        <source-position filename="libnm-core/nm-setting-connection.h"
                         line="164"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-connection.c"
               line="499">the connection's autoconnect behavior</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-connection.c"
                 line="495">the #NMSettingConnection</doc>
            <type name="SettingConnection" c:type="NMSettingConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_autoconnect_priority"
              c:identifier="nm_setting_connection_get_autoconnect_priority">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-connection.c"
             line="509">Returns the #NMSettingConnection:autoconnect-priority property of the connection.
The higher number, the higher priority.</doc>
        <source-position filename="libnm-core/nm-setting-connection.h"
                         line="165"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-connection.c"
               line="516">the connection's autoconnect priority</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-connection.c"
                 line="511">the #NMSettingConnection</doc>
            <type name="SettingConnection" c:type="NMSettingConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_autoconnect_retries"
              c:identifier="nm_setting_connection_get_autoconnect_retries"
              version="1.6">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-connection.c"
             line="526">Returns the #NMSettingConnection:autoconnect-retries property of the connection.
Zero means infinite, -1 means the global default value.</doc>
        <source-position filename="libnm-core/nm-setting-connection.h"
                         line="167"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-connection.c"
               line="533">the connection's autoconnect retries</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-connection.c"
                 line="528">the #NMSettingConnection</doc>
            <type name="SettingConnection" c:type="NMSettingConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_autoconnect_slaves"
              c:identifier="nm_setting_connection_get_autoconnect_slaves"
              version="1.2">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-connection.c"
             line="678">Returns the #NMSettingConnection:autoconnect-slaves property of the connection.</doc>
        <source-position filename="libnm-core/nm-setting-connection.h"
                         line="197"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-connection.c"
               line="684">whether slaves of the connection should be activated together
         with the connection.</doc>
          <type name="SettingConnectionAutoconnectSlaves"
                c:type="NMSettingConnectionAutoconnectSlaves"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-connection.c"
                 line="680">the #NMSettingConnection</doc>
            <type name="SettingConnection" c:type="NMSettingConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_connection_type"
              c:identifier="nm_setting_connection_get_connection_type">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-connection.c"
             line="262">Returns the #NMSettingConnection:type property of the connection.</doc>
        <source-position filename="libnm-core/nm-setting-connection.h"
                         line="163"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-connection.c"
               line="268">the connection type</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-connection.c"
                 line="264">the #NMSettingConnection</doc>
            <type name="SettingConnection" c:type="NMSettingConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_gateway_ping_timeout"
              c:identifier="nm_setting_connection_get_gateway_ping_timeout">
        <source-position filename="libnm-core/nm-setting-connection.h"
                         line="205"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-connection.c"
               line="822">the value contained in the #NMSettingConnection:gateway-ping-timeout
property.</doc>
          <type name="guint32" c:type="guint32"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-connection.c"
                 line="820">the #NMSettingConnection</doc>
            <type name="SettingConnection" c:type="NMSettingConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_id" c:identifier="nm_setting_connection_get_id">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-connection.c"
             line="196">Returns the #NMSettingConnection:id property of the connection.</doc>
        <source-position filename="libnm-core/nm-setting-connection.h"
                         line="158"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-connection.c"
               line="202">the connection ID</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-connection.c"
                 line="198">the #NMSettingConnection</doc>
            <type name="SettingConnection" c:type="NMSettingConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_interface_name"
              c:identifier="nm_setting_connection_get_interface_name">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-connection.c"
             line="246">Returns the #NMSettingConnection:interface-name property of the connection.</doc>
        <source-position filename="libnm-core/nm-setting-connection.h"
                         line="162"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-connection.c"
               line="252">the connection's interface name</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-connection.c"
                 line="248">the #NMSettingConnection</doc>
            <type name="SettingConnection" c:type="NMSettingConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_lldp"
              c:identifier="nm_setting_connection_get_lldp"
              version="1.2">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-connection.c"
             line="850">Returns the #NMSettingConnection:lldp property of the connection.</doc>
        <source-position filename="libnm-core/nm-setting-connection.h"
                         line="209"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-connection.c"
               line="856">a %NMSettingConnectionLldp which indicates whether LLDP must be
enabled for the connection.</doc>
          <type name="SettingConnectionLldp" c:type="NMSettingConnectionLldp"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-connection.c"
                 line="852">the #NMSettingConnection</doc>
            <type name="SettingConnection" c:type="NMSettingConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_llmnr"
              c:identifier="nm_setting_connection_get_llmnr"
              version="1.14">
        <source-position filename="libnm-core/nm-setting-connection.h"
                         line="217"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-connection.c"
               line="890">the #NMSettingConnection:llmnr property of the setting.</doc>
          <type name="SettingConnectionLlmnr"
                c:type="NMSettingConnectionLlmnr"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-connection.c"
                 line="888">the #NMSettingConnection</doc>
            <type name="SettingConnection" c:type="NMSettingConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_master"
              c:identifier="nm_setting_connection_get_master">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-connection.c"
             line="628">Returns the #NMSettingConnection:master property of the connection.</doc>
        <source-position filename="libnm-core/nm-setting-connection.h"
                         line="192"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-connection.c"
               line="634">interface name of the master device or UUID of the master
connection.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-connection.c"
                 line="630">the #NMSettingConnection</doc>
            <type name="SettingConnection" c:type="NMSettingConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_mdns"
              c:identifier="nm_setting_connection_get_mdns"
              version="1.12">
        <source-position filename="libnm-core/nm-setting-connection.h"
                         line="215"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-connection.c"
               line="873">the #NMSettingConnection:mdns property of the setting.</doc>
          <type name="SettingConnectionMdns" c:type="NMSettingConnectionMdns"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-connection.c"
                 line="871">the #NMSettingConnection</doc>
            <type name="SettingConnection" c:type="NMSettingConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_metered"
              c:identifier="nm_setting_connection_get_metered"
              version="1.2">
        <source-position filename="libnm-core/nm-setting-connection.h"
                         line="207"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-connection.c"
               line="837">the #NMSettingConnection:metered property of the setting.</doc>
          <type name="Metered" c:type="NMMetered"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-connection.c"
                 line="835">the #NMSettingConnection</doc>
            <type name="SettingConnection" c:type="NMSettingConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_multi_connect"
              c:identifier="nm_setting_connection_get_multi_connect"
              version="1.14">
        <source-position filename="libnm-core/nm-setting-connection.h"
                         line="169"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-connection.c"
               line="549">the #NMSettingConnection:multi-connect property of the connection.</doc>
          <type name="ConnectionMultiConnect"
                c:type="NMConnectionMultiConnect"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-connection.c"
                 line="547">the #NMSettingConnection</doc>
            <type name="SettingConnection" c:type="NMSettingConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_num_permissions"
              c:identifier="nm_setting_connection_get_num_permissions">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-connection.c"
             line="278">Returns the number of entries in the #NMSettingConnection:permissions
property of this setting.</doc>
        <source-position filename="libnm-core/nm-setting-connection.h"
                         line="173"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-connection.c"
               line="285">the number of permissions entries</doc>
          <type name="guint32" c:type="guint32"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-connection.c"
                 line="280">the #NMSettingConnection</doc>
            <type name="SettingConnection" c:type="NMSettingConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_num_secondaries"
              c:identifier="nm_setting_connection_get_num_secondaries">
        <source-position filename="libnm-core/nm-setting-connection.h"
                         line="199"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-connection.c"
               line="701">the number of configured secondary connection UUIDs</doc>
          <type name="guint32" c:type="guint32"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-connection.c"
                 line="699">the #NMSettingConnection</doc>
            <type name="SettingConnection" c:type="NMSettingConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_permission"
              c:identifier="nm_setting_connection_get_permission">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-connection.c"
             line="295">Retrieve one of the entries of the #NMSettingConnection:permissions property
of this setting.</doc>
        <source-position filename="libnm-core/nm-setting-connection.h"
                         line="174"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-connection.c"
               line="307">%TRUE if a permission was returned, %FALSE if @idx was invalid</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-connection.c"
                 line="297">the #NMSettingConnection</doc>
            <type name="SettingConnection" c:type="NMSettingConnection*"/>
          </instance-parameter>
          <parameter name="idx" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-connection.c"
                 line="298">the zero-based index of the permissions entry</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
          <parameter name="out_ptype" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-connection.c"
                 line="299">on return, the permission type (at this time, always "user")</doc>
            <type name="utf8" c:type="const char**"/>
          </parameter>
          <parameter name="out_pitem" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-connection.c"
                 line="300">on return, the permission item (formatted according to @ptype, see
#NMSettingConnection:permissions for more detail</doc>
            <type name="utf8" c:type="const char**"/>
          </parameter>
          <parameter name="out_detail" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-connection.c"
                 line="302">on return, the permission detail (at this time, always %NULL)</doc>
            <type name="utf8" c:type="const char**"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_read_only"
              c:identifier="nm_setting_connection_get_read_only">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-connection.c"
             line="596">Returns the #NMSettingConnection:read-only property of the connection.</doc>
        <source-position filename="libnm-core/nm-setting-connection.h"
                         line="171"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-connection.c"
               line="602">%TRUE if the connection is read-only, %FALSE if it is not</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-connection.c"
                 line="598">the #NMSettingConnection</doc>
            <type name="SettingConnection" c:type="NMSettingConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_secondary"
              c:identifier="nm_setting_connection_get_secondary">
        <source-position filename="libnm-core/nm-setting-connection.h"
                         line="200"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-connection.c"
               line="716">the secondary connection UUID at index @idx</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-connection.c"
                 line="713">the #NMSettingConnection</doc>
            <type name="SettingConnection" c:type="NMSettingConnection*"/>
          </instance-parameter>
          <parameter name="idx" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-connection.c"
                 line="714">the zero-based index of the secondary connection UUID entry</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_slave_type"
              c:identifier="nm_setting_connection_get_slave_type">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-connection.c"
             line="645">Returns the #NMSettingConnection:slave-type property of the connection.</doc>
        <source-position filename="libnm-core/nm-setting-connection.h"
                         line="195"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-connection.c"
               line="651">the type of slave this connection is, if any</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-connection.c"
                 line="647">the #NMSettingConnection</doc>
            <type name="SettingConnection" c:type="NMSettingConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_stable_id"
              c:identifier="nm_setting_connection_get_stable_id"
              version="1.4">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-connection.c"
             line="228">Returns the #NMSettingConnection:stable_id property of the connection.</doc>
        <source-position filename="libnm-core/nm-setting-connection.h"
                         line="161"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-connection.c"
               line="234">the stable-id for the connection</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-connection.c"
                 line="230">the #NMSettingConnection</doc>
            <type name="SettingConnection" c:type="NMSettingConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_timestamp"
              c:identifier="nm_setting_connection_get_timestamp">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-connection.c"
             line="580">Returns the #NMSettingConnection:timestamp property of the connection.</doc>
        <source-position filename="libnm-core/nm-setting-connection.h"
                         line="170"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-connection.c"
               line="586">the connection's timestamp</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-connection.c"
                 line="582">the #NMSettingConnection</doc>
            <type name="SettingConnection" c:type="NMSettingConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_uuid" c:identifier="nm_setting_connection_get_uuid">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-connection.c"
             line="212">Returns the #NMSettingConnection:uuid property of the connection.</doc>
        <source-position filename="libnm-core/nm-setting-connection.h"
                         line="159"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-connection.c"
               line="218">the connection UUID</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-connection.c"
                 line="214">the #NMSettingConnection</doc>
            <type name="SettingConnection" c:type="NMSettingConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_zone" c:identifier="nm_setting_connection_get_zone">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-connection.c"
             line="612">Returns the #NMSettingConnection:zone property of the connection.</doc>
        <source-position filename="libnm-core/nm-setting-connection.h"
                         line="179"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-connection.c"
               line="618">the trust level of a connection</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-connection.c"
                 line="614">the #NMSettingConnection</doc>
            <type name="SettingConnection" c:type="NMSettingConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_slave_type"
              c:identifier="nm_setting_connection_is_slave_type">
        <source-position filename="libnm-core/nm-setting-connection.h"
                         line="193"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-connection.c"
               line="667">%TRUE if connection is of the given slave @type</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-connection.c"
                 line="663">the #NMSettingConnection</doc>
            <type name="SettingConnection" c:type="NMSettingConnection*"/>
          </instance-parameter>
          <parameter name="type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-connection.c"
                 line="664">the setting name (ie #NM_SETTING_BOND_SETTING_NAME) to be matched
against @setting's slave type</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="permissions_user_allowed"
              c:identifier="nm_setting_connection_permissions_user_allowed">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-connection.c"
             line="336">Checks whether the given username is allowed to view/access this connection.</doc>
        <source-position filename="libnm-core/nm-setting-connection.h"
                         line="180"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-connection.c"
               line="343">%TRUE if the requested user is allowed to view this connection,
%FALSE if the given user is not allowed to view this connection</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-connection.c"
                 line="338">the #NMSettingConnection</doc>
            <type name="SettingConnection" c:type="NMSettingConnection*"/>
          </instance-parameter>
          <parameter name="uname" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-connection.c"
                 line="339">the user name to check permissions for</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_permission"
              c:identifier="nm_setting_connection_remove_permission">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-connection.c"
             line="424">Removes the permission at index @idx from the connection.</doc>
        <source-position filename="libnm-core/nm-setting-connection.h"
                         line="185"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-connection.c"
                 line="426">the #NMSettingConnection</doc>
            <type name="SettingConnection" c:type="NMSettingConnection*"/>
          </instance-parameter>
          <parameter name="idx" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-connection.c"
                 line="427">the zero-based index of the permission to remove</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_permission_by_value"
              c:identifier="nm_setting_connection_remove_permission_by_value">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-connection.c"
             line="449">Removes the permission from the connection.
At this time, only the "user" permission type is supported, and @pitem must
be a username. See #NMSettingConnection:permissions: for more details.</doc>
        <source-position filename="libnm-core/nm-setting-connection.h"
                         line="187"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-connection.c"
               line="460">%TRUE if the permission was found and removed; %FALSE if it was not.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-connection.c"
                 line="451">the #NMSettingConnection</doc>
            <type name="SettingConnection" c:type="NMSettingConnection*"/>
          </instance-parameter>
          <parameter name="ptype" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-connection.c"
                 line="452">the permission type; at this time only "user" is supported</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="pitem" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-connection.c"
                 line="453">the permission item formatted as required for @ptype</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="detail"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-connection.c"
                 line="454">unused at this time; must be %NULL</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_secondary"
              c:identifier="nm_setting_connection_remove_secondary">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-connection.c"
             line="763">Removes the secondary coonnection UUID at index @idx.</doc>
        <source-position filename="libnm-core/nm-setting-connection.h"
                         line="202"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-connection.c"
                 line="765">the #NMSettingConnection</doc>
            <type name="SettingConnection" c:type="NMSettingConnection*"/>
          </instance-parameter>
          <parameter name="idx" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-connection.c"
                 line="766">index number of the secondary connection UUID</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_secondary_by_value"
              c:identifier="nm_setting_connection_remove_secondary_by_value">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-connection.c"
             line="787">Removes the secondary coonnection UUID @sec_uuid.</doc>
        <source-position filename="libnm-core/nm-setting-connection.h"
                         line="203"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-connection.c"
               line="794">%TRUE if the secondary connection UUID was found and removed; %FALSE if it was not.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-connection.c"
                 line="789">the #NMSettingConnection</doc>
            <type name="SettingConnection" c:type="NMSettingConnection*"/>
          </instance-parameter>
          <parameter name="sec_uuid" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-connection.c"
                 line="790">the secondary connection UUID to remove</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <property name="auth-retries"
                version="1.10"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-connection.c"
             line="2092">The number of retries for the authentication. Zero means to try indefinitely; -1 means
to use a global default. If the global default is not set, the authentication
retries for 3 times before failing the connection.

Currently this only applies to 802-1x authentication.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="autoconnect"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-connection.c"
             line="1755">Whether or not the connection should be automatically connected by
NetworkManager when the resources for the connection are available.
%TRUE to automatically activate the connection, %FALSE to require manual
intervention to activate the connection.

Note that autoconnect is not implemented for VPN profiles. See
#NMSettingConnection:secondaries as an alternative to automatically
connect VPN profiles.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="autoconnect-priority"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-connection.c"
             line="1782">The autoconnect priority. If the connection is set to autoconnect,
connections with higher priority will be preferred. Defaults to 0.
The higher number means higher priority.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="autoconnect-retries"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-connection.c"
             line="1809">The number of times a connection should be tried when autoactivating before
giving up. Zero means forever, -1 means the global default (4 times if not
overridden). Setting this to 1 means to try activation only once before
blocking autoconnect. Note that after a timeout, NetworkManager will try
to autoconnect again.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="autoconnect-slaves"
                version="1.2"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-connection.c"
             line="1967">Whether or not slaves of this connection should be automatically brought up
when NetworkManager activates this connection. This only has a real effect
for master connections. The properties #NMSettingConnection:autoconnect,
#NMSettingConnection:autoconnect-priority and #NMSettingConnection:autoconnect-retries
are unrelated to this setting.
The permitted values are: 0: leave slave connections untouched,
1: activate all the slave connections with this connection, -1: default.
If -1 (default) is set, global connection.autoconnect-slaves is read to
determine the real value. If it is default as well, this fallbacks to 0.</doc>
        <type name="SettingConnectionAutoconnectSlaves"/>
      </property>
      <property name="gateway-ping-timeout"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-connection.c"
             line="2020">If greater than zero, delay success of IP addressing until either the
timeout is reached, or an IP gateway replies to a ping.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="id" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-connection.c"
             line="1560">A human readable unique identifier for the connection, like "Work Wi-Fi"
or "T-Mobile 3G".</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="interface-name" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-connection.c"
             line="1662">The name of the network interface this connection is bound to. If not
set, then the connection can be attached to any interface of the
appropriate type (subject to restrictions imposed by other settings).

For software devices this specifies the name of the created device.

For connection types where interface names cannot easily be made
persistent (e.g. mobile broadband or USB Ethernet), this property should
not be used. Setting this property restricts the interfaces a connection
can be used with, and if interface names change or are reordered the
connection may be applied to the wrong interface.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="lldp"
                version="1.2"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-connection.c"
             line="2068">Whether LLDP is enabled for the connection.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="llmnr"
                version="1.14"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-connection.c"
             line="2148">Whether Link-Local Multicast Name Resolution (LLMNR) is enabled
for the connection. LLMNR is a protocol based on the Domain Name
System (DNS) packet format that allows both IPv4 and IPv6 hosts
to perform name resolution for hosts on the same local link.

The permitted values are: yes: register hostname and resolving
for the connection, no: disable LLMNR for the interface, resolve:
do not register hostname but allow resolving of LLMNR host names.

This feature requires a plugin which supports LLMNR. One such
plugin is dns-systemd-resolved.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="master" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-connection.c"
             line="1920">Interface name of the master device or UUID of the master connection.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="mdns"
                version="1.12"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-connection.c"
             line="2118">Whether mDNS is enabled for the connection.

The permitted values are: yes: register hostname and resolving
for the connection, no: disable mDNS for the interface, resolve:
do not register hostname but allow resolving of mDNS host names.

This feature requires a plugin which supports mDNS. One such
plugin is dns-systemd-resolved.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="metered"
                version="1.2"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-connection.c"
             line="2042">Whether the connection is metered.

When updating this property on a currently activated connection,
the change takes effect immediately.</doc>
        <type name="Metered"/>
      </property>
      <property name="multi-connect"
                version="1.14"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-connection.c"
             line="1835">Specifies whether the profile can be active multiple times at a particular
moment. The value is of type #NMConnectionMultiConnect.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="permissions" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-connection.c"
             line="1724">An array of strings defining what access a given user has to this
connection.  If this is %NULL or empty, all users are allowed to access
this connection; otherwise users are allowed if and only if they are in
this list.  When this is not empty, the connection can be active only when
one of the specified users is logged into an active session.  Each entry
is of the form "[type]:[id]:[reserved]"; for example, "user:dcbw:blah".

At this time only the "user" [type] is allowed.  Any other values are
ignored and reserved for future use.  [id] is the username that this
permission refers to, which may not contain the ":" character. Any
[reserved] information present must be ignored and is reserved for future
use.  All of [type], [id], and [reserved] must be valid UTF-8.</doc>
        <array>
          <type name="utf8"/>
        </array>
      </property>
      <property name="read-only"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-connection.c"
             line="1877">%FALSE if the connection can be modified using the provided settings
service's D-Bus interface with the right privileges, or %TRUE if the
connection is read-only and cannot be modified.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="secondaries" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-connection.c"
             line="1999">List of connection UUIDs that should be activated when the base
connection itself is activated. Currently only VPN connections are
supported.</doc>
        <array>
          <type name="utf8"/>
        </array>
      </property>
      <property name="slave-type" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-connection.c"
             line="1942">Setting name of the device type of this slave's master connection (eg,
%NM_SETTING_BOND_SETTING_NAME), or %NULL if this connection is not a
slave.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="stable-id"
                version="1.4"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-connection.c"
             line="1609">This represents the identity of the connection used for various purposes.
It allows to configure multiple profiles to share the identity. Also,
the stable-id can contain placeholders that are substituted dynamically and
deterministically depending on the context.

The stable-id is used for generating IPv6 stable private addresses
with ipv6.addr-gen-mode=stable-privacy. It is also used to seed the
generated cloned MAC address for ethernet.cloned-mac-address=stable
and wifi.cloned-mac-address=stable. It is also used as DHCP client
identifier with ipv4.dhcp-client-id=stable and to derive the DHCP
DUID with ipv6.dhcp-duid=stable-[llt,ll,uuid].

Note that depending on the context where it is used, other parameters are
also seeded into the generation algorithm. For example, a per-host key
is commonly also included, so that different systems end up generating
different IDs. Or with ipv6.addr-gen-mode=stable-privacy, also the device's
name is included, so that different interfaces yield different addresses.

The '$' character is treated special to perform dynamic substitutions
at runtime. Currently supported are "${CONNECTION}", "${DEVICE}", "${MAC}",
"${BOOT}", "${RANDOM}".
These effectively create unique IDs per-connection, per-device, per-boot,
or every time. Note that "${DEVICE}" corresponds to the interface name of the
device and "${MAC}" is the permanent MAC address of the device.
Any unrecognized patterns following '$' are treated verbatim, however
are reserved for future use. You are thus advised to avoid '$' or
escape it as "$$".
For example, set it to "${CONNECTION}-${BOOT}-${DEVICE}" to create a unique id for
this connection that changes with every reboot and differs depending on the
interface where the profile activates.

If the value is unset, a global connection default is consulted. If the
value is still unset, the default is similar to "${CONNECTION}" and uses
a unique, fixed ID for the connection.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="timestamp"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-connection.c"
             line="1858">The time, in seconds since the Unix Epoch, that the connection was last
_successfully_ fully activated.

NetworkManager updates the connection timestamp periodically when the
connection is active to ensure that an active connection has the latest
timestamp. The property is only meant for reading (changes to this
property will not be preserved).</doc>
        <type name="guint64" c:type="guint64"/>
      </property>
      <property name="type" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-connection.c"
             line="1699">Base type of the connection. For hardware-dependent connections, should
contain the setting name of the hardware-type specific setting (ie,
"802-3-ethernet" or "802-11-wireless" or "bluetooth", etc), and for
non-hardware dependent connections like VPN or otherwise, should contain
the setting name of that setting type (ie, "vpn" or "bridge", etc).</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="uuid" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-connection.c"
             line="1579">A universally unique identifier for the connection, for example generated
with libuuid.  It should be assigned when the connection is created, and
never changed as long as the connection still applies to the same
network.  For example, it should not be changed when the
#NMSettingConnection:id property or #NMSettingIP4Config changes, but
might need to be re-created when the Wi-Fi SSID, mobile broadband network
provider, or #NMSettingConnection:type property changes.

The UUID must be in the format "2815492f-7e56-435e-b2e9-246bd7cdc664"
(ie, contains only hexadecimal characters and "-").  A suitable UUID may
be generated by nm_utils_uuid_generate() or
nm_utils_uuid_generate_from_string().</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="zone"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-connection.c"
             line="1892">The trust level of a the connection.  Free form case-insensitive string
(for example "Home", "Work", "Public").  %NULL or unspecified zone means
the connection will be placed in the default zone as defined by the
firewall.

When updating this property on a currently activated connection,
the change takes effect immediately.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent">
        <type name="Setting" c:type="NMSetting"/>
      </field>
    </class>
    <enumeration name="SettingConnectionAutoconnectSlaves"
                 glib:type-name="NMSettingConnectionAutoconnectSlaves"
                 glib:get-type="nm_setting_connection_autoconnect_slaves_get_type"
                 c:type="NMSettingConnectionAutoconnectSlaves">
      <doc xml:space="preserve"
           filename="libnm-core/nm-setting-connection.h"
           line="72">#NMSettingConnectionAutoconnectSlaves values indicate whether slave connections
should be activated when master is activated.</doc>
      <member name="default"
              value="-1"
              c:identifier="NM_SETTING_CONNECTION_AUTOCONNECT_SLAVES_DEFAULT"
              glib:nick="default">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-connection.h"
             line="74">default value</doc>
      </member>
      <member name="no"
              value="0"
              c:identifier="NM_SETTING_CONNECTION_AUTOCONNECT_SLAVES_NO"
              glib:nick="no">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-connection.h"
             line="75">slaves are not brought up when
  master is activated</doc>
      </member>
      <member name="yes"
              value="1"
              c:identifier="NM_SETTING_CONNECTION_AUTOCONNECT_SLAVES_YES"
              glib:nick="yes">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-connection.h"
             line="77">slaves are brought up when
  master is activated</doc>
      </member>
    </enumeration>
    <record name="SettingConnectionClass"
            c:type="NMSettingConnectionClass"
            glib:is-gtype-struct-for="SettingConnection">
      <source-position filename="libnm-core/nm-setting-connection.h"
                       line="153"/>
      <field name="parent">
        <type name="SettingClass" c:type="NMSettingClass"/>
      </field>
      <field name="padding" readable="0" private="1">
        <array zero-terminated="0" fixed-size="4">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <enumeration name="SettingConnectionLldp"
                 glib:type-name="NMSettingConnectionLldp"
                 glib:get-type="nm_setting_connection_lldp_get_type"
                 c:type="NMSettingConnectionLldp">
      <doc xml:space="preserve"
           filename="libnm-core/nm-setting-connection.h"
           line="89">#NMSettingConnectionLldp values indicate whether LLDP should be enabled.</doc>
      <member name="default"
              value="-1"
              c:identifier="NM_SETTING_CONNECTION_LLDP_DEFAULT"
              glib:nick="default">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-connection.h"
             line="91">default value</doc>
      </member>
      <member name="disable"
              value="0"
              c:identifier="NM_SETTING_CONNECTION_LLDP_DISABLE"
              glib:nick="disable">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-connection.h"
             line="92">disable LLDP</doc>
      </member>
      <member name="enable_rx"
              value="1"
              c:identifier="NM_SETTING_CONNECTION_LLDP_ENABLE_RX"
              glib:nick="enable-rx">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-connection.h"
             line="93">enable reception of LLDP frames</doc>
      </member>
    </enumeration>
    <enumeration name="SettingConnectionLlmnr"
                 version="1.14"
                 glib:type-name="NMSettingConnectionLlmnr"
                 glib:get-type="nm_setting_connection_llmnr_get_type"
                 c:type="NMSettingConnectionLlmnr">
      <doc xml:space="preserve"
           filename="libnm-core/nm-setting-connection.h"
           line="121">#NMSettingConnectionLlmnr values indicate whether LLMNR should be enabled.</doc>
      <member name="default"
              value="-1"
              c:identifier="NM_SETTING_CONNECTION_LLMNR_DEFAULT"
              glib:nick="default">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-connection.h"
             line="123">default value</doc>
      </member>
      <member name="no"
              value="0"
              c:identifier="NM_SETTING_CONNECTION_LLMNR_NO"
              glib:nick="no">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-connection.h"
             line="124">disable LLMNR</doc>
      </member>
      <member name="resolve"
              value="1"
              c:identifier="NM_SETTING_CONNECTION_LLMNR_RESOLVE"
              glib:nick="resolve">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-connection.h"
             line="125">support only resolving, do not register hostname</doc>
      </member>
      <member name="yes"
              value="2"
              c:identifier="NM_SETTING_CONNECTION_LLMNR_YES"
              glib:nick="yes">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-connection.h"
             line="126">enable LLMNR</doc>
      </member>
    </enumeration>
    <enumeration name="SettingConnectionMdns"
                 version="1.12"
                 glib:type-name="NMSettingConnectionMdns"
                 glib:get-type="nm_setting_connection_mdns_get_type"
                 c:type="NMSettingConnectionMdns">
      <doc xml:space="preserve"
           filename="libnm-core/nm-setting-connection.h"
           line="103">#NMSettingConnectionMdns values indicate whether mDNS should be enabled.</doc>
      <member name="default"
              value="-1"
              c:identifier="NM_SETTING_CONNECTION_MDNS_DEFAULT"
              glib:nick="default">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-connection.h"
             line="105">default value</doc>
      </member>
      <member name="no"
              value="0"
              c:identifier="NM_SETTING_CONNECTION_MDNS_NO"
              glib:nick="no">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-connection.h"
             line="106">disable mDNS</doc>
      </member>
      <member name="resolve"
              value="1"
              c:identifier="NM_SETTING_CONNECTION_MDNS_RESOLVE"
              glib:nick="resolve">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-connection.h"
             line="107">support only resolving, do not register hostname</doc>
      </member>
      <member name="yes"
              value="2"
              c:identifier="NM_SETTING_CONNECTION_MDNS_YES"
              glib:nick="yes">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-connection.h"
             line="108">enable mDNS</doc>
      </member>
    </enumeration>
    <class name="SettingDcb"
           c:symbol-prefix="setting_dcb"
           c:type="NMSettingDcb"
           parent="Setting"
           glib:type-name="NMSettingDcb"
           glib:get-type="nm_setting_dcb_get_type"
           glib:type-struct="SettingDcbClass">
      <doc xml:space="preserve"
           filename="libnm-core/nm-setting-dcb.h"
           line="94">Data Center Bridging Settings</doc>
      <source-position filename="libnm-core/nm-setting-dcb.h" line="108"/>
      <constructor name="new" c:identifier="nm_setting_dcb_new">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-dcb.c"
             line="889">Creates a new #NMSettingDcb object with default values.</doc>
        <source-position filename="libnm-core/nm-setting-dcb.h" line="112"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-dcb.c"
               line="894">the new empty #NMSettingDcb object</doc>
          <type name="Setting" c:type="NMSetting*"/>
        </return-value>
      </constructor>
      <method name="get_app_fcoe_flags"
              c:identifier="nm_setting_dcb_get_app_fcoe_flags">
        <source-position filename="libnm-core/nm-setting-dcb.h" line="114"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-dcb.c"
               line="101">the #NMSettingDcb:app-fcoe-flags property of the setting</doc>
          <type name="SettingDcbFlags" c:type="NMSettingDcbFlags"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-dcb.c"
                 line="99">the #NMSettingDcb</doc>
            <type name="SettingDcb" c:type="NMSettingDcb*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_app_fcoe_mode"
              c:identifier="nm_setting_dcb_get_app_fcoe_mode">
        <source-position filename="libnm-core/nm-setting-dcb.h" line="116"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-dcb.c"
               line="129">the #NMSettingDcb:app-fcoe-mode property of the setting</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-dcb.c"
                 line="127">the #NMSettingDcb</doc>
            <type name="SettingDcb" c:type="NMSettingDcb*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_app_fcoe_priority"
              c:identifier="nm_setting_dcb_get_app_fcoe_priority">
        <source-position filename="libnm-core/nm-setting-dcb.h" line="115"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-dcb.c"
               line="115">the #NMSettingDcb:app-fcoe-priority property of the setting</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-dcb.c"
                 line="113">the #NMSettingDcb</doc>
            <type name="SettingDcb" c:type="NMSettingDcb*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_app_fip_flags"
              c:identifier="nm_setting_dcb_get_app_fip_flags">
        <source-position filename="libnm-core/nm-setting-dcb.h" line="121"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-dcb.c"
               line="171">the #NMSettingDcb:app-fip-flags property of the setting</doc>
          <type name="SettingDcbFlags" c:type="NMSettingDcbFlags"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-dcb.c"
                 line="169">the #NMSettingDcb</doc>
            <type name="SettingDcb" c:type="NMSettingDcb*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_app_fip_priority"
              c:identifier="nm_setting_dcb_get_app_fip_priority">
        <source-position filename="libnm-core/nm-setting-dcb.h" line="122"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-dcb.c"
               line="185">the #NMSettingDcb:app-fip-priority property of the setting</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-dcb.c"
                 line="183">the #NMSettingDcb</doc>
            <type name="SettingDcb" c:type="NMSettingDcb*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_app_iscsi_flags"
              c:identifier="nm_setting_dcb_get_app_iscsi_flags">
        <source-position filename="libnm-core/nm-setting-dcb.h" line="118"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-dcb.c"
               line="143">the #NMSettingDcb:app-iscsi-flags property of the setting</doc>
          <type name="SettingDcbFlags" c:type="NMSettingDcbFlags"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-dcb.c"
                 line="141">the #NMSettingDcb</doc>
            <type name="SettingDcb" c:type="NMSettingDcb*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_app_iscsi_priority"
              c:identifier="nm_setting_dcb_get_app_iscsi_priority">
        <source-position filename="libnm-core/nm-setting-dcb.h" line="119"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-dcb.c"
               line="157">the #NMSettingDcb:app-iscsi-priority property of the setting</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-dcb.c"
                 line="155">the #NMSettingDcb</doc>
            <type name="SettingDcb" c:type="NMSettingDcb*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_priority_bandwidth"
              c:identifier="nm_setting_dcb_get_priority_bandwidth">
        <source-position filename="libnm-core/nm-setting-dcb.h" line="147"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-dcb.c"
               line="363">the allowed bandwidth percentage of @user_priority in its priority group.
These values are only valid when #NMSettingDcb:priority-group-flags includes the
%NM_SETTING_DCB_FLAG_ENABLE flag.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-dcb.c"
                 line="360">the #NMSettingDcb</doc>
            <type name="SettingDcb" c:type="NMSettingDcb*"/>
          </instance-parameter>
          <parameter name="user_priority" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-dcb.c"
                 line="361">the User Priority (0 - 7) to retrieve the group bandwidth percentage for</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_priority_flow_control"
              c:identifier="nm_setting_dcb_get_priority_flow_control">
        <source-position filename="libnm-core/nm-setting-dcb.h" line="126"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-dcb.c"
               line="214">%TRUE if flow control is enabled for the given @user_priority,
%FALSE if not enabled</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-dcb.c"
                 line="211">the #NMSettingDcb</doc>
            <type name="SettingDcb" c:type="NMSettingDcb*"/>
          </instance-parameter>
          <parameter name="user_priority" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-dcb.c"
                 line="212">the User Priority (0 - 7) to retrieve flow control for</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_priority_flow_control_flags"
              c:identifier="nm_setting_dcb_get_priority_flow_control_flags">
        <source-position filename="libnm-core/nm-setting-dcb.h" line="125"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-dcb.c"
               line="199">the #NMSettingDcb:priority-flow-control-flags property of the setting</doc>
          <type name="SettingDcbFlags" c:type="NMSettingDcbFlags"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-dcb.c"
                 line="197">the #NMSettingDcb</doc>
            <type name="SettingDcb" c:type="NMSettingDcb*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_priority_group_bandwidth"
              c:identifier="nm_setting_dcb_get_priority_group_bandwidth">
        <source-position filename="libnm-core/nm-setting-dcb.h" line="141"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-dcb.c"
               line="318">the bandwidth percentage assigned to @group_id.  These values are
only valid when #NMSettingDcb:priority-group-flags includes the
%NM_SETTING_DCB_FLAG_ENABLE flag.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-dcb.c"
                 line="315">the #NMSettingDcb</doc>
            <type name="SettingDcb" c:type="NMSettingDcb*"/>
          </instance-parameter>
          <parameter name="group_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-dcb.c"
                 line="316">the priority group (0 - 7) to retrieve the bandwidth percentage for</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_priority_group_flags"
              c:identifier="nm_setting_dcb_get_priority_group_flags">
        <source-position filename="libnm-core/nm-setting-dcb.h" line="133"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-dcb.c"
               line="257">the #NMSettingDcb:priority-group-flags property of the setting</doc>
          <type name="SettingDcbFlags" c:type="NMSettingDcbFlags"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-dcb.c"
                 line="255">the #NMSettingDcb</doc>
            <type name="SettingDcb" c:type="NMSettingDcb*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_priority_group_id"
              c:identifier="nm_setting_dcb_get_priority_group_id">
        <source-position filename="libnm-core/nm-setting-dcb.h" line="135"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-dcb.c"
               line="272">the group number @user_priority is assigned to.  These values are
only valid when #NMSettingDcb:priority-group-flags includes the
%NM_SETTING_DCB_FLAG_ENABLE flag.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-dcb.c"
                 line="269">the #NMSettingDcb</doc>
            <type name="SettingDcb" c:type="NMSettingDcb*"/>
          </instance-parameter>
          <parameter name="user_priority" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-dcb.c"
                 line="270">the User Priority (0 - 7) to retrieve the group ID for</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_priority_strict_bandwidth"
              c:identifier="nm_setting_dcb_get_priority_strict_bandwidth">
        <source-position filename="libnm-core/nm-setting-dcb.h" line="153"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-dcb.c"
               line="409">%TRUE if @user_priority may use all of the bandwidth allocated to its
assigned group, or %FALSE if not. These values are only valid when
#NMSettingDcb:priority-group-flags includes the %NM_SETTING_DCB_FLAG_ENABLE flag.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-dcb.c"
                 line="406">the #NMSettingDcb</doc>
            <type name="SettingDcb" c:type="NMSettingDcb*"/>
          </instance-parameter>
          <parameter name="user_priority" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-dcb.c"
                 line="407">the User Priority (0 - 7) to retrieve strict bandwidth for</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_priority_traffic_class"
              c:identifier="nm_setting_dcb_get_priority_traffic_class">
        <source-position filename="libnm-core/nm-setting-dcb.h" line="159"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-dcb.c"
               line="455">the traffic class assigned to @user_priority. These values are only
valid when #NMSettingDcb:priority-group-flags includes the
%NM_SETTING_DCB_FLAG_ENABLE flag.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-dcb.c"
                 line="452">the #NMSettingDcb</doc>
            <type name="SettingDcb" c:type="NMSettingDcb*"/>
          </instance-parameter>
          <parameter name="user_priority" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-dcb.c"
                 line="453">the User Priority (0 - 7) to retrieve the traffic class for</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_priority_bandwidth"
              c:identifier="nm_setting_dcb_set_priority_bandwidth">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-dcb.c"
             line="376">These values are only valid when #NMSettingDcb:priority-group-flags includes
the %NM_SETTING_DCB_FLAG_ENABLE flag.</doc>
        <source-position filename="libnm-core/nm-setting-dcb.h" line="149"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-dcb.c"
                 line="378">the #NMSettingDcb</doc>
            <type name="SettingDcb" c:type="NMSettingDcb*"/>
          </instance-parameter>
          <parameter name="user_priority" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-dcb.c"
                 line="379">the User Priority (0 - 7) to set the bandwidth percentage for</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="bandwidth_percent" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-dcb.c"
                 line="380">the bandwidth percentage (0 - 100) that @user_priority is
allowed to use within its priority group</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_priority_flow_control"
              c:identifier="nm_setting_dcb_set_priority_flow_control">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-dcb.c"
             line="226">These values are only valid when #NMSettingDcb:priority-flow-control includes
the %NM_SETTING_DCB_FLAG_ENABLE flag.</doc>
        <source-position filename="libnm-core/nm-setting-dcb.h" line="128"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-dcb.c"
                 line="228">the #NMSettingDcb</doc>
            <type name="SettingDcb" c:type="NMSettingDcb*"/>
          </instance-parameter>
          <parameter name="user_priority" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-dcb.c"
                 line="229">the User Priority (0 - 7) to set flow control for</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="enabled" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-dcb.c"
                 line="230">%TRUE to enable flow control for this priority, %FALSE to disable it</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_priority_group_bandwidth"
              c:identifier="nm_setting_dcb_set_priority_group_bandwidth">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-dcb.c"
             line="331">These values are only valid when #NMSettingDcb:priority-group-flags includes
the %NM_SETTING_DCB_FLAG_ENABLE flag.</doc>
        <source-position filename="libnm-core/nm-setting-dcb.h" line="143"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-dcb.c"
                 line="333">the #NMSettingDcb</doc>
            <type name="SettingDcb" c:type="NMSettingDcb*"/>
          </instance-parameter>
          <parameter name="group_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-dcb.c"
                 line="334">the priority group (0 - 7) to set the bandwidth percentage for</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="bandwidth_percent" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-dcb.c"
                 line="335">the bandwidth percentage (0 - 100) to assign to @group_id to</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_priority_group_id"
              c:identifier="nm_setting_dcb_set_priority_group_id">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-dcb.c"
             line="285">These values are only valid when #NMSettingDcb:priority-group-flags includes
the %NM_SETTING_DCB_FLAG_ENABLE flag.</doc>
        <source-position filename="libnm-core/nm-setting-dcb.h" line="137"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-dcb.c"
                 line="287">the #NMSettingDcb</doc>
            <type name="SettingDcb" c:type="NMSettingDcb*"/>
          </instance-parameter>
          <parameter name="user_priority" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-dcb.c"
                 line="288">the User Priority (0 - 7) to set flow control for</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="group_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-dcb.c"
                 line="289">the group (0 - 7) to assign @user_priority to, or 15 for the
unrestricted group.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_priority_strict_bandwidth"
              c:identifier="nm_setting_dcb_set_priority_strict_bandwidth">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-dcb.c"
             line="422">These values are only valid when #NMSettingDcb:priority-group-flags includes
the %NM_SETTING_DCB_FLAG_ENABLE flag.</doc>
        <source-position filename="libnm-core/nm-setting-dcb.h" line="155"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-dcb.c"
                 line="424">the #NMSettingDcb</doc>
            <type name="SettingDcb" c:type="NMSettingDcb*"/>
          </instance-parameter>
          <parameter name="user_priority" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-dcb.c"
                 line="425">the User Priority (0 - 7) to set strict bandwidth for</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="strict" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-dcb.c"
                 line="426">%TRUE to allow @user_priority to use all the bandwidth allocated to
its priority group, or %FALSE if not</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_priority_traffic_class"
              c:identifier="nm_setting_dcb_set_priority_traffic_class">
        <source-position filename="libnm-core/nm-setting-dcb.h" line="161"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <type name="SettingDcb" c:type="NMSettingDcb*"/>
          </instance-parameter>
          <parameter name="user_priority" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="traffic_class" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <property name="app-fcoe-flags" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-dcb.c"
             line="927">Specifies the #NMSettingDcbFlags for the DCB FCoE application.  Flags may
be any combination of %NM_SETTING_DCB_FLAG_ENABLE,
%NM_SETTING_DCB_FLAG_ADVERTISE, and %NM_SETTING_DCB_FLAG_WILLING.</doc>
        <type name="SettingDcbFlags"/>
      </property>
      <property name="app-fcoe-mode"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-dcb.c"
             line="970">The FCoE controller mode; either %NM_SETTING_DCB_FCOE_MODE_FABRIC
(default) or %NM_SETTING_DCB_FCOE_MODE_VN2VN.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="app-fcoe-priority"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-dcb.c"
             line="949">The highest User Priority (0 - 7) which FCoE frames should use, or -1 for
default priority.  Only used when the #NMSettingDcb:app-fcoe-flags
property includes the %NM_SETTING_DCB_FLAG_ENABLE flag.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="app-fip-flags" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-dcb.c"
             line="1033">Specifies the #NMSettingDcbFlags for the DCB FIP application.  Flags may
be any combination of %NM_SETTING_DCB_FLAG_ENABLE,
%NM_SETTING_DCB_FLAG_ADVERTISE, and %NM_SETTING_DCB_FLAG_WILLING.</doc>
        <type name="SettingDcbFlags"/>
      </property>
      <property name="app-fip-priority"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-dcb.c"
             line="1054">The highest User Priority (0 - 7) which FIP frames should use, or -1 for
default priority.  Only used when the #NMSettingDcb:app-fip-flags
property includes the %NM_SETTING_DCB_FLAG_ENABLE flag.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="app-iscsi-flags" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-dcb.c"
             line="991">Specifies the #NMSettingDcbFlags for the DCB iSCSI application.  Flags
may be any combination of %NM_SETTING_DCB_FLAG_ENABLE,
%NM_SETTING_DCB_FLAG_ADVERTISE, and %NM_SETTING_DCB_FLAG_WILLING.</doc>
        <type name="SettingDcbFlags"/>
      </property>
      <property name="app-iscsi-priority"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-dcb.c"
             line="1012">The highest User Priority (0 - 7) which iSCSI frames should use, or -1
for default priority. Only used when the #NMSettingDcb:app-iscsi-flags
property includes the %NM_SETTING_DCB_FLAG_ENABLE flag.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="priority-bandwidth"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-dcb.c"
             line="1198">An array of 8 uint values, where the array index corresponds to the User
Priority (0 - 7) and the value indicates the percentage of bandwidth of
the priority's assigned group that the priority may use.  The sum of all
percentages for priorities which belong to the same group must total 100
percents.</doc>
        <array name="GLib.Array">
          <type name="guint"/>
        </array>
      </property>
      <property name="priority-flow-control"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-dcb.c"
             line="1096">An array of 8 boolean values, where the array index corresponds to the User
Priority (0 - 7) and the value indicates whether or not the corresponding
priority should transmit priority pause.</doc>
        <array name="GLib.Array">
          <type name="gboolean"/>
        </array>
      </property>
      <property name="priority-flow-control-flags"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-dcb.c"
             line="1075">Specifies the #NMSettingDcbFlags for DCB Priority Flow Control (PFC).
Flags may be any combination of %NM_SETTING_DCB_FLAG_ENABLE,
%NM_SETTING_DCB_FLAG_ADVERTISE, and %NM_SETTING_DCB_FLAG_WILLING.</doc>
        <type name="SettingDcbFlags"/>
      </property>
      <property name="priority-group-bandwidth"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-dcb.c"
             line="1171">An array of 8 uint values, where the array index corresponds to the
Priority Group ID (0 - 7) and the value indicates the percentage of link
bandwidth allocated to that group.  Allowed values are 0 - 100, and the
sum of all values must total 100 percents.</doc>
        <array name="GLib.Array">
          <type name="guint"/>
        </array>
      </property>
      <property name="priority-group-flags"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-dcb.c"
             line="1123">Specifies the #NMSettingDcbFlags for DCB Priority Groups.  Flags may be
any combination of %NM_SETTING_DCB_FLAG_ENABLE,
%NM_SETTING_DCB_FLAG_ADVERTISE, and %NM_SETTING_DCB_FLAG_WILLING.</doc>
        <type name="SettingDcbFlags"/>
      </property>
      <property name="priority-group-id"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-dcb.c"
             line="1144">An array of 8 uint values, where the array index corresponds to the User
Priority (0 - 7) and the value indicates the Priority Group ID.  Allowed
Priority Group ID values are 0 - 7 or 15 for the unrestricted group.</doc>
        <array name="GLib.Array">
          <type name="guint"/>
        </array>
      </property>
      <property name="priority-strict-bandwidth"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-dcb.c"
             line="1227">An array of 8 boolean values, where the array index corresponds to the User
Priority (0 - 7) and the value indicates whether or not the priority may
use all of the bandwidth allocated to its assigned group.</doc>
        <array name="GLib.Array">
          <type name="gboolean"/>
        </array>
      </property>
      <property name="priority-traffic-class"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-dcb.c"
             line="1254">An array of 8 uint values, where the array index corresponds to the User
Priority (0 - 7) and the value indicates the traffic class (0 - 7) to
which the priority is mapped.</doc>
        <array name="GLib.Array">
          <type name="guint"/>
        </array>
      </property>
      <field name="parent">
        <type name="Setting" c:type="NMSetting"/>
      </field>
    </class>
    <record name="SettingDcbClass"
            c:type="NMSettingDcbClass"
            glib:is-gtype-struct-for="SettingDcb">
      <source-position filename="libnm-core/nm-setting-dcb.h" line="108"/>
      <field name="parent">
        <type name="SettingClass" c:type="NMSettingClass"/>
      </field>
      <field name="padding" readable="0" private="1">
        <array zero-terminated="0" fixed-size="4">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <bitfield name="SettingDcbFlags"
              glib:type-name="NMSettingDcbFlags"
              glib:get-type="nm_setting_dcb_flags_get_type"
              c:type="NMSettingDcbFlags">
      <doc xml:space="preserve"
           filename="libnm-core/nm-setting-dcb.h"
           line="42">DCB feature flags.</doc>
      <member name="none"
              value="0"
              c:identifier="NM_SETTING_DCB_FLAG_NONE"
              glib:nick="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-dcb.h"
             line="44">no flag</doc>
      </member>
      <member name="enable"
              value="1"
              c:identifier="NM_SETTING_DCB_FLAG_ENABLE"
              glib:nick="enable">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-dcb.h"
             line="45">the feature is enabled</doc>
      </member>
      <member name="advertise"
              value="2"
              c:identifier="NM_SETTING_DCB_FLAG_ADVERTISE"
              glib:nick="advertise">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-dcb.h"
             line="46">the feature is advertised</doc>
      </member>
      <member name="willing"
              value="4"
              c:identifier="NM_SETTING_DCB_FLAG_WILLING"
              glib:nick="willing">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-dcb.h"
             line="47">the feature is willing to change based on
peer configuration advertisements</doc>
      </member>
    </bitfield>
    <enumeration name="SettingDiffResult"
                 glib:type-name="NMSettingDiffResult"
                 glib:get-type="nm_setting_diff_result_get_type"
                 c:type="NMSettingDiffResult">
      <doc xml:space="preserve"
           filename="libnm-core/nm-setting.h"
           line="296">These values indicate the result of a setting difference operation.</doc>
      <member name="unknown"
              value="0"
              c:identifier="NM_SETTING_DIFF_RESULT_UNKNOWN"
              glib:nick="unknown">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting.h"
             line="298">unknown result</doc>
      </member>
      <member name="in_a"
              value="1"
              c:identifier="NM_SETTING_DIFF_RESULT_IN_A"
              glib:nick="in-a">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting.h"
             line="299">the property is present in setting A</doc>
      </member>
      <member name="in_b"
              value="2"
              c:identifier="NM_SETTING_DIFF_RESULT_IN_B"
              glib:nick="in-b">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting.h"
             line="300">the property is present in setting B</doc>
      </member>
      <member name="in_a_default"
              value="4"
              c:identifier="NM_SETTING_DIFF_RESULT_IN_A_DEFAULT"
              glib:nick="in-a-default">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting.h"
             line="301">the property is present in
setting A but is set to the default value. This flag is only set,
if you specify @NM_SETTING_COMPARE_FLAG_DIFF_RESULT_WITH_DEFAULT.</doc>
      </member>
      <member name="in_b_default"
              value="8"
              c:identifier="NM_SETTING_DIFF_RESULT_IN_B_DEFAULT"
              glib:nick="in-b-default">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting.h"
             line="304">analog to @NM_SETTING_DIFF_RESULT_IN_A_DEFAULT.</doc>
      </member>
    </enumeration>
    <class name="SettingDummy"
           c:symbol-prefix="setting_dummy"
           c:type="NMSettingDummy"
           parent="Setting"
           glib:type-name="NMSettingDummy"
           glib:get-type="nm_setting_dummy_get_type"
           glib:type-struct="SettingDummyClass">
      <doc xml:space="preserve"
           filename="libnm-core/nm-setting-dummy.h"
           line="42">Dummy Link Settings</doc>
      <source-position filename="libnm-core/nm-setting-dummy.h" line="56"/>
      <constructor name="new"
                   c:identifier="nm_setting_dummy_new"
                   version="1.8">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-dummy.c"
             line="59">Creates a new #NMSettingDummy object with default values.</doc>
        <source-position filename="libnm-core/nm-setting-dummy.h" line="61"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-dummy.c"
               line="64">the new empty #NMSettingDummy object</doc>
          <type name="Setting" c:type="NMSetting*"/>
        </return-value>
      </constructor>
      <field name="parent">
        <type name="Setting" c:type="NMSetting"/>
      </field>
    </class>
    <record name="SettingDummyClass"
            c:type="NMSettingDummyClass"
            glib:is-gtype-struct-for="SettingDummy">
      <source-position filename="libnm-core/nm-setting-dummy.h" line="56"/>
      <field name="parent">
        <type name="SettingClass" c:type="NMSettingClass"/>
      </field>
      <field name="padding" readable="0" private="1">
        <array zero-terminated="0" fixed-size="4">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <class name="SettingEthtool"
           c:symbol-prefix="setting_ethtool"
           c:type="NMSettingEthtool"
           version="1.14"
           parent="Setting"
           glib:type-name="NMSettingEthtool"
           glib:get-type="nm_setting_ethtool_get_type"
           glib:type-struct="SettingEthtoolClass">
      <doc xml:space="preserve"
           filename="libnm-core/nm-setting-ethtool.c"
           line="59">Ethtool Ethernet Settings</doc>
      <source-position filename="libnm-core/nm-setting-ethtool.h" line="103"/>
      <constructor name="new"
                   c:identifier="nm_setting_ethtool_new"
                   version="1.14">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-ethtool.c"
             line="312">Creates a new #NMSettingEthtool object with default values.</doc>
        <source-position filename="libnm-core/nm-setting-ethtool.h"
                         line="109"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-ethtool.c"
               line="317">the new empty #NMSettingEthtool object</doc>
          <type name="Setting" c:type="NMSetting*"/>
        </return-value>
      </constructor>
      <method name="clear_features"
              c:identifier="nm_setting_ethtool_clear_features"
              version="1.14">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-ethtool.c"
             line="175">Clears all offload features settings</doc>
        <source-position filename="libnm-core/nm-setting-ethtool.h"
                         line="121"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ethtool.c"
                 line="177">the #NMSettingEthtool</doc>
            <type name="SettingEthtool" c:type="NMSettingEthtool*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_feature"
              c:identifier="nm_setting_ethtool_get_feature"
              version="1.14">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-ethtool.c"
             line="88">Gets and offload feature setting. Returns %NM_TERNARY_DEFAULT if the
feature is not set.</doc>
        <source-position filename="libnm-core/nm-setting-ethtool.h"
                         line="114"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-ethtool.c"
               line="96">a #NMTernary value indicating whether the offload feature
  is enabled, disabled, or left untouched.</doc>
          <type name="Ternary" c:type="NMTernary"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ethtool.c"
                 line="90">the #NMSettingEthtool</doc>
            <type name="SettingEthtool" c:type="NMSettingEthtool*"/>
          </instance-parameter>
          <parameter name="optname" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ethtool.c"
                 line="91">option name of the offload feature to get</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_feature"
              c:identifier="nm_setting_ethtool_set_feature"
              version="1.14">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-ethtool.c"
             line="120">Sets and offload feature setting.</doc>
        <source-position filename="libnm-core/nm-setting-ethtool.h"
                         line="117"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ethtool.c"
                 line="122">the #NMSettingEthtool</doc>
            <type name="SettingEthtool" c:type="NMSettingEthtool*"/>
          </instance-parameter>
          <parameter name="optname" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ethtool.c"
                 line="123">option name of the offload feature to get</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ethtool.c"
                 line="124">the new value to set. The special value %NM_TERNARY_DEFAULT
  means to clear the offload feature setting.</doc>
            <type name="Ternary" c:type="NMTernary"/>
          </parameter>
        </parameters>
      </method>
    </class>
    <record name="SettingEthtoolClass"
            c:type="NMSettingEthtoolClass"
            disguised="1"
            glib:is-gtype-struct-for="SettingEthtool">
      <source-position filename="libnm-core/nm-setting-ethtool.h" line="103"/>
    </record>
    <class name="SettingGeneric"
           c:symbol-prefix="setting_generic"
           c:type="NMSettingGeneric"
           parent="Setting"
           glib:type-name="NMSettingGeneric"
           glib:get-type="nm_setting_generic_get_type"
           glib:type-struct="SettingGenericClass">
      <doc xml:space="preserve"
           filename="libnm-core/nm-setting-generic.h"
           line="42">Generic Link Settings</doc>
      <source-position filename="libnm-core/nm-setting-generic.h" line="56"/>
      <constructor name="new" c:identifier="nm_setting_generic_new">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-generic.c"
             line="57">Creates a new #NMSettingGeneric object with default values.</doc>
        <source-position filename="libnm-core/nm-setting-generic.h" line="60"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-generic.c"
               line="62">the new empty #NMSettingGeneric object</doc>
          <type name="Setting" c:type="NMSetting*"/>
        </return-value>
      </constructor>
      <field name="parent">
        <type name="Setting" c:type="NMSetting"/>
      </field>
    </class>
    <record name="SettingGenericClass"
            c:type="NMSettingGenericClass"
            glib:is-gtype-struct-for="SettingGeneric">
      <source-position filename="libnm-core/nm-setting-generic.h" line="56"/>
      <field name="parent">
        <type name="SettingClass" c:type="NMSettingClass"/>
      </field>
      <field name="padding" readable="0" private="1">
        <array zero-terminated="0" fixed-size="4">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <class name="SettingGsm"
           c:symbol-prefix="setting_gsm"
           c:type="NMSettingGsm"
           parent="Setting"
           glib:type-name="NMSettingGsm"
           glib:get-type="nm_setting_gsm_get_type"
           glib:type-struct="SettingGsmClass">
      <doc xml:space="preserve"
           filename="libnm-core/nm-setting-gsm.h"
           line="59">GSM-based Mobile Broadband Settings</doc>
      <source-position filename="libnm-core/nm-setting-gsm.h" line="73"/>
      <constructor name="new" c:identifier="nm_setting_gsm_new">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-gsm.c"
             line="579">Creates a new #NMSettingGsm object with default values.</doc>
        <source-position filename="libnm-core/nm-setting-gsm.h" line="77"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-gsm.c"
               line="584">the new empty #NMSettingGsm object</doc>
          <type name="Setting" c:type="NMSetting*"/>
        </return-value>
      </constructor>
      <method name="get_apn" c:identifier="nm_setting_gsm_get_apn">
        <source-position filename="libnm-core/nm-setting-gsm.h" line="80"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-gsm.c"
               line="147">the #NMSettingGsm:apn property of the setting</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-gsm.c"
                 line="145">the #NMSettingGsm</doc>
            <type name="SettingGsm" c:type="NMSettingGsm*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_device_id"
              c:identifier="nm_setting_gsm_get_device_id"
              version="1.2">
        <source-position filename="libnm-core/nm-setting-gsm.h" line="86"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-gsm.c"
               line="217">the #NMSettingGsm:device-id property of the setting</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-gsm.c"
                 line="215">the #NMSettingGsm</doc>
            <type name="SettingGsm" c:type="NMSettingGsm*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_home_only" c:identifier="nm_setting_gsm_get_home_only">
        <source-position filename="libnm-core/nm-setting-gsm.h" line="83"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-gsm.c"
               line="203">the #NMSettingGsm:home-only property of the setting</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-gsm.c"
                 line="201">the #NMSettingGsm</doc>
            <type name="SettingGsm" c:type="NMSettingGsm*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_mtu"
              c:identifier="nm_setting_gsm_get_mtu"
              version="1.8">
        <source-position filename="libnm-core/nm-setting-gsm.h" line="92"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-gsm.c"
               line="265">the #NMSettingGsm:mtu property of the setting</doc>
          <type name="guint32" c:type="guint32"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-gsm.c"
                 line="263">the #NMSettingGsm</doc>
            <type name="SettingGsm" c:type="NMSettingGsm*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_network_id"
              c:identifier="nm_setting_gsm_get_network_id">
        <source-position filename="libnm-core/nm-setting-gsm.h" line="81"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-gsm.c"
               line="161">the #NMSettingGsm:network-id property of the setting</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-gsm.c"
                 line="159">the #NMSettingGsm</doc>
            <type name="SettingGsm" c:type="NMSettingGsm*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_number"
              c:identifier="nm_setting_gsm_get_number"
              deprecated="1"
              deprecated-version="1.16">
        <doc-deprecated xml:space="preserve">user-provided values for this setting are no longer used.</doc-deprecated>
        <source-position filename="libnm-core/nm-setting-gsm.h" line="95"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-gsm.c"
               line="89">the #NMSettingGsm:number property of the setting</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-gsm.c"
                 line="87">the #NMSettingGsm</doc>
            <type name="SettingGsm" c:type="NMSettingGsm*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_password" c:identifier="nm_setting_gsm_get_password">
        <source-position filename="libnm-core/nm-setting-gsm.h" line="79"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-gsm.c"
               line="119">the #NMSettingGsm:password property of the setting</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-gsm.c"
                 line="117">the #NMSettingGsm</doc>
            <type name="SettingGsm" c:type="NMSettingGsm*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_password_flags"
              c:identifier="nm_setting_gsm_get_password_flags">
        <source-position filename="libnm-core/nm-setting-gsm.h" line="98"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-gsm.c"
               line="133">the #NMSettingSecretFlags pertaining to the #NMSettingGsm:password</doc>
          <type name="SettingSecretFlags" c:type="NMSettingSecretFlags"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-gsm.c"
                 line="131">the #NMSettingGsm</doc>
            <type name="SettingGsm" c:type="NMSettingGsm*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_pin" c:identifier="nm_setting_gsm_get_pin">
        <source-position filename="libnm-core/nm-setting-gsm.h" line="82"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-gsm.c"
               line="175">the #NMSettingGsm:pin property of the setting</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-gsm.c"
                 line="173">the #NMSettingGsm</doc>
            <type name="SettingGsm" c:type="NMSettingGsm*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_pin_flags" c:identifier="nm_setting_gsm_get_pin_flags">
        <source-position filename="libnm-core/nm-setting-gsm.h" line="97"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-gsm.c"
               line="189">the #NMSettingSecretFlags pertaining to the #NMSettingGsm:pin</doc>
          <type name="SettingSecretFlags" c:type="NMSettingSecretFlags"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-gsm.c"
                 line="187">the #NMSettingGsm</doc>
            <type name="SettingGsm" c:type="NMSettingGsm*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_sim_id"
              c:identifier="nm_setting_gsm_get_sim_id"
              version="1.2">
        <source-position filename="libnm-core/nm-setting-gsm.h" line="88"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-gsm.c"
               line="233">the #NMSettingGsm:sim-id property of the setting</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-gsm.c"
                 line="231">the #NMSettingGsm</doc>
            <type name="SettingGsm" c:type="NMSettingGsm*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_sim_operator_id"
              c:identifier="nm_setting_gsm_get_sim_operator_id"
              version="1.2">
        <source-position filename="libnm-core/nm-setting-gsm.h" line="90"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-gsm.c"
               line="249">the #NMSettingGsm:sim-operator-id property of the setting</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-gsm.c"
                 line="247">the #NMSettingGsm</doc>
            <type name="SettingGsm" c:type="NMSettingGsm*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_username" c:identifier="nm_setting_gsm_get_username">
        <source-position filename="libnm-core/nm-setting-gsm.h" line="78"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-gsm.c"
               line="105">the #NMSettingGsm:username property of the setting</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-gsm.c"
                 line="103">the #NMSettingGsm</doc>
            <type name="SettingGsm" c:type="NMSettingGsm*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="apn" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-gsm.c"
             line="680">The GPRS Access Point Name specifying the APN used when establishing a
data session with the GSM-based network.  The APN often determines how
the user will be billed for their network usage and whether the user has
access to the Internet or just a provider-specific walled-garden, so it
is important to use the correct APN for the user's mobile broadband plan.
The APN may only be composed of the characters a-z, 0-9, ., and - per GSM
03.60 Section 14.9.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="device-id"
                version="1.2"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-gsm.c"
             line="750">The device unique identifier (as given by the WWAN management service)
which this connection applies to.  If given, the connection will only
apply to the specified device.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="home-only" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-gsm.c"
             line="738">When %TRUE, only connections to the home network will be allowed.
Connections to roaming networks will not be made.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="mtu"
                version="1.8"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-gsm.c"
             line="798">If non-zero, only transmit packets of the specified size or smaller,
breaking larger packets up into multiple frames.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="network-id" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-gsm.c"
             line="697">The Network ID (GSM LAI format, ie MCC-MNC) to force specific network
registration.  If the Network ID is specified, NetworkManager will
attempt to force the device to register only on the specified network.
This can be used to ensure that the device does not roam when direct
roaming control of the device is not otherwise possible.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="number"
                deprecated="1"
                deprecated-version="1.16"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-gsm.c"
             line="627">Legacy setting that used to help establishing PPP data sessions for
GSM-based modems.</doc>
        <doc-deprecated xml:space="preserve">user-provided values for this setting are no longer used.</doc-deprecated>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="password" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-gsm.c"
             line="654">The password used to authenticate with the network, if required.  Many
providers do not require a password, or accept any password.  But if a
password is required, it is specified here.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="password-flags" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-gsm.c"
             line="668">Flags indicating how to handle the #NMSettingGsm:password property.</doc>
        <type name="SettingSecretFlags"/>
      </property>
      <property name="pin" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-gsm.c"
             line="712">If the SIM is locked with a PIN it must be unlocked before any other
operations are requested.  Specify the PIN here to allow operation of the
device.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="pin-flags" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-gsm.c"
             line="726">Flags indicating how to handle the #NMSettingGsm:pin property.</doc>
        <type name="SettingSecretFlags"/>
      </property>
      <property name="sim-id"
                version="1.2"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-gsm.c"
             line="765">The SIM card unique identifier (as given by the WWAN management service)
which this connection applies to.  If given, the connection will apply
to any device also allowed by #NMSettingGsm:device-id which contains a
SIM card matching the given identifier.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="sim-operator-id"
                version="1.2"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-gsm.c"
             line="781">A MCC/MNC string like "310260" or "21601" identifying the specific
mobile network operator which this connection applies to.  If given,
the connection will apply to any device also allowed by
#NMSettingGsm:device-id and #NMSettingGsm:sim-id which contains a SIM
card provisioned by the given operator.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="username" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-gsm.c"
             line="641">The username used to authenticate with the network, if required.  Many
providers do not require a username, or accept any username.  But if a
username is required, it is specified here.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent">
        <type name="Setting" c:type="NMSetting"/>
      </field>
    </class>
    <record name="SettingGsmClass"
            c:type="NMSettingGsmClass"
            glib:is-gtype-struct-for="SettingGsm">
      <source-position filename="libnm-core/nm-setting-gsm.h" line="73"/>
      <field name="parent">
        <type name="SettingClass" c:type="NMSettingClass"/>
      </field>
      <field name="padding" readable="0" private="1">
        <array zero-terminated="0" fixed-size="4">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <class name="SettingIP4Config"
           c:symbol-prefix="setting_ip4_config"
           c:type="NMSettingIP4Config"
           parent="SettingIPConfig"
           glib:type-name="NMSettingIP4Config"
           glib:get-type="nm_setting_ip4_config_get_type"
           glib:type-struct="SettingIP4ConfigClass">
      <doc xml:space="preserve"
           filename="libnm-core/nm-setting-ip4-config.h"
           line="90">IPv4 Settings</doc>
      <source-position filename="libnm-core/nm-setting-ip4-config.h"
                       line="104"/>
      <constructor name="new" c:identifier="nm_setting_ip4_config_new">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-ip4-config.c"
             line="512">Creates a new #NMSettingIP4Config object with default values.</doc>
        <source-position filename="libnm-core/nm-setting-ip4-config.h"
                         line="108"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-ip4-config.c"
               line="517">the new empty #NMSettingIP4Config object</doc>
          <type name="Setting" c:type="NMSetting*"/>
        </return-value>
      </constructor>
      <method name="get_dhcp_client_id"
              c:identifier="nm_setting_ip4_config_get_dhcp_client_id">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-ip4-config.c"
             line="70">Returns the value contained in the #NMSettingIP4Config:dhcp-client-id
property.</doc>
        <source-position filename="libnm-core/nm-setting-ip4-config.h"
                         line="110"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-ip4-config.c"
               line="77">the configured Client ID to send to the DHCP server when requesting
addresses via DHCP.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ip4-config.c"
                 line="72">the #NMSettingIP4Config</doc>
            <type name="SettingIP4Config" c:type="NMSettingIP4Config*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_dhcp_fqdn"
              c:identifier="nm_setting_ip4_config_get_dhcp_fqdn"
              version="1.2">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-ip4-config.c"
             line="88">Returns the value contained in the #NMSettingIP4Config:dhcp-fqdn
property.</doc>
        <source-position filename="libnm-core/nm-setting-ip4-config.h"
                         line="112"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-ip4-config.c"
               line="95">the configured FQDN to send to the DHCP server</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ip4-config.c"
                 line="90">the #NMSettingIP4Config</doc>
            <type name="SettingIP4Config" c:type="NMSettingIP4Config*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="dhcp-client-id" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-ip4-config.c"
             line="717">A string sent to the DHCP server to identify the local machine which the
DHCP server may use to customize the DHCP lease and options.
When the property is a hex string ('aa:bb:cc') it is interpreted as a
binary client ID, in which case the first byte is assumed to be the
'type' field as per RFC 2132 section 9.14 and the remaining bytes may be
an hardware address (e.g. '01:xx:xx:xx:xx:xx:xx' where 1 is the Ethernet
ARP type and the rest is a MAC address).
If the property is not a hex string it is considered as a
non-hardware-address client ID and the 'type' field is set to 0.

The special values "mac" and "perm-mac" are supported, which use the
current or permanent MAC address of the device to generate a client identifier
with type ethernet (01). Currently, these options only work for ethernet
type of links.

The special value "duid" generates a RFC4361-compliant client identifier based
on a hash of the interface name as IAID and /etc/machine-id.

The special value "stable" is supported to generate a type 0 client identifier based
on the stable-id (see connection.stable-id) and a per-host key. If you set the
stable-id, you may want to include the "${DEVICE}" or "${MAC}" specifier to get a
per-device key.

If unset, a globally configured default is used. If still unset, the default
depends on the DHCP plugin.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="dhcp-fqdn"
                version="1.2"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-ip4-config.c"
             line="779">If the #NMSettingIPConfig:dhcp-send-hostname property is %TRUE, then the
specified FQDN will be sent to the DHCP server when acquiring a lease. This
property and #NMSettingIPConfig:dhcp-hostname are mutually exclusive and
cannot be set at the same time.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent">
        <type name="SettingIPConfig" c:type="NMSettingIPConfig"/>
      </field>
    </class>
    <record name="SettingIP4ConfigClass"
            c:type="NMSettingIP4ConfigClass"
            glib:is-gtype-struct-for="SettingIP4Config">
      <source-position filename="libnm-core/nm-setting-ip4-config.h"
                       line="104"/>
      <field name="parent">
        <type name="SettingIPConfigClass" c:type="NMSettingIPConfigClass"/>
      </field>
      <field name="padding" readable="0" private="1">
        <array zero-terminated="0" fixed-size="4">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <class name="SettingIP6Config"
           c:symbol-prefix="setting_ip6_config"
           c:type="NMSettingIP6Config"
           parent="SettingIPConfig"
           glib:type-name="NMSettingIP6Config"
           glib:get-type="nm_setting_ip6_config_get_type"
           glib:type-struct="SettingIP6ConfigClass">
      <doc xml:space="preserve"
           filename="libnm-core/nm-setting-ip6-config.h"
           line="142">IPv6 Settings</doc>
      <source-position filename="libnm-core/nm-setting-ip6-config.h"
                       line="156"/>
      <constructor name="new" c:identifier="nm_setting_ip6_config_new">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-ip6-config.c"
             line="530">Creates a new #NMSettingIP6Config object with default values.</doc>
        <source-position filename="libnm-core/nm-setting-ip6-config.h"
                         line="160"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-ip6-config.c"
               line="535">the new empty #NMSettingIP6Config object</doc>
          <type name="Setting" c:type="NMSetting*"/>
        </return-value>
      </constructor>
      <method name="get_addr_gen_mode"
              c:identifier="nm_setting_ip6_config_get_addr_gen_mode"
              version="1.2">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-ip6-config.c"
             line="93">Returns the value contained in the #NMSettingIP6Config:addr-gen-mode
property.</doc>
        <source-position filename="libnm-core/nm-setting-ip6-config.h"
                         line="164"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-ip6-config.c"
               line="100">IPv6 Address Generation Mode.</doc>
          <type name="SettingIP6ConfigAddrGenMode"
                c:type="NMSettingIP6ConfigAddrGenMode"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ip6-config.c"
                 line="95">the #NMSettingIP6Config</doc>
            <type name="SettingIP6Config" c:type="NMSettingIP6Config*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_dhcp_duid"
              c:identifier="nm_setting_ip6_config_get_dhcp_duid"
              version="1.12">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-ip6-config.c"
             line="132">Returns the value contained in the #NMSettingIP6Config:dhcp-duid
property.</doc>
        <source-position filename="libnm-core/nm-setting-ip6-config.h"
                         line="168"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-ip6-config.c"
               line="139">The configured DUID value to be included in the DHCPv6 requests
sent to the DHCPv6 servers.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ip6-config.c"
                 line="134">the #NMSettingIP6Config</doc>
            <type name="SettingIP6Config" c:type="NMSettingIP6Config*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_ip6_privacy"
              c:identifier="nm_setting_ip6_config_get_ip6_privacy">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-ip6-config.c"
             line="76">Returns the value contained in the #NMSettingIP6Config:ip6-privacy
property.</doc>
        <source-position filename="libnm-core/nm-setting-ip6-config.h"
                         line="162"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-ip6-config.c"
               line="83">IPv6 Privacy Extensions configuration value (#NMSettingIP6ConfigPrivacy).</doc>
          <type name="SettingIP6ConfigPrivacy"
                c:type="NMSettingIP6ConfigPrivacy"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ip6-config.c"
                 line="78">the #NMSettingIP6Config</doc>
            <type name="SettingIP6Config" c:type="NMSettingIP6Config*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_token"
              c:identifier="nm_setting_ip6_config_get_token"
              version="1.4">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-ip6-config.c"
             line="113">Returns the value contained in the #NMSettingIP6Config:token
property.</doc>
        <source-position filename="libnm-core/nm-setting-ip6-config.h"
                         line="166"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-ip6-config.c"
               line="120">A string.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ip6-config.c"
                 line="115">the #NMSettingIP6Config</doc>
            <type name="SettingIP6Config" c:type="NMSettingIP6Config*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="addr-gen-mode"
                version="1.2"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-ip6-config.c"
             line="764">Configure method for creating the address for use with RFC4862 IPv6
Stateless Address Autoconfiguration. The permitted values are:
%NM_SETTING_IP6_CONFIG_ADDR_GEN_MODE_EUI64 or
%NM_SETTING_IP6_CONFIG_ADDR_GEN_MODE_STABLE_PRIVACY.

If the property is set to EUI64, the addresses will be generated
using the interface tokens derived from hardware address. This makes
the host part of the address to stay constant, making it possible
to track host's presence when it changes networks. The address changes
when the interface hardware is replaced.

The value of stable-privacy enables use of cryptographically
secure hash of a secret host-specific key along with the connection's
stable-id and the network address as specified by RFC7217.
This makes it impossible to use the address track host's presence,
and makes the address stable when the network interface hardware is
replaced.

On D-Bus, the absence of an addr-gen-mode setting equals enabling
stable-privacy. For keyfile plugin, the absence of the setting
on disk means EUI64 so that the property doesn't change on upgrade
from older versions.

Note that this setting is distinct from the Privacy Extensions as
configured by "ip6-privacy" property and it does not affect the
temporary addresses configured with this option.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="dhcp-duid"
                version="1.12"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-ip6-config.c"
             line="835">A string containing the DHCPv6 Unique Identifier (DUID) used by the dhcp
client to identify itself to DHCPv6 servers (RFC 3315). The DUID is carried
in the Client Identifier option.
If the property is a hex string ('aa:bb:cc') it is interpreted as a binary
DUID and filled as an opaque value in the Client Identifier option.

The special value "lease" will retrieve the DUID previously used from the
lease file belonging to the connection. If no DUID is found and "dhclient"
is the configured dhcp client, the DUID is searched in the system-wide
dhclient lease file. If still no DUID is found, or another dhcp client is
used, a global and permanent DUID-UUID (RFC 6355) will be generated based
on the machine-id.

The special values "llt" and "ll" will generate a DUID of type LLT or LL
(see RFC 3315) based on the current MAC address of the device. In order to
try providing a stable DUID-LLT, the time field will contain a constant
timestamp that is used globally (for all profiles) and persisted to disk.

The special values "stable-llt", "stable-ll" and "stable-uuid" will generate
a DUID of the corresponding type, derived from the connection's stable-id and
a per-host unique key. You may want to include the "${DEVICE}" or "${MAC}" specifier
in the stable-id, in case this profile gets activated on multiple devices.
So, the link-layer address of "stable-ll" and "stable-llt" will be a generated
address derived from the stable id. The DUID-LLT time value in the "stable-llt"
option will be picked among a static timespan of three years (the upper bound
of the interval is the same constant timestamp used in "llt").

When the property is unset, the global value provided for "ipv6.dhcp-duid" is
used. If no global value is provided, the default "lease" value is assumed.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="ip6-privacy"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-ip6-config.c"
             line="725">Configure IPv6 Privacy Extensions for SLAAC, described in RFC4941.  If
enabled, it makes the kernel generate a temporary IPv6 address in
addition to the public one generated from MAC address via modified
EUI-64.  This enhances privacy, but could cause problems in some
applications, on the other hand.  The permitted values are: -1: unknown,
0: disabled, 1: enabled (prefer public address), 2: enabled (prefer temporary
addresses).

Having a per-connection setting set to "-1" (unknown) means fallback to
global configuration "ipv6.ip6-privacy".

If also global configuration is unspecified or set to "-1", fallback to read
"/proc/sys/net/ipv6/conf/default/use_tempaddr".

Note that this setting is distinct from the Stable Privacy addresses
that can be enabled with the "addr-gen-mode" property's "stable-privacy"
setting as another way of avoiding host tracking with IPv6 addresses.</doc>
        <type name="SettingIP6ConfigPrivacy"/>
      </property>
      <property name="token"
                version="1.4"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-ip6-config.c"
             line="813">Configure the token for draft-chown-6man-tokenised-ipv6-identifiers-02
IPv6 tokenized interface identifiers. Useful with eui64 addr-gen-mode.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent">
        <type name="SettingIPConfig" c:type="NMSettingIPConfig"/>
      </field>
    </class>
    <enumeration name="SettingIP6ConfigAddrGenMode"
                 version="1.2"
                 glib:type-name="NMSettingIP6ConfigAddrGenMode"
                 glib:get-type="nm_setting_ip6_config_addr_gen_mode_get_type"
                 c:type="NMSettingIP6ConfigAddrGenMode">
      <doc xml:space="preserve"
           filename="libnm-core/nm-setting-ip6-config.h"
           line="123">#NMSettingIP6ConfigAddrGenMode controls how the Interface Identifier for
RFC4862 Stateless Address Autoconfiguration is created.</doc>
      <member name="eui64"
              value="0"
              c:identifier="NM_SETTING_IP6_CONFIG_ADDR_GEN_MODE_EUI64"
              glib:nick="eui64">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-ip6-config.h"
             line="125">The Interface Identifier is derived
from the interface hardware address.</doc>
      </member>
      <member name="stable_privacy"
              value="1"
              c:identifier="NM_SETTING_IP6_CONFIG_ADDR_GEN_MODE_STABLE_PRIVACY"
              glib:nick="stable-privacy">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-ip6-config.h"
             line="127">The Interface Identifier
is created by using a cryptographically secure hash of a secret host-specific
key along with the connection identification and the network address as
specified by RFC7217.</doc>
      </member>
    </enumeration>
    <record name="SettingIP6ConfigClass"
            c:type="NMSettingIP6ConfigClass"
            glib:is-gtype-struct-for="SettingIP6Config">
      <source-position filename="libnm-core/nm-setting-ip6-config.h"
                       line="156"/>
      <field name="parent">
        <type name="SettingIPConfigClass" c:type="NMSettingIPConfigClass"/>
      </field>
      <field name="padding" readable="0" private="1">
        <array zero-terminated="0" fixed-size="4">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <enumeration name="SettingIP6ConfigPrivacy"
                 glib:type-name="NMSettingIP6ConfigPrivacy"
                 glib:get-type="nm_setting_ip6_config_privacy_get_type"
                 c:type="NMSettingIP6ConfigPrivacy">
      <doc xml:space="preserve"
           filename="libnm-core/nm-setting-ip6-config.h"
           line="104">#NMSettingIP6ConfigPrivacy values indicate if and how IPv6 Privacy
Extensions are used (RFC4941).</doc>
      <member name="unknown"
              value="-1"
              c:identifier="NM_SETTING_IP6_CONFIG_PRIVACY_UNKNOWN"
              glib:nick="unknown">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-ip6-config.h"
             line="106">unknown or no value specified</doc>
      </member>
      <member name="disabled"
              value="0"
              c:identifier="NM_SETTING_IP6_CONFIG_PRIVACY_DISABLED"
              glib:nick="disabled">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-ip6-config.h"
             line="107">IPv6 Privacy Extensions are disabled</doc>
      </member>
      <member name="prefer_public_addr"
              value="1"
              c:identifier="NM_SETTING_IP6_CONFIG_PRIVACY_PREFER_PUBLIC_ADDR"
              glib:nick="prefer-public-addr">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-ip6-config.h"
             line="108">IPv6 Privacy Extensions
are enabled, but public addresses are preferred over temporary addresses</doc>
      </member>
      <member name="prefer_temp_addr"
              value="2"
              c:identifier="NM_SETTING_IP6_CONFIG_PRIVACY_PREFER_TEMP_ADDR"
              glib:nick="prefer-temp-addr">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-ip6-config.h"
             line="110">IPv6 Privacy Extensions
are enabled and temporary addresses are preferred over public addresses</doc>
      </member>
    </enumeration>
    <class name="SettingIPConfig"
           c:symbol-prefix="setting_ip_config"
           c:type="NMSettingIPConfig"
           parent="Setting"
           abstract="1"
           glib:type-name="NMSettingIPConfig"
           glib:get-type="nm_setting_ip_config_get_type"
           glib:type-struct="SettingIPConfigClass">
      <source-position filename="libnm-core/nm-setting-ip-config.h"
                       line="218"/>
      <method name="add_address"
              c:identifier="nm_setting_ip_config_add_address">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-ip-config.c"
             line="2016">Adds a new IP address and associated information to the setting.  The
given address is duplicated internally and is not changed by this function.</doc>
        <source-position filename="libnm-core/nm-setting-ip-config.h"
                         line="266"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-ip-config.c"
               line="2024">%TRUE if the address was added; %FALSE if the address was already
known.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ip-config.c"
                 line="2018">the #NMSettingIPConfig</doc>
            <type name="SettingIPConfig" c:type="NMSettingIPConfig*"/>
          </instance-parameter>
          <parameter name="address" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ip-config.c"
                 line="2019">the new address to add</doc>
            <type name="IPAddress" c:type="NMIPAddress*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_dns" c:identifier="nm_setting_ip_config_add_dns">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-ip-config.c"
             line="1487">Adds a new DNS server to the setting.</doc>
        <source-position filename="libnm-core/nm-setting-ip-config.h"
                         line="227"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-ip-config.c"
               line="1494">%TRUE if the DNS server was added; %FALSE if the server was already
known</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ip-config.c"
                 line="1489">the #NMSettingIPConfig</doc>
            <type name="SettingIPConfig" c:type="NMSettingIPConfig*"/>
          </instance-parameter>
          <parameter name="dns" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ip-config.c"
                 line="1490">the IP address of the DNS server to add</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_dns_option"
              c:identifier="nm_setting_ip_config_add_dns_option"
              version="1.2">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-ip-config.c"
             line="1834">Adds a new DNS option to the setting.</doc>
        <source-position filename="libnm-core/nm-setting-ip-config.h"
                         line="252"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-ip-config.c"
               line="1841">%TRUE if the DNS option was added; %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ip-config.c"
                 line="1836">the #NMSettingIPConfig</doc>
            <type name="SettingIPConfig" c:type="NMSettingIPConfig*"/>
          </instance-parameter>
          <parameter name="dns_option" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ip-config.c"
                 line="1837">the DNS option to add</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_dns_search"
              c:identifier="nm_setting_ip_config_add_dns_search">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-ip-config.c"
             line="1634">Adds a new DNS search domain to the setting.</doc>
        <source-position filename="libnm-core/nm-setting-ip-config.h"
                         line="238"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-ip-config.c"
               line="1641">%TRUE if the DNS search domain was added; %FALSE if the search
domain was already known</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ip-config.c"
                 line="1636">the #NMSettingIPConfig</doc>
            <type name="SettingIPConfig" c:type="NMSettingIPConfig*"/>
          </instance-parameter>
          <parameter name="dns_search" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ip-config.c"
                 line="1637">the search domain to add</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_route" c:identifier="nm_setting_ip_config_add_route">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-ip-config.c"
             line="2170">Appends a new route and associated information to the setting.  The
given route is duplicated internally and is not changed by this function.
If an identical route (considering attributes as well) already exists, the
route is not added and the function returns %FALSE.

Note that before 1.10, this function would not consider route attributes
and not add a route that has an existing route with same dest/prefix,next_hop,metric
parameters.</doc>
        <source-position filename="libnm-core/nm-setting-ip-config.h"
                         line="279"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-ip-config.c"
               line="2184">%TRUE if the route was added; %FALSE if the route was already known.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ip-config.c"
                 line="2172">the #NMSettingIPConfig</doc>
            <type name="SettingIPConfig" c:type="NMSettingIPConfig*"/>
          </instance-parameter>
          <parameter name="route" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ip-config.c"
                 line="2173">the route to add</doc>
            <type name="IPRoute" c:type="NMIPRoute*"/>
          </parameter>
        </parameters>
      </method>
      <method name="clear_addresses"
              c:identifier="nm_setting_ip_config_clear_addresses">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-ip-config.c"
             line="2102">Removes all configured addresses.</doc>
        <source-position filename="libnm-core/nm-setting-ip-config.h"
                         line="272"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ip-config.c"
                 line="2104">the #NMSettingIPConfig</doc>
            <type name="SettingIPConfig" c:type="NMSettingIPConfig*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="clear_dns" c:identifier="nm_setting_ip_config_clear_dns">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-ip-config.c"
             line="1579">Removes all configured DNS servers.</doc>
        <source-position filename="libnm-core/nm-setting-ip-config.h"
                         line="233"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ip-config.c"
                 line="1581">the #NMSettingIPConfig</doc>
            <type name="SettingIPConfig" c:type="NMSettingIPConfig*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="clear_dns_options"
              c:identifier="nm_setting_ip_config_clear_dns_options"
              version="1.2">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-ip-config.c"
             line="1931">Removes all configured DNS options.</doc>
        <source-position filename="libnm-core/nm-setting-ip-config.h"
                         line="258"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ip-config.c"
                 line="1933">the #NMSettingIPConfig</doc>
            <type name="SettingIPConfig" c:type="NMSettingIPConfig*"/>
          </instance-parameter>
          <parameter name="is_set" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ip-config.c"
                 line="1934">the dns-options can be either empty or unset (default).
  Specify how to clear the options.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="clear_dns_searches"
              c:identifier="nm_setting_ip_config_clear_dns_searches">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-ip-config.c"
             line="1718">Removes all configured DNS search domains.</doc>
        <source-position filename="libnm-core/nm-setting-ip-config.h"
                         line="244"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ip-config.c"
                 line="1720">the #NMSettingIPConfig</doc>
            <type name="SettingIPConfig" c:type="NMSettingIPConfig*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="clear_routes"
              c:identifier="nm_setting_ip_config_clear_routes">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-ip-config.c"
             line="2261">Removes all configured routes.</doc>
        <source-position filename="libnm-core/nm-setting-ip-config.h"
                         line="285"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ip-config.c"
                 line="2263">the #NMSettingIPConfig</doc>
            <type name="SettingIPConfig" c:type="NMSettingIPConfig*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_address"
              c:identifier="nm_setting_ip_config_get_address">
        <source-position filename="libnm-core/nm-setting-ip-config.h"
                         line="264"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-ip-config.c"
               line="2001">the address at index @idx</doc>
          <type name="IPAddress" c:type="NMIPAddress*"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ip-config.c"
                 line="1998">the #NMSettingIPConfig</doc>
            <type name="SettingIPConfig" c:type="NMSettingIPConfig*"/>
          </instance-parameter>
          <parameter name="idx" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ip-config.c"
                 line="1999">index number of the address to return</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_dad_timeout"
              c:identifier="nm_setting_ip_config_get_dad_timeout"
              version="1.2">
        <source-position filename="libnm-core/nm-setting-ip-config.h"
                         line="301"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-ip-config.c"
               line="2429">the #NMSettingIPConfig:dad-timeout property.</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ip-config.c"
                 line="2427">the #NMSettingIPConfig</doc>
            <type name="SettingIPConfig" c:type="NMSettingIPConfig*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_dhcp_hostname"
              c:identifier="nm_setting_ip_config_get_dhcp_hostname">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-ip-config.c"
             line="2353">Returns the value contained in the #NMSettingIPConfig:dhcp-hostname
property.</doc>
        <source-position filename="libnm-core/nm-setting-ip-config.h"
                         line="295"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-ip-config.c"
               line="2360">the configured hostname to send to the DHCP server</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ip-config.c"
                 line="2355">the #NMSettingIPConfig</doc>
            <type name="SettingIPConfig" c:type="NMSettingIPConfig*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_dhcp_send_hostname"
              c:identifier="nm_setting_ip_config_get_dhcp_send_hostname">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-ip-config.c"
             line="2370">Returns the value contained in the #NMSettingIPConfig:dhcp-send-hostname
property.</doc>
        <source-position filename="libnm-core/nm-setting-ip-config.h"
                         line="296"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-ip-config.c"
               line="2377">%TRUE if NetworkManager should send the machine hostname to the
DHCP server when requesting addresses to allow the server to automatically
update DNS information for this machine.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ip-config.c"
                 line="2372">the #NMSettingIPConfig</doc>
            <type name="SettingIPConfig" c:type="NMSettingIPConfig*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_dhcp_timeout"
              c:identifier="nm_setting_ip_config_get_dhcp_timeout"
              version="1.2">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-ip-config.c"
             line="2441">Returns the value contained in the #NMSettingIPConfig:dhcp-timeout
property.</doc>
        <source-position filename="libnm-core/nm-setting-ip-config.h"
                         line="303"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-ip-config.c"
               line="2448">the configured DHCP timeout in seconds. 0 = default for
the particular kind of device.</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ip-config.c"
                 line="2443">the #NMSettingIPConfig</doc>
            <type name="SettingIPConfig" c:type="NMSettingIPConfig*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_dns" c:identifier="nm_setting_ip_config_get_dns">
        <source-position filename="libnm-core/nm-setting-ip-config.h"
                         line="225"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-ip-config.c"
               line="1472">the IP address of the DNS server at index @idx</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ip-config.c"
                 line="1469">the #NMSettingIPConfig</doc>
            <type name="SettingIPConfig" c:type="NMSettingIPConfig*"/>
          </instance-parameter>
          <parameter name="idx" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ip-config.c"
                 line="1470">index number of the DNS server to return</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_dns_option"
              c:identifier="nm_setting_ip_config_get_dns_option"
              version="1.2">
        <source-position filename="libnm-core/nm-setting-ip-config.h"
                         line="248"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-ip-config.c"
               line="1784">the DNS option at index @idx</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ip-config.c"
                 line="1781">the #NMSettingIPConfig</doc>
            <type name="SettingIPConfig" c:type="NMSettingIPConfig*"/>
          </instance-parameter>
          <parameter name="idx" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ip-config.c"
                 line="1782">index number of the DNS option</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_dns_priority"
              c:identifier="nm_setting_ip_config_get_dns_priority"
              version="1.4">
        <source-position filename="libnm-core/nm-setting-ip-config.h"
                         line="261"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-ip-config.c"
               line="1970">the priority of DNS servers</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ip-config.c"
                 line="1968">the #NMSettingIPConfig</doc>
            <type name="SettingIPConfig" c:type="NMSettingIPConfig*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_dns_search"
              c:identifier="nm_setting_ip_config_get_dns_search">
        <source-position filename="libnm-core/nm-setting-ip-config.h"
                         line="236"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-ip-config.c"
               line="1619">the DNS search domain at index @idx</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ip-config.c"
                 line="1616">the #NMSettingIPConfig</doc>
            <type name="SettingIPConfig" c:type="NMSettingIPConfig*"/>
          </instance-parameter>
          <parameter name="idx" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ip-config.c"
                 line="1617">index number of the DNS search domain to return</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_gateway"
              c:identifier="nm_setting_ip_config_get_gateway">
        <source-position filename="libnm-core/nm-setting-ip-config.h"
                         line="274"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-ip-config.c"
               line="2125">the IP address of the gateway associated with this configuration, or
%NULL.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ip-config.c"
                 line="2123">the #NMSettingIPConfig</doc>
            <type name="SettingIPConfig" c:type="NMSettingIPConfig*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_ignore_auto_dns"
              c:identifier="nm_setting_ip_config_get_ignore_auto_dns">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-ip-config.c"
             line="2335">Returns the value contained in the #NMSettingIPConfig:ignore-auto-dns
property.</doc>
        <source-position filename="libnm-core/nm-setting-ip-config.h"
                         line="293"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-ip-config.c"
               line="2342">%TRUE if automatically configured (ie via DHCP) DNS information
should be ignored.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ip-config.c"
                 line="2337">the #NMSettingIPConfig</doc>
            <type name="SettingIPConfig" c:type="NMSettingIPConfig*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_ignore_auto_routes"
              c:identifier="nm_setting_ip_config_get_ignore_auto_routes">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-ip-config.c"
             line="2317">Returns the value contained in the #NMSettingIPConfig:ignore-auto-routes
property.</doc>
        <source-position filename="libnm-core/nm-setting-ip-config.h"
                         line="292"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-ip-config.c"
               line="2324">%TRUE if automatically configured (ie via DHCP) routes should be
ignored.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ip-config.c"
                 line="2319">the #NMSettingIPConfig</doc>
            <type name="SettingIPConfig" c:type="NMSettingIPConfig*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_may_fail"
              c:identifier="nm_setting_ip_config_get_may_fail">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-ip-config.c"
             line="2407">Returns the value contained in the #NMSettingIPConfig:may-fail
property.</doc>
        <source-position filename="libnm-core/nm-setting-ip-config.h"
                         line="299"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-ip-config.c"
               line="2414">%TRUE if this connection doesn't require this type of IP
addressing to complete for the connection to succeed.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ip-config.c"
                 line="2409">the #NMSettingIPConfig</doc>
            <type name="SettingIPConfig" c:type="NMSettingIPConfig*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_method" c:identifier="nm_setting_ip_config_get_method">
        <source-position filename="libnm-core/nm-setting-ip-config.h"
                         line="222"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-ip-config.c"
               line="1441">the #NMSettingIPConfig:method property of the setting; see
#NMSettingIP4Config and #NMSettingIP6Config for details of the
methods available with each type.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ip-config.c"
                 line="1439">the #NMSettingIPConfig</doc>
            <type name="SettingIPConfig" c:type="NMSettingIPConfig*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_never_default"
              c:identifier="nm_setting_ip_config_get_never_default">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-ip-config.c"
             line="2389">Returns the value contained in the #NMSettingIPConfig:never-default
property.</doc>
        <source-position filename="libnm-core/nm-setting-ip-config.h"
                         line="298"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-ip-config.c"
               line="2396">%TRUE if this connection should never be the default
  connection</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ip-config.c"
                 line="2391">the #NMSettingIPConfig</doc>
            <type name="SettingIPConfig" c:type="NMSettingIPConfig*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_num_addresses"
              c:identifier="nm_setting_ip_config_get_num_addresses">
        <source-position filename="libnm-core/nm-setting-ip-config.h"
                         line="263"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-ip-config.c"
               line="1986">the number of configured addresses</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ip-config.c"
                 line="1984">the #NMSettingIPConfig</doc>
            <type name="SettingIPConfig" c:type="NMSettingIPConfig*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_num_dns"
              c:identifier="nm_setting_ip_config_get_num_dns">
        <source-position filename="libnm-core/nm-setting-ip-config.h"
                         line="224"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-ip-config.c"
               line="1457">the number of configured DNS servers</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ip-config.c"
                 line="1455">the #NMSettingIPConfig</doc>
            <type name="SettingIPConfig" c:type="NMSettingIPConfig*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_num_dns_options"
              c:identifier="nm_setting_ip_config_get_num_dns_options"
              version="1.2">
        <source-position filename="libnm-core/nm-setting-ip-config.h"
                         line="246"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-ip-config.c"
               line="1743">the number of configured DNS options</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ip-config.c"
                 line="1741">the #NMSettingIPConfig</doc>
            <type name="SettingIPConfig" c:type="NMSettingIPConfig*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_num_dns_searches"
              c:identifier="nm_setting_ip_config_get_num_dns_searches">
        <source-position filename="libnm-core/nm-setting-ip-config.h"
                         line="235"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-ip-config.c"
               line="1604">the number of configured DNS search domains</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ip-config.c"
                 line="1602">the #NMSettingIPConfig</doc>
            <type name="SettingIPConfig" c:type="NMSettingIPConfig*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_num_routes"
              c:identifier="nm_setting_ip_config_get_num_routes">
        <source-position filename="libnm-core/nm-setting-ip-config.h"
                         line="276"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-ip-config.c"
               line="2140">the number of configured routes</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ip-config.c"
                 line="2138">the #NMSettingIPConfig</doc>
            <type name="SettingIPConfig" c:type="NMSettingIPConfig*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_route" c:identifier="nm_setting_ip_config_get_route">
        <source-position filename="libnm-core/nm-setting-ip-config.h"
                         line="277"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-ip-config.c"
               line="2155">the route at index @idx</doc>
          <type name="IPRoute" c:type="NMIPRoute*"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ip-config.c"
                 line="2152">the #NMSettingIPConfig</doc>
            <type name="SettingIPConfig" c:type="NMSettingIPConfig*"/>
          </instance-parameter>
          <parameter name="idx" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ip-config.c"
                 line="2153">index number of the route to return</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_route_metric"
              c:identifier="nm_setting_ip_config_get_route_metric">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-ip-config.c"
             line="2280">Returns the value contained in the #NMSettingIPConfig:route-metric
property.</doc>
        <source-position filename="libnm-core/nm-setting-ip-config.h"
                         line="287"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-ip-config.c"
               line="2287">the route metric that is used for routes that don't explicitly
specify a metric. See #NMSettingIPConfig:route-metric for more details.</doc>
          <type name="gint64" c:type="gint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ip-config.c"
                 line="2282">the #NMSettingIPConfig</doc>
            <type name="SettingIPConfig" c:type="NMSettingIPConfig*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_route_table"
              c:identifier="nm_setting_ip_config_get_route_table"
              version="1.10">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-ip-config.c"
             line="2298">Returns the value contained in the #NMSettingIPConfig:route-table
property.</doc>
        <source-position filename="libnm-core/nm-setting-ip-config.h"
                         line="290"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-ip-config.c"
               line="2305">the configured route-table.</doc>
          <type name="guint32" c:type="guint32"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ip-config.c"
                 line="2300">the #NMSettingIPConfig</doc>
            <type name="SettingIPConfig" c:type="NMSettingIPConfig*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="has_dns_options"
              c:identifier="nm_setting_ip_config_has_dns_options">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-ip-config.c"
             line="1759">NMSettingIPConfig can have a list of dns-options. If the list
is empty, there are two similar (but differentiated) states.
Either the options are explicitly set to have no values,
or the options are left undefined. The latter means to use
a default configuration, while the former explicitly means "no-options".</doc>
        <source-position filename="libnm-core/nm-setting-ip-config.h"
                         line="247"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-ip-config.c"
               line="1769">whether DNS options are initialized or left unset (the default).</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ip-config.c"
                 line="1761">the #NMSettingIPConfig</doc>
            <type name="SettingIPConfig" c:type="NMSettingIPConfig*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="next_valid_dns_option"
              c:identifier="nm_setting_ip_config_next_valid_dns_option"
              version="1.2">
        <source-position filename="libnm-core/nm-setting-ip-config.h"
                         line="250"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-ip-config.c"
               line="1807">the index, greater or equal than @idx, of the first valid
DNS option, or -1 if no valid option is found</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ip-config.c"
                 line="1804">the #NMSettingIPConfig</doc>
            <type name="SettingIPConfig" c:type="NMSettingIPConfig*"/>
          </instance-parameter>
          <parameter name="idx" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ip-config.c"
                 line="1805">index to start the search from</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_address"
              c:identifier="nm_setting_ip_config_remove_address">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-ip-config.c"
             line="2050">Removes the address at index @idx.</doc>
        <source-position filename="libnm-core/nm-setting-ip-config.h"
                         line="268"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ip-config.c"
                 line="2052">the #NMSettingIPConfig</doc>
            <type name="SettingIPConfig" c:type="NMSettingIPConfig*"/>
          </instance-parameter>
          <parameter name="idx" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ip-config.c"
                 line="2053">index number of the address to remove</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_address_by_value"
              c:identifier="nm_setting_ip_config_remove_address_by_value">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-ip-config.c"
             line="2072">Removes the address @address.</doc>
        <source-position filename="libnm-core/nm-setting-ip-config.h"
                         line="270"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-ip-config.c"
               line="2079">%TRUE if the address was found and removed; %FALSE if it was not.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ip-config.c"
                 line="2074">the #NMSettingIPConfig</doc>
            <type name="SettingIPConfig" c:type="NMSettingIPConfig*"/>
          </instance-parameter>
          <parameter name="address" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ip-config.c"
                 line="2075">the IP address to remove</doc>
            <type name="IPAddress" c:type="NMIPAddress*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_dns" c:identifier="nm_setting_ip_config_remove_dns">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-ip-config.c"
             line="1523">Removes the DNS server at index @idx.</doc>
        <source-position filename="libnm-core/nm-setting-ip-config.h"
                         line="229"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ip-config.c"
                 line="1525">the #NMSettingIPConfig</doc>
            <type name="SettingIPConfig" c:type="NMSettingIPConfig*"/>
          </instance-parameter>
          <parameter name="idx" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ip-config.c"
                 line="1526">index number of the DNS server to remove</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_dns_by_value"
              c:identifier="nm_setting_ip_config_remove_dns_by_value">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-ip-config.c"
             line="1544">Removes the DNS server @dns.</doc>
        <source-position filename="libnm-core/nm-setting-ip-config.h"
                         line="231"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-ip-config.c"
               line="1551">%TRUE if the DNS server was found and removed; %FALSE if it was not.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ip-config.c"
                 line="1546">the #NMSettingIPConfig</doc>
            <type name="SettingIPConfig" c:type="NMSettingIPConfig*"/>
          </instance-parameter>
          <parameter name="dns" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ip-config.c"
                 line="1547">the DNS server to remove</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_dns_option"
              c:identifier="nm_setting_ip_config_remove_dns_option"
              version="1.2">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-ip-config.c"
             line="1871">Removes the DNS option at index @idx.</doc>
        <source-position filename="libnm-core/nm-setting-ip-config.h"
                         line="254"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ip-config.c"
                 line="1873">the #NMSettingIPConfig</doc>
            <type name="SettingIPConfig" c:type="NMSettingIPConfig*"/>
          </instance-parameter>
          <parameter name="idx" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ip-config.c"
                 line="1874">index number of the DNS option</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_dns_option_by_value"
              c:identifier="nm_setting_ip_config_remove_dns_option_by_value"
              version="1.2">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-ip-config.c"
             line="1895">Removes the DNS option @dns_option.</doc>
        <source-position filename="libnm-core/nm-setting-ip-config.h"
                         line="256"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-ip-config.c"
               line="1902">%TRUE if the DNS option was found and removed; %FALSE if it was not.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ip-config.c"
                 line="1897">the #NMSettingIPConfig</doc>
            <type name="SettingIPConfig" c:type="NMSettingIPConfig*"/>
          </instance-parameter>
          <parameter name="dns_option" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ip-config.c"
                 line="1898">the DNS option to remove</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_dns_search"
              c:identifier="nm_setting_ip_config_remove_dns_search">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-ip-config.c"
             line="1666">Removes the DNS search domain at index @idx.</doc>
        <source-position filename="libnm-core/nm-setting-ip-config.h"
                         line="240"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ip-config.c"
                 line="1668">the #NMSettingIPConfig</doc>
            <type name="SettingIPConfig" c:type="NMSettingIPConfig*"/>
          </instance-parameter>
          <parameter name="idx" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ip-config.c"
                 line="1669">index number of the DNS search domain</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_dns_search_by_value"
              c:identifier="nm_setting_ip_config_remove_dns_search_by_value">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-ip-config.c"
             line="1687">Removes the DNS search domain @dns_search.</doc>
        <source-position filename="libnm-core/nm-setting-ip-config.h"
                         line="242"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-ip-config.c"
               line="1694">%TRUE if the DNS search domain was found and removed; %FALSE if it was not.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ip-config.c"
                 line="1689">the #NMSettingIPConfig</doc>
            <type name="SettingIPConfig" c:type="NMSettingIPConfig*"/>
          </instance-parameter>
          <parameter name="dns_search" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ip-config.c"
                 line="1690">the search domain to remove</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_route"
              c:identifier="nm_setting_ip_config_remove_route">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-ip-config.c"
             line="2208">Removes the route at index @idx.</doc>
        <source-position filename="libnm-core/nm-setting-ip-config.h"
                         line="281"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ip-config.c"
                 line="2210">the #NMSettingIPConfig</doc>
            <type name="SettingIPConfig" c:type="NMSettingIPConfig*"/>
          </instance-parameter>
          <parameter name="idx" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ip-config.c"
                 line="2211">index number of the route</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_route_by_value"
              c:identifier="nm_setting_ip_config_remove_route_by_value">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-ip-config.c"
             line="2229">Removes the first matching route that matches @route.
Note that before 1.10, this function would only compare dest/prefix,next_hop,metric
and ignore route attributes. Now, @route must match exactly.</doc>
        <source-position filename="libnm-core/nm-setting-ip-config.h"
                         line="283"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-ip-config.c"
               line="2238">%TRUE if the route was found and removed; %FALSE if it was not.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ip-config.c"
                 line="2231">the #NMSettingIPConfig</doc>
            <type name="SettingIPConfig" c:type="NMSettingIPConfig*"/>
          </instance-parameter>
          <parameter name="route" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ip-config.c"
                 line="2232">the route to remove</doc>
            <type name="IPRoute" c:type="NMIPRoute*"/>
          </parameter>
        </parameters>
      </method>
      <property name="addresses" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-ip-config.c"
             line="3036">Array of IP addresses.</doc>
        <array name="GLib.PtrArray">
          <type name="IPAddress"/>
        </array>
      </property>
      <property name="dad-timeout"
                version="1.2"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-ip-config.c"
             line="3220">Timeout in milliseconds used to check for the presence of duplicate IP
addresses on the network.  If an address conflict is detected, the
activation will fail.  A zero value means that no duplicate address
detection is performed, -1 means the default value (either configuration
ipvx.dad-timeout override or zero).  A value greater than zero is a
timeout in milliseconds.

The property is currently implemented only for IPv4.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="dhcp-hostname" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-ip-config.c"
             line="3158">If the #NMSettingIPConfig:dhcp-send-hostname property is %TRUE, then the
specified name will be sent to the DHCP server when acquiring a lease.
This property and #NMSettingIP4Config:dhcp-fqdn are mutually exclusive and
cannot be set at the same time.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="dhcp-send-hostname"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-ip-config.c"
             line="3172">If %TRUE, a hostname is sent to the DHCP server when acquiring a lease.
Some DHCP servers use this hostname to update DNS databases, essentially
providing a static hostname for the computer.  If the
#NMSettingIPConfig:dhcp-hostname property is %NULL and this property is
%TRUE, the current persistent hostname of the computer is sent.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="dhcp-timeout" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-ip-config.c"
             line="3242">A timeout for a DHCP transaction in seconds.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="dns" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-ip-config.c"
             line="2952">Array of IP addresses of DNS servers.</doc>
        <array>
          <type name="utf8"/>
        </array>
      </property>
      <property name="dns-options"
                version="1.2"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-ip-config.c"
             line="2977">Array of DNS options as described in man 5 resolv.conf.

%NULL means that the options are unset and left at the default.
In this case NetworkManager will use default options. This is
distinct from an empty list of properties.</doc>
        <array>
          <type name="utf8"/>
        </array>
      </property>
      <property name="dns-priority"
                version="1.4"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-ip-config.c"
             line="2994">DNS servers priority.

The relative priority for DNS servers specified by this setting.  A lower
value is better (higher priority). Zero selects a globally configured
default value. If the latter is missing or zero too, it defaults to
50 for VPNs and 100 for other connections.

Note that the priority is to order DNS settings for multiple active
connections.  It does not disambiguate multiple DNS servers within the
same connection profile.

When using dns=default, servers with higher priority will be on top of
resolv.conf.  To prioritize a given server over another one within the
same connection, just specify them in the desired order.  When multiple
devices have configurations with the same priority, the one with an
active default route will be preferred.  Negative values have the special
effect of excluding other configurations with a greater priority value;
so in presence of at least a negative priority, only DNS servers from
connections with the lowest priority value will be used.

When using a DNS resolver that supports split-DNS as dns=dnsmasq or
dns=systemd-resolved, each connection is used to query domains in its
search list.  Queries for domains not present in any search list are
routed through connections having the '~.' special wildcard domain, which
is added automatically to connections with the default route (or can be
added manually).  When multiple connections specify the same domain, the
one with the highest priority (lowest numerical value) wins.  If a
connection specifies a domain which is subdomain of another domain with a
negative DNS priority value, the subdomain is ignored.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="dns-search" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-ip-config.c"
             line="2963">Array of DNS search domains. Domains starting with a tilde ('~')
are considered 'routing' domains and are used only to decide the
interface over which a query must be forwarded; they are not used
to complete unqualified host names.</doc>
        <array>
          <type name="utf8"/>
        </array>
      </property>
      <property name="gateway" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-ip-config.c"
             line="3053">The gateway associated with this configuration. This is only meaningful
if #NMSettingIPConfig:addresses is also set.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="ignore-auto-dns"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-ip-config.c"
             line="3142">When #NMSettingIPConfig:method is set to "auto" and this property to
%TRUE, automatically configured nameservers and search domains are
ignored and only nameservers and search domains specified in the
#NMSettingIPConfig:dns and #NMSettingIPConfig:dns-search properties, if
any, are used.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="ignore-auto-routes"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-ip-config.c"
             line="3128">When #NMSettingIPConfig:method is set to "auto" and this property to
%TRUE, automatically configured routes are ignored and only routes
specified in the #NMSettingIPConfig:routes property, if any, are used.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="may-fail"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-ip-config.c"
             line="3202">If %TRUE, allow overall network configuration to proceed even if the
configuration specified by this property times out.  Note that at least
one IP configuration must succeed or overall network configuration will
still fail.  For example, in IPv6-only networks, setting this property to
%TRUE on the #NMSettingIP4Config allows the overall network configuration
to succeed if IPv4 configuration fails but IPv6 configuration completes
successfully.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="method" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-ip-config.c"
             line="2922">IP configuration method.

#NMSettingIP4Config and #NMSettingIP6Config both support "auto",
"manual", and "link-local". See the subclass-specific documentation for
other values.

In general, for the "auto" method, properties such as
#NMSettingIPConfig:dns and #NMSettingIPConfig:routes specify information
that is added on to the information returned from automatic
configuration.  The #NMSettingIPConfig:ignore-auto-routes and
#NMSettingIPConfig:ignore-auto-dns properties modify this behavior.

For methods that imply no upstream network, such as "shared" or
"link-local", these properties must be empty.

For IPv4 method "shared", the IP subnet can be configured by adding one
manual IPv4 address or otherwise 10.42.x.0/24 is chosen. Note that the
shared method must be configured on the interface which shares the internet
to a subnet, not on the uplink which is shared.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="never-default"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-ip-config.c"
             line="3188">If %TRUE, this connection will never be the default connection for this
IP type, meaning it will never be assigned the default route by
NetworkManager.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="route-metric"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-ip-config.c"
             line="3080">The default metric for routes that don't explicitly specify a metric.
The default value -1 means that the metric is chosen automatically
based on the device type.
The metric applies to dynamic routes, manual (static) routes that
don't have an explicit metric setting, address prefix routes, and
the default route.
Note that for IPv6, the kernel accepts zero (0) but coerces it to
1024 (user default). Hence, setting this property to zero effectively
mean setting it to 1024.
For IPv4, zero is a regular value for the metric.</doc>
        <type name="gint64" c:type="gint64"/>
      </property>
      <property name="route-table"
                version="1.10"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-ip-config.c"
             line="3101">Enable policy routing (source routing) and set the routing table used when adding routes.

This affects all routes, including device-routes, IPv4LL, DHCP, SLAAC, default-routes
and static routes. But note that static routes can individually overwrite the setting
by explicitly specifying a non-zero routing table.

If the table setting is left at zero, it is eligible to be overwritten via global
configuration. If the property is zero even after applying the global configuration
value, policy routing is disabled for the address family of this connection.

Policy routing disabled means that NetworkManager will add all routes to the main
table (except static routes that explicitly configure a different table). Additionally,
NetworkManager will not delete any extraneous routes from tables except the main table.
This is to preserve backward compatibility for users who manage routing tables outside
of NetworkManager.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="routes" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-ip-config.c"
             line="3066">Array of IP routes.</doc>
        <array name="GLib.PtrArray">
          <type name="IPRoute"/>
        </array>
      </property>
      <field name="parent">
        <type name="Setting" c:type="NMSetting"/>
      </field>
    </class>
    <record name="SettingIPConfigClass"
            c:type="NMSettingIPConfigClass"
            glib:is-gtype-struct-for="SettingIPConfig">
      <source-position filename="libnm-core/nm-setting-ip-config.h"
                       line="218"/>
      <field name="parent">
        <type name="SettingClass" c:type="NMSettingClass"/>
      </field>
      <field name="padding">
        <array zero-terminated="0" fixed-size="8">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <class name="SettingIPTunnel"
           c:symbol-prefix="setting_ip_tunnel"
           c:type="NMSettingIPTunnel"
           parent="Setting"
           glib:type-name="NMSettingIPTunnel"
           glib:get-type="nm_setting_ip_tunnel_get_type"
           glib:type-struct="SettingIPTunnelClass">
      <doc xml:space="preserve"
           filename="libnm-core/nm-setting-ip-tunnel.h"
           line="55">IP Tunneling Settings</doc>
      <source-position filename="libnm-core/nm-setting-ip-tunnel.h" line="69"/>
      <constructor name="new"
                   c:identifier="nm_setting_ip_tunnel_new"
                   version="1.2">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-ip-tunnel.c"
             line="598">Creates a new #NMSettingIPTunnel object with default values.</doc>
        <source-position filename="libnm-core/nm-setting-ip-tunnel.h"
                         line="102"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-ip-tunnel.c"
               line="603">the new empty #NMSettingIPTunnel object</doc>
          <type name="Setting" c:type="NMSetting*"/>
        </return-value>
      </constructor>
      <method name="get_encapsulation_limit"
              c:identifier="nm_setting_ip_tunnel_get_encapsulation_limit"
              version="1.2">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-ip-tunnel.c"
             line="235">Returns the #NMSettingIPTunnel:encapsulation-limit property of the setting.</doc>
        <source-position filename="libnm-core/nm-setting-ip-tunnel.h"
                         line="123"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-ip-tunnel.c"
               line="241">the encapsulation limit value</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ip-tunnel.c"
                 line="237">the #NMSettingIPTunnel</doc>
            <type name="SettingIPTunnel" c:type="NMSettingIPTunnel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_flags" c:identifier="nm_setting_ip_tunnel_get_flags">
        <source-position filename="libnm-core/nm-setting-ip-tunnel.h"
                         line="129"/>
        <return-value transfer-ownership="none">
          <type name="IPTunnelFlags" c:type="NMIPTunnelFlags"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <type name="SettingIPTunnel" c:type="NMSettingIPTunnel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_flow_label"
              c:identifier="nm_setting_ip_tunnel_get_flow_label"
              version="1.2">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-ip-tunnel.c"
             line="253">Returns the #NMSettingIPTunnel:flow-label property of the setting.</doc>
        <source-position filename="libnm-core/nm-setting-ip-tunnel.h"
                         line="125"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-ip-tunnel.c"
               line="259">the flow label value</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ip-tunnel.c"
                 line="255">the #NMSettingIPTunnel</doc>
            <type name="SettingIPTunnel" c:type="NMSettingIPTunnel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_input_key"
              c:identifier="nm_setting_ip_tunnel_get_input_key"
              version="1.2">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-ip-tunnel.c"
             line="199">Returns the #NMSettingIPTunnel:input-key property of the setting.</doc>
        <source-position filename="libnm-core/nm-setting-ip-tunnel.h"
                         line="119"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-ip-tunnel.c"
               line="205">the input key</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ip-tunnel.c"
                 line="201">the #NMSettingIPTunnel</doc>
            <type name="SettingIPTunnel" c:type="NMSettingIPTunnel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_local"
              c:identifier="nm_setting_ip_tunnel_get_local"
              version="1.2">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-ip-tunnel.c"
             line="108">Returns the #NMSettingIPTunnel:local property of the setting.</doc>
        <source-position filename="libnm-core/nm-setting-ip-tunnel.h"
                         line="109"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-ip-tunnel.c"
               line="114">the local endpoint</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ip-tunnel.c"
                 line="110">the #NMSettingIPTunnel</doc>
            <type name="SettingIPTunnel" c:type="NMSettingIPTunnel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_mode"
              c:identifier="nm_setting_ip_tunnel_get_mode"
              version="1.2">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-ip-tunnel.c"
             line="90">Returns the #NMSettingIPTunnel:mode property of the setting.</doc>
        <source-position filename="libnm-core/nm-setting-ip-tunnel.h"
                         line="107"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-ip-tunnel.c"
               line="96">the tunnel mode</doc>
          <type name="IPTunnelMode" c:type="NMIPTunnelMode"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ip-tunnel.c"
                 line="92">the #NMSettingIPTunnel</doc>
            <type name="SettingIPTunnel" c:type="NMSettingIPTunnel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_mtu"
              c:identifier="nm_setting_ip_tunnel_get_mtu"
              version="1.2">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-ip-tunnel.c"
             line="271">Returns the #NMSettingIPTunnel:mtu property of the setting.</doc>
        <source-position filename="libnm-core/nm-setting-ip-tunnel.h"
                         line="127"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-ip-tunnel.c"
               line="277">the MTU</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ip-tunnel.c"
                 line="273">the #NMSettingIPTunnel</doc>
            <type name="SettingIPTunnel" c:type="NMSettingIPTunnel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_output_key"
              c:identifier="nm_setting_ip_tunnel_get_output_key"
              version="1.2">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-ip-tunnel.c"
             line="217">Returns the #NMSettingIPTunnel:output-key property of the setting.</doc>
        <source-position filename="libnm-core/nm-setting-ip-tunnel.h"
                         line="121"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-ip-tunnel.c"
               line="223">the output key</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ip-tunnel.c"
                 line="219">the #NMSettingIPTunnel</doc>
            <type name="SettingIPTunnel" c:type="NMSettingIPTunnel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_parent"
              c:identifier="nm_setting_ip_tunnel_get_parent"
              version="1.2">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-ip-tunnel.c"
             line="73">Returns the #NMSettingIPTunnel:parent property of the setting</doc>
        <source-position filename="libnm-core/nm-setting-ip-tunnel.h"
                         line="105"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-ip-tunnel.c"
               line="79">the parent device</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ip-tunnel.c"
                 line="75">the #NMSettingIPTunnel</doc>
            <type name="SettingIPTunnel" c:type="NMSettingIPTunnel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_path_mtu_discovery"
              c:identifier="nm_setting_ip_tunnel_get_path_mtu_discovery"
              version="1.2">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-ip-tunnel.c"
             line="181">Returns the #NMSettingIPTunnel:path-mtu-discovery property of the setting.</doc>
        <source-position filename="libnm-core/nm-setting-ip-tunnel.h"
                         line="117"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-ip-tunnel.c"
               line="187">whether path MTU discovery is enabled</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ip-tunnel.c"
                 line="183">the #NMSettingIPTunnel</doc>
            <type name="SettingIPTunnel" c:type="NMSettingIPTunnel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_remote"
              c:identifier="nm_setting_ip_tunnel_get_remote"
              version="1.2">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-ip-tunnel.c"
             line="126">Returns the #NMSettingIPTunnel:remote property of the setting.</doc>
        <source-position filename="libnm-core/nm-setting-ip-tunnel.h"
                         line="111"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-ip-tunnel.c"
               line="132">the remote endpoint</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ip-tunnel.c"
                 line="128">the #NMSettingIPTunnel</doc>
            <type name="SettingIPTunnel" c:type="NMSettingIPTunnel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_tos"
              c:identifier="nm_setting_ip_tunnel_get_tos"
              version="1.2">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-ip-tunnel.c"
             line="163">Returns the #NMSettingIPTunnel:tos property of the setting.</doc>
        <source-position filename="libnm-core/nm-setting-ip-tunnel.h"
                         line="115"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-ip-tunnel.c"
               line="169">the TOS value</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ip-tunnel.c"
                 line="165">the #NMSettingIPTunnel</doc>
            <type name="SettingIPTunnel" c:type="NMSettingIPTunnel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_ttl"
              c:identifier="nm_setting_ip_tunnel_get_ttl"
              version="1.2">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-ip-tunnel.c"
             line="144">Returns the #NMSettingIPTunnel:ttl property of the setting.</doc>
        <source-position filename="libnm-core/nm-setting-ip-tunnel.h"
                         line="113"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-ip-tunnel.c"
               line="150">the Time-to-live value</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ip-tunnel.c"
                 line="146">the #NMSettingIPTunnel</doc>
            <type name="SettingIPTunnel" c:type="NMSettingIPTunnel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="encapsulation-limit"
                version="1.2"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-ip-tunnel.c"
             line="780">How many additional levels of encapsulation are permitted to be prepended
to packets. This property applies only to IPv6 tunnels.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="flags"
                version="1.12"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-ip-tunnel.c"
             line="828">Tunnel flags. Currently the following values are supported:
%NM_IP_TUNNEL_FLAG_IP6_IGN_ENCAP_LIMIT, %NM_IP_TUNNEL_FLAG_IP6_USE_ORIG_TCLASS,
%NM_IP_TUNNEL_FLAG_IP6_USE_ORIG_FLOWLABEL, %NM_IP_TUNNEL_FLAG_IP6_MIP6_DEV,
%NM_IP_TUNNEL_FLAG_IP6_RCV_DSCP_COPY, %NM_IP_TUNNEL_FLAG_IP6_USE_ORIG_FWMARK.
They are valid only for IPv6 tunnels.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="flow-label"
                version="1.2"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-ip-tunnel.c"
             line="796">The flow label to assign to tunnel packets. This property applies only to
IPv6 tunnels.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="input-key"
                version="1.2"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-ip-tunnel.c"
             line="750">The key used for tunnel input packets; the property is valid only for
certain tunnel modes (GRE, IP6GRE). If empty, no key is used.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="local"
                version="1.2"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-ip-tunnel.c"
             line="673">The local endpoint of the tunnel; the value can be empty, otherwise it
must contain an IPv4 or IPv6 address.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="mode"
                version="1.2"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-ip-tunnel.c"
             line="658">The tunneling mode, for example %NM_IP_TUNNEL_MODE_IPIP or
%NM_IP_TUNNEL_MODE_GRE.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="mtu"
                version="1.2"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-ip-tunnel.c"
             line="812">If non-zero, only transmit packets of the specified size or smaller,
breaking larger packets up into multiple fragments.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="output-key"
                version="1.2"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-ip-tunnel.c"
             line="765">The key used for tunnel output packets; the property is valid only for
certain tunnel modes (GRE, IP6GRE). If empty, no key is used.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="parent"
                version="1.2"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-ip-tunnel.c"
             line="642">If given, specifies the parent interface name or parent connection UUID
the new device will be bound to so that tunneled packets will only be
routed via that interface.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="path-mtu-discovery"
                version="1.2"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-ip-tunnel.c"
             line="735">Whether to enable Path MTU Discovery on this tunnel.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="remote"
                version="1.2"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-ip-tunnel.c"
             line="688">The remote endpoint of the tunnel; the value must contain an IPv4 or IPv6
address.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="tos"
                version="1.2"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-ip-tunnel.c"
             line="719">The type of service (IPv4) or traffic class (IPv6) field to be set on
tunneled packets.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="ttl"
                version="1.2"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-ip-tunnel.c"
             line="703">The TTL to assign to tunneled packets. 0 is a special value meaning that
packets inherit the TTL value.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <field name="parent">
        <type name="Setting" c:type="NMSetting"/>
      </field>
    </class>
    <record name="SettingIPTunnelClass"
            c:type="NMSettingIPTunnelClass"
            glib:is-gtype-struct-for="SettingIPTunnel">
      <source-position filename="libnm-core/nm-setting-ip-tunnel.h" line="69"/>
      <field name="parent">
        <type name="SettingClass" c:type="NMSettingClass"/>
      </field>
      <field name="padding" readable="0" private="1">
        <array zero-terminated="0" fixed-size="4">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <class name="SettingInfiniband"
           c:symbol-prefix="setting_infiniband"
           c:type="NMSettingInfiniband"
           parent="Setting"
           glib:type-name="NMSettingInfiniband"
           glib:get-type="nm_setting_infiniband_get_type"
           glib:type-struct="SettingInfinibandClass">
      <doc xml:space="preserve"
           filename="libnm-core/nm-setting-infiniband.h"
           line="48">Infiniband Settings</doc>
      <source-position filename="libnm-core/nm-setting-infiniband.h"
                       line="62"/>
      <constructor name="new" c:identifier="nm_setting_infiniband_new">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-infiniband.c"
             line="358">Creates a new #NMSettingInfiniband object with default values.</doc>
        <source-position filename="libnm-core/nm-setting-infiniband.h"
                         line="66"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-infiniband.c"
               line="363">the new empty #NMSettingInfiniband object</doc>
          <type name="Setting" c:type="NMSetting*"/>
        </return-value>
      </constructor>
      <method name="get_mac_address"
              c:identifier="nm_setting_infiniband_get_mac_address">
        <source-position filename="libnm-core/nm-setting-infiniband.h"
                         line="67"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-infiniband.c"
               line="69">the #NMSettingInfiniband:mac-address property of the setting</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-infiniband.c"
                 line="67">the #NMSettingInfiniband</doc>
            <type name="SettingInfiniband" c:type="NMSettingInfiniband*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_mtu" c:identifier="nm_setting_infiniband_get_mtu">
        <source-position filename="libnm-core/nm-setting-infiniband.h"
                         line="68"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-infiniband.c"
               line="83">the #NMSettingInfiniband:mtu property of the setting</doc>
          <type name="guint32" c:type="guint32"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-infiniband.c"
                 line="81">the #NMSettingInfiniband</doc>
            <type name="SettingInfiniband" c:type="NMSettingInfiniband*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_p_key" c:identifier="nm_setting_infiniband_get_p_key">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-infiniband.c"
             line="110">Returns the P_Key to use for this device. A value of -1 means to
use the default P_Key (aka "the P_Key at index 0"). Otherwise it is
a 16-bit unsigned integer.</doc>
        <source-position filename="libnm-core/nm-setting-infiniband.h"
                         line="70"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-infiniband.c"
               line="118">the IPoIB P_Key</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-infiniband.c"
                 line="112">the #NMSettingInfiniband</doc>
            <type name="SettingInfiniband" c:type="NMSettingInfiniband*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_parent"
              c:identifier="nm_setting_infiniband_get_parent">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-infiniband.c"
             line="128">Returns the parent interface name for this device, if set.</doc>
        <source-position filename="libnm-core/nm-setting-infiniband.h"
                         line="71"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-infiniband.c"
               line="134">the parent interface name</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-infiniband.c"
                 line="130">the #NMSettingInfiniband</doc>
            <type name="SettingInfiniband" c:type="NMSettingInfiniband*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_transport_mode"
              c:identifier="nm_setting_infiniband_get_transport_mode">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-infiniband.c"
             line="93">Returns the transport mode for this device. Either 'datagram' or
'connected'.</doc>
        <source-position filename="libnm-core/nm-setting-infiniband.h"
                         line="69"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-infiniband.c"
               line="100">the IPoIB transport mode</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-infiniband.c"
                 line="95">the #NMSettingInfiniband</doc>
            <type name="SettingInfiniband" c:type="NMSettingInfiniband*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_virtual_interface_name"
              c:identifier="nm_setting_infiniband_get_virtual_interface_name">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-infiniband.c"
             line="144">Returns the interface name created by combining #NMSettingInfiniband:parent
and #NMSettingInfiniband:p-key. (If either property is unset, this will
return %NULL.)</doc>
        <source-position filename="libnm-core/nm-setting-infiniband.h"
                         line="73"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-infiniband.c"
               line="152">the interface name, or %NULL</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-infiniband.c"
                 line="146">the #NMSettingInfiniband</doc>
            <type name="SettingInfiniband" c:type="NMSettingInfiniband*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="mac-address" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-infiniband.c"
             line="399">If specified, this connection will only apply to the IPoIB device whose
permanent MAC address matches. This property does not change the MAC
address of the device (i.e. MAC spoofing).</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="mtu"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-infiniband.c"
             line="437">If non-zero, only transmit packets of the specified size or smaller,
breaking larger packets up into multiple frames.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="p-key"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-infiniband.c"
             line="479">The InfiniBand P_Key to use for this device. A value of -1 means to use
the default P_Key (aka "the P_Key at index 0").  Otherwise it is a 16-bit
unsigned integer, whose high bit is set if it is a "full membership"
P_Key.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="parent"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-infiniband.c"
             line="505">The interface name of the parent device of this device. Normally %NULL,
but if the #NMSettingInfiniband:p_key property is set, then you must
specify the base device by setting either this property or
#NMSettingInfiniband:mac-address.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="transport-mode"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-infiniband.c"
             line="457">The IP-over-InfiniBand transport mode. Either "datagram" or
"connected".</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent">
        <type name="Setting" c:type="NMSetting"/>
      </field>
    </class>
    <record name="SettingInfinibandClass"
            c:type="NMSettingInfinibandClass"
            glib:is-gtype-struct-for="SettingInfiniband">
      <source-position filename="libnm-core/nm-setting-infiniband.h"
                       line="62"/>
      <field name="parent">
        <type name="SettingClass" c:type="NMSettingClass"/>
      </field>
      <field name="padding" readable="0" private="1">
        <array zero-terminated="0" fixed-size="4">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <enumeration name="SettingMacRandomization"
                 glib:type-name="NMSettingMacRandomization"
                 glib:get-type="nm_setting_mac_randomization_get_type"
                 c:type="NMSettingMacRandomization">
      <doc xml:space="preserve"
           filename="libnm-core/nm-setting.h"
           line="132">Controls if and how the MAC address of a device is randomzied.</doc>
      <member name="default"
              value="0"
              c:identifier="NM_SETTING_MAC_RANDOMIZATION_DEFAULT"
              glib:nick="default">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting.h"
             line="134">the default value, which unless
overridden by user-controlled defaults configuration, is "never".</doc>
      </member>
      <member name="never"
              value="1"
              c:identifier="NM_SETTING_MAC_RANDOMIZATION_NEVER"
              glib:nick="never">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting.h"
             line="136">the device's MAC address is always used.</doc>
      </member>
      <member name="always"
              value="2"
              c:identifier="NM_SETTING_MAC_RANDOMIZATION_ALWAYS"
              glib:nick="always">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting.h"
             line="137">a random MAC address is used.</doc>
      </member>
    </enumeration>
    <class name="SettingMacsec"
           c:symbol-prefix="setting_macsec"
           c:type="NMSettingMacsec"
           parent="Setting"
           glib:type-name="NMSettingMacsec"
           glib:get-type="nm_setting_macsec_get_type"
           glib:type-struct="SettingMacsecClass">
      <doc xml:space="preserve"
           filename="libnm-core/nm-setting-macsec.h"
           line="52">MACSec Settings</doc>
      <source-position filename="libnm-core/nm-setting-macsec.h" line="66"/>
      <constructor name="new"
                   c:identifier="nm_setting_macsec_new"
                   version="1.6">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-macsec.c"
             line="480">Creates a new #NMSettingMacsec object with default values.</doc>
        <source-position filename="libnm-core/nm-setting-macsec.h" line="108"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-macsec.c"
               line="485">the new empty #NMSettingMacsec object</doc>
          <type name="Setting" c:type="NMSetting*"/>
        </return-value>
      </constructor>
      <method name="get_encrypt"
              c:identifier="nm_setting_macsec_get_encrypt"
              version="1.6">
        <source-position filename="libnm-core/nm-setting-macsec.h" line="115"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-macsec.c"
               line="110">the #NMSettingMacsec:encrypt property of the setting</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-macsec.c"
                 line="108">the #NMSettingMacsec</doc>
            <type name="SettingMacsec" c:type="NMSettingMacsec*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_mka_cak"
              c:identifier="nm_setting_macsec_get_mka_cak"
              version="1.6">
        <source-position filename="libnm-core/nm-setting-macsec.h" line="117"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-macsec.c"
               line="125">the #NMSettingMacsec:mka-cak property of the setting</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-macsec.c"
                 line="123">the #NMSettingMacsec</doc>
            <type name="SettingMacsec" c:type="NMSettingMacsec*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_mka_cak_flags"
              c:identifier="nm_setting_macsec_get_mka_cak_flags"
              version="1.6">
        <source-position filename="libnm-core/nm-setting-macsec.h" line="119"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-macsec.c"
               line="140">the #NMSettingSecretFlags pertaining to the #NMSettingMacsec:mka-cak</doc>
          <type name="SettingSecretFlags" c:type="NMSettingSecretFlags"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-macsec.c"
                 line="138">the #NMSettingMacsec</doc>
            <type name="SettingMacsec" c:type="NMSettingMacsec*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_mka_ckn"
              c:identifier="nm_setting_macsec_get_mka_ckn"
              version="1.6">
        <source-position filename="libnm-core/nm-setting-macsec.h" line="121"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-macsec.c"
               line="156">the #NMSettingMacsec:mka-ckn property of the setting</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-macsec.c"
                 line="154">the #NMSettingMacsec</doc>
            <type name="SettingMacsec" c:type="NMSettingMacsec*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_mode"
              c:identifier="nm_setting_macsec_get_mode"
              version="1.6">
        <source-position filename="libnm-core/nm-setting-macsec.h" line="113"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-macsec.c"
               line="95">the #NMSettingMacsec:mode property of the setting</doc>
          <type name="SettingMacsecMode" c:type="NMSettingMacsecMode"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-macsec.c"
                 line="93">the #NMSettingMacsec</doc>
            <type name="SettingMacsec" c:type="NMSettingMacsec*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_parent"
              c:identifier="nm_setting_macsec_get_parent"
              version="1.6">
        <source-position filename="libnm-core/nm-setting-macsec.h" line="111"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-macsec.c"
               line="80">the #NMSettingMacsec:parent property of the setting</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-macsec.c"
                 line="78">the #NMSettingMacsec</doc>
            <type name="SettingMacsec" c:type="NMSettingMacsec*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_port"
              c:identifier="nm_setting_macsec_get_port"
              version="1.6">
        <source-position filename="libnm-core/nm-setting-macsec.h" line="123"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-macsec.c"
               line="171">the #NMSettingMacsec:port property of the setting</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-macsec.c"
                 line="169">the #NMSettingMacsec</doc>
            <type name="SettingMacsec" c:type="NMSettingMacsec*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_send_sci"
              c:identifier="nm_setting_macsec_get_send_sci"
              version="1.12">
        <source-position filename="libnm-core/nm-setting-macsec.h" line="127"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-macsec.c"
               line="201">the #NMSettingMacsec:send-sci property of the setting</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-macsec.c"
                 line="199">the #NMSettingMacsec</doc>
            <type name="SettingMacsec" c:type="NMSettingMacsec*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_validation"
              c:identifier="nm_setting_macsec_get_validation"
              version="1.6">
        <source-position filename="libnm-core/nm-setting-macsec.h" line="125"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-macsec.c"
               line="186">the #NMSettingMacsec:validation property of the setting</doc>
          <type name="SettingMacsecValidation"
                c:type="NMSettingMacsecValidation"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-macsec.c"
                 line="184">the #NMSettingMacsec</doc>
            <type name="SettingMacsec" c:type="NMSettingMacsec*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="encrypt"
                version="1.6"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-macsec.c"
             line="557">Whether the transmitted traffic must be encrypted.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="mka-cak"
                version="1.6"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-macsec.c"
             line="571">The pre-shared CAK (Connectivity Association Key) for MACsec
Key Agreement.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="mka-cak-flags"
                version="1.6"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-macsec.c"
             line="587">Flags indicating how to handle the #NMSettingMacsec:mka-cak
property.</doc>
        <type name="SettingSecretFlags"/>
      </property>
      <property name="mka-ckn"
                version="1.6"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-macsec.c"
             line="602">The pre-shared CKN (Connectivity-association Key Name) for
MACsec Key Agreement.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="mode"
                version="1.6"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-macsec.c"
             line="541">Specifies how the CAK (Connectivity Association Key) for MKA (MACsec Key
Agreement) is obtained.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="parent"
                version="1.6"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-macsec.c"
             line="523">If given, specifies the parent interface name or parent connection UUID
from which this MACSEC interface should be created.  If this property is
not specified, the connection must contain an #NMSettingWired setting
with a #NMSettingWired:mac-address property.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="port"
                version="1.6"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-macsec.c"
             line="617">The port component of the SCI (Secure Channel Identifier), between 1 and 65534.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="send-sci"
                version="1.12"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-macsec.c"
             line="647">Specifies whether the SCI (Secure Channel Identifier) is included
in every packet.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="validation"
                version="1.6"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-macsec.c"
             line="632">Specifies the validation mode for incoming frames.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <field name="parent">
        <type name="Setting" c:type="NMSetting"/>
      </field>
    </class>
    <record name="SettingMacsecClass"
            c:type="NMSettingMacsecClass"
            glib:is-gtype-struct-for="SettingMacsec">
      <source-position filename="libnm-core/nm-setting-macsec.h" line="66"/>
      <field name="parent">
        <type name="SettingClass" c:type="NMSettingClass"/>
      </field>
      <field name="padding" readable="0" private="1">
        <array zero-terminated="0" fixed-size="4">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <enumeration name="SettingMacsecMode"
                 version="1.6"
                 glib:type-name="NMSettingMacsecMode"
                 glib:get-type="nm_setting_macsec_mode_get_type"
                 c:type="NMSettingMacsecMode">
      <doc xml:space="preserve"
           filename="libnm-core/nm-setting-macsec.h"
           line="68">#NMSettingMacsecMode controls how the CAK (Connectivity Association Key) used
in MKA (MACsec Key Agreement) is obtained.</doc>
      <member name="psk"
              value="0"
              c:identifier="NM_SETTING_MACSEC_MODE_PSK"
              glib:nick="psk">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-macsec.h"
             line="70">The CAK is pre-shared</doc>
      </member>
      <member name="eap"
              value="1"
              c:identifier="NM_SETTING_MACSEC_MODE_EAP"
              glib:nick="eap">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-macsec.h"
             line="71">The CAK is the result of participation in EAP</doc>
      </member>
    </enumeration>
    <enumeration name="SettingMacsecValidation"
                 version="1.6"
                 glib:type-name="NMSettingMacsecValidation"
                 glib:get-type="nm_setting_macsec_validation_get_type"
                 c:type="NMSettingMacsecValidation">
      <doc xml:space="preserve"
           filename="libnm-core/nm-setting-macsec.h"
           line="83">#NMSettingMacsecValidation specifies a validation mode for incoming frames.</doc>
      <member name="disable"
              value="0"
              c:identifier="NM_SETTING_MACSEC_VALIDATION_DISABLE"
              glib:nick="disable">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-macsec.h"
             line="85">All incoming frames are accepted if
  possible</doc>
      </member>
      <member name="check"
              value="1"
              c:identifier="NM_SETTING_MACSEC_VALIDATION_CHECK"
              glib:nick="check">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-macsec.h"
             line="87">Non protected, invalid, or impossible to
  verify frames are accepted and counted as "invalid"</doc>
      </member>
      <member name="strict"
              value="2"
              c:identifier="NM_SETTING_MACSEC_VALIDATION_STRICT"
              glib:nick="strict">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-macsec.h"
             line="89">Non protected, invalid, or impossible to
  verify frames are dropped</doc>
      </member>
    </enumeration>
    <class name="SettingMacvlan"
           c:symbol-prefix="setting_macvlan"
           c:type="NMSettingMacvlan"
           parent="Setting"
           glib:type-name="NMSettingMacvlan"
           glib:get-type="nm_setting_macvlan_get_type"
           glib:type-struct="SettingMacvlanClass">
      <doc xml:space="preserve"
           filename="libnm-core/nm-setting-macvlan.h"
           line="47">MAC VLAN Settings</doc>
      <source-position filename="libnm-core/nm-setting-macvlan.h" line="61"/>
      <constructor name="new"
                   c:identifier="nm_setting_macvlan_new"
                   version="1.2">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-macvlan.c"
             line="240">Creates a new #NMSettingMacvlan object with default values.</doc>
        <source-position filename="libnm-core/nm-setting-macvlan.h" line="86"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-macvlan.c"
               line="245">the new empty #NMSettingMacvlan object</doc>
          <type name="Setting" c:type="NMSetting*"/>
        </return-value>
      </constructor>
      <method name="get_mode"
              c:identifier="nm_setting_macvlan_get_mode"
              version="1.2">
        <source-position filename="libnm-core/nm-setting-macvlan.h" line="91"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-macvlan.c"
               line="83">the #NMSettingMacvlan:mode property of the setting</doc>
          <type name="SettingMacvlanMode" c:type="NMSettingMacvlanMode"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-macvlan.c"
                 line="81">the #NMSettingMacvlan</doc>
            <type name="SettingMacvlan" c:type="NMSettingMacvlan*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_parent"
              c:identifier="nm_setting_macvlan_get_parent"
              version="1.2">
        <source-position filename="libnm-core/nm-setting-macvlan.h" line="89"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-macvlan.c"
               line="68">the #NMSettingMacvlan:parent property of the setting</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-macvlan.c"
                 line="66">the #NMSettingMacvlan</doc>
            <type name="SettingMacvlan" c:type="NMSettingMacvlan*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_promiscuous"
              c:identifier="nm_setting_macvlan_get_promiscuous"
              version="1.2">
        <source-position filename="libnm-core/nm-setting-macvlan.h" line="93"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-macvlan.c"
               line="98">the #NMSettingMacvlan:promiscuous property of the setting</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-macvlan.c"
                 line="96">the #NMSettingMacvlan</doc>
            <type name="SettingMacvlan" c:type="NMSettingMacvlan*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_tap"
              c:identifier="nm_setting_macvlan_get_tap"
              version="1.2">
        <source-position filename="libnm-core/nm-setting-macvlan.h" line="95"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-macvlan.c"
               line="113">the #NMSettingMacvlan:tap property of the setting</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-macvlan.c"
                 line="111">the #NMSettingMacvlan</doc>
            <type name="SettingMacvlan" c:type="NMSettingMacvlan*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="mode"
                version="1.2"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-macvlan.c"
             line="298">The macvlan mode, which specifies the communication mechanism between multiple
macvlans on the same lower device.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="parent"
                version="1.2"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-macvlan.c"
             line="280">If given, specifies the parent interface name or parent connection UUID
from which this MAC-VLAN interface should be created.  If this property is
not specified, the connection must contain an #NMSettingWired setting
with a #NMSettingWired:mac-address property.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="promiscuous"
                version="1.2"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-macvlan.c"
             line="314">Whether the interface should be put in promiscuous mode.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="tap"
                version="1.2"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-macvlan.c"
             line="329">Whether the interface should be a MACVTAP.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <field name="parent">
        <type name="Setting" c:type="NMSetting"/>
      </field>
    </class>
    <record name="SettingMacvlanClass"
            c:type="NMSettingMacvlanClass"
            glib:is-gtype-struct-for="SettingMacvlan">
      <source-position filename="libnm-core/nm-setting-macvlan.h" line="61"/>
      <field name="parent">
        <type name="SettingClass" c:type="NMSettingClass"/>
      </field>
      <field name="padding" readable="0" private="1">
        <array zero-terminated="0" fixed-size="4">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <enumeration name="SettingMacvlanMode"
                 glib:type-name="NMSettingMacvlanMode"
                 glib:get-type="nm_setting_macvlan_mode_get_type"
                 c:type="NMSettingMacvlanMode">
      <member name="unknown"
              value="0"
              c:identifier="NM_SETTING_MACVLAN_MODE_UNKNOWN"
              glib:nick="unknown">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-macvlan.h"
             line="65">unknown/unset mode</doc>
      </member>
      <member name="vepa"
              value="1"
              c:identifier="NM_SETTING_MACVLAN_MODE_VEPA"
              glib:nick="vepa">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-macvlan.h"
             line="66">Virtual Ethernet Port Aggregator mode</doc>
      </member>
      <member name="bridge"
              value="2"
              c:identifier="NM_SETTING_MACVLAN_MODE_BRIDGE"
              glib:nick="bridge">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-macvlan.h"
             line="67">bridge mode</doc>
      </member>
      <member name="private"
              value="3"
              c:identifier="NM_SETTING_MACVLAN_MODE_PRIVATE"
              glib:nick="private">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-macvlan.h"
             line="68">private mode</doc>
      </member>
      <member name="passthru"
              value="4"
              c:identifier="NM_SETTING_MACVLAN_MODE_PASSTHRU"
              glib:nick="passthru">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-macvlan.h"
             line="69">passthru mode</doc>
      </member>
      <member name="source"
              value="5"
              c:identifier="NM_SETTING_MACVLAN_MODE_SOURCE"
              glib:nick="source">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-macvlan.h"
             line="70">source mode</doc>
      </member>
    </enumeration>
    <class name="SettingMatch"
           c:symbol-prefix="setting_match"
           c:type="NMSettingMatch"
           version="1.14"
           parent="Setting"
           glib:type-name="NMSettingMatch"
           glib:get-type="nm_setting_match_get_type"
           glib:type-struct="SettingMatchClass">
      <doc xml:space="preserve"
           filename="libnm-core/nm-setting-match.c"
           line="34">Match settings.</doc>
      <source-position filename="libnm-core/nm-setting-match.h" line="37"/>
      <constructor name="new"
                   c:identifier="nm_setting_match_new"
                   version="1.14">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-match.c"
             line="243">Creates a new #NMSettingMatch object with default values.</doc>
        <source-position filename="libnm-core/nm-setting-match.h" line="43"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-match.c"
               line="248">the new empty #NMSettingMatch object</doc>
          <type name="Setting" c:type="NMSetting*"/>
        </return-value>
      </constructor>
      <method name="add_interface_name"
              c:identifier="nm_setting_match_add_interface_name"
              version="1.14">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-match.c"
             line="89">Adds a new interface name to the setting.</doc>
        <source-position filename="libnm-core/nm-setting-match.h" line="55"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-match.c"
                 line="91">the #NMSettingMatch</doc>
            <type name="SettingMatch" c:type="NMSettingMatch*"/>
          </instance-parameter>
          <parameter name="interface_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-match.c"
                 line="92">the interface name to add</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="clear_interface_names"
              c:identifier="nm_setting_match_clear_interface_names"
              version="1.14">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-match.c"
             line="161">Removes all configured interface names.</doc>
        <source-position filename="libnm-core/nm-setting-match.h" line="58"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-match.c"
                 line="163">the #NMSettingMatch</doc>
            <type name="SettingMatch" c:type="NMSettingMatch*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_interface_name"
              c:identifier="nm_setting_match_get_interface_name"
              version="1.14">
        <source-position filename="libnm-core/nm-setting-match.h" line="48"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-match.c"
               line="75">the interface name at index @idx</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-match.c"
                 line="72">the #NMSettingMatch</doc>
            <type name="SettingMatch" c:type="NMSettingMatch*"/>
          </instance-parameter>
          <parameter name="idx" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-match.c"
                 line="73">index number of the DNS search domain to return</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_interface_names"
              c:identifier="nm_setting_match_get_interface_names"
              version="1.14">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-match.c"
             line="180">Returns all the interface names.</doc>
        <source-position filename="libnm-core/nm-setting-match.h" line="60"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-match.c"
               line="186">the configured interface names.</doc>
          <array c:type="const char* const*">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-match.c"
                 line="182">the #NMSettingMatch</doc>
            <type name="SettingMatch" c:type="NMSettingMatch*"/>
          </instance-parameter>
          <parameter name="length" transfer-ownership="none">
            <type name="guint" c:type="guint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_num_interface_names"
              c:identifier="nm_setting_match_get_num_interface_names"
              version="1.14">
        <source-position filename="libnm-core/nm-setting-match.h" line="46"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-match.c"
               line="58">the number of configured interface names</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-match.c"
                 line="56">the #NMSettingMatch</doc>
            <type name="SettingMatch" c:type="NMSettingMatch*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="remove_interface_name"
              c:identifier="nm_setting_match_remove_interface_name"
              version="1.14">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-match.c"
             line="110">Removes the interface name at index @idx.</doc>
        <source-position filename="libnm-core/nm-setting-match.h" line="50"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-match.c"
                 line="112">the #NMSettingMatch</doc>
            <type name="SettingMatch" c:type="NMSettingMatch*"/>
          </instance-parameter>
          <parameter name="idx" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-match.c"
                 line="113">index number of the interface name</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_interface_name_by_value"
              c:identifier="nm_setting_match_remove_interface_name_by_value"
              version="1.14">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-match.c"
             line="130">Removes @interface_name.</doc>
        <source-position filename="libnm-core/nm-setting-match.h" line="52"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-match.c"
               line="137">%TRUE if the interface name was found and removed; %FALSE if it was not.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-match.c"
                 line="132">the #NMSettingMatch</doc>
            <type name="SettingMatch" c:type="NMSettingMatch*"/>
          </instance-parameter>
          <parameter name="interface_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-match.c"
                 line="133">the interface name to remove</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <property name="interface-name"
                version="1.14"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-match.c"
             line="278">A list of interface names to match. Each element is a shell wildcard
pattern.  When an element is prefixed with exclamation mark (!) the
condition is inverted.

A candidate interface name is considered matching when both these
conditions are satisfied: (a) any of the elements not prefixed with '!'
matches or there aren't such elements; (b) none of the elements
prefixed with '!' match.</doc>
        <array>
          <type name="utf8"/>
        </array>
      </property>
    </class>
    <record name="SettingMatchClass"
            c:type="NMSettingMatchClass"
            disguised="1"
            glib:is-gtype-struct-for="SettingMatch">
      <source-position filename="libnm-core/nm-setting-match.h" line="37"/>
    </record>
    <class name="SettingOlpcMesh"
           c:symbol-prefix="setting_olpc_mesh"
           c:type="NMSettingOlpcMesh"
           parent="Setting"
           glib:type-name="NMSettingOlpcMesh"
           glib:get-type="nm_setting_olpc_mesh_get_type"
           glib:type-struct="SettingOlpcMeshClass">
      <doc xml:space="preserve"
           filename="libnm-core/nm-setting-olpc-mesh.h"
           line="47">OLPC Wireless Mesh Settings</doc>
      <source-position filename="libnm-core/nm-setting-olpc-mesh.h" line="61"/>
      <constructor name="new" c:identifier="nm_setting_olpc_mesh_new">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-olpc-mesh.c"
             line="192">Creates a new #NMSettingOlpcMesh object with default values.</doc>
        <source-position filename="libnm-core/nm-setting-olpc-mesh.h"
                         line="65"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-olpc-mesh.c"
               line="197">the new empty #NMSettingOlpcMesh object</doc>
          <type name="Setting" c:type="NMSetting*"/>
        </return-value>
      </constructor>
      <method name="get_channel"
              c:identifier="nm_setting_olpc_mesh_get_channel">
        <source-position filename="libnm-core/nm-setting-olpc-mesh.h"
                         line="67"/>
        <return-value transfer-ownership="none">
          <type name="guint32" c:type="guint32"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <type name="SettingOlpcMesh" c:type="NMSettingOlpcMesh*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_dhcp_anycast_address"
              c:identifier="nm_setting_olpc_mesh_get_dhcp_anycast_address">
        <source-position filename="libnm-core/nm-setting-olpc-mesh.h"
                         line="68"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <type name="SettingOlpcMesh" c:type="NMSettingOlpcMesh*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_ssid" c:identifier="nm_setting_olpc_mesh_get_ssid">
        <source-position filename="libnm-core/nm-setting-olpc-mesh.h"
                         line="66"/>
        <return-value transfer-ownership="none">
          <type name="GLib.Bytes" c:type="GBytes*"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-olpc-mesh.c"
                 line="61">the #NMSettingOlpcMesh</doc>
            <type name="SettingOlpcMesh" c:type="NMSettingOlpcMesh*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="channel"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-olpc-mesh.c"
             line="243">Channel on which the mesh network to join is located.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="dhcp-anycast-address"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-olpc-mesh.c"
             line="256">Anycast DHCP MAC address used when requesting an IP address via DHCP.
The specific anycast address used determines which DHCP server class
answers the request.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="ssid" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-olpc-mesh.c"
             line="231">SSID of the mesh network to join.</doc>
        <type name="GLib.Bytes"/>
      </property>
      <field name="parent">
        <type name="Setting" c:type="NMSetting"/>
      </field>
    </class>
    <record name="SettingOlpcMeshClass"
            c:type="NMSettingOlpcMeshClass"
            glib:is-gtype-struct-for="SettingOlpcMesh">
      <source-position filename="libnm-core/nm-setting-olpc-mesh.h" line="61"/>
      <field name="parent">
        <type name="SettingClass" c:type="NMSettingClass"/>
      </field>
      <field name="padding" readable="0" private="1">
        <array zero-terminated="0" fixed-size="4">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <class name="SettingOvsBridge"
           c:symbol-prefix="setting_ovs_bridge"
           c:type="NMSettingOvsBridge"
           parent="Setting"
           glib:type-name="NMSettingOvsBridge"
           glib:get-type="nm_setting_ovs_bridge_get_type"
           glib:type-struct="SettingOvsBridgeClass">
      <doc xml:space="preserve"
           filename="libnm-core/nm-setting-ovs-bridge.c"
           line="46">OvsBridge Link Settings</doc>
      <source-position filename="libnm-core/nm-setting-ovs-bridge.h"
                       line="45"/>
      <constructor name="new"
                   c:identifier="nm_setting_ovs_bridge_new"
                   version="1.10">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-ovs-bridge.c"
             line="239">Creates a new #NMSettingOvsBridge object with default values.</doc>
        <source-position filename="libnm-core/nm-setting-ovs-bridge.h"
                         line="50"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-ovs-bridge.c"
               line="244">the new empty #NMSettingOvsBridge object</doc>
          <type name="Setting" c:type="NMSetting*"/>
        </return-value>
      </constructor>
      <method name="get_fail_mode"
              c:identifier="nm_setting_ovs_bridge_get_fail_mode"
              version="1.10">
        <source-position filename="libnm-core/nm-setting-ovs-bridge.h"
                         line="53"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-ovs-bridge.c"
               line="72">the #NMSettingOvsBridge:fail_mode property of the setting</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ovs-bridge.c"
                 line="70">the #NMSettingOvsBridge</doc>
            <type name="SettingOvsBridge" c:type="NMSettingOvsBridge*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_mcast_snooping_enable"
              c:identifier="nm_setting_ovs_bridge_get_mcast_snooping_enable"
              version="1.10">
        <source-position filename="libnm-core/nm-setting-ovs-bridge.h"
                         line="55"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-ovs-bridge.c"
               line="88">the #NMSettingOvsBridge:mcast_snooping_enable property of the setting</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ovs-bridge.c"
                 line="86">the #NMSettingOvsBridge</doc>
            <type name="SettingOvsBridge" c:type="NMSettingOvsBridge*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_rstp_enable"
              c:identifier="nm_setting_ovs_bridge_get_rstp_enable"
              version="1.10">
        <source-position filename="libnm-core/nm-setting-ovs-bridge.h"
                         line="57"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-ovs-bridge.c"
               line="104">the #NMSettingOvsBridge:rstp_enable property of the setting</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ovs-bridge.c"
                 line="102">the #NMSettingOvsBridge</doc>
            <type name="SettingOvsBridge" c:type="NMSettingOvsBridge*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_stp_enable"
              c:identifier="nm_setting_ovs_bridge_get_stp_enable"
              version="1.10">
        <source-position filename="libnm-core/nm-setting-ovs-bridge.h"
                         line="59"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-ovs-bridge.c"
               line="120">the #NMSettingOvsBridge:stp_enable property of the setting</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ovs-bridge.c"
                 line="118">the #NMSettingOvsBridge</doc>
            <type name="SettingOvsBridge" c:type="NMSettingOvsBridge*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="fail-mode"
                version="1.10"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-ovs-bridge.c"
             line="276">The bridge failure mode. One of "secure", "standalone" or empty.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="mcast-snooping-enable"
                version="1.10"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-ovs-bridge.c"
             line="291">Enable or disable multicast snooping.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="rstp-enable"
                version="1.10"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-ovs-bridge.c"
             line="305">Enable or disable RSTP.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="stp-enable"
                version="1.10"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-ovs-bridge.c"
             line="319">Enable or disable STP.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
    </class>
    <record name="SettingOvsBridgeClass"
            c:type="NMSettingOvsBridgeClass"
            disguised="1"
            glib:is-gtype-struct-for="SettingOvsBridge">
      <source-position filename="libnm-core/nm-setting-ovs-bridge.h"
                       line="45"/>
    </record>
    <class name="SettingOvsInterface"
           c:symbol-prefix="setting_ovs_interface"
           c:type="NMSettingOvsInterface"
           parent="Setting"
           glib:type-name="NMSettingOvsInterface"
           glib:get-type="nm_setting_ovs_interface_get_type"
           glib:type-struct="SettingOvsInterfaceClass">
      <doc xml:space="preserve"
           filename="libnm-core/nm-setting-ovs-interface.c"
           line="42">Open vSwitch Interface Settings</doc>
      <source-position filename="libnm-core/nm-setting-ovs-interface.h"
                       line="42"/>
      <constructor name="new"
                   c:identifier="nm_setting_ovs_interface_new"
                   version="1.10">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-ovs-interface.c"
             line="338">Creates a new #NMSettingOvsInterface object with default values.</doc>
        <source-position filename="libnm-core/nm-setting-ovs-interface.h"
                         line="47"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-ovs-interface.c"
               line="343">the new empty #NMSettingOvsInterface object</doc>
          <type name="Setting" c:type="NMSetting*"/>
        </return-value>
      </constructor>
      <method name="get_interface_type"
              c:identifier="nm_setting_ovs_interface_get_interface_type"
              version="1.10">
        <source-position filename="libnm-core/nm-setting-ovs-interface.h"
                         line="50"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-ovs-interface.c"
               line="65">the #NMSettingOvsInterface:type property of the setting</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ovs-interface.c"
                 line="63">the #NMSettingOvsInterface</doc>
            <type name="SettingOvsInterface" c:type="NMSettingOvsInterface*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="type"
                version="1.10"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-ovs-interface.c"
             line="375">The interface type. Either "internal", or empty.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
    </class>
    <record name="SettingOvsInterfaceClass"
            c:type="NMSettingOvsInterfaceClass"
            disguised="1"
            glib:is-gtype-struct-for="SettingOvsInterface">
      <source-position filename="libnm-core/nm-setting-ovs-interface.h"
                       line="42"/>
    </record>
    <class name="SettingOvsPatch"
           c:symbol-prefix="setting_ovs_patch"
           c:type="NMSettingOvsPatch"
           parent="Setting"
           glib:type-name="NMSettingOvsPatch"
           glib:get-type="nm_setting_ovs_patch_get_type"
           glib:type-struct="SettingOvsPatchClass">
      <doc xml:space="preserve"
           filename="libnm-core/nm-setting-ovs-patch.c"
           line="43">OvsPatch Link Settings</doc>
      <source-position filename="libnm-core/nm-setting-ovs-patch.h" line="42"/>
      <constructor name="new"
                   c:identifier="nm_setting_ovs_patch_new"
                   version="1.10">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-ovs-patch.c"
             line="157">Creates a new #NMSettingOvsPatch object with default values.</doc>
        <source-position filename="libnm-core/nm-setting-ovs-patch.h"
                         line="47"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-ovs-patch.c"
               line="162">the new empty #NMSettingOvsPatch object</doc>
          <type name="Setting" c:type="NMSetting*"/>
        </return-value>
      </constructor>
      <method name="get_peer"
              c:identifier="nm_setting_ovs_patch_get_peer"
              version="1.10">
        <source-position filename="libnm-core/nm-setting-ovs-patch.h"
                         line="50"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-ovs-patch.c"
               line="66">the #NMSettingOvsPatch:peer property of the setting</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ovs-patch.c"
                 line="64">the #NMSettingOvsPatch</doc>
            <type name="SettingOvsPatch" c:type="NMSettingOvsPatch*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="peer"
                version="1.10"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-ovs-patch.c"
             line="194">Specifies the unicast destination IP address of a remote Open vSwitch
bridge port to connect to.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
    </class>
    <record name="SettingOvsPatchClass"
            c:type="NMSettingOvsPatchClass"
            disguised="1"
            glib:is-gtype-struct-for="SettingOvsPatch">
      <source-position filename="libnm-core/nm-setting-ovs-patch.h" line="42"/>
    </record>
    <class name="SettingOvsPort"
           c:symbol-prefix="setting_ovs_port"
           c:type="NMSettingOvsPort"
           parent="Setting"
           glib:type-name="NMSettingOvsPort"
           glib:get-type="nm_setting_ovs_port_get_type"
           glib:type-struct="SettingOvsPortClass">
      <doc xml:space="preserve"
           filename="libnm-core/nm-setting-ovs-port.c"
           line="48">OvsPort Link Settings</doc>
      <source-position filename="libnm-core/nm-setting-ovs-port.h" line="47"/>
      <constructor name="new"
                   c:identifier="nm_setting_ovs_port_new"
                   version="1.10">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-ovs-port.c"
             line="334">Creates a new #NMSettingOvsPort object with default values.</doc>
        <source-position filename="libnm-core/nm-setting-ovs-port.h"
                         line="52"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-ovs-port.c"
               line="339">the new empty #NMSettingOvsPort object</doc>
          <type name="Setting" c:type="NMSetting*"/>
        </return-value>
      </constructor>
      <method name="get_bond_downdelay"
              c:identifier="nm_setting_ovs_port_get_bond_downdelay"
              version="1.10">
        <source-position filename="libnm-core/nm-setting-ovs-port.h"
                         line="65"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-ovs-port.c"
               line="156">the #NMSettingOvsPort:bond-downdelay property of the setting</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ovs-port.c"
                 line="154">the #NMSettingOvsPort</doc>
            <type name="SettingOvsPort" c:type="NMSettingOvsPort*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_bond_mode"
              c:identifier="nm_setting_ovs_port_get_bond_mode"
              version="1.10">
        <source-position filename="libnm-core/nm-setting-ovs-port.h"
                         line="61"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-ovs-port.c"
               line="124">the #NMSettingOvsPort:bond-mode property of the setting</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ovs-port.c"
                 line="122">the #NMSettingOvsPort</doc>
            <type name="SettingOvsPort" c:type="NMSettingOvsPort*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_bond_updelay"
              c:identifier="nm_setting_ovs_port_get_bond_updelay"
              version="1.10">
        <source-position filename="libnm-core/nm-setting-ovs-port.h"
                         line="63"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-ovs-port.c"
               line="140">the #NMSettingOvsPort:bond-updelay property of the setting</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ovs-port.c"
                 line="138">the #NMSettingOvsPort</doc>
            <type name="SettingOvsPort" c:type="NMSettingOvsPort*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_lacp"
              c:identifier="nm_setting_ovs_port_get_lacp"
              version="1.10">
        <source-position filename="libnm-core/nm-setting-ovs-port.h"
                         line="59"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-ovs-port.c"
               line="108">the #NMSettingOvsPort:lacp property of the setting</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ovs-port.c"
                 line="106">the #NMSettingOvsPort</doc>
            <type name="SettingOvsPort" c:type="NMSettingOvsPort*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_tag"
              c:identifier="nm_setting_ovs_port_get_tag"
              version="1.10">
        <source-position filename="libnm-core/nm-setting-ovs-port.h"
                         line="57"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-ovs-port.c"
               line="92">the #NMSettingOvsPort:tag property of the setting</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ovs-port.c"
                 line="90">the #NMSettingOvsPort</doc>
            <type name="SettingOvsPort" c:type="NMSettingOvsPort*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_vlan_mode"
              c:identifier="nm_setting_ovs_port_get_vlan_mode"
              version="1.10">
        <source-position filename="libnm-core/nm-setting-ovs-port.h"
                         line="55"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-ovs-port.c"
               line="76">the #NMSettingOvsPort:vlan-mode property of the setting</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ovs-port.c"
                 line="74">the #NMSettingOvsPort</doc>
            <type name="SettingOvsPort" c:type="NMSettingOvsPort*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="bond-downdelay"
                version="1.10"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-ovs-port.c"
             line="449">The time port must be inactive in order to be considered down.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="bond-mode"
                version="1.10"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-ovs-port.c"
             line="419">Bonding mode. One of "active-backup", "balance-slb", or "balance-tcp".</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="bond-updelay"
                version="1.10"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-ovs-port.c"
             line="434">The time port must be active before it starts forwarding traffic.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="lacp"
                version="1.10"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-ovs-port.c"
             line="404">LACP mode. One of "active", "off", or "passive".</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="tag"
                version="1.10"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-ovs-port.c"
             line="389">The VLAN tag in the range 0-4095.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="vlan-mode"
                version="1.10"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-ovs-port.c"
             line="373">The VLAN mode. One of "access", "native-tagged", "native-untagged",
"trunk" or unset.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
    </class>
    <record name="SettingOvsPortClass"
            c:type="NMSettingOvsPortClass"
            disguised="1"
            glib:is-gtype-struct-for="SettingOvsPort">
      <source-position filename="libnm-core/nm-setting-ovs-port.h" line="47"/>
    </record>
    <class name="SettingPpp"
           c:symbol-prefix="setting_ppp"
           c:type="NMSettingPpp"
           parent="Setting"
           glib:type-name="NMSettingPpp"
           glib:get-type="nm_setting_ppp_get_type"
           glib:type-struct="SettingPppClass">
      <doc xml:space="preserve"
           filename="libnm-core/nm-setting-ppp.h"
           line="62">Point-to-Point Protocol Settings</doc>
      <source-position filename="libnm-core/nm-setting-ppp.h" line="76"/>
      <constructor name="new" c:identifier="nm_setting_ppp_new">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-ppp.c"
             line="518">Creates a new #NMSettingPpp object with default values.</doc>
        <source-position filename="libnm-core/nm-setting-ppp.h" line="80"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-ppp.c"
               line="523">the new empty #NMSettingPpp object</doc>
          <type name="Setting" c:type="NMSetting*"/>
        </return-value>
      </constructor>
      <method name="get_baud" c:identifier="nm_setting_ppp_get_baud">
        <source-position filename="libnm-core/nm-setting-ppp.h" line="94"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-ppp.c"
               line="275">the #NMSettingPpp:baud property of the setting</doc>
          <type name="guint32" c:type="guint32"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ppp.c"
                 line="273">the #NMSettingPpp</doc>
            <type name="SettingPpp" c:type="NMSettingPpp*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_crtscts" c:identifier="nm_setting_ppp_get_crtscts">
        <source-position filename="libnm-core/nm-setting-ppp.h" line="93"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-ppp.c"
               line="261">the #NMSettingPpp:crtscts property of the setting</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ppp.c"
                 line="259">the #NMSettingPpp</doc>
            <type name="SettingPpp" c:type="NMSettingPpp*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_lcp_echo_failure"
              c:identifier="nm_setting_ppp_get_lcp_echo_failure">
        <source-position filename="libnm-core/nm-setting-ppp.h" line="97"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-ppp.c"
               line="317">the #NMSettingPpp:lcp-echo-failure property of the setting</doc>
          <type name="guint32" c:type="guint32"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ppp.c"
                 line="315">the #NMSettingPpp</doc>
            <type name="SettingPpp" c:type="NMSettingPpp*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_lcp_echo_interval"
              c:identifier="nm_setting_ppp_get_lcp_echo_interval">
        <source-position filename="libnm-core/nm-setting-ppp.h" line="98"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-ppp.c"
               line="331">the #NMSettingPpp:lcp-echo-interval property of the setting</doc>
          <type name="guint32" c:type="guint32"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ppp.c"
                 line="329">the #NMSettingPpp</doc>
            <type name="SettingPpp" c:type="NMSettingPpp*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_mppe_stateful"
              c:identifier="nm_setting_ppp_get_mppe_stateful">
        <source-position filename="libnm-core/nm-setting-ppp.h" line="92"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-ppp.c"
               line="247">the #NMSettingPpp:mppe-stateful property of the setting</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ppp.c"
                 line="245">the #NMSettingPpp</doc>
            <type name="SettingPpp" c:type="NMSettingPpp*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_mru" c:identifier="nm_setting_ppp_get_mru">
        <source-position filename="libnm-core/nm-setting-ppp.h" line="95"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-ppp.c"
               line="289">the #NMSettingPpp:mru property of the setting</doc>
          <type name="guint32" c:type="guint32"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ppp.c"
                 line="287">the #NMSettingPpp</doc>
            <type name="SettingPpp" c:type="NMSettingPpp*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_mtu" c:identifier="nm_setting_ppp_get_mtu">
        <source-position filename="libnm-core/nm-setting-ppp.h" line="96"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-ppp.c"
               line="303">the #NMSettingPpp:mtu property of the setting</doc>
          <type name="guint32" c:type="guint32"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ppp.c"
                 line="301">the #NMSettingPpp</doc>
            <type name="SettingPpp" c:type="NMSettingPpp*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_no_vj_comp"
              c:identifier="nm_setting_ppp_get_no_vj_comp">
        <source-position filename="libnm-core/nm-setting-ppp.h" line="89"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-ppp.c"
               line="205">the #NMSettingPpp:no-vj-comp property of the setting</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ppp.c"
                 line="203">the #NMSettingPpp</doc>
            <type name="SettingPpp" c:type="NMSettingPpp*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_noauth" c:identifier="nm_setting_ppp_get_noauth">
        <source-position filename="libnm-core/nm-setting-ppp.h" line="81"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-ppp.c"
               line="93">the #NMSettingPpp:noauth property of the setting</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ppp.c"
                 line="91">the #NMSettingPpp</doc>
            <type name="SettingPpp" c:type="NMSettingPpp*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_nobsdcomp" c:identifier="nm_setting_ppp_get_nobsdcomp">
        <source-position filename="libnm-core/nm-setting-ppp.h" line="87"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-ppp.c"
               line="177">the #NMSettingPpp:nobsdcomp property of the setting</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ppp.c"
                 line="175">the #NMSettingPpp</doc>
            <type name="SettingPpp" c:type="NMSettingPpp*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_nodeflate" c:identifier="nm_setting_ppp_get_nodeflate">
        <source-position filename="libnm-core/nm-setting-ppp.h" line="88"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-ppp.c"
               line="191">the #NMSettingPpp:nodeflate property of the setting</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ppp.c"
                 line="189">the #NMSettingPpp</doc>
            <type name="SettingPpp" c:type="NMSettingPpp*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_refuse_chap"
              c:identifier="nm_setting_ppp_get_refuse_chap">
        <source-position filename="libnm-core/nm-setting-ppp.h" line="84"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-ppp.c"
               line="135">the #NMSettingPpp:refuse-chap property of the setting</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ppp.c"
                 line="133">the #NMSettingPpp</doc>
            <type name="SettingPpp" c:type="NMSettingPpp*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_refuse_eap"
              c:identifier="nm_setting_ppp_get_refuse_eap">
        <source-position filename="libnm-core/nm-setting-ppp.h" line="82"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-ppp.c"
               line="107">the #NMSettingPpp:refuse-eap property of the setting</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ppp.c"
                 line="105">the #NMSettingPpp</doc>
            <type name="SettingPpp" c:type="NMSettingPpp*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_refuse_mschap"
              c:identifier="nm_setting_ppp_get_refuse_mschap">
        <source-position filename="libnm-core/nm-setting-ppp.h" line="85"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-ppp.c"
               line="149">the #NMSettingPpp:refuse-mschap property of the setting</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ppp.c"
                 line="147">the #NMSettingPpp</doc>
            <type name="SettingPpp" c:type="NMSettingPpp*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_refuse_mschapv2"
              c:identifier="nm_setting_ppp_get_refuse_mschapv2">
        <source-position filename="libnm-core/nm-setting-ppp.h" line="86"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-ppp.c"
               line="163">the #NMSettingPpp:refuse-mschapv2 property of the setting</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ppp.c"
                 line="161">the #NMSettingPpp</doc>
            <type name="SettingPpp" c:type="NMSettingPpp*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_refuse_pap"
              c:identifier="nm_setting_ppp_get_refuse_pap">
        <source-position filename="libnm-core/nm-setting-ppp.h" line="83"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-ppp.c"
               line="121">the #NMSettingPpp:refuse-pap property of the setting</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ppp.c"
                 line="119">the #NMSettingPpp</doc>
            <type name="SettingPpp" c:type="NMSettingPpp*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_require_mppe"
              c:identifier="nm_setting_ppp_get_require_mppe">
        <source-position filename="libnm-core/nm-setting-ppp.h" line="90"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-ppp.c"
               line="219">the #NMSettingPpp:require-mppe property of the setting</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ppp.c"
                 line="217">the #NMSettingPpp</doc>
            <type name="SettingPpp" c:type="NMSettingPpp*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_require_mppe_128"
              c:identifier="nm_setting_ppp_get_require_mppe_128">
        <source-position filename="libnm-core/nm-setting-ppp.h" line="91"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-ppp.c"
               line="233">the #NMSettingPpp:require-mppe-128 property of the setting</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-ppp.c"
                 line="231">the #NMSettingPpp</doc>
            <type name="SettingPpp" c:type="NMSettingPpp*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="baud"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-ppp.c"
             line="712">If non-zero, instruct pppd to set the serial port to the specified
baudrate.  This value should normally be left as 0 to automatically
choose the speed.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="crtscts"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-ppp.c"
             line="698">If %TRUE, specify that pppd should set the serial port to use hardware
flow control with RTS and CTS signals.  This value should normally be set
to %FALSE.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="lcp-echo-failure"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-ppp.c"
             line="755">If non-zero, instruct pppd to presume the connection to the peer has
failed if the specified number of LCP echo-requests go unanswered by the
peer.  The "lcp-echo-interval" property must also be set to a non-zero
value if this property is used.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="lcp-echo-interval"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-ppp.c"
             line="771">If non-zero, instruct pppd to send an LCP echo-request frame to the peer
every n seconds (where n is the specified value).  Note that some PPP
peers will respond to echo requests and some will not, and it is not
possible to autodetect this.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="mppe-stateful"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-ppp.c"
             line="685">If %TRUE, stateful MPPE is used.  See pppd documentation for more
information on stateful MPPE.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="mru"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-ppp.c"
             line="727">If non-zero, instruct pppd to request that the peer send packets no
larger than the specified size.  If non-zero, the MRU should be between
128 and 16384.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="mtu"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-ppp.c"
             line="741">If non-zero, instruct pppd to send packets no larger than the specified
size.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="no-vj-comp"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-ppp.c"
             line="644">If %TRUE, Van Jacobsen TCP header compression will not be requested.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="noauth"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-ppp.c"
             line="544">If %TRUE, do not require the other side (usually the PPP server) to
authenticate itself to the client.  If %FALSE, require authentication
from the remote side.  In almost all cases, this should be %TRUE.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="nobsdcomp"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-ppp.c"
             line="618">If %TRUE, BSD compression will not be requested.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="nodeflate"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-ppp.c"
             line="631">If %TRUE, "deflate" compression will not be requested.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="refuse-chap"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-ppp.c"
             line="582">If %TRUE, the CHAP authentication method will not be used.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="refuse-eap"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-ppp.c"
             line="558">If %TRUE, the EAP authentication method will not be used.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="refuse-mschap"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-ppp.c"
             line="594">If %TRUE, the MSCHAP authentication method will not be used.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="refuse-mschapv2"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-ppp.c"
             line="606">If %TRUE, the MSCHAPv2 authentication method will not be used.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="refuse-pap"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-ppp.c"
             line="570">If %TRUE, the PAP authentication method will not be used.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="require-mppe"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-ppp.c"
             line="657">If %TRUE, MPPE (Microsoft Point-to-Point Encryption) will be required for
the PPP session.  If either 64-bit or 128-bit MPPE is not available the
session will fail.  Note that MPPE is not used on mobile broadband
connections.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="require-mppe-128"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-ppp.c"
             line="672">If %TRUE, 128-bit MPPE (Microsoft Point-to-Point Encryption) will be
required for the PPP session, and the "require-mppe" property must also
be set to %TRUE.  If 128-bit MPPE is not available the session will fail.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <field name="parent">
        <type name="Setting" c:type="NMSetting"/>
      </field>
    </class>
    <record name="SettingPppClass"
            c:type="NMSettingPppClass"
            glib:is-gtype-struct-for="SettingPpp">
      <source-position filename="libnm-core/nm-setting-ppp.h" line="76"/>
      <field name="parent">
        <type name="SettingClass" c:type="NMSettingClass"/>
      </field>
      <field name="padding" readable="0" private="1">
        <array zero-terminated="0" fixed-size="4">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <class name="SettingPppoe"
           c:symbol-prefix="setting_pppoe"
           c:type="NMSettingPppoe"
           parent="Setting"
           glib:type-name="NMSettingPppoe"
           glib:get-type="nm_setting_pppoe_get_type"
           glib:type-struct="SettingPppoeClass">
      <doc xml:space="preserve"
           filename="libnm-core/nm-setting-pppoe.h"
           line="49">PPP-over-Ethernet Settings</doc>
      <source-position filename="libnm-core/nm-setting-pppoe.h" line="63"/>
      <constructor name="new" c:identifier="nm_setting_pppoe_new">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-pppoe.c"
             line="266">Creates a new #NMSettingPppoe object with default values.</doc>
        <source-position filename="libnm-core/nm-setting-pppoe.h" line="67"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-pppoe.c"
               line="271">the new empty #NMSettingPppoe object</doc>
          <type name="Setting" c:type="NMSetting*"/>
        </return-value>
      </constructor>
      <method name="get_parent"
              c:identifier="nm_setting_pppoe_get_parent"
              version="1.10">
        <source-position filename="libnm-core/nm-setting-pppoe.h" line="69"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-pppoe.c"
               line="68">the #NMSettingPppoe:parent property of the setting</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-pppoe.c"
                 line="66">the #NMSettingPppoe</doc>
            <type name="SettingPppoe" c:type="NMSettingPppoe*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_password" c:identifier="nm_setting_pppoe_get_password">
        <source-position filename="libnm-core/nm-setting-pppoe.h" line="72"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-pppoe.c"
               line="112">the #NMSettingPppoe:password property of the setting</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-pppoe.c"
                 line="110">the #NMSettingPppoe</doc>
            <type name="SettingPppoe" c:type="NMSettingPppoe*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_password_flags"
              c:identifier="nm_setting_pppoe_get_password_flags">
        <source-position filename="libnm-core/nm-setting-pppoe.h" line="73"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-pppoe.c"
               line="126">the #NMSettingSecretFlags pertaining to the #NMSettingPppoe:password</doc>
          <type name="SettingSecretFlags" c:type="NMSettingSecretFlags"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-pppoe.c"
                 line="124">the #NMSettingPppoe</doc>
            <type name="SettingPppoe" c:type="NMSettingPppoe*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_service" c:identifier="nm_setting_pppoe_get_service">
        <source-position filename="libnm-core/nm-setting-pppoe.h" line="70"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-pppoe.c"
               line="84">the #NMSettingPppoe:service property of the setting</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-pppoe.c"
                 line="82">the #NMSettingPppoe</doc>
            <type name="SettingPppoe" c:type="NMSettingPppoe*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_username" c:identifier="nm_setting_pppoe_get_username">
        <source-position filename="libnm-core/nm-setting-pppoe.h" line="71"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-pppoe.c"
               line="98">the #NMSettingPppoe:username property of the setting</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-pppoe.c"
                 line="96">the #NMSettingPppoe</doc>
            <type name="SettingPppoe" c:type="NMSettingPppoe*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="parent"
                version="1.10"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-pppoe.c"
             line="307">If given, specifies the parent interface name on which this PPPoE
connection should be created.  If this property is not specified,
the connection is activated on the interface specified in
#NMSettingConnection:interface-name of #NMSettingConnection.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="password" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-pppoe.c"
             line="350">Password used to authenticate with the PPPoE service.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="password-flags" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-pppoe.c"
             line="362">Flags indicating how to handle the #NMSettingPppoe:password property.</doc>
        <type name="SettingSecretFlags"/>
      </property>
      <property name="service" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-pppoe.c"
             line="325">If specified, instruct PPPoE to only initiate sessions with access
concentrators that provide the specified service.  For most providers,
this should be left blank.  It is only required if there are multiple
access concentrators or a specific service is known to be required.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="username" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-pppoe.c"
             line="339">Username used to authenticate with the PPPoE service.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent">
        <type name="Setting" c:type="NMSetting"/>
      </field>
    </class>
    <record name="SettingPppoeClass"
            c:type="NMSettingPppoeClass"
            glib:is-gtype-struct-for="SettingPppoe">
      <source-position filename="libnm-core/nm-setting-pppoe.h" line="63"/>
      <field name="parent">
        <type name="SettingClass" c:type="NMSettingClass"/>
      </field>
      <field name="padding" readable="0" private="1">
        <array zero-terminated="0" fixed-size="4">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <class name="SettingProxy"
           c:symbol-prefix="setting_proxy"
           c:type="NMSettingProxy"
           parent="Setting"
           glib:type-name="NMSettingProxy"
           glib:get-type="nm_setting_proxy_get_type"
           glib:type-struct="SettingProxyClass">
      <doc xml:space="preserve"
           filename="libnm-core/nm-setting-proxy.h"
           line="61">WWW Proxy Settings</doc>
      <source-position filename="libnm-core/nm-setting-proxy.h" line="74"/>
      <constructor name="new"
                   c:identifier="nm_setting_proxy_new"
                   version="1.6">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-proxy.c"
             line="264">Creates a new #NMSettingProxy object.</doc>
        <source-position filename="libnm-core/nm-setting-proxy.h" line="80"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-proxy.c"
               line="269">the new empty #NMSettingProxy object</doc>
          <type name="Setting" c:type="NMSetting*"/>
        </return-value>
      </constructor>
      <method name="get_browser_only"
              c:identifier="nm_setting_proxy_get_browser_only"
              version="1.6">
        <source-position filename="libnm-core/nm-setting-proxy.h" line="85"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-proxy.c"
               line="89">%TRUE if this proxy configuration is only for browser
clients/schemes, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-proxy.c"
                 line="87">the #NMSettingProxy</doc>
            <type name="SettingProxy" c:type="NMSettingProxy*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_method"
              c:identifier="nm_setting_proxy_get_method"
              version="1.6">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-proxy.c"
             line="65">Returns the proxy configuration method. By default the value is %NM_SETTING_PROXY_METHOD_NONE.
%NM_SETTING_PROXY_METHOD_NONE should be selected for a connection intended for direct network
access.</doc>
        <source-position filename="libnm-core/nm-setting-proxy.h" line="83"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-proxy.c"
               line="73">the proxy configuration method</doc>
          <type name="SettingProxyMethod" c:type="NMSettingProxyMethod"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-proxy.c"
                 line="67">the #NMSettingProxy</doc>
            <type name="SettingProxy" c:type="NMSettingProxy*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_pac_script"
              c:identifier="nm_setting_proxy_get_pac_script"
              version="1.6">
        <source-position filename="libnm-core/nm-setting-proxy.h" line="89"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-proxy.c"
               line="122">the PAC script</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-proxy.c"
                 line="120">the #NMSettingProxy</doc>
            <type name="SettingProxy" c:type="NMSettingProxy*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_pac_url"
              c:identifier="nm_setting_proxy_get_pac_url"
              version="1.6">
        <source-position filename="libnm-core/nm-setting-proxy.h" line="87"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-proxy.c"
               line="106">the PAC URL for obtaining PAC file</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-proxy.c"
                 line="104">the #NMSettingProxy</doc>
            <type name="SettingProxy" c:type="NMSettingProxy*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="browser-only"
                version="1.6"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-proxy.c"
             line="328">Whether the proxy configuration is for browser only.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="method"
                version="1.6"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-proxy.c"
             line="305">Method for proxy configuration, Default is %NM_SETTING_PROXY_METHOD_NONE</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="pac-script"
                version="1.6"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-proxy.c"
             line="368">PAC script for the connection.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="pac-url"
                version="1.6"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-proxy.c"
             line="348">PAC URL for obtaining PAC file.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent">
        <type name="Setting" c:type="NMSetting"/>
      </field>
    </class>
    <record name="SettingProxyClass"
            c:type="NMSettingProxyClass"
            glib:is-gtype-struct-for="SettingProxy">
      <source-position filename="libnm-core/nm-setting-proxy.h" line="74"/>
      <field name="parent">
        <type name="SettingClass" c:type="NMSettingClass"/>
      </field>
      <field name="padding">
        <array zero-terminated="0" fixed-size="4">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <enumeration name="SettingProxyMethod"
                 version="1.6"
                 glib:type-name="NMSettingProxyMethod"
                 glib:get-type="nm_setting_proxy_method_get_type"
                 c:type="NMSettingProxyMethod">
      <doc xml:space="preserve"
           filename="libnm-core/nm-setting-proxy.h"
           line="33">The Proxy method.</doc>
      <member name="none"
              value="0"
              c:identifier="NM_SETTING_PROXY_METHOD_NONE"
              glib:nick="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-proxy.h"
             line="35">No Proxy for the Connection</doc>
      </member>
      <member name="auto"
              value="1"
              c:identifier="NM_SETTING_PROXY_METHOD_AUTO"
              glib:nick="auto">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-proxy.h"
             line="36">DHCP obtained Proxy/ Manual override</doc>
      </member>
    </enumeration>
    <bitfield name="SettingSecretFlags"
              glib:type-name="NMSettingSecretFlags"
              glib:get-type="nm_setting_secret_flags_get_type"
              c:type="NMSettingSecretFlags">
      <doc xml:space="preserve"
           filename="libnm-core/nm-setting.h"
           line="56">These flags indicate specific behavior related to handling of a secret.  Each
secret has a corresponding set of these flags which indicate how the secret
is to be stored and/or requested when it is needed.</doc>
      <member name="none"
              value="0"
              c:identifier="NM_SETTING_SECRET_FLAG_NONE"
              glib:nick="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting.h"
             line="58">the system is responsible for providing and
storing this secret (default)</doc>
      </member>
      <member name="agent_owned"
              value="1"
              c:identifier="NM_SETTING_SECRET_FLAG_AGENT_OWNED"
              glib:nick="agent-owned">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting.h"
             line="60">a user secret agent is responsible
for providing and storing this secret; when it is required agents will be
asked to retrieve it</doc>
      </member>
      <member name="not_saved"
              value="2"
              c:identifier="NM_SETTING_SECRET_FLAG_NOT_SAVED"
              glib:nick="not-saved">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting.h"
             line="63">this secret should not be saved, but
should be requested from the user each time it is needed</doc>
      </member>
      <member name="not_required"
              value="4"
              c:identifier="NM_SETTING_SECRET_FLAG_NOT_REQUIRED"
              glib:nick="not-required">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting.h"
             line="65">in situations where it cannot be
automatically determined that the secret is required (some VPNs and PPP
providers don't require all secrets) this flag indicates that the specific
secret is not required</doc>
      </member>
    </bitfield>
    <class name="SettingSerial"
           c:symbol-prefix="setting_serial"
           c:type="NMSettingSerial"
           parent="Setting"
           glib:type-name="NMSettingSerial"
           glib:get-type="nm_setting_serial_get_type"
           glib:type-struct="SettingSerialClass">
      <doc xml:space="preserve"
           filename="libnm-core/nm-setting-serial.h"
           line="63">Serial Link Settings</doc>
      <source-position filename="libnm-core/nm-setting-serial.h" line="77"/>
      <constructor name="new" c:identifier="nm_setting_serial_new">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-serial.c"
             line="229">Creates a new #NMSettingSerial object with default values.</doc>
        <source-position filename="libnm-core/nm-setting-serial.h" line="81"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-serial.c"
               line="234">the new empty #NMSettingSerial object</doc>
          <type name="Setting" c:type="NMSetting*"/>
        </return-value>
      </constructor>
      <method name="get_baud" c:identifier="nm_setting_serial_get_baud">
        <source-position filename="libnm-core/nm-setting-serial.h" line="82"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-serial.c"
               line="67">the #NMSettingSerial:baud property of the setting</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-serial.c"
                 line="65">the #NMSettingSerial</doc>
            <type name="SettingSerial" c:type="NMSettingSerial*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_bits" c:identifier="nm_setting_serial_get_bits">
        <source-position filename="libnm-core/nm-setting-serial.h" line="83"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-serial.c"
               line="81">the #NMSettingSerial:bits property of the setting</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-serial.c"
                 line="79">the #NMSettingSerial</doc>
            <type name="SettingSerial" c:type="NMSettingSerial*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_parity" c:identifier="nm_setting_serial_get_parity">
        <source-position filename="libnm-core/nm-setting-serial.h" line="84"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-serial.c"
               line="95">the #NMSettingSerial:parity property of the setting</doc>
          <type name="SettingSerialParity" c:type="NMSettingSerialParity"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-serial.c"
                 line="93">the #NMSettingSerial</doc>
            <type name="SettingSerial" c:type="NMSettingSerial*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_send_delay"
              c:identifier="nm_setting_serial_get_send_delay">
        <source-position filename="libnm-core/nm-setting-serial.h" line="86"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-serial.c"
               line="123">the #NMSettingSerial:send-delay property of the setting</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-serial.c"
                 line="121">the #NMSettingSerial</doc>
            <type name="SettingSerial" c:type="NMSettingSerial*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_stopbits"
              c:identifier="nm_setting_serial_get_stopbits">
        <source-position filename="libnm-core/nm-setting-serial.h" line="85"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-serial.c"
               line="109">the #NMSettingSerial:stopbits property of the setting</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-serial.c"
                 line="107">the #NMSettingSerial</doc>
            <type name="SettingSerial" c:type="NMSettingSerial*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="baud"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-serial.c"
             line="254">Speed to use for communication over the serial port.  Note that this
value usually has no effect for mobile broadband modems as they generally
ignore speed settings and use the highest available speed.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="bits"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-serial.c"
             line="268">Byte-width of the serial communication. The 8 in "8n1" for example.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="parity"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-serial.c"
             line="280">Parity setting of the serial port.</doc>
        <type name="SettingSerialParity"/>
      </property>
      <property name="send-delay"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-serial.c"
             line="327">Time to delay between each byte sent to the modem, in microseconds.</doc>
        <type name="guint64" c:type="guint64"/>
      </property>
      <property name="stopbits"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-serial.c"
             line="314">Number of stop bits for communication on the serial port.  Either 1 or 2.
The 1 in "8n1" for example.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <field name="parent">
        <type name="Setting" c:type="NMSetting"/>
      </field>
    </class>
    <record name="SettingSerialClass"
            c:type="NMSettingSerialClass"
            glib:is-gtype-struct-for="SettingSerial">
      <source-position filename="libnm-core/nm-setting-serial.h" line="77"/>
      <field name="parent">
        <type name="SettingClass" c:type="NMSettingClass"/>
      </field>
      <field name="padding" readable="0" private="1">
        <array zero-terminated="0" fixed-size="4">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <enumeration name="SettingSerialParity"
                 glib:type-name="NMSettingSerialParity"
                 glib:get-type="nm_setting_serial_parity_get_type"
                 c:type="NMSettingSerialParity">
      <doc xml:space="preserve"
           filename="libnm-core/nm-setting-serial.h"
           line="43">The parity setting of a serial port.</doc>
      <member name="none"
              value="0"
              c:identifier="NM_SETTING_SERIAL_PARITY_NONE"
              glib:nick="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-serial.h"
             line="45">No parity bits (default)</doc>
      </member>
      <member name="even"
              value="1"
              c:identifier="NM_SETTING_SERIAL_PARITY_EVEN"
              glib:nick="even">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-serial.h"
             line="46">Even parity</doc>
      </member>
      <member name="odd"
              value="2"
              c:identifier="NM_SETTING_SERIAL_PARITY_ODD"
              glib:nick="odd">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-serial.h"
             line="47">Odd parity</doc>
      </member>
    </enumeration>
    <class name="SettingSriov"
           c:symbol-prefix="setting_sriov"
           c:type="NMSettingSriov"
           version="1.14"
           parent="Setting"
           glib:type-name="NMSettingSriov"
           glib:get-type="nm_setting_sriov_get_type"
           glib:type-struct="SettingSriovClass">
      <doc xml:space="preserve"
           filename="libnm-core/nm-setting-sriov.c"
           line="36">SR-IOV settings.</doc>
      <source-position filename="libnm-core/nm-setting-sriov.h" line="45"/>
      <constructor name="new"
                   c:identifier="nm_setting_sriov_new"
                   version="1.14">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-sriov.c"
             line="1219">Creates a new #NMSettingSriov object with default values.</doc>
        <source-position filename="libnm-core/nm-setting-sriov.h" line="65"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-sriov.c"
               line="1224">the new empty #NMSettingSriov object</doc>
          <type name="Setting" c:type="NMSetting*"/>
        </return-value>
      </constructor>
      <method name="add_vf"
              c:identifier="nm_setting_sriov_add_vf"
              version="1.14">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-sriov.c"
             line="760">Appends a new VF and associated information to the setting.  The
given VF is duplicated internally and is not changed by this function.</doc>
        <source-position filename="libnm-core/nm-setting-sriov.h" line="73"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-sriov.c"
                 line="762">the #NMSettingSriov</doc>
            <type name="SettingSriov" c:type="NMSettingSriov*"/>
          </instance-parameter>
          <parameter name="vf" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-sriov.c"
                 line="763">the VF to add</doc>
            <type name="SriovVF" c:type="NMSriovVF*"/>
          </parameter>
        </parameters>
      </method>
      <method name="clear_vfs"
              c:identifier="nm_setting_sriov_clear_vfs"
              version="1.14">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-sriov.c"
             line="829">Removes all configured VFs.</doc>
        <source-position filename="libnm-core/nm-setting-sriov.h" line="79"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-sriov.c"
                 line="831">the #NMSettingSriov</doc>
            <type name="SettingSriov" c:type="NMSettingSriov*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_autoprobe_drivers"
              c:identifier="nm_setting_sriov_get_autoprobe_drivers"
              version="1.14">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-sriov.c"
             line="848">Returns the value contained in the #NMSettingSriov:autoprobe-drivers
property.</doc>
        <source-position filename="libnm-core/nm-setting-sriov.h" line="81"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-sriov.c"
               line="855">the autoprobe-drivers property value</doc>
          <type name="Ternary" c:type="NMTernary"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-sriov.c"
                 line="850">the #NMSettingSriov</doc>
            <type name="SettingSriov" c:type="NMSettingSriov*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_num_vfs"
              c:identifier="nm_setting_sriov_get_num_vfs"
              version="1.14">
        <source-position filename="libnm-core/nm-setting-sriov.h" line="69"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-sriov.c"
               line="730">the number of configured VFs</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-sriov.c"
                 line="728">the #NMSettingSriov</doc>
            <type name="SettingSriov" c:type="NMSettingSriov*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_total_vfs"
              c:identifier="nm_setting_sriov_get_total_vfs"
              version="1.14">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-sriov.c"
             line="707">Returns the value contained in the #NMSettingSriov:total-vfs
property.</doc>
        <source-position filename="libnm-core/nm-setting-sriov.h" line="67"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-sriov.c"
               line="714">the total number of SR-IOV virtual functions to create</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-sriov.c"
                 line="709">the #NMSettingSriov</doc>
            <type name="SettingSriov" c:type="NMSettingSriov*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_vf"
              c:identifier="nm_setting_sriov_get_vf"
              version="1.14">
        <source-position filename="libnm-core/nm-setting-sriov.h" line="71"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-sriov.c"
               line="747">the VF at index @idx</doc>
          <type name="SriovVF" c:type="NMSriovVF*"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-sriov.c"
                 line="744">the #NMSettingSriov</doc>
            <type name="SettingSriov" c:type="NMSettingSriov*"/>
          </instance-parameter>
          <parameter name="idx" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-sriov.c"
                 line="745">index number of the VF to return</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_vf"
              c:identifier="nm_setting_sriov_remove_vf"
              version="1.14">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-sriov.c"
             line="781">Removes the VF at index @idx.</doc>
        <source-position filename="libnm-core/nm-setting-sriov.h" line="75"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-sriov.c"
                 line="783">the #NMSettingSriov</doc>
            <type name="SettingSriov" c:type="NMSettingSriov*"/>
          </instance-parameter>
          <parameter name="idx" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-sriov.c"
                 line="784">index number of the VF</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_vf_by_index"
              c:identifier="nm_setting_sriov_remove_vf_by_index"
              version="1.14">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-sriov.c"
             line="800">Removes the VF with VF index @index.</doc>
        <source-position filename="libnm-core/nm-setting-sriov.h" line="77"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-sriov.c"
               line="807">%TRUE if the VF was found and removed; %FALSE if it was not</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-sriov.c"
                 line="802">the #NMSettingSriov</doc>
            <type name="SettingSriov" c:type="NMSettingSriov*"/>
          </instance-parameter>
          <parameter name="index" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-sriov.c"
                 line="803">the VF index of the VF to remove</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <property name="autoprobe-drivers"
                version="1.14"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-sriov.c"
             line="1338">Whether to autoprobe virtual functions by a compatible driver.

If set to %NM_TERNARY_TRUE, the kernel will try to bind VFs to
a compatible driver and if this succeeds a new network
interface will be instantiated for each VF.

If set to %NM_TERNARY_FALSE, VFs will not be claimed and no
network interfaces will be created for them.

When set to %NM_TERNARY_DEFAULT, the global default is used; in
case the global default is unspecified it is assumed to be
%NM_TERNARY_TRUE.</doc>
        <type name="Ternary"/>
      </property>
      <property name="total-vfs"
                version="1.14"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-sriov.c"
             line="1258">The total number of virtual functions to create.

Note that when the sriov setting is present NetworkManager
enforces the number of virtual functions on the interface
also when it is zero. To prevent any changes to SR-IOV
parameters don't add a sriov setting to the connection.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="vfs"
                version="1.14"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-sriov.c"
             line="1285">Array of virtual function descriptors.

Each VF descriptor is a dictionary mapping attribute names
to GVariant values. The 'index' entry is mandatory for
each VF.

When represented as string a VF is in the form:

  "INDEX [ATTR=VALUE[ ATTR=VALUE]...]".

for example:

  "2 mac=00:11:22:33:44:55 spoof-check=true".

Multiple VFs can be specified using a comma as separator.
Currently the following attributes are supported: mac,
spoof-check, trust, min-tx-rate, max-tx-rate, vlans.

The "vlans" attribute is represented as a semicolon-separated
list of VLAN descriptors, where each descriptor has the form

  "ID[.PRIORITY[.PROTO]]".

PROTO can be either 'q' for 802.1Q (the default) or 'ad' for
802.1ad.</doc>
        <array name="GLib.PtrArray">
          <type name="SriovVF"/>
        </array>
      </property>
    </class>
    <record name="SettingSriovClass"
            c:type="NMSettingSriovClass"
            disguised="1"
            glib:is-gtype-struct-for="SettingSriov">
      <source-position filename="libnm-core/nm-setting-sriov.h" line="45"/>
    </record>
    <class name="SettingTCConfig"
           c:symbol-prefix="setting_tc_config"
           c:type="NMSettingTCConfig"
           version="1.12"
           parent="Setting"
           glib:type-name="NMSettingTCConfig"
           glib:get-type="nm_setting_tc_config_get_type"
           glib:type-struct="SettingTCConfigClass">
      <doc xml:space="preserve"
           filename="libnm-core/nm-setting-tc-config.c"
           line="818">Linux Traffic Control Settings.</doc>
      <source-position filename="libnm-core/nm-setting-tc-config.h"
                       line="142"/>
      <constructor name="new"
                   c:identifier="nm_setting_tc_config_new"
                   version="1.12">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-tc-config.c"
             line="1574">Creates a new #NMSettingTCConfig object with default values.</doc>
        <source-position filename="libnm-core/nm-setting-tc-config.h"
                         line="147"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-tc-config.c"
               line="1579">the new empty #NMSettingTCConfig object</doc>
          <type name="Setting" c:type="NMSetting*"/>
        </return-value>
      </constructor>
      <method name="add_qdisc"
              c:identifier="nm_setting_tc_config_add_qdisc"
              version="1.12">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-tc-config.c"
             line="873">Appends a new qdisc and associated information to the setting.  The
given qdisc is duplicated internally and is not changed by this function.
If an identical qdisc (considering attributes as well) already exists, the
qdisc is not added and the function returns %FALSE.</doc>
        <source-position filename="libnm-core/nm-setting-tc-config.h"
                         line="155"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-tc-config.c"
               line="883">%TRUE if the qdisc was added; %FALSE if the qdisc was already known.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-tc-config.c"
                 line="875">the #NMSettingTCConfig</doc>
            <type name="SettingTCConfig" c:type="NMSettingTCConfig*"/>
          </instance-parameter>
          <parameter name="qdisc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-tc-config.c"
                 line="876">the qdisc to add</doc>
            <type name="TCQdisc" c:type="NMTCQdisc*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_tfilter"
              c:identifier="nm_setting_tc_config_add_tfilter"
              version="1.12">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-tc-config.c"
             line="1010">Appends a new tfilter and associated information to the setting.  The
given tfilter is duplicated internally and is not changed by this function.
If an identical tfilter (considering attributes as well) already exists, the
tfilter is not added and the function returns %FALSE.</doc>
        <source-position filename="libnm-core/nm-setting-tc-config.h"
                         line="172"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-tc-config.c"
               line="1020">%TRUE if the tfilter was added; %FALSE if the tfilter was already known.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-tc-config.c"
                 line="1012">the #NMSettingTCConfig</doc>
            <type name="SettingTCConfig" c:type="NMSettingTCConfig*"/>
          </instance-parameter>
          <parameter name="tfilter" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-tc-config.c"
                 line="1013">the tfilter to add</doc>
            <type name="TCTfilter" c:type="NMTCTfilter*"/>
          </parameter>
        </parameters>
      </method>
      <method name="clear_qdiscs"
              c:identifier="nm_setting_tc_config_clear_qdiscs"
              version="1.12">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-tc-config.c"
             line="956">Removes all configured queueing disciplines.</doc>
        <source-position filename="libnm-core/nm-setting-tc-config.h"
                         line="164"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-tc-config.c"
                 line="958">the #NMSettingTCConfig</doc>
            <type name="SettingTCConfig" c:type="NMSettingTCConfig*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="clear_tfilters"
              c:identifier="nm_setting_tc_config_clear_tfilters"
              version="1.12">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-tc-config.c"
             line="1092">Removes all configured queueing disciplines.</doc>
        <source-position filename="libnm-core/nm-setting-tc-config.h"
                         line="181"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-tc-config.c"
                 line="1094">the #NMSettingTCConfig</doc>
            <type name="SettingTCConfig" c:type="NMSettingTCConfig*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_num_qdiscs"
              c:identifier="nm_setting_tc_config_get_num_qdiscs"
              version="1.12">
        <source-position filename="libnm-core/nm-setting-tc-config.h"
                         line="150"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-tc-config.c"
               line="843">the number of configured queueing disciplines</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-tc-config.c"
                 line="841">the #NMSettingTCConfig</doc>
            <type name="SettingTCConfig" c:type="NMSettingTCConfig*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_num_tfilters"
              c:identifier="nm_setting_tc_config_get_num_tfilters"
              version="1.12">
        <source-position filename="libnm-core/nm-setting-tc-config.h"
                         line="167"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-tc-config.c"
               line="980">the number of configured queueing disciplines</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-tc-config.c"
                 line="978">the #NMSettingTCConfig</doc>
            <type name="SettingTCConfig" c:type="NMSettingTCConfig*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_qdisc"
              c:identifier="nm_setting_tc_config_get_qdisc"
              version="1.12">
        <source-position filename="libnm-core/nm-setting-tc-config.h"
                         line="152"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-tc-config.c"
               line="860">the qdisc at index @idx</doc>
          <type name="TCQdisc" c:type="NMTCQdisc*"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-tc-config.c"
                 line="857">the #NMSettingTCConfig</doc>
            <type name="SettingTCConfig" c:type="NMSettingTCConfig*"/>
          </instance-parameter>
          <parameter name="idx" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-tc-config.c"
                 line="858">index number of the qdisc to return</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_tfilter"
              c:identifier="nm_setting_tc_config_get_tfilter"
              version="1.12">
        <source-position filename="libnm-core/nm-setting-tc-config.h"
                         line="169"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-tc-config.c"
               line="997">the tfilter at index @idx</doc>
          <type name="TCTfilter" c:type="NMTCTfilter*"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-tc-config.c"
                 line="994">the #NMSettingTCConfig</doc>
            <type name="SettingTCConfig" c:type="NMSettingTCConfig*"/>
          </instance-parameter>
          <parameter name="idx" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-tc-config.c"
                 line="995">index number of the tfilter to return</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_qdisc"
              c:identifier="nm_setting_tc_config_remove_qdisc"
              version="1.12">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-tc-config.c"
             line="906">Removes the qdisc at index @idx.</doc>
        <source-position filename="libnm-core/nm-setting-tc-config.h"
                         line="158"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-tc-config.c"
                 line="908">the #NMSettingTCConfig</doc>
            <type name="SettingTCConfig" c:type="NMSettingTCConfig*"/>
          </instance-parameter>
          <parameter name="idx" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-tc-config.c"
                 line="909">index number of the qdisc</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_qdisc_by_value"
              c:identifier="nm_setting_tc_config_remove_qdisc_by_value"
              version="1.12">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-tc-config.c"
             line="926">Removes the first matching qdisc that matches @qdisc.</doc>
        <source-position filename="libnm-core/nm-setting-tc-config.h"
                         line="161"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-tc-config.c"
               line="933">%TRUE if the qdisc was found and removed; %FALSE if it was not.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-tc-config.c"
                 line="928">the #NMSettingTCConfig</doc>
            <type name="SettingTCConfig" c:type="NMSettingTCConfig*"/>
          </instance-parameter>
          <parameter name="qdisc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-tc-config.c"
                 line="929">the qdisc to remove</doc>
            <type name="TCQdisc" c:type="NMTCQdisc*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_tfilter"
              c:identifier="nm_setting_tc_config_remove_tfilter"
              version="1.12">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-tc-config.c"
             line="1043">Removes the tfilter at index @idx.</doc>
        <source-position filename="libnm-core/nm-setting-tc-config.h"
                         line="175"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-tc-config.c"
                 line="1045">the #NMSettingTCConfig</doc>
            <type name="SettingTCConfig" c:type="NMSettingTCConfig*"/>
          </instance-parameter>
          <parameter name="idx" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-tc-config.c"
                 line="1046">index number of the tfilter</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_tfilter_by_value"
              c:identifier="nm_setting_tc_config_remove_tfilter_by_value"
              version="1.12">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-tc-config.c"
             line="1062">Removes the first matching tfilter that matches @tfilter.</doc>
        <source-position filename="libnm-core/nm-setting-tc-config.h"
                         line="178"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-tc-config.c"
               line="1069">%TRUE if the tfilter was found and removed; %FALSE if it was not.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-tc-config.c"
                 line="1064">the #NMSettingTCConfig</doc>
            <type name="SettingTCConfig" c:type="NMSettingTCConfig*"/>
          </instance-parameter>
          <parameter name="tfilter" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-tc-config.c"
                 line="1065">the tfilter to remove</doc>
            <type name="TCTfilter" c:type="NMTCTfilter*"/>
          </parameter>
        </parameters>
      </method>
      <property name="qdiscs" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-tc-config.c"
             line="1614">Array of TC queueing disciplines.</doc>
        <array name="GLib.PtrArray">
          <type name="TCQdisc"/>
        </array>
      </property>
      <property name="tfilters" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-tc-config.c"
             line="1640">Array of TC traffic filters.</doc>
        <array name="GLib.PtrArray">
          <type name="TCTfilter"/>
        </array>
      </property>
    </class>
    <record name="SettingTCConfigClass"
            c:type="NMSettingTCConfigClass"
            disguised="1"
            glib:is-gtype-struct-for="SettingTCConfig">
      <source-position filename="libnm-core/nm-setting-tc-config.h"
                       line="142"/>
    </record>
    <class name="SettingTeam"
           c:symbol-prefix="setting_team"
           c:type="NMSettingTeam"
           parent="Setting"
           glib:type-name="NMSettingTeam"
           glib:get-type="nm_setting_team_get_type"
           glib:type-struct="SettingTeamClass">
      <doc xml:space="preserve"
           filename="libnm-core/nm-setting-team.h"
           line="166">Teaming Settings</doc>
      <source-position filename="libnm-core/nm-setting-team.h" line="180"/>
      <constructor name="new" c:identifier="nm_setting_team_new">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-team.c"
             line="1614">Creates a new #NMSettingTeam object with default values.</doc>
        <source-position filename="libnm-core/nm-setting-team.h" line="184"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-team.c"
               line="1619">the new empty #NMSettingTeam object</doc>
          <type name="Setting" c:type="NMSetting*"/>
        </return-value>
      </constructor>
      <method name="add_link_watcher"
              c:identifier="nm_setting_team_add_link_watcher"
              version="1.12">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-team.c"
             line="1075">Appends a new link watcher to the setting.</doc>
        <source-position filename="libnm-core/nm-setting-team.h" line="228"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-team.c"
               line="1082">%TRUE if the link watcher is added; %FALSE if an identical link
watcher was already there.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-team.c"
                 line="1077">the #NMSettingTeam</doc>
            <type name="SettingTeam" c:type="NMSettingTeam*"/>
          </instance-parameter>
          <parameter name="link_watcher" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-team.c"
                 line="1078">the link watcher to add</doc>
            <type name="TeamLinkWatcher" c:type="NMTeamLinkWatcher*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_runner_tx_hash"
              c:identifier="nm_setting_team_add_runner_tx_hash"
              version="1.12">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-team.c"
             line="1003">Adds a new txhash element to the setting.</doc>
        <source-position filename="libnm-core/nm-setting-team.h" line="222"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-team.c"
               line="1010">%TRUE if the txhash element was added; %FALSE if the element
was already knnown.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-team.c"
                 line="1005">the #NMSettingTeam</doc>
            <type name="SettingTeam" c:type="NMSettingTeam*"/>
          </instance-parameter>
          <parameter name="txhash" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-team.c"
                 line="1006">the element to add to txhash</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="clear_link_watchers"
              c:identifier="nm_setting_team_clear_link_watchers"
              version="1.12">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-team.c"
             line="1158">Removes all configured link watchers.</doc>
        <source-position filename="libnm-core/nm-setting-team.h" line="236"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-team.c"
                 line="1160">the #NMSettingTeam</doc>
            <type name="SettingTeam" c:type="NMSettingTeam*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_config" c:identifier="nm_setting_team_get_config">
        <source-position filename="libnm-core/nm-setting-team.h" line="186"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-team.c"
               line="694">the #NMSettingTeam:config property of the setting</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-team.c"
                 line="692">the #NMSettingTeam</doc>
            <type name="SettingTeam" c:type="NMSettingTeam*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_link_watcher"
              c:identifier="nm_setting_team_get_link_watcher"
              version="1.12">
        <source-position filename="libnm-core/nm-setting-team.h" line="226"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-team.c"
               line="1060">the link watcher at index @idx.</doc>
          <type name="TeamLinkWatcher" c:type="NMTeamLinkWatcher*"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-team.c"
                 line="1057">the #NMSettingTeam</doc>
            <type name="SettingTeam" c:type="NMSettingTeam*"/>
          </instance-parameter>
          <parameter name="idx" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-team.c"
                 line="1058">index number of the link watcher to return</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_mcast_rejoin_count"
              c:identifier="nm_setting_team_get_mcast_rejoin_count"
              version="1.12">
        <source-position filename="libnm-core/nm-setting-team.h" line="192"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-team.c"
               line="740">the ##NMSettingTeam:mcast-rejoin-count property of the setting</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-team.c"
                 line="738">the #NMSettingTeam</doc>
            <type name="SettingTeam" c:type="NMSettingTeam*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_mcast_rejoin_interval"
              c:identifier="nm_setting_team_get_mcast_rejoin_interval"
              version="1.12">
        <source-position filename="libnm-core/nm-setting-team.h" line="194"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-team.c"
               line="756">the ##NMSettingTeam:mcast-rejoin-interval property of the setting</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-team.c"
                 line="754">the #NMSettingTeam</doc>
            <type name="SettingTeam" c:type="NMSettingTeam*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_notify_peers_count"
              c:identifier="nm_setting_team_get_notify_peers_count"
              version="1.12">
        <source-position filename="libnm-core/nm-setting-team.h" line="188"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-team.c"
               line="708">the ##NMSettingTeam:notify-peers-count property of the setting</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-team.c"
                 line="706">the #NMSettingTeam</doc>
            <type name="SettingTeam" c:type="NMSettingTeam*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_notify_peers_interval"
              c:identifier="nm_setting_team_get_notify_peers_interval"
              version="1.12">
        <source-position filename="libnm-core/nm-setting-team.h" line="190"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-team.c"
               line="724">the ##NMSettingTeam:notify-peers-interval property of the setting</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-team.c"
                 line="722">the #NMSettingTeam</doc>
            <type name="SettingTeam" c:type="NMSettingTeam*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_num_link_watchers"
              c:identifier="nm_setting_team_get_num_link_watchers"
              version="1.12">
        <source-position filename="libnm-core/nm-setting-team.h" line="224"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-team.c"
               line="1041">the number of configured link watchers</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-team.c"
                 line="1039">the #NMSettingTeam</doc>
            <type name="SettingTeam" c:type="NMSettingTeam*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_num_runner_tx_hash"
              c:identifier="nm_setting_team_get_num_runner_tx_hash"
              version="1.12">
        <source-position filename="libnm-core/nm-setting-team.h" line="216"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-team.c"
               line="948">the number of elements in txhash</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-team.c"
                 line="946">the #NMSettingTeam</doc>
            <type name="SettingTeam" c:type="NMSettingTeam*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_runner"
              c:identifier="nm_setting_team_get_runner"
              version="1.12">
        <source-position filename="libnm-core/nm-setting-team.h" line="196"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-team.c"
               line="772">the ##NMSettingTeam:runner property of the setting</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-team.c"
                 line="770">the #NMSettingTeam</doc>
            <type name="SettingTeam" c:type="NMSettingTeam*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_runner_active"
              c:identifier="nm_setting_team_get_runner_active"
              version="1.12">
        <source-position filename="libnm-core/nm-setting-team.h" line="204"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-team.c"
               line="836">the ##NMSettingTeam:runner_active property of the setting</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-team.c"
                 line="834">the #NMSettingTeam</doc>
            <type name="SettingTeam" c:type="NMSettingTeam*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_runner_agg_select_policy"
              c:identifier="nm_setting_team_get_runner_agg_select_policy"
              version="1.12">
        <source-position filename="libnm-core/nm-setting-team.h" line="212"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-team.c"
               line="900">the ##NMSettingTeam:runner-agg-select-policy property of the setting</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-team.c"
                 line="898">the #NMSettingTeam</doc>
            <type name="SettingTeam" c:type="NMSettingTeam*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_runner_fast_rate"
              c:identifier="nm_setting_team_get_runner_fast_rate"
              version="1.12">
        <source-position filename="libnm-core/nm-setting-team.h" line="206"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-team.c"
               line="852">the ##NMSettingTeam:runner-fast-rate property of the setting</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-team.c"
                 line="850">the #NMSettingTeam</doc>
            <type name="SettingTeam" c:type="NMSettingTeam*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_runner_hwaddr_policy"
              c:identifier="nm_setting_team_get_runner_hwaddr_policy"
              version="1.12">
        <source-position filename="libnm-core/nm-setting-team.h" line="198"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-team.c"
               line="788">the ##NMSettingTeam:runner-hwaddr-policy property of the setting</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-team.c"
                 line="786">the #NMSettingTeam</doc>
            <type name="SettingTeam" c:type="NMSettingTeam*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_runner_min_ports"
              c:identifier="nm_setting_team_get_runner_min_ports"
              version="1.12">
        <source-position filename="libnm-core/nm-setting-team.h" line="210"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-team.c"
               line="884">the ##NMSettingTeam:runner-min-ports property of the setting</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-team.c"
                 line="882">the #NMSettingTeam</doc>
            <type name="SettingTeam" c:type="NMSettingTeam*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_runner_sys_prio"
              c:identifier="nm_setting_team_get_runner_sys_prio"
              version="1.12">
        <source-position filename="libnm-core/nm-setting-team.h" line="208"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-team.c"
               line="868">the ##NMSettingTeam:runner-sys-prio property of the setting</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-team.c"
                 line="866">the #NMSettingTeam</doc>
            <type name="SettingTeam" c:type="NMSettingTeam*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_runner_tx_balancer"
              c:identifier="nm_setting_team_get_runner_tx_balancer"
              version="1.12">
        <source-position filename="libnm-core/nm-setting-team.h" line="200"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-team.c"
               line="804">the ##NMSettingTeam:runner-tx-balancer property of the setting</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-team.c"
                 line="802">the #NMSettingTeam</doc>
            <type name="SettingTeam" c:type="NMSettingTeam*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_runner_tx_balancer_interval"
              c:identifier="nm_setting_team_get_runner_tx_balancer_interval"
              version="1.12">
        <source-position filename="libnm-core/nm-setting-team.h" line="202"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-team.c"
               line="820">the ##NMSettingTeam:runner-tx-balancer_interval property of the setting</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-team.c"
                 line="818">the #NMSettingTeam</doc>
            <type name="SettingTeam" c:type="NMSettingTeam*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_runner_tx_hash"
              c:identifier="nm_setting_team_get_runner_tx_hash"
              version="1.12">
        <source-position filename="libnm-core/nm-setting-team.h" line="218"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-team.c"
               line="967">the txhash element at index @idx</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-team.c"
                 line="964">the #NMSettingTeam</doc>
            <type name="SettingTeam" c:type="NMSettingTeam*"/>
          </instance-parameter>
          <parameter name="idx" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-team.c"
                 line="965">index number of the txhash element to return</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_link_watcher"
              c:identifier="nm_setting_team_remove_link_watcher"
              version="1.12">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-team.c"
             line="1107">Removes the link watcher at index #idx.</doc>
        <source-position filename="libnm-core/nm-setting-team.h" line="231"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-team.c"
                 line="1109">the #NMSettingTeam</doc>
            <type name="SettingTeam" c:type="NMSettingTeam*"/>
          </instance-parameter>
          <parameter name="idx" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-team.c"
                 line="1110">index number of the link watcher to remove</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_link_watcher_by_value"
              c:identifier="nm_setting_team_remove_link_watcher_by_value"
              version="1.12">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-team.c"
             line="1128">Removes the link watcher entry matching link_watcher.</doc>
        <source-position filename="libnm-core/nm-setting-team.h" line="233"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-team.c"
               line="1135">%TRUE if the link watcher was found and removed, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-team.c"
                 line="1130">the #NMSettingTeam</doc>
            <type name="SettingTeam" c:type="NMSettingTeam*"/>
          </instance-parameter>
          <parameter name="link_watcher" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-team.c"
                 line="1131">the link watcher to remove</doc>
            <type name="TeamLinkWatcher" c:type="NMTeamLinkWatcher*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_runner_tx_hash"
              c:identifier="nm_setting_team_remove_runner_tx_hash"
              version="1.12">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-team.c"
             line="982">Removes the txhash element at index @idx.</doc>
        <source-position filename="libnm-core/nm-setting-team.h" line="220"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-team.c"
                 line="984">the #NMSettingTeam</doc>
            <type name="SettingTeam" c:type="NMSettingTeam*"/>
          </instance-parameter>
          <parameter name="idx" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-team.c"
                 line="985">index number of the element to remove from txhash</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_runner_tx_hash_by_value"
              c:identifier="nm_setting_team_remove_runner_tx_hash_by_value"
              version="1.12">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-team.c"
             line="912">Removes the txhash element #txhash</doc>
        <source-position filename="libnm-core/nm-setting-team.h" line="214"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-team.c"
               line="919">%TRUE if the txhash element was found and removed; %FALSE if it was not.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-team.c"
                 line="914">the #NMSetetingTeam</doc>
            <type name="SettingTeam" c:type="NMSettingTeam*"/>
          </instance-parameter>
          <parameter name="txhash" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-team.c"
                 line="915">the txhash element to remove</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <property name="config" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-team.c"
             line="1660">The JSON configuration for the team network interface.  The property
should contain raw JSON configuration data suitable for teamd, because
the value is passed directly to teamd. If not specified, the default
configuration is used.  See man teamd.conf for the format details.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="link-watchers"
                version="1.12"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-team.c"
             line="1870">Link watchers configuration for the connection: each link watcher is
defined by a dictionary, whose keys depend upon the selected link
watcher. Available link watchers are 'ethtool', 'nsna_ping' and
'arp_ping' and it is specified in the dictionary with the key 'name'.
Available keys are:   ethtool: 'delay-up', 'delay-down', 'init-wait';
nsna_ping: 'init-wait', 'interval', 'missed-max', 'target-host';
arp_ping: all the ones in nsna_ping and 'source-host', 'validate-active',
'validate-inactive', 'send-always'. See teamd.conf man for more details.</doc>
        <array name="GLib.PtrArray">
          <type name="TeamLinkWatcher"/>
        </array>
      </property>
      <property name="mcast-rejoin-count"
                version="1.12"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-team.c"
             line="1707">Corresponds to the teamd mcast_rejoin.count.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="mcast-rejoin-interval"
                version="1.12"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-team.c"
             line="1720">Corresponds to the teamd mcast_rejoin.interval.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="notify-peers-count"
                version="1.12"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-team.c"
             line="1681">Corresponds to the teamd notify_peers.count.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="notify-peers-interval"
                version="1.12"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-team.c"
             line="1694">Corresponds to the teamd notify_peers.interval.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="runner"
                version="1.12"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-team.c"
             line="1733">Corresponds to the teamd runner.name.
Permitted values are: "roundrobin", "broadcast", "activebackup",
"loadbalance", "lacp", "random".
When setting the runner, all the properties specific to the runner
will be reset to the default value; all the properties specific to
other runners will be set to an empty value (or if not possible to
a default value).</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="runner-active"
                version="1.12"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-team.c"
             line="1805">Corresponds to the teamd runner.active.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="runner-agg-select-policy"
                version="1.12"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-team.c"
             line="1857">Corresponds to the teamd runner.agg_select_policy.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="runner-fast-rate"
                version="1.12"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-team.c"
             line="1818">Corresponds to the teamd runner.fast_rate.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="runner-hwaddr-policy"
                version="1.12"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-team.c"
             line="1752">Corresponds to the teamd runner.hwaddr_policy.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="runner-min-ports"
                version="1.12"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-team.c"
             line="1844">Corresponds to the teamd runner.min_ports.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="runner-sys-prio"
                version="1.12"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-team.c"
             line="1831">Corresponds to the teamd runner.sys_prio.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="runner-tx-balancer"
                version="1.12"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-team.c"
             line="1779">Corresponds to the teamd runner.tx_balancer.name.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="runner-tx-balancer-interval"
                version="1.12"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-team.c"
             line="1792">Corresponds to the teamd runner.tx_balancer.interval.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="runner-tx-hash"
                version="1.12"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-team.c"
             line="1765">Corresponds to the teamd runner.tx_hash.</doc>
        <array>
          <type name="utf8"/>
        </array>
      </property>
      <field name="parent">
        <type name="Setting" c:type="NMSetting"/>
      </field>
    </class>
    <record name="SettingTeamClass"
            c:type="NMSettingTeamClass"
            glib:is-gtype-struct-for="SettingTeam">
      <source-position filename="libnm-core/nm-setting-team.h" line="180"/>
      <field name="parent">
        <type name="SettingClass" c:type="NMSettingClass"/>
      </field>
      <field name="padding" readable="0" private="1">
        <array zero-terminated="0" fixed-size="4">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <class name="SettingTeamPort"
           c:symbol-prefix="setting_team_port"
           c:type="NMSettingTeamPort"
           parent="Setting"
           glib:type-name="NMSettingTeamPort"
           glib:get-type="nm_setting_team_port_get_type"
           glib:type-struct="SettingTeamPortClass">
      <doc xml:space="preserve"
           filename="libnm-core/nm-setting-team-port.h"
           line="53">Team Port Settings</doc>
      <source-position filename="libnm-core/nm-setting-team-port.h" line="67"/>
      <constructor name="new" c:identifier="nm_setting_team_port_new">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-team-port.c"
             line="586">Creates a new #NMSettingTeamPort object with default values.</doc>
        <source-position filename="libnm-core/nm-setting-team-port.h"
                         line="71"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-team-port.c"
               line="591">the new empty #NMSettingTeamPort object</doc>
          <type name="Setting" c:type="NMSetting*"/>
        </return-value>
      </constructor>
      <method name="add_link_watcher"
              c:identifier="nm_setting_team_port_add_link_watcher"
              version="1.12">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-team-port.c"
             line="212">Appends a new link watcher to the setting.</doc>
        <source-position filename="libnm-core/nm-setting-team-port.h"
                         line="91"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-team-port.c"
               line="219">%TRUE if the link watcher is added; %FALSE if an identical link
watcher was already there.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-team-port.c"
                 line="214">the #NMSettingTeamPort</doc>
            <type name="SettingTeamPort" c:type="NMSettingTeamPort*"/>
          </instance-parameter>
          <parameter name="link_watcher" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-team-port.c"
                 line="215">the link watcher to add</doc>
            <type name="TeamLinkWatcher" c:type="NMTeamLinkWatcher*"/>
          </parameter>
        </parameters>
      </method>
      <method name="clear_link_watchers"
              c:identifier="nm_setting_team_port_clear_link_watchers"
              version="1.12">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-team-port.c"
             line="295">Removes all configured link watchers.</doc>
        <source-position filename="libnm-core/nm-setting-team-port.h"
                         line="101"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-team-port.c"
                 line="297">the #NMSettingTeamPort</doc>
            <type name="SettingTeamPort" c:type="NMSettingTeamPort*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_config" c:identifier="nm_setting_team_port_get_config">
        <source-position filename="libnm-core/nm-setting-team-port.h"
                         line="73"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-team-port.c"
               line="84">the #NMSettingTeamPort:config property of the setting</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-team-port.c"
                 line="82">the #NMSettingTeamPort</doc>
            <type name="SettingTeamPort" c:type="NMSettingTeamPort*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_lacp_key"
              c:identifier="nm_setting_team_port_get_lacp_key"
              version="1.12">
        <source-position filename="libnm-core/nm-setting-team-port.h"
                         line="83"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-team-port.c"
               line="162">the #NMSettingTeamPort:lacp-key property of the setting</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-team-port.c"
                 line="160">the #NMSettingTeamPort</doc>
            <type name="SettingTeamPort" c:type="NMSettingTeamPort*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_lacp_prio"
              c:identifier="nm_setting_team_port_get_lacp_prio"
              version="1.12">
        <source-position filename="libnm-core/nm-setting-team-port.h"
                         line="81"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-team-port.c"
               line="146">the #NMSettingTeamPort:lacp-prio property of the setting</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-team-port.c"
                 line="144">the #NMSettingTeamPort</doc>
            <type name="SettingTeamPort" c:type="NMSettingTeamPort*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_link_watcher"
              c:identifier="nm_setting_team_port_get_link_watcher"
              version="1.12">
        <source-position filename="libnm-core/nm-setting-team-port.h"
                         line="88"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-team-port.c"
               line="197">the link watcher at index @idx.</doc>
          <type name="TeamLinkWatcher" c:type="NMTeamLinkWatcher*"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-team-port.c"
                 line="194">the #NMSettingTeamPort</doc>
            <type name="SettingTeamPort" c:type="NMSettingTeamPort*"/>
          </instance-parameter>
          <parameter name="idx" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-team-port.c"
                 line="195">index number of the link watcher to return</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_num_link_watchers"
              c:identifier="nm_setting_team_port_get_num_link_watchers"
              version="1.12">
        <source-position filename="libnm-core/nm-setting-team-port.h"
                         line="85"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-team-port.c"
               line="178">the number of configured link watchers</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-team-port.c"
                 line="176">the #NMSettingTeamPort</doc>
            <type name="SettingTeamPort" c:type="NMSettingTeamPort*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_prio"
              c:identifier="nm_setting_team_port_get_prio"
              version="1.12">
        <source-position filename="libnm-core/nm-setting-team-port.h"
                         line="77"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-team-port.c"
               line="114">the #NMSettingTeamPort:prio property of the setting</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-team-port.c"
                 line="112">the #NMSettingTeamPort</doc>
            <type name="SettingTeamPort" c:type="NMSettingTeamPort*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_queue_id"
              c:identifier="nm_setting_team_port_get_queue_id"
              version="1.12">
        <source-position filename="libnm-core/nm-setting-team-port.h"
                         line="75"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-team-port.c"
               line="98">the #NMSettingTeamPort:queue_id property of the setting</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-team-port.c"
                 line="96">the #NMSettingTeamPort</doc>
            <type name="SettingTeamPort" c:type="NMSettingTeamPort*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_sticky"
              c:identifier="nm_setting_team_port_get_sticky"
              version="1.12">
        <source-position filename="libnm-core/nm-setting-team-port.h"
                         line="79"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-team-port.c"
               line="130">the #NMSettingTeamPort:sticky property of the setting</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-team-port.c"
                 line="128">the #NMSettingTeamPort</doc>
            <type name="SettingTeamPort" c:type="NMSettingTeamPort*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="remove_link_watcher"
              c:identifier="nm_setting_team_port_remove_link_watcher"
              version="1.12">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-team-port.c"
             line="244">Removes the link watcher at index #idx.</doc>
        <source-position filename="libnm-core/nm-setting-team-port.h"
                         line="95"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-team-port.c"
                 line="246">the #NMSettingTeamPort</doc>
            <type name="SettingTeamPort" c:type="NMSettingTeamPort*"/>
          </instance-parameter>
          <parameter name="idx" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-team-port.c"
                 line="247">index number of the link watcher to remove</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_link_watcher_by_value"
              c:identifier="nm_setting_team_port_remove_link_watcher_by_value"
              version="1.12">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-team-port.c"
             line="265">Removes the link watcher entry matching link_watcher.</doc>
        <source-position filename="libnm-core/nm-setting-team-port.h"
                         line="98"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-team-port.c"
               line="272">%TRUE if the link watcher was found and removed, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-team-port.c"
                 line="267">the #NMSettingTeamPort</doc>
            <type name="SettingTeamPort" c:type="NMSettingTeamPort*"/>
          </instance-parameter>
          <parameter name="link_watcher" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-team-port.c"
                 line="268">the link watcher to remove</doc>
            <type name="TeamLinkWatcher" c:type="NMTeamLinkWatcher*"/>
          </parameter>
        </parameters>
      </method>
      <property name="config" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-team-port.c"
             line="626">The JSON configuration for the team port. The property should contain raw
JSON configuration data suitable for teamd, because the value is passed
directly to teamd. If not specified, the default configuration is
used. See man teamd.conf for the format details.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="lacp-key"
                version="1.12"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-team-port.c"
             line="700">Corresponds to the teamd ports.PORTIFNAME.lacp_key.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="lacp-prio"
                version="1.12"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-team-port.c"
             line="687">Corresponds to the teamd ports.PORTIFNAME.lacp_prio.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="link-watchers"
                version="1.12"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-team-port.c"
             line="713">Link watchers configuration for the connection: each link watcher is
defined by a dictionary, whose keys depend upon the selected link
watcher. Available link watchers are 'ethtool', 'nsna_ping' and
'arp_ping' and it is specified in the dictionary with the key 'name'.
Available keys are:   ethtool: 'delay-up', 'delay-down', 'init-wait';
nsna_ping: 'init-wait', 'interval', 'missed-max', 'target-host';
arp_ping: all the ones in nsna_ping and 'source-host', 'validate-active',
'validate-inactive', 'send-always'. See teamd.conf man for more details.</doc>
        <array name="GLib.PtrArray">
          <type name="TeamLinkWatcher"/>
        </array>
      </property>
      <property name="prio"
                version="1.12"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-team-port.c"
             line="661">Corresponds to the teamd ports.PORTIFNAME.prio.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="queue-id"
                version="1.12"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-team-port.c"
             line="647">Corresponds to the teamd ports.PORTIFNAME.queue_id.
When set to -1 means the parameter is skipped from the json config.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="sticky"
                version="1.12"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-team-port.c"
             line="674">Corresponds to the teamd ports.PORTIFNAME.sticky.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <field name="parent">
        <type name="Setting" c:type="NMSetting"/>
      </field>
    </class>
    <record name="SettingTeamPortClass"
            c:type="NMSettingTeamPortClass"
            glib:is-gtype-struct-for="SettingTeamPort">
      <source-position filename="libnm-core/nm-setting-team-port.h" line="67"/>
      <field name="parent">
        <type name="SettingClass" c:type="NMSettingClass"/>
      </field>
      <field name="padding" readable="0" private="1">
        <array zero-terminated="0" fixed-size="4">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <class name="SettingTun"
           c:symbol-prefix="setting_tun"
           c:type="NMSettingTun"
           parent="Setting"
           glib:type-name="NMSettingTun"
           glib:get-type="nm_setting_tun_get_type"
           glib:type-struct="SettingTunClass">
      <doc xml:space="preserve"
           filename="libnm-core/nm-setting-tun.h"
           line="63">Tunnel Settings</doc>
      <source-position filename="libnm-core/nm-setting-tun.h" line="77"/>
      <constructor name="new" c:identifier="nm_setting_tun_new" version="1.2">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-tun.c"
             line="271">Creates a new #NMSettingTun object with default values.</doc>
        <source-position filename="libnm-core/nm-setting-tun.h" line="82"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-tun.c"
               line="276">the new empty #NMSettingTun object</doc>
          <type name="Setting" c:type="NMSetting*"/>
        </return-value>
      </constructor>
      <method name="get_group"
              c:identifier="nm_setting_tun_get_group"
              version="1.2">
        <source-position filename="libnm-core/nm-setting-tun.h" line="89"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-tun.c"
               line="101">the #NMSettingTun:group property of the setting</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-tun.c"
                 line="99">the #NMSettingTun</doc>
            <type name="SettingTun" c:type="NMSettingTun*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_mode"
              c:identifier="nm_setting_tun_get_mode"
              version="1.2">
        <source-position filename="libnm-core/nm-setting-tun.h" line="85"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-tun.c"
               line="71">the #NMSettingTun:mode property of the setting</doc>
          <type name="SettingTunMode" c:type="NMSettingTunMode"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-tun.c"
                 line="69">the #NMSettingTun</doc>
            <type name="SettingTun" c:type="NMSettingTun*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_multi_queue"
              c:identifier="nm_setting_tun_get_multi_queue"
              version="1.2">
        <source-position filename="libnm-core/nm-setting-tun.h" line="95"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-tun.c"
               line="146">the #NMSettingTun:multi-queue property of the setting</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-tun.c"
                 line="144">the #NMSettingTun</doc>
            <type name="SettingTun" c:type="NMSettingTun*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_owner"
              c:identifier="nm_setting_tun_get_owner"
              version="1.2">
        <source-position filename="libnm-core/nm-setting-tun.h" line="87"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-tun.c"
               line="86">the #NMSettingTun:owner property of the setting</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-tun.c"
                 line="84">the #NMSettingTun</doc>
            <type name="SettingTun" c:type="NMSettingTun*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_pi" c:identifier="nm_setting_tun_get_pi" version="1.2">
        <source-position filename="libnm-core/nm-setting-tun.h" line="91"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-tun.c"
               line="116">the #NMSettingTun:pi property of the setting</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-tun.c"
                 line="114">the #NMSettingTun</doc>
            <type name="SettingTun" c:type="NMSettingTun*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_vnet_hdr"
              c:identifier="nm_setting_tun_get_vnet_hdr"
              version="1.2">
        <source-position filename="libnm-core/nm-setting-tun.h" line="93"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-tun.c"
               line="131">the #NMSettingTun:vnet_hdr property of the setting</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-tun.c"
                 line="129">the #NMSettingTun</doc>
            <type name="SettingTun" c:type="NMSettingTun*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="group"
                version="1.2"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-tun.c"
             line="345">The group ID which will own the device. If set to %NULL everyone
will be able to use the device.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="mode"
                version="1.2"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-tun.c"
             line="312">The operating mode of the virtual device. Allowed values are
%NM_SETTING_TUN_MODE_TUN to create a layer 3 device and
%NM_SETTING_TUN_MODE_TAP to create an Ethernet-like layer 2
one.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="multi-queue"
                version="1.2"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-tun.c"
             line="390">If the property is set to %TRUE, the interface will support
multiple file descriptors (queues) to parallelize packet
sending or receiving. Otherwise, the interface will only
support a single queue.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="owner"
                version="1.2"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-tun.c"
             line="330">The user ID which will own the device. If set to %NULL everyone
will be able to use the device.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="pi" version="1.2" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-tun.c"
             line="360">If %TRUE the interface will prepend a 4 byte header describing the
physical interface to the packets.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="vnet-hdr"
                version="1.2"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-tun.c"
             line="375">If %TRUE the IFF_VNET_HDR the tunnel packets will include a virtio
network header.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <field name="parent">
        <type name="Setting" c:type="NMSetting"/>
      </field>
    </class>
    <record name="SettingTunClass"
            c:type="NMSettingTunClass"
            glib:is-gtype-struct-for="SettingTun">
      <source-position filename="libnm-core/nm-setting-tun.h" line="77"/>
      <field name="parent">
        <type name="SettingClass" c:type="NMSettingClass"/>
      </field>
      <field name="padding" readable="0" private="1">
        <array zero-terminated="0" fixed-size="4">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <enumeration name="SettingTunMode"
                 glib:type-name="NMSettingTunMode"
                 glib:get-type="nm_setting_tun_mode_get_type"
                 c:type="NMSettingTunMode">
      <doc xml:space="preserve"
           filename="libnm-core/nm-setting-tun.h"
           line="49">#NMSettingTunMode values indicate the device type (TUN/TAP)</doc>
      <member name="unknown"
              value="0"
              c:identifier="NM_SETTING_TUN_MODE_UNKNOWN"
              glib:nick="unknown">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-tun.h"
             line="51">an unknown device type</doc>
      </member>
      <member name="tun"
              value="1"
              c:identifier="NM_SETTING_TUN_MODE_TUN"
              glib:nick="tun">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-tun.h"
             line="52">a TUN device</doc>
      </member>
      <member name="tap"
              value="2"
              c:identifier="NM_SETTING_TUN_MODE_TAP"
              glib:nick="tap">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-tun.h"
             line="53">a TAP device</doc>
      </member>
    </enumeration>
    <class name="SettingUser"
           c:symbol-prefix="setting_user"
           c:type="NMSettingUser"
           parent="Setting"
           glib:type-name="NMSettingUser"
           glib:get-type="nm_setting_user_get_type"
           glib:type-struct="SettingUserClass">
      <doc xml:space="preserve"
           filename="libnm-core/nm-setting-user.c"
           line="52">General User Profile Settings</doc>
      <source-position filename="libnm-core/nm-setting-user.h" line="44"/>
      <constructor name="new" c:identifier="nm_setting_user_new">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-user.c"
             line="519">Creates a new #NMSettingUser object with default values.</doc>
        <source-position filename="libnm-core/nm-setting-user.h" line="50"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-user.c"
               line="524">the new empty #NMSettingUser object</doc>
          <type name="Setting" c:type="NMSetting*"/>
        </return-value>
      </constructor>
      <function name="check_key"
                c:identifier="nm_setting_user_check_key"
                version="1.8"
                throws="1">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-user.c"
             line="83">Checks whether @key is a valid user data key. This means,
key is not %NULL, not too large and valid ASCII. Also,
only digits and numbers are allowed with a few special
characters. The key must contain at least one '.' and
look like a fully qualified DNS name.</doc>
        <source-position filename="libnm-core/nm-setting-user.h" line="61"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-user.c"
               line="96">%TRUE if @key is a valid user data key.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-user.c"
                 line="85">the key to check</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </function>
      <function name="check_val"
                c:identifier="nm_setting_user_check_val"
                version="1.8"
                throws="1">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-user.c"
             line="165">Checks whether @val is a valid user data value. This means,
value is not %NULL, not too large and valid UTF-8.</doc>
        <source-position filename="libnm-core/nm-setting-user.h" line="63"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-user.c"
               line="175">%TRUE if @val is a valid user data value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="val" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-user.c"
                 line="167">the value to check</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </function>
      <method name="get_data"
              c:identifier="nm_setting_user_get_data"
              version="1.8">
        <source-position filename="libnm-core/nm-setting-user.h" line="56"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-user.c"
               line="255">the value associated with @key or %NULL if no such
  value exists.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-user.c"
                 line="250">the #NMSettingUser instance</doc>
            <type name="SettingUser" c:type="NMSettingUser*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-user.c"
                 line="251">the key to lookup</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_keys" c:identifier="nm_setting_user_get_keys">
        <source-position filename="libnm-core/nm-setting-user.h" line="53"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-user.c"
               line="219">a
  %NULL-terminated array containing each key from the table.</doc>
          <array length="0" zero-terminated="0" c:type="const char* const*">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-user.c"
                 line="216">the #NMSettingUser</doc>
            <type name="SettingUser" c:type="NMSettingUser*"/>
          </instance-parameter>
          <parameter name="out_len"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-user.c"
                 line="217">the length of the returned array</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_data"
              c:identifier="nm_setting_user_set_data"
              version="1.8"
              throws="1">
        <source-position filename="libnm-core/nm-setting-user.h" line="58"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-user.c"
               line="284">%TRUE if the operation was successful. The operation
  can fail if @key or @val are not valid strings according
  to nm_setting_user_check_key() and nm_setting_user_check_val().</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-user.c"
                 line="277">the #NMSettingUser instance</doc>
            <type name="SettingUser" c:type="NMSettingUser*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-user.c"
                 line="278">the key to set</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="val"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-user.c"
                 line="279">the value to set or %NULL to clear a key.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <property name="data"
                version="1.8"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-user.c"
             line="560">A dictionary of key/value pairs with user data. This data is ignored by NetworkManager
and can be used at the users discretion. The keys only support a strict ascii format,
but the values can be arbitrary UTF8 strings up to a certain length.</doc>
        <type name="GLib.HashTable">
          <type name="utf8"/>
          <type name="utf8"/>
        </type>
      </property>
    </class>
    <record name="SettingUserClass"
            c:type="NMSettingUserClass"
            disguised="1"
            glib:is-gtype-struct-for="SettingUser">
      <source-position filename="libnm-core/nm-setting-user.h" line="44"/>
    </record>
    <callback name="SettingValueIterFn" c:type="NMSettingValueIterFn">
      <source-position filename="libnm-core/nm-setting.h" line="184"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="setting" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting.h"
               line="177">The setting for which properties are being iterated, given to
nm_setting_enumerate_values()</doc>
          <type name="Setting" c:type="NMSetting*"/>
        </parameter>
        <parameter name="key" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting.h"
               line="179">The value/property name</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="value" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting.h"
               line="180">The property's value</doc>
          <type name="GObject.Value" c:type="const GValue*"/>
        </parameter>
        <parameter name="flags" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting.h"
               line="181">The property's flags, like %NM_SETTING_PARAM_SECRET</doc>
          <type name="GObject.ParamFlags" c:type="GParamFlags"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="4">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting.h"
               line="182">User data passed to nm_setting_enumerate_values()</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <class name="SettingVlan"
           c:symbol-prefix="setting_vlan"
           c:type="NMSettingVlan"
           parent="Setting"
           glib:type-name="NMSettingVlan"
           glib:get-type="nm_setting_vlan_get_type"
           glib:type-struct="SettingVlanClass">
      <doc xml:space="preserve"
           filename="libnm-core/nm-setting-vlan.h"
           line="49">VLAN Settings</doc>
      <source-position filename="libnm-core/nm-setting-vlan.h" line="63"/>
      <constructor name="new" c:identifier="nm_setting_vlan_new">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-vlan.c"
             line="810">Creates a new #NMSettingVlan object with default values.</doc>
        <source-position filename="libnm-core/nm-setting-vlan.h" line="110"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-vlan.c"
               line="815">the new empty #NMSettingVlan object</doc>
          <type name="Setting" c:type="NMSetting*"/>
        </return-value>
      </constructor>
      <method name="add_priority" c:identifier="nm_setting_vlan_add_priority">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-vlan.c"
             line="332">Adds a priority mapping to the #NMSettingVlan:ingress_priority_map or
#NMSettingVlan:egress_priority_map properties of the setting. If @from is
already in the given priority map, this function will overwrite the
existing entry with the new @to.

If @map is #NM_VLAN_INGRESS_MAP then @from is the incoming 802.1q VLAN
Priority Code Point (PCP) value, and @to is the Linux SKB priority value.

If @map is #NM_VLAN_EGRESS_MAP then @from is the Linux SKB priority value and
@to is the outgoing 802.1q VLAN Priority Code Point (PCP) value.</doc>
        <source-position filename="libnm-core/nm-setting-vlan.h" line="124"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-vlan.c"
               line="350">%TRUE if the new priority mapping was successfully added to the
list, %FALSE if error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-vlan.c"
                 line="334">the #NMSettingVlan</doc>
            <type name="SettingVlan" c:type="NMSettingVlan*"/>
          </instance-parameter>
          <parameter name="map" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-vlan.c"
                 line="335">the type of priority map</doc>
            <type name="VlanPriorityMap" c:type="NMVlanPriorityMap"/>
          </parameter>
          <parameter name="from" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-vlan.c"
                 line="336">the priority to map to @to</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
          <parameter name="to" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-vlan.c"
                 line="337">the priority to map @from to</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_priority_str"
              c:identifier="nm_setting_vlan_add_priority_str">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-vlan.c"
             line="229">Adds a priority map entry into either the #NMSettingVlan:ingress_priority_map
or the #NMSettingVlan:egress_priority_map properties.  The priority map maps
the Linux SKB priorities to 802.1p priorities.</doc>
        <source-position filename="libnm-core/nm-setting-vlan.h" line="144"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-vlan.c"
               line="239">%TRUE if the entry was successfully added to the list, or it
overwrote the old value, %FALSE if error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-vlan.c"
                 line="231">the #NMSettingVlan</doc>
            <type name="SettingVlan" c:type="NMSettingVlan*"/>
          </instance-parameter>
          <parameter name="map" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-vlan.c"
                 line="232">the type of priority map</doc>
            <type name="VlanPriorityMap" c:type="NMVlanPriorityMap"/>
          </parameter>
          <parameter name="str" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-vlan.c"
                 line="233">the string which contains a priority map, like "3:7"</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="clear_priorities"
              c:identifier="nm_setting_vlan_clear_priorities">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-vlan.c"
             line="561">Clear all the entries from #NMSettingVlan:ingress_priority_map or
#NMSettingVlan:egress_priority_map properties.</doc>
        <source-position filename="libnm-core/nm-setting-vlan.h" line="142"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-vlan.c"
                 line="563">the #NMSettingVlan</doc>
            <type name="SettingVlan" c:type="NMSettingVlan*"/>
          </instance-parameter>
          <parameter name="map" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-vlan.c"
                 line="564">the type of priority map</doc>
            <type name="VlanPriorityMap" c:type="NMVlanPriorityMap"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_flags" c:identifier="nm_setting_vlan_get_flags">
        <source-position filename="libnm-core/nm-setting-vlan.h" line="114"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-vlan.c"
               line="100">the #NMSettingVlan:flags property of the setting</doc>
          <type name="guint32" c:type="guint32"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-vlan.c"
                 line="98">the #NMSettingVlan</doc>
            <type name="SettingVlan" c:type="NMSettingVlan*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_id" c:identifier="nm_setting_vlan_get_id">
        <source-position filename="libnm-core/nm-setting-vlan.h" line="113"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-vlan.c"
               line="87">the #NMSettingVlan:id property of the setting</doc>
          <type name="guint32" c:type="guint32"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-vlan.c"
                 line="85">the #NMSettingVlan</doc>
            <type name="SettingVlan" c:type="NMSettingVlan*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_num_priorities"
              c:identifier="nm_setting_vlan_get_num_priorities">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-vlan.c"
             line="274">Returns the number of entries in the
#NMSettingVlan:ingress_priority_map or #NMSettingVlan:egress_priority_map
properties of this setting.</doc>
        <source-position filename="libnm-core/nm-setting-vlan.h" line="116"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-vlan.c"
               line="283">return the number of ingress/egress priority entries, -1 if error</doc>
          <type name="gint32" c:type="gint32"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-vlan.c"
                 line="276">the #NMSettingVlan</doc>
            <type name="SettingVlan" c:type="NMSettingVlan*"/>
          </instance-parameter>
          <parameter name="map" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-vlan.c"
                 line="277">the type of priority map</doc>
            <type name="VlanPriorityMap" c:type="NMVlanPriorityMap"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_parent" c:identifier="nm_setting_vlan_get_parent">
        <source-position filename="libnm-core/nm-setting-vlan.h" line="112"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-vlan.c"
               line="74">the #NMSettingVlan:parent property of the setting</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-vlan.c"
                 line="72">the #NMSettingVlan</doc>
            <type name="SettingVlan" c:type="NMSettingVlan*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_priority" c:identifier="nm_setting_vlan_get_priority">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-vlan.c"
             line="294">Retrieve one of the entries of the #NMSettingVlan:ingress_priority_map
or #NMSettingVlan:egress_priority_map properties of this setting.</doc>
        <source-position filename="libnm-core/nm-setting-vlan.h" line="118"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-vlan.c"
               line="305">%TRUE if a priority map was returned, %FALSE if error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-vlan.c"
                 line="296">the #NMSettingVlan</doc>
            <type name="SettingVlan" c:type="NMSettingVlan*"/>
          </instance-parameter>
          <parameter name="map" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-vlan.c"
                 line="297">the type of priority map</doc>
            <type name="VlanPriorityMap" c:type="NMVlanPriorityMap"/>
          </parameter>
          <parameter name="idx" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-vlan.c"
                 line="298">the zero-based index of the ingress/egress priority map entry</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
          <parameter name="out_from"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-vlan.c"
                 line="299">on return the value of the priority map's 'from' item</doc>
            <type name="guint32" c:type="guint32*"/>
          </parameter>
          <parameter name="out_to"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-vlan.c"
                 line="300">on return the value of priority map's 'to' item</doc>
            <type name="guint32" c:type="guint32*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_priority"
              c:identifier="nm_setting_vlan_remove_priority">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-vlan.c"
             line="464">Removes the priority map at index @idx from the
#NMSettingVlan:ingress_priority_map or #NMSettingVlan:egress_priority_map
properties.</doc>
        <source-position filename="libnm-core/nm-setting-vlan.h" line="129"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-vlan.c"
                 line="466">the #NMSettingVlan</doc>
            <type name="SettingVlan" c:type="NMSettingVlan*"/>
          </instance-parameter>
          <parameter name="map" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-vlan.c"
                 line="467">the type of priority map</doc>
            <type name="VlanPriorityMap" c:type="NMVlanPriorityMap"/>
          </parameter>
          <parameter name="idx" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-vlan.c"
                 line="468">the zero-based index of the priority map to remove</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_priority_by_value"
              c:identifier="nm_setting_vlan_remove_priority_by_value">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-vlan.c"
             line="492">Removes the priority map @form:@to from the #NMSettingVlan:ingress_priority_map
or #NMSettingVlan:egress_priority_map (according to @map argument)
properties.</doc>
        <source-position filename="libnm-core/nm-setting-vlan.h" line="133"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-vlan.c"
               line="503">%TRUE if the priority mapping was found and removed; %FALSE if it was not.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-vlan.c"
                 line="494">the #NMSettingVlan</doc>
            <type name="SettingVlan" c:type="NMSettingVlan*"/>
          </instance-parameter>
          <parameter name="map" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-vlan.c"
                 line="495">the type of priority map</doc>
            <type name="VlanPriorityMap" c:type="NMVlanPriorityMap"/>
          </parameter>
          <parameter name="from" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-vlan.c"
                 line="496">the priority to map to @to</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
          <parameter name="to" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-vlan.c"
                 line="497">the priority to map @from to</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_priority_str_by_value"
              c:identifier="nm_setting_vlan_remove_priority_str_by_value">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-vlan.c"
             line="529">Removes the priority map @str from the #NMSettingVlan:ingress_priority_map
or #NMSettingVlan:egress_priority_map (according to @map argument)
properties.</doc>
        <source-position filename="libnm-core/nm-setting-vlan.h" line="138"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-vlan.c"
               line="539">%TRUE if the priority mapping was found and removed; %FALSE if it was not.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-vlan.c"
                 line="531">the #NMSettingVlan</doc>
            <type name="SettingVlan" c:type="NMSettingVlan*"/>
          </instance-parameter>
          <parameter name="map" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-vlan.c"
                 line="532">the type of priority map</doc>
            <type name="VlanPriorityMap" c:type="NMVlanPriorityMap"/>
          </parameter>
          <parameter name="str" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-vlan.c"
                 line="533">the string which contains a priority map, like "3:7"</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <property name="egress-priority-map"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-vlan.c"
             line="952">For outgoing packets, a list of mappings from Linux SKB priorities to
802.1p priorities.  The mapping is given in the format "from:to" where
both "from" and "to" are unsigned integers, ie "7:3".</doc>
        <array>
          <type name="utf8"/>
        </array>
      </property>
      <property name="flags"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-vlan.c"
             line="893">One or more flags which control the behavior and features of the VLAN
interface.  Flags include %NM_VLAN_FLAG_REORDER_HEADERS (reordering of
output packet headers), %NM_VLAN_FLAG_GVRP (use of the GVRP protocol),
and %NM_VLAN_FLAG_LOOSE_BINDING (loose binding of the interface to its
master device's operating state). %NM_VLAN_FLAG_MVRP (use of the MVRP
protocol).

The default value of this property is NM_VLAN_FLAG_REORDER_HEADERS,
but it used to be 0. To preserve backward compatibility, the default-value
in the D-Bus API continues to be 0 and a missing property on D-Bus
is still considered as 0.</doc>
        <type name="VlanFlags"/>
      </property>
      <property name="id" writable="1" construct="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-vlan.c"
             line="873">The VLAN identifier that the interface created by this connection should
be assigned. The valid range is from 0 to 4094, without the reserved id 4095.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="ingress-priority-map"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-vlan.c"
             line="931">For incoming packets, a list of mappings from 802.1p priorities to Linux
SKB priorities.  The mapping is given in the format "from:to" where both
"from" and "to" are unsigned integers, ie "7:3".</doc>
        <array>
          <type name="utf8"/>
        </array>
      </property>
      <property name="parent"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-vlan.c"
             line="851">If given, specifies the parent interface name or parent connection UUID
from which this VLAN interface should be created.  If this property is
not specified, the connection must contain an #NMSettingWired setting
with a #NMSettingWired:mac-address property.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent">
        <type name="Setting" c:type="NMSetting"/>
      </field>
    </class>
    <record name="SettingVlanClass"
            c:type="NMSettingVlanClass"
            glib:is-gtype-struct-for="SettingVlan">
      <source-position filename="libnm-core/nm-setting-vlan.h" line="63"/>
      <field name="parent">
        <type name="SettingClass" c:type="NMSettingClass"/>
      </field>
      <field name="padding" readable="0" private="1">
        <array zero-terminated="0" fixed-size="4">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <class name="SettingVpn"
           c:symbol-prefix="setting_vpn"
           c:type="NMSettingVpn"
           parent="Setting"
           glib:type-name="NMSettingVpn"
           glib:get-type="nm_setting_vpn_get_type"
           glib:type-struct="SettingVpnClass">
      <doc xml:space="preserve"
           filename="libnm-core/nm-setting-vpn.h"
           line="50">VPN Settings</doc>
      <source-position filename="libnm-core/nm-setting-vpn.h" line="64"/>
      <constructor name="new" c:identifier="nm_setting_vpn_new">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-vpn.c"
             line="987">Creates a new #NMSettingVpn object with default values.</doc>
        <source-position filename="libnm-core/nm-setting-vpn.h" line="77"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-vpn.c"
               line="992">the new empty #NMSettingVpn object</doc>
          <type name="Setting" c:type="NMSetting*"/>
        </return-value>
      </constructor>
      <method name="add_data_item" c:identifier="nm_setting_vpn_add_data_item">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-vpn.c"
             line="160">Establishes a relationship between @key and @item internally in the
setting which may be retrieved later.  Should not be used to store passwords
or other secrets, which is what nm_setting_vpn_add_secret() is for.</doc>
        <source-position filename="libnm-core/nm-setting-vpn.h" line="83"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-vpn.c"
                 line="162">the #NMSettingVpn</doc>
            <type name="SettingVpn" c:type="NMSettingVpn*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-vpn.c"
                 line="163">a name that uniquely identifies the given value @item</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="item" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-vpn.c"
                 line="164">the value to be referenced by @key</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_secret" c:identifier="nm_setting_vpn_add_secret">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-vpn.c"
             line="338">Establishes a relationship between @key and @secret internally in the
setting which may be retrieved later.</doc>
        <source-position filename="libnm-core/nm-setting-vpn.h" line="98"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-vpn.c"
                 line="340">the #NMSettingVpn</doc>
            <type name="SettingVpn" c:type="NMSettingVpn*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-vpn.c"
                 line="341">a name that uniquely identifies the given secret @secret</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="secret" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-vpn.c"
                 line="342">the secret to be referenced by @key</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="foreach_data_item"
              c:identifier="nm_setting_vpn_foreach_data_item">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-vpn.c"
             line="301">Iterates all data items stored in this setting.  It is safe to add, remove,
and modify data items inside @func, though any additions or removals made
during iteration will not be part of the iteration.</doc>
        <source-position filename="libnm-core/nm-setting-vpn.h" line="90"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-vpn.c"
                 line="303">a #NMSettingVpn</doc>
            <type name="SettingVpn" c:type="NMSettingVpn*"/>
          </instance-parameter>
          <parameter name="func"
                     transfer-ownership="none"
                     scope="call"
                     closure="1">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-vpn.c"
                 line="304">an user provided function</doc>
            <type name="VpnIterFunc" c:type="NMVpnIterFunc"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-vpn.c"
                 line="305">data to be passed to @func</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="foreach_secret"
              c:identifier="nm_setting_vpn_foreach_secret">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-vpn.c"
             line="429">Iterates all secrets stored in this setting.  It is safe to add, remove,
and modify secrets inside @func, though any additions or removals made during
iteration will not be part of the iteration.</doc>
        <source-position filename="libnm-core/nm-setting-vpn.h" line="105"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-vpn.c"
                 line="431">a #NMSettingVpn</doc>
            <type name="SettingVpn" c:type="NMSettingVpn*"/>
          </instance-parameter>
          <parameter name="func"
                     transfer-ownership="none"
                     scope="call"
                     closure="1">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-vpn.c"
                 line="432">an user provided function</doc>
            <type name="VpnIterFunc" c:type="NMVpnIterFunc"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-vpn.c"
                 line="433">data to be passed to @func</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_data_item" c:identifier="nm_setting_vpn_get_data_item">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-vpn.c"
             line="186">Retrieves the data item of a key/value relationship previously established
by nm_setting_vpn_add_data_item().</doc>
        <source-position filename="libnm-core/nm-setting-vpn.h" line="86"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-vpn.c"
               line="194">the data item, if any</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-vpn.c"
                 line="188">the #NMSettingVpn</doc>
            <type name="SettingVpn" c:type="NMSettingVpn*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-vpn.c"
                 line="189">the name of the data item to retrieve</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_data_keys"
              c:identifier="nm_setting_vpn_get_data_keys"
              version="1.12">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-vpn.c"
             line="204">Retrieves every data key inside @setting, as an array.</doc>
        <source-position filename="libnm-core/nm-setting-vpn.h" line="94"/>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-vpn.c"
               line="211">a
  %NULL-terminated array containing each data key or %NULL if
  there are no data items.</doc>
          <array length="0" zero-terminated="0" c:type="const char**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-vpn.c"
                 line="206">the #NMSettingVpn</doc>
            <type name="SettingVpn" c:type="NMSettingVpn*"/>
          </instance-parameter>
          <parameter name="out_length"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     nullable="1">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-vpn.c"
                 line="207">(out): the length of the returned array</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_num_data_items"
              c:identifier="nm_setting_vpn_get_num_data_items">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-vpn.c"
             line="144">Gets number of key/value pairs of VPN configuration data.</doc>
        <source-position filename="libnm-core/nm-setting-vpn.h" line="82"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-vpn.c"
               line="150">the number of VPN plugin specific configuration data items</doc>
          <type name="guint32" c:type="guint32"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-vpn.c"
                 line="146">the #NMSettingVpn</doc>
            <type name="SettingVpn" c:type="NMSettingVpn*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_num_secrets"
              c:identifier="nm_setting_vpn_get_num_secrets">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-vpn.c"
             line="322">Gets number of VPN plugin specific secrets in the setting.</doc>
        <source-position filename="libnm-core/nm-setting-vpn.h" line="97"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-vpn.c"
               line="328">the number of VPN plugin specific secrets</doc>
          <type name="guint32" c:type="guint32"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-vpn.c"
                 line="324">the #NMSettingVpn</doc>
            <type name="SettingVpn" c:type="NMSettingVpn*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_persistent"
              c:identifier="nm_setting_vpn_get_persistent">
        <source-position filename="libnm-core/nm-setting-vpn.h" line="80"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-vpn.c"
               line="134">the #NMSettingVpn:persistent property of the setting</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-vpn.c"
                 line="132">the #NMSettingVpn</doc>
            <type name="SettingVpn" c:type="NMSettingVpn*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_secret" c:identifier="nm_setting_vpn_get_secret">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-vpn.c"
             line="363">Retrieves the secret of a key/value relationship previously established
by nm_setting_vpn_add_secret().</doc>
        <source-position filename="libnm-core/nm-setting-vpn.h" line="101"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-vpn.c"
               line="371">the secret, if any</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-vpn.c"
                 line="365">the #NMSettingVpn</doc>
            <type name="SettingVpn" c:type="NMSettingVpn*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-vpn.c"
                 line="366">the name of the secret to retrieve</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_secret_keys"
              c:identifier="nm_setting_vpn_get_secret_keys"
              version="1.12">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-vpn.c"
             line="381">Retrieves every secret key inside @setting, as an array.</doc>
        <source-position filename="libnm-core/nm-setting-vpn.h" line="109"/>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-vpn.c"
               line="388">a
  %NULL-terminated array containing each secret key or %NULL if
  there are no secrets.</doc>
          <array length="0" zero-terminated="0" c:type="const char**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-vpn.c"
                 line="383">the #NMSettingVpn</doc>
            <type name="SettingVpn" c:type="NMSettingVpn*"/>
          </instance-parameter>
          <parameter name="out_length"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     nullable="1">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-vpn.c"
                 line="384">(out): the length of the returned array</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_service_type"
              c:identifier="nm_setting_vpn_get_service_type">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-vpn.c"
             line="99">Returns the service name of the VPN, which identifies the specific VPN
plugin that should be used to connect to this VPN.</doc>
        <source-position filename="libnm-core/nm-setting-vpn.h" line="78"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-vpn.c"
               line="106">the VPN plugin's service name</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-vpn.c"
                 line="101">the #NMSettingVpn</doc>
            <type name="SettingVpn" c:type="NMSettingVpn*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_timeout"
              c:identifier="nm_setting_vpn_get_timeout"
              version="1.2">
        <source-position filename="libnm-core/nm-setting-vpn.h" line="113"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-vpn.c"
               line="511">the #NMSettingVpn:timeout property of the setting</doc>
          <type name="guint32" c:type="guint32"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-vpn.c"
                 line="509">the #NMSettingVpn</doc>
            <type name="SettingVpn" c:type="NMSettingVpn*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_user_name" c:identifier="nm_setting_vpn_get_user_name">
        <source-position filename="libnm-core/nm-setting-vpn.h" line="79"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-vpn.c"
               line="120">the #NMSettingVpn:user-name property of the setting</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-vpn.c"
                 line="118">the #NMSettingVpn</doc>
            <type name="SettingVpn" c:type="NMSettingVpn*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="remove_data_item"
              c:identifier="nm_setting_vpn_remove_data_item">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-vpn.c"
             line="228">Deletes a key/value relationship previously established by
nm_setting_vpn_add_data_item().</doc>
        <source-position filename="libnm-core/nm-setting-vpn.h" line="88"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-vpn.c"
               line="236">%TRUE if the data item was found and removed from the internal list,
%FALSE if it was not.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-vpn.c"
                 line="230">the #NMSettingVpn</doc>
            <type name="SettingVpn" c:type="NMSettingVpn*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-vpn.c"
                 line="231">the name of the data item to remove</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_secret" c:identifier="nm_setting_vpn_remove_secret">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-vpn.c"
             line="405">Deletes a key/value relationship previously established by
nm_setting_vpn_add_secret().</doc>
        <source-position filename="libnm-core/nm-setting-vpn.h" line="103"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-vpn.c"
               line="413">%TRUE if the secret was found and removed from the internal list,
%FALSE if it was not.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-vpn.c"
                 line="407">the #NMSettingVpn</doc>
            <type name="SettingVpn" c:type="NMSettingVpn*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-vpn.c"
                 line="408">the name of the secret to remove</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <property name="data" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-vpn.c"
             line="1078">Dictionary of key/value pairs of VPN plugin specific data.  Both keys and
values must be strings.</doc>
        <type name="GLib.HashTable">
          <type name="utf8"/>
          <type name="utf8"/>
        </type>
      </property>
      <property name="persistent" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-vpn.c"
             line="1065">If the VPN service supports persistence, and this property is %TRUE,
the VPN will attempt to stay connected across link changes and outages,
until explicitly disconnected.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="secrets" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-vpn.c"
             line="1104">Dictionary of key/value pairs of VPN plugin specific secrets like
passwords or private keys.  Both keys and values must be strings.</doc>
        <type name="GLib.HashTable">
          <type name="utf8"/>
          <type name="utf8"/>
        </type>
      </property>
      <property name="service-type" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-vpn.c"
             line="1036">D-Bus service name of the VPN plugin that this setting uses to connect to
its network.  i.e. org.freedesktop.NetworkManager.vpnc for the vpnc
plugin.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="timeout"
                version="1.2"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-vpn.c"
             line="1131">Timeout for the VPN service to establish the connection. Some services
may take quite a long time to connect.
Value of 0 means a default timeout, which is 60 seconds (unless overridden
by vpn.timeout in configuration file). Values greater than zero mean
timeout in seconds.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="user-name" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-vpn.c"
             line="1049">If the VPN connection requires a user name for authentication, that name
should be provided here.  If the connection is available to more than one
user, and the VPN requires each user to supply a different name, then
leave this property empty.  If this property is empty, NetworkManager
will automatically supply the username of the user which requested the
VPN connection.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent">
        <type name="Setting" c:type="NMSetting"/>
      </field>
    </class>
    <record name="SettingVpnClass"
            c:type="NMSettingVpnClass"
            glib:is-gtype-struct-for="SettingVpn">
      <source-position filename="libnm-core/nm-setting-vpn.h" line="64"/>
      <field name="parent">
        <type name="SettingClass" c:type="NMSettingClass"/>
      </field>
      <field name="padding" readable="0" private="1">
        <array zero-terminated="0" fixed-size="4">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <class name="SettingVxlan"
           c:symbol-prefix="setting_vxlan"
           c:type="NMSettingVxlan"
           parent="Setting"
           glib:type-name="NMSettingVxlan"
           glib:get-type="nm_setting_vxlan_get_type"
           glib:type-struct="SettingVxlanClass">
      <doc xml:space="preserve"
           filename="libnm-core/nm-setting-vxlan.h"
           line="59">VXLAN Settings</doc>
      <source-position filename="libnm-core/nm-setting-vxlan.h" line="73"/>
      <constructor name="new"
                   c:identifier="nm_setting_vxlan_new"
                   version="1.2">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-vxlan.c"
             line="542">Creates a new #NMSettingVxlan object with default values.</doc>
        <source-position filename="libnm-core/nm-setting-vxlan.h" line="78"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-vxlan.c"
               line="547">the new empty #NMSettingVxlan object</doc>
          <type name="Setting" c:type="NMSetting*"/>
        </return-value>
      </constructor>
      <method name="get_ageing"
              c:identifier="nm_setting_vxlan_get_ageing"
              version="1.2">
        <source-position filename="libnm-core/nm-setting-vxlan.h" line="98"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-vxlan.c"
               line="211">the #NMSettingVxlan:ageing property of the setting</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-vxlan.c"
                 line="209">the #NMSettingVxlan</doc>
            <type name="SettingVxlan" c:type="NMSettingVxlan*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_destination_port"
              c:identifier="nm_setting_vxlan_get_destination_port"
              version="1.2">
        <source-position filename="libnm-core/nm-setting-vxlan.h" line="92"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-vxlan.c"
               line="181">the #NMSettingVxlan:destination-port property of the setting</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-vxlan.c"
                 line="179">the #NMSettingVxlan</doc>
            <type name="SettingVxlan" c:type="NMSettingVxlan*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_id"
              c:identifier="nm_setting_vxlan_get_id"
              version="1.2">
        <source-position filename="libnm-core/nm-setting-vxlan.h" line="82"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-vxlan.c"
               line="106">the #NMSettingVxlan:id property of the setting</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-vxlan.c"
                 line="104">the #NMSettingVxlan</doc>
            <type name="SettingVxlan" c:type="NMSettingVxlan*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_l2_miss"
              c:identifier="nm_setting_vxlan_get_l2_miss"
              version="1.2">
        <source-position filename="libnm-core/nm-setting-vxlan.h" line="108"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-vxlan.c"
               line="301">the #NMSettingVxlan:l2_miss property of the setting</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-vxlan.c"
                 line="299">the #NMSettingVxlan</doc>
            <type name="SettingVxlan" c:type="NMSettingVxlan*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_l3_miss"
              c:identifier="nm_setting_vxlan_get_l3_miss"
              version="1.2">
        <source-position filename="libnm-core/nm-setting-vxlan.h" line="110"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-vxlan.c"
               line="316">the #NMSettingVxlan:l3_miss property of the setting</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-vxlan.c"
                 line="314">the #NMSettingVxlan</doc>
            <type name="SettingVxlan" c:type="NMSettingVxlan*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_learning"
              c:identifier="nm_setting_vxlan_get_learning"
              version="1.2">
        <source-position filename="libnm-core/nm-setting-vxlan.h" line="104"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-vxlan.c"
               line="271">the #NMSettingVxlan:learning property of the setting</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-vxlan.c"
                 line="269">the #NMSettingVxlan</doc>
            <type name="SettingVxlan" c:type="NMSettingVxlan*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_limit"
              c:identifier="nm_setting_vxlan_get_limit"
              version="1.2">
        <source-position filename="libnm-core/nm-setting-vxlan.h" line="100"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-vxlan.c"
               line="226">the #NMSettingVxlan:limit property of the setting</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-vxlan.c"
                 line="224">the #NMSettingVxlan</doc>
            <type name="SettingVxlan" c:type="NMSettingVxlan*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_local"
              c:identifier="nm_setting_vxlan_get_local"
              version="1.2">
        <source-position filename="libnm-core/nm-setting-vxlan.h" line="84"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-vxlan.c"
               line="121">the #NMSettingVxlan:local property of the setting</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-vxlan.c"
                 line="119">the #NMSettingVxlan</doc>
            <type name="SettingVxlan" c:type="NMSettingVxlan*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_parent"
              c:identifier="nm_setting_vxlan_get_parent"
              version="1.2">
        <source-position filename="libnm-core/nm-setting-vxlan.h" line="80"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-vxlan.c"
               line="91">the #NMSettingVxlan:parent property of the setting</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-vxlan.c"
                 line="89">the #NMSettingVxlan</doc>
            <type name="SettingVxlan" c:type="NMSettingVxlan*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_proxy"
              c:identifier="nm_setting_vxlan_get_proxy"
              version="1.2">
        <source-position filename="libnm-core/nm-setting-vxlan.h" line="102"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-vxlan.c"
               line="196">the #NMSettingVxlan:proxy property of the setting</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-vxlan.c"
                 line="194">the #NMSettingVxlan</doc>
            <type name="SettingVxlan" c:type="NMSettingVxlan*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_remote"
              c:identifier="nm_setting_vxlan_get_remote"
              version="1.2">
        <source-position filename="libnm-core/nm-setting-vxlan.h" line="86"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-vxlan.c"
               line="136">the #NMSettingVxlan:remote property of the setting</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-vxlan.c"
                 line="134">the #NMSettingVxlan</doc>
            <type name="SettingVxlan" c:type="NMSettingVxlan*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_rsc"
              c:identifier="nm_setting_vxlan_get_rsc"
              version="1.2">
        <source-position filename="libnm-core/nm-setting-vxlan.h" line="106"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-vxlan.c"
               line="286">the #NMSettingVxlan:rsc property of the setting</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-vxlan.c"
                 line="284">the #NMSettingVxlan</doc>
            <type name="SettingVxlan" c:type="NMSettingVxlan*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_source_port_max"
              c:identifier="nm_setting_vxlan_get_source_port_max"
              version="1.2">
        <source-position filename="libnm-core/nm-setting-vxlan.h" line="90"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-vxlan.c"
               line="166">the #NMSettingVxlan:source-port-max property of the setting</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-vxlan.c"
                 line="164">the #NMSettingVxlan</doc>
            <type name="SettingVxlan" c:type="NMSettingVxlan*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_source_port_min"
              c:identifier="nm_setting_vxlan_get_source_port_min"
              version="1.2">
        <source-position filename="libnm-core/nm-setting-vxlan.h" line="88"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-vxlan.c"
               line="151">the #NMSettingVxlan:source-port-min property of the setting</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-vxlan.c"
                 line="149">the #NMSettingVxlan</doc>
            <type name="SettingVxlan" c:type="NMSettingVxlan*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_tos"
              c:identifier="nm_setting_vxlan_get_tos"
              version="1.2">
        <source-position filename="libnm-core/nm-setting-vxlan.h" line="94"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-vxlan.c"
               line="241">the #NMSettingVxlan:tos property of the setting</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-vxlan.c"
                 line="239">the #NMSettingVxlan</doc>
            <type name="SettingVxlan" c:type="NMSettingVxlan*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_ttl"
              c:identifier="nm_setting_vxlan_get_ttl"
              version="1.2">
        <source-position filename="libnm-core/nm-setting-vxlan.h" line="96"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-vxlan.c"
               line="256">the #NMSettingVxlan:ttl property of the setting</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-vxlan.c"
                 line="254">the #NMSettingVxlan</doc>
            <type name="SettingVxlan" c:type="NMSettingVxlan*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="ageing"
                version="1.2"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-vxlan.c"
             line="694">Specifies the lifetime in seconds of FDB entries learnt by the kernel.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="destination-port"
                version="1.2"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-vxlan.c"
             line="678">Specifies the UDP destination port to communicate to the remote VXLAN
tunnel endpoint.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="id"
                version="1.2"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-vxlan.c"
             line="598">Specifies the VXLAN Network Identifier (or VXLAN Segment Identifier) to
use.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="l2-miss"
                version="1.2"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-vxlan.c"
             line="799">Specifies whether netlink LL ADDR miss notifications are generated.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="l3-miss"
                version="1.2"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-vxlan.c"
             line="814">Specifies whether netlink IP ADDR miss notifications are generated.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="learning"
                version="1.2"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-vxlan.c"
             line="770">Specifies whether unknown source link layer addresses and IP addresses
are entered into the VXLAN device forwarding database.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="limit"
                version="1.2"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-vxlan.c"
             line="709">Specifies the maximum number of FDB entries. A value of zero means that
the kernel will store unlimited entries.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="local"
                version="1.2"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-vxlan.c"
             line="614">If given, specifies the source IP address to use in outgoing packets.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="parent"
                version="1.2"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-vxlan.c"
             line="584">If given, specifies the parent interface name or parent connection UUID.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="proxy"
                version="1.2"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-vxlan.c"
             line="755">Specifies whether ARP proxy is turned on.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="remote"
                version="1.2"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-vxlan.c"
             line="629">Specifies the unicast destination IP address to use in outgoing packets
when the destination link layer address is not known in the VXLAN device
forwarding database, or the multicast IP address to join.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="rsc"
                version="1.2"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-vxlan.c"
             line="785">Specifies whether route short circuit is turned on.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="source-port-max"
                version="1.2"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-vxlan.c"
             line="662">Specifies the maximum UDP source port to communicate to the remote VXLAN
tunnel endpoint.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="source-port-min"
                version="1.2"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-vxlan.c"
             line="646">Specifies the minimum UDP source port to communicate to the remote VXLAN
tunnel endpoint.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="tos"
                version="1.2"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-vxlan.c"
             line="725">Specifies the TOS value to use in outgoing packets.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="ttl"
                version="1.2"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-vxlan.c"
             line="740">Specifies the time-to-live value to use in outgoing packets.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <field name="parent">
        <type name="Setting" c:type="NMSetting"/>
      </field>
    </class>
    <record name="SettingVxlanClass"
            c:type="NMSettingVxlanClass"
            glib:is-gtype-struct-for="SettingVxlan">
      <source-position filename="libnm-core/nm-setting-vxlan.h" line="73"/>
      <field name="parent">
        <type name="SettingClass" c:type="NMSettingClass"/>
      </field>
      <field name="padding" readable="0" private="1">
        <array zero-terminated="0" fixed-size="4">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <class name="SettingWifiP2P"
           c:symbol-prefix="setting_wifi_p2p"
           c:type="NMSettingWifiP2P"
           version="1.16"
           parent="Setting"
           glib:type-name="NMSettingWifiP2P"
           glib:get-type="nm_setting_wifi_p2p_get_type"
           glib:type-struct="SettingWifiP2PClass">
      <doc xml:space="preserve"
           filename="libnm-core/nm-setting-wifi-p2p.c"
           line="39">Wi-Fi P2P Settings</doc>
      <source-position filename="libnm-core/nm-setting-wifi-p2p.h" line="50"/>
      <constructor name="new"
                   c:identifier="nm_setting_wifi_p2p_new"
                   version="1.16">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-wifi-p2p.c"
             line="216">Creates a new #NMSettingWifiP2P object with default values.</doc>
        <source-position filename="libnm-core/nm-setting-wifi-p2p.h"
                         line="56"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-wifi-p2p.c"
               line="221">the new empty #NMSettingWifiP2P object</doc>
          <type name="Setting" c:type="NMSetting*"/>
        </return-value>
      </constructor>
      <method name="get_peer"
              c:identifier="nm_setting_wifi_p2p_get_peer"
              version="1.16">
        <source-position filename="libnm-core/nm-setting-wifi-p2p.h"
                         line="59"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-wifi-p2p.c"
               line="81">the #NMSettingWifiP2P:peer property of the setting</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wifi-p2p.c"
                 line="79">the #NMSettingWifiP2P</doc>
            <type name="SettingWifiP2P" c:type="NMSettingWifiP2P*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_wfd_ies"
              c:identifier="nm_setting_wifi_p2p_get_wfd_ies"
              version="1.16">
        <source-position filename="libnm-core/nm-setting-wifi-p2p.h"
                         line="65"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-wifi-p2p.c"
               line="113">the #NMSettingWiFiP2P:wfd-ies property of the setting</doc>
          <type name="GLib.Bytes" c:type="GBytes*"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wifi-p2p.c"
                 line="111">the #NMSettingWiFiP2P</doc>
            <type name="SettingWifiP2P" c:type="NMSettingWifiP2P*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_wps_method"
              c:identifier="nm_setting_wifi_p2p_get_wps_method"
              version="1.16">
        <source-position filename="libnm-core/nm-setting-wifi-p2p.h"
                         line="62"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-wifi-p2p.c"
               line="97">the #NMSettingWifiP2P:wps-method property of the setting</doc>
          <type name="SettingWirelessSecurityWpsMethod"
                c:type="NMSettingWirelessSecurityWpsMethod"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wifi-p2p.c"
                 line="95">the #NMSettingWifiP2P</doc>
            <type name="SettingWifiP2P" c:type="NMSettingWifiP2P*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="peer"
                version="1.16"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-wifi-p2p.c"
             line="254">The P2P device that should be connected to. Currently this is the only
way to create or join a group.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="wfd-ies"
                version="1.16"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-wifi-p2p.c"
             line="295">The Wi-Fi Display (WFD) Information Elements (IEs) to set.

Wi-Fi Display requires a protocol specific information element to be
set in certain Wi-Fi frames. These can be specified here for the
purpose of establishing a connection.
This setting is only useful when implementing a Wi-Fi Display client.</doc>
        <type name="GLib.Bytes"/>
      </property>
      <property name="wps-method"
                version="1.16"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-wifi-p2p.c"
             line="276">Flags indicating which mode of WPS is to be used.

There's little point in changing the default setting as NetworkManager will
automatically determine the best method to use.</doc>
        <type name="guint" c:type="guint"/>
      </property>
    </class>
    <record name="SettingWifiP2PClass"
            c:type="NMSettingWifiP2PClass"
            disguised="1"
            glib:is-gtype-struct-for="SettingWifiP2P">
      <source-position filename="libnm-core/nm-setting-wifi-p2p.h" line="50"/>
    </record>
    <class name="SettingWimax"
           c:symbol-prefix="setting_wimax"
           c:type="NMSettingWimax"
           parent="Setting"
           glib:type-name="NMSettingWimax"
           glib:get-type="nm_setting_wimax_get_type"
           glib:type-struct="SettingWimaxClass">
      <doc xml:space="preserve"
           filename="libnm-core/nm-setting-wimax.h"
           line="45">WiMax Settings</doc>
      <source-position filename="libnm-core/nm-setting-wimax.h" line="59"/>
      <constructor name="new"
                   c:identifier="nm_setting_wimax_new"
                   deprecated="1"
                   deprecated-version="1.2">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-wimax.c"
             line="186">Creates a new #NMSettingWimax object with default values.</doc>
        <doc-deprecated xml:space="preserve">WiMAX is no longer supported.</doc-deprecated>
        <source-position filename="libnm-core/nm-setting-wimax.h" line="65"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-wimax.c"
               line="191">the new empty #NMSettingWimax object</doc>
          <type name="Setting" c:type="NMSetting*"/>
        </return-value>
      </constructor>
      <method name="get_mac_address"
              c:identifier="nm_setting_wimax_get_mac_address"
              deprecated="1"
              deprecated-version="1.2">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-wimax.c"
             line="82">Returns the MAC address of a WiMAX device which this connection is locked
to.</doc>
        <doc-deprecated xml:space="preserve">WiMAX is no longer supported.</doc-deprecated>
        <source-position filename="libnm-core/nm-setting-wimax.h" line="69"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-wimax.c"
               line="89">the MAC address</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wimax.c"
                 line="84">the #NMSettingWimax</doc>
            <type name="SettingWimax" c:type="NMSettingWimax*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_network_name"
              c:identifier="nm_setting_wimax_get_network_name"
              deprecated="1"
              deprecated-version="1.2">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-wimax.c"
             line="63">Returns the WiMAX NSP name (ex "Sprint" or "CLEAR") which identifies the
specific WiMAX network this setting describes a connection to.</doc>
        <doc-deprecated xml:space="preserve">WiMAX is no longer supported.</doc-deprecated>
        <source-position filename="libnm-core/nm-setting-wimax.h" line="67"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-wimax.c"
               line="70">the WiMAX NSP name</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wimax.c"
                 line="65">the #NMSettingWimax</doc>
            <type name="SettingWimax" c:type="NMSettingWimax*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="mac-address"
                deprecated="1"
                deprecated-version="1.2"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-wimax.c"
             line="241">If specified, this connection will only apply to the WiMAX device whose
MAC address matches. This property does not change the MAC address of the
device (known as MAC spoofing).</doc>
        <doc-deprecated xml:space="preserve">WiMAX is no longer supported.</doc-deprecated>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="network-name"
                deprecated="1"
                deprecated-version="1.2"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-wimax.c"
             line="227">Network Service Provider (NSP) name of the WiMAX network this connection
should use.</doc>
        <doc-deprecated xml:space="preserve">WiMAX is no longer supported.</doc-deprecated>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent">
        <type name="Setting" c:type="NMSetting"/>
      </field>
    </class>
    <record name="SettingWimaxClass"
            c:type="NMSettingWimaxClass"
            glib:is-gtype-struct-for="SettingWimax">
      <source-position filename="libnm-core/nm-setting-wimax.h" line="59"/>
      <field name="parent">
        <type name="SettingClass" c:type="NMSettingClass"/>
      </field>
      <field name="padding" readable="0" private="1">
        <array zero-terminated="0" fixed-size="4">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <class name="SettingWireGuard"
           c:symbol-prefix="setting_wireguard"
           c:type="NMSettingWireGuard"
           version="1.16"
           parent="Setting"
           glib:type-name="NMSettingWireGuard"
           glib:get-type="nm_setting_wireguard_get_type"
           glib:type-struct="SettingWireGuardClass">
      <doc xml:space="preserve"
           filename="libnm-core/nm-setting-wireguard.c"
           line="873">WireGuard Ethernet Settings</doc>
      <source-position filename="libnm-core/nm-setting-wireguard.h"
                       line="148"/>
      <constructor name="new"
                   c:identifier="nm_setting_wireguard_new"
                   version="1.16">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-wireguard.c"
             line="2278">Creates a new #NMSettingWireGuard object with default values.</doc>
        <source-position filename="libnm-core/nm-setting-wireguard.h"
                         line="154"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-wireguard.c"
               line="2283">the new empty #NMSettingWireGuard object</doc>
          <type name="Setting" c:type="NMSetting*"/>
        </return-value>
      </constructor>
      <method name="append_peer"
              c:identifier="nm_setting_wireguard_append_peer"
              version="1.16">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-wireguard.c"
             line="1310">If a peer with the same public-key already exists, that
one is replaced by @peer. The new @peer is always appended
(or moved to) the end, so in case a peer is replaced, the
indexes are shifted and the number of peers stays unchanged.</doc>
        <source-position filename="libnm-core/nm-setting-wireguard.h"
                         line="190"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wireguard.c"
                 line="1312">the #NMSettingWireGuard instance</doc>
            <type name="SettingWireGuard" c:type="NMSettingWireGuard*"/>
          </instance-parameter>
          <parameter name="peer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wireguard.c"
                 line="1313">the #NMWireGuardPeer instance to append.
  This seals @peer and keeps a reference on the
  instance.</doc>
            <type name="WireGuardPeer" c:type="NMWireGuardPeer*"/>
          </parameter>
        </parameters>
      </method>
      <method name="clear_peers"
              c:identifier="nm_setting_wireguard_clear_peers">
        <source-position filename="libnm-core/nm-setting-wireguard.h"
                         line="198"/>
        <return-value transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SettingWireGuard" c:type="NMSettingWireGuard*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_fwmark"
              c:identifier="nm_setting_wireguard_get_fwmark"
              version="1.16">
        <source-position filename="libnm-core/nm-setting-wireguard.h"
                         line="168"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-wireguard.c"
               line="957">the set firewall mark.</doc>
          <type name="guint32" c:type="guint32"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wireguard.c"
                 line="955">the #NMSettingWireGuard instance</doc>
            <type name="SettingWireGuard" c:type="NMSettingWireGuard*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_listen_port"
              c:identifier="nm_setting_wireguard_get_listen_port"
              version="1.16">
        <source-position filename="libnm-core/nm-setting-wireguard.h"
                         line="165"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-wireguard.c"
               line="973">the set UDP listen port.</doc>
          <type name="guint16" c:type="guint16"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wireguard.c"
                 line="971">the #NMSettingWireGuard instance</doc>
            <type name="SettingWireGuard" c:type="NMSettingWireGuard*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_mtu"
              c:identifier="nm_setting_wireguard_get_mtu"
              version="1.16">
        <source-position filename="libnm-core/nm-setting-wireguard.h"
                         line="204"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-wireguard.c"
               line="1005">the MTU of the setting.</doc>
          <type name="guint32" c:type="guint32"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wireguard.c"
                 line="1003">the #NMSettingWireGuard instance</doc>
            <type name="SettingWireGuard" c:type="NMSettingWireGuard*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_peer"
              c:identifier="nm_setting_wireguard_get_peer"
              version="1.16">
        <source-position filename="libnm-core/nm-setting-wireguard.h"
                         line="176"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-wireguard.c"
               line="1126">the #NMWireGuardPeer entry at
  index @idx. If the index is out of range, %NULL is returned.</doc>
          <type name="WireGuardPeer" c:type="NMWireGuardPeer*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wireguard.c"
                 line="1123">the #NMSettingWireGuard instance</doc>
            <type name="SettingWireGuard" c:type="NMSettingWireGuard*"/>
          </instance-parameter>
          <parameter name="idx" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wireguard.c"
                 line="1124">the index to lookup.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_peer_by_public_key"
              c:identifier="nm_setting_wireguard_get_peer_by_public_key"
              version="1.16">
        <source-position filename="libnm-core/nm-setting-wireguard.h"
                         line="180"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-wireguard.c"
               line="1156">the #NMWireGuardPeer instance with a
  matching public key. If no such peer exists, %NULL is returned.</doc>
          <type name="WireGuardPeer" c:type="NMWireGuardPeer*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wireguard.c"
                 line="1149">the #NMSettingWireGuard instance</doc>
            <type name="SettingWireGuard" c:type="NMSettingWireGuard*"/>
          </instance-parameter>
          <parameter name="public_key" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wireguard.c"
                 line="1150">the public key for looking up the
  peer.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="out_idx"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wireguard.c"
                 line="1152">(allow-none): optional output argument
  for the index of the found peer. If no index is found,
  this is set to the nm_setting_wireguard_get_peers_len().</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_peer_routes"
              c:identifier="nm_setting_wireguard_get_peer_routes"
              version="1.16">
        <source-position filename="libnm-core/nm-setting-wireguard.h"
                         line="201"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-wireguard.c"
               line="989">whether automatically add peer routes.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wireguard.c"
                 line="987">the #NMSettingWireGuard instance</doc>
            <type name="SettingWireGuard" c:type="NMSettingWireGuard*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_peers_len"
              c:identifier="nm_setting_wireguard_get_peers_len"
              version="1.16">
        <source-position filename="libnm-core/nm-setting-wireguard.h"
                         line="173"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-wireguard.c"
               line="1109">the number of registered peers.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wireguard.c"
                 line="1107">the #NMSettingWireGuard instance</doc>
            <type name="SettingWireGuard" c:type="NMSettingWireGuard*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_private_key"
              c:identifier="nm_setting_wireguard_get_private_key"
              version="1.16">
        <source-position filename="libnm-core/nm-setting-wireguard.h"
                         line="159"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-wireguard.c"
               line="925">the set private-key or %NULL.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wireguard.c"
                 line="923">the #NMSettingWireGuard instance</doc>
            <type name="SettingWireGuard" c:type="NMSettingWireGuard*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_private_key_flags"
              c:identifier="nm_setting_wireguard_get_private_key_flags"
              version="1.16">
        <source-position filename="libnm-core/nm-setting-wireguard.h"
                         line="162"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-wireguard.c"
               line="941">the secret-flags for #NMSettingWireGuard:private-key.</doc>
          <type name="SettingSecretFlags" c:type="NMSettingSecretFlags"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wireguard.c"
                 line="939">the #NMSettingWireGuard instance</doc>
            <type name="SettingWireGuard" c:type="NMSettingWireGuard*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="remove_peer"
              c:identifier="nm_setting_wireguard_remove_peer"
              version="1.16">
        <source-position filename="libnm-core/nm-setting-wireguard.h"
                         line="194"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-wireguard.c"
               line="1342">%TRUE if @idx was in range and a peer
  was removed. Otherwise, @self is unchanged.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wireguard.c"
                 line="1339">the #NMSettingWireGuard instance</doc>
            <type name="SettingWireGuard" c:type="NMSettingWireGuard*"/>
          </instance-parameter>
          <parameter name="idx" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wireguard.c"
                 line="1340">the index to remove.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_peer"
              c:identifier="nm_setting_wireguard_set_peer"
              version="1.16">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-wireguard.c"
             line="1267">If @idx is one past the last peer, the behavior is the same
as nm_setting_wireguard_append_peer().
Otherwise, the peer will be at @idx and replace the peer
instance at that index. Note that if a peer with the same
public-key exists on another index, then that peer will also
be replaced. In that case, the number of peers will shrink
by one (because the one at @idx got replace and then one
with the same public-key got removed). This also means,
that the resulting index afterwards may be one less than
@idx (if another peer with a lower index was dropped).</doc>
        <source-position filename="libnm-core/nm-setting-wireguard.h"
                         line="185"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wireguard.c"
                 line="1269">the #NMSettingWireGuard instance</doc>
            <type name="SettingWireGuard" c:type="NMSettingWireGuard*"/>
          </instance-parameter>
          <parameter name="peer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wireguard.c"
                 line="1270">the #NMWireGuardPeer instance to set.
  This seals @peer and keeps a reference on the
  instance.</doc>
            <type name="WireGuardPeer" c:type="NMWireGuardPeer*"/>
          </parameter>
          <parameter name="idx" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wireguard.c"
                 line="1273">the index, in the range of 0 to the number of
  peers (including). That means, if @idx is one past
  the end of the number of peers, this is the same as
  nm_setting_wireguard_append_peer(). Otherwise, the
  peer at this index is replaced.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <property name="fwmark"
                version="1.16"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-wireguard.c"
             line="2360">The use of fwmark is optional and is by default off. Setting it to 0
disables it. Otherwise it is a 32-bit fwmark for outgoing packets.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="listen-port"
                version="1.16"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-wireguard.c"
             line="2375">The listen-port. If listen-port is not specified, the port will be chosen
randomly when the interface comes up.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="mtu"
                version="1.16"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-wireguard.c"
             line="2410">If non-zero, only transmit packets of the specified size or smaller,
breaking larger packets up into multiple fragments.

If zero a default MTU is used. Note that contrary to wg-quick's MTU
setting, this does not take into account the current routes at the
time of activation.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="peer-routes"
                version="1.16"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-wireguard.c"
             line="2390">Whether to automatically add routes for the AllowedIPs ranges
of the peers. If %TRUE (the default), NetworkManager will automatically
add routes in the routing tables according to ipv4.route-table and
ipv6.route-table.
If %FALSE, no such routes are added automatically. In this case, the
user may want to configure static routes in ipv4.routes and ipv6.routes,
respectively.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="private-key"
                version="1.16"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-wireguard.c"
             line="2331">The 256 bit private-key in base64 encoding.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="private-key-flags"
                version="1.16"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-wireguard.c"
             line="2345">Flags indicating how to handle the #NMSettingWirelessSecurity:private-key
property.</doc>
        <type name="SettingSecretFlags"/>
      </property>
    </class>
    <record name="SettingWireGuardClass"
            c:type="NMSettingWireGuardClass"
            disguised="1"
            glib:is-gtype-struct-for="SettingWireGuard">
      <source-position filename="libnm-core/nm-setting-wireguard.h"
                       line="148"/>
    </record>
    <class name="SettingWired"
           c:symbol-prefix="setting_wired"
           c:type="NMSettingWired"
           parent="Setting"
           glib:type-name="NMSettingWired"
           glib:get-type="nm_setting_wired_get_type"
           glib:type-struct="SettingWiredClass">
      <doc xml:space="preserve"
           filename="libnm-core/nm-setting-wired.h"
           line="96">Wired Ethernet Settings</doc>
      <source-position filename="libnm-core/nm-setting-wired.h" line="110"/>
      <constructor name="new" c:identifier="nm_setting_wired_new">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-wired.c"
             line="954">Creates a new #NMSettingWired object with default values.</doc>
        <source-position filename="libnm-core/nm-setting-wired.h" line="114"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-wired.c"
               line="959">the new empty #NMSettingWired object</doc>
          <type name="Setting" c:type="NMSetting*"/>
        </return-value>
      </constructor>
      <method name="add_mac_blacklist_item"
              c:identifier="nm_setting_wired_add_mac_blacklist_item">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-wired.c"
             line="251">Adds a new MAC address to the #NMSettingWired:mac-address-blacklist property.</doc>
        <source-position filename="libnm-core/nm-setting-wired.h" line="129"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-wired.c"
               line="258">%TRUE if the MAC address was added; %FALSE if the MAC address
is invalid or was already present</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wired.c"
                 line="253">the #NMSettingWired</doc>
            <type name="SettingWired" c:type="NMSettingWired*"/>
          </instance-parameter>
          <parameter name="mac" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wired.c"
                 line="254">the MAC address string (hex-digits-and-colons notation) to blacklist</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_s390_option"
              c:identifier="nm_setting_wired_add_s390_option">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-wired.c"
             line="492">Add an option to the table.  The option is compared to an internal list
of allowed options.  Key names may contain only alphanumeric characters
(ie [a-zA-Z0-9]).  Adding a new key replaces any existing key/value pair that
may already exist.</doc>
        <source-position filename="libnm-core/nm-setting-wired.h" line="149"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-wired.c"
               line="503">%TRUE if the option was valid and was added to the internal option
list, %FALSE if it was not.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wired.c"
                 line="494">the #NMSettingWired</doc>
            <type name="SettingWired" c:type="NMSettingWired*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wired.c"
                 line="495">key name for the option</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wired.c"
                 line="496">value for the option</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="clear_mac_blacklist_items"
              c:identifier="nm_setting_wired_clear_mac_blacklist_items">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-wired.c"
             line="340">Removes all blacklisted MAC addresses.</doc>
        <source-position filename="libnm-core/nm-setting-wired.h" line="135"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wired.c"
                 line="342">the #NMSettingWired</doc>
            <type name="SettingWired" c:type="NMSettingWired*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_auto_negotiate"
              c:identifier="nm_setting_wired_get_auto_negotiate">
        <source-position filename="libnm-core/nm-setting-wired.h" line="118"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-wired.c"
               line="145">the #NMSettingWired:auto-negotiate property of the setting</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wired.c"
                 line="143">the #NMSettingWired</doc>
            <type name="SettingWired" c:type="NMSettingWired*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_cloned_mac_address"
              c:identifier="nm_setting_wired_get_cloned_mac_address">
        <source-position filename="libnm-core/nm-setting-wired.h" line="120"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-wired.c"
               line="173">the #NMSettingWired:cloned-mac-address property of the setting</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wired.c"
                 line="171">the #NMSettingWired</doc>
            <type name="SettingWired" c:type="NMSettingWired*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_duplex" c:identifier="nm_setting_wired_get_duplex">
        <source-position filename="libnm-core/nm-setting-wired.h" line="117"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-wired.c"
               line="131">the #NMSettingWired:duplex property of the setting</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wired.c"
                 line="129">the #NMSettingWired</doc>
            <type name="SettingWired" c:type="NMSettingWired*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_generate_mac_address_mask"
              c:identifier="nm_setting_wired_get_generate_mac_address_mask"
              version="1.4">
        <source-position filename="libnm-core/nm-setting-wired.h" line="123"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-wired.c"
               line="187">the #NMSettingWired:generate-mac-address-mask property of the setting</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wired.c"
                 line="185">the #NMSettingWired</doc>
            <type name="SettingWired" c:type="NMSettingWired*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_mac_address"
              c:identifier="nm_setting_wired_get_mac_address">
        <source-position filename="libnm-core/nm-setting-wired.h" line="119"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-wired.c"
               line="159">the #NMSettingWired:mac-address property of the setting</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wired.c"
                 line="157">the #NMSettingWired</doc>
            <type name="SettingWired" c:type="NMSettingWired*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_mac_address_blacklist"
              c:identifier="nm_setting_wired_get_mac_address_blacklist">
        <source-position filename="libnm-core/nm-setting-wired.h" line="125"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-wired.c"
               line="203">the #NMSettingWired:mac-address-blacklist property of the setting</doc>
          <array c:type="const char* const*">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wired.c"
                 line="201">the #NMSettingWired</doc>
            <type name="SettingWired" c:type="NMSettingWired*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_mac_blacklist_item"
              c:identifier="nm_setting_wired_get_mac_blacklist_item">
        <source-position filename="libnm-core/nm-setting-wired.h" line="127"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-wired.c"
               line="235">the blacklisted MAC address string (hex-digits-and-colons notation)
at index @idx</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wired.c"
                 line="232">the #NMSettingWired</doc>
            <type name="SettingWired" c:type="NMSettingWired*"/>
          </instance-parameter>
          <parameter name="idx" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wired.c"
                 line="233">the zero-based index of the MAC address entry</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_mtu" c:identifier="nm_setting_wired_get_mtu">
        <source-position filename="libnm-core/nm-setting-wired.h" line="137"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-wired.c"
               line="359">the #NMSettingWired:mtu property of the setting</doc>
          <type name="guint32" c:type="guint32"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wired.c"
                 line="357">the #NMSettingWired</doc>
            <type name="SettingWired" c:type="NMSettingWired*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_num_mac_blacklist_items"
              c:identifier="nm_setting_wired_get_num_mac_blacklist_items">
        <source-position filename="libnm-core/nm-setting-wired.h" line="126"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-wired.c"
               line="220">the number of blacklisted MAC addresses</doc>
          <type name="guint32" c:type="guint32"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wired.c"
                 line="218">the #NMSettingWired</doc>
            <type name="SettingWired" c:type="NMSettingWired*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_num_s390_options"
              c:identifier="nm_setting_wired_get_num_s390_options">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-wired.c"
             line="405">Returns the number of s390-specific options that should be set for this
device when it is activated.  This can be used to retrieve each s390
option individually using nm_setting_wired_get_s390_option().</doc>
        <source-position filename="libnm-core/nm-setting-wired.h" line="142"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-wired.c"
               line="413">the number of s390-specific device options</doc>
          <type name="guint32" c:type="guint32"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wired.c"
                 line="407">the #NMSettingWired</doc>
            <type name="SettingWired" c:type="NMSettingWired*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_port" c:identifier="nm_setting_wired_get_port">
        <source-position filename="libnm-core/nm-setting-wired.h" line="115"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-wired.c"
               line="103">the #NMSettingWired:port property of the setting</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wired.c"
                 line="101">the #NMSettingWired</doc>
            <type name="SettingWired" c:type="NMSettingWired*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_s390_nettype"
              c:identifier="nm_setting_wired_get_s390_nettype">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-wired.c"
             line="388">Returns the s390 device type this connection should apply to.  Will be one
of 'qeth', 'lcs', or 'ctc'.</doc>
        <source-position filename="libnm-core/nm-setting-wired.h" line="140"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-wired.c"
               line="395">the s390 device type</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wired.c"
                 line="390">the #NMSettingWired</doc>
            <type name="SettingWired" c:type="NMSettingWired*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_s390_option"
              c:identifier="nm_setting_wired_get_s390_option">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-wired.c"
             line="423">Given an index, return the value of the s390 option at that index.  indexes
are *not* guaranteed to be static across modifications to options done by
nm_setting_wired_add_s390_option() and nm_setting_wired_remove_s390_option(),
and should not be used to refer to options except for short periods of time
such as during option iteration.</doc>
        <source-position filename="libnm-core/nm-setting-wired.h" line="143"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-wired.c"
               line="440">%TRUE on success if the index was valid and an option was found,
%FALSE if the index was invalid (ie, greater than the number of options
currently held by the setting)</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wired.c"
                 line="425">the #NMSettingWired</doc>
            <type name="SettingWired" c:type="NMSettingWired*"/>
          </instance-parameter>
          <parameter name="idx" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wired.c"
                 line="426">index of the desired option, from 0 to
nm_setting_wired_get_num_s390_options() - 1</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
          <parameter name="out_key"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wired.c"
                 line="428">on return, the key name of the s390 specific
  option; this value is owned by the setting and should not be modified</doc>
            <type name="utf8" c:type="const char**"/>
          </parameter>
          <parameter name="out_value"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wired.c"
                 line="430">on return, the value of the key of the
  s390 specific option; this value is owned by the setting and should not be
  modified</doc>
            <type name="utf8" c:type="const char**"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_s390_option_by_key"
              c:identifier="nm_setting_wired_get_s390_option_by_key">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-wired.c"
             line="470">Returns the value associated with the s390-specific option specified by
@key, if it exists.</doc>
        <source-position filename="libnm-core/nm-setting-wired.h" line="147"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-wired.c"
               line="478">the value, or %NULL if the key/value pair was never added to the
setting; the value is owned by the setting and must not be modified</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wired.c"
                 line="472">the #NMSettingWired</doc>
            <type name="SettingWired" c:type="NMSettingWired*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wired.c"
                 line="473">the key for which to retrieve the value</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_s390_subchannels"
              c:identifier="nm_setting_wired_get_s390_subchannels">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-wired.c"
             line="369">Return the list of s390 subchannels that identify the device that this
connection is applicable to.  The connection should only be used in
conjunction with that device.</doc>
        <source-position filename="libnm-core/nm-setting-wired.h" line="139"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-wired.c"
               line="377">array of strings, each specifying
  one subchannel the s390 device uses to communicate to the host.</doc>
          <array c:type="const char* const*">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wired.c"
                 line="371">the #NMSettingWired</doc>
            <type name="SettingWired" c:type="NMSettingWired*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_speed" c:identifier="nm_setting_wired_get_speed">
        <source-position filename="libnm-core/nm-setting-wired.h" line="116"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-wired.c"
               line="117">the #NMSettingWired:speed property of the setting</doc>
          <type name="guint32" c:type="guint32"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wired.c"
                 line="115">the #NMSettingWired</doc>
            <type name="SettingWired" c:type="NMSettingWired*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_valid_s390_options"
              c:identifier="nm_setting_wired_get_valid_s390_options">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-wired.c"
             line="556">Returns a list of valid s390 options.

The @setting argument is unused and %NULL may be passed instead.</doc>
        <source-position filename="libnm-core/nm-setting-wired.h" line="154"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-wired.c"
               line="564">a %NULL-terminated array of strings of valid s390 options.</doc>
          <array c:type="const char**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="setting"
                              transfer-ownership="none"
                              nullable="1"
                              allow-none="1">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wired.c"
                 line="558">the #NMSettingWired</doc>
            <type name="SettingWired" c:type="NMSettingWired*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_wake_on_lan"
              c:identifier="nm_setting_wired_get_wake_on_lan"
              version="1.2">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-wired.c"
             line="572">Returns the Wake-on-LAN options enabled for the connection</doc>
        <source-position filename="libnm-core/nm-setting-wired.h" line="156"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-wired.c"
               line="578">the Wake-on-LAN options</doc>
          <type name="SettingWiredWakeOnLan" c:type="NMSettingWiredWakeOnLan"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wired.c"
                 line="574">the #NMSettingWired</doc>
            <type name="SettingWired" c:type="NMSettingWired*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_wake_on_lan_password"
              c:identifier="nm_setting_wired_get_wake_on_lan_password"
              version="1.2">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-wired.c"
             line="590">Returns the Wake-on-LAN password. This only applies to
%NM_SETTING_WIRED_WAKE_ON_LAN_MAGIC.</doc>
        <source-position filename="libnm-core/nm-setting-wired.h" line="157"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-wired.c"
               line="597">the Wake-on-LAN setting password, or %NULL if there is no password.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wired.c"
                 line="592">the #NMSettingWired</doc>
            <type name="SettingWired" c:type="NMSettingWired*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="remove_mac_blacklist_item"
              c:identifier="nm_setting_wired_remove_mac_blacklist_item">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-wired.c"
             line="287">Removes the MAC address at index @idx from the blacklist.</doc>
        <source-position filename="libnm-core/nm-setting-wired.h" line="131"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wired.c"
                 line="289">the #NMSettingWired</doc>
            <type name="SettingWired" c:type="NMSettingWired*"/>
          </instance-parameter>
          <parameter name="idx" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wired.c"
                 line="290">index number of the MAC address</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_mac_blacklist_item_by_value"
              c:identifier="nm_setting_wired_remove_mac_blacklist_item_by_value">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-wired.c"
             line="308">Removes the MAC address @mac from the blacklist.</doc>
        <source-position filename="libnm-core/nm-setting-wired.h" line="133"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-wired.c"
               line="316">%TRUE if the MAC address was found and removed; %FALSE if it was not.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wired.c"
                 line="310">the #NMSettingWired</doc>
            <type name="SettingWired" c:type="NMSettingWired*"/>
          </instance-parameter>
          <parameter name="mac" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wired.c"
                 line="311">the MAC address string (hex-digits-and-colons notation) to remove from
the blacklist</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_s390_option"
              c:identifier="nm_setting_wired_remove_s390_option">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-wired.c"
             line="529">Remove the s390-specific option referenced by @key from the internal option
list.</doc>
        <source-position filename="libnm-core/nm-setting-wired.h" line="152"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-wired.c"
               line="537">%TRUE if the option was found and removed from the internal option
list, %FALSE if it was not.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wired.c"
                 line="531">the #NMSettingWired</doc>
            <type name="SettingWired" c:type="NMSettingWired*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wired.c"
                 line="532">key name for the option to remove</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <property name="auto-negotiate"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-wired.c"
             line="1087">When %TRUE, enforce auto-negotiation of speed and duplex mode.
If "speed" and "duplex" properties are both specified, only that
single mode will be advertised and accepted during the link
auto-negotiation process: this works only for BASE-T 802.3 specifications
and is useful for enforcing gigabits modes, as in these cases link
negotiation is mandatory.
When %FALSE, "speed" and "duplex" properties should be both set or
link configuration will be skipped.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="cloned-mac-address"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-wired.c"
             line="1158">If specified, request that the device use this MAC address instead.
This is known as MAC cloning or spoofing.

Beside explicitly specifying a MAC address, the special values "preserve", "permanent",
"random" and "stable" are supported.
"preserve" means not to touch the MAC address on activation.
"permanent" means to use the permanent hardware address if the device
has one (otherwise this is treated as "preserve").
"random" creates a random MAC address on each connect.
"stable" creates a hashed MAC address based on connection.stable-id and a
machine dependent key.

If unspecified, the value can be overwritten via global defaults, see manual
of NetworkManager.conf. If still unspecified, it defaults to "preserve"
(older versions of NetworkManager may use a different default value).

On D-Bus, this field is expressed as "assigned-mac-address" or the deprecated
"cloned-mac-address".</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="duplex" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-wired.c"
             line="1058">When a value is set, either "half" or "full", configures the device
to use the specified duplex mode. If "auto-negotiate" is "yes" the
specified duplex mode will be the only one advertised during link
negotiation: this works only for BASE-T 802.3 specifications and is
useful for enforcing gigabits modes, as in these cases link negotiation
is mandatory.
If the value is unset (the default), the link configuration will be
either skipped (if "auto-negotiate" is "no", the default) or will
be auto-negotiated (if "auto-negotiate" is "yes") and the local device
will advertise all the supported duplex modes.
Must be set together with the "speed" property if specified.
Before specifying a duplex mode be sure your device supports it.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="generate-mac-address-mask"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-wired.c"
             line="1233">With #NMSettingWired:cloned-mac-address setting "random" or "stable",
by default all bits of the MAC address are scrambled and a locally-administered,
unicast MAC address is created. This property allows to specify that certain bits
are fixed. Note that the least significant bit of the first MAC address will
always be unset to create a unicast MAC address.

If the property is %NULL, it is eligible to be overwritten by a default
connection setting. If the value is still %NULL or an empty string, the
default is to create a locally-administered, unicast MAC address.

If the value contains one MAC address, this address is used as mask. The set
bits of the mask are to be filled with the current MAC address of the device,
while the unset bits are subject to randomization.
Setting "FE:FF:FF:00:00:00" means to preserve the OUI of the current MAC address
and only randomize the lower 3 bytes using the "random" or "stable" algorithm.

If the value contains one additional MAC address after the mask,
this address is used instead of the current MAC address to fill the bits
that shall not be randomized. For example, a value of
"FE:FF:FF:00:00:00 68:F7:28:00:00:00" will set the OUI of the MAC address
to 68:F7:28, while the lower bits are randomized. A value of
"02:00:00:00:00:00 00:00:00:00:00:00" will create a fully scrambled
globally-administered, burned-in MAC address.

If the value contains more than one additional MAC addresses, one of
them is chosen randomly. For example, "02:00:00:00:00:00 00:00:00:00:00:00 02:00:00:00:00:00"
will create a fully scrambled MAC address, randomly locally or globally
administered.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="mac-address" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-wired.c"
             line="1121">If specified, this connection will only apply to the Ethernet device
whose permanent MAC address matches. This property does not change the
MAC address of the device (i.e. MAC spoofing).</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="mac-address-blacklist"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-wired.c"
             line="1279">If specified, this connection will never apply to the Ethernet device
whose permanent MAC address matches an address in the list.  Each MAC
address is in the standard hex-digits-and-colons notation
(00:11:22:33:44:55).</doc>
        <array>
          <type name="utf8"/>
        </array>
      </property>
      <property name="mtu"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-wired.c"
             line="1308">If non-zero, only transmit packets of the specified size or smaller,
breaking larger packets up into multiple Ethernet frames.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="port" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-wired.c"
             line="1007">Specific port type to use if the device supports multiple
attachment methods.  One of "tp" (Twisted Pair), "aui" (Attachment Unit
Interface), "bnc" (Thin Ethernet) or "mii" (Media Independent Interface).
If the device supports only one port type, this setting is ignored.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="s390-nettype" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-wired.c"
             line="1353">s390 network device type; one of "qeth", "lcs", or "ctc", representing
the different types of virtual network devices available on s390 systems.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="s390-options" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-wired.c"
             line="1374">Dictionary of key/value pairs of s390-specific device options.  Both keys
and values must be strings.  Allowed keys include "portno", "layer2",
"portname", "protocol", among others.  Key names must contain only
alphanumeric characters (ie, [a-zA-Z0-9]).</doc>
        <type name="GLib.HashTable">
          <type name="utf8"/>
          <type name="utf8"/>
        </type>
      </property>
      <property name="s390-subchannels" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-wired.c"
             line="1328">Identifies specific subchannels that this network device uses for
communication with z/VM or s390 host.  Like the
#NMSettingWired:mac-address property for non-z/VM devices, this property
can be used to ensure this connection only applies to the network device
that uses these subchannels.  The list should contain exactly 3 strings,
and each string may only be composed of hexadecimal characters and the
period (.) character.</doc>
        <array>
          <type name="utf8"/>
        </array>
      </property>
      <property name="speed"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-wired.c"
             line="1027">When a value grater than 0 is set, configures the device to use
the specified speed. If "auto-negotiate" is "yes" the specified
speed will be the only one advertised during link negotiation:
this works only for BASE-T 802.3 specifications and is useful for
enforcing gigabit speeds, as in this case link negotiation is
mandatory.
If the value is unset (0, the default), the link configuration will be
either skipped (if "auto-negotiate" is "no", the default) or will
be auto-negotiated (if "auto-negotiate" is "yes") and the local device
will advertise all the supported speeds.
In Mbit/s, ie 100 == 100Mbit/s.
Must be set together with the "duplex" property when non-zero.
Before specifying a speed value be sure your device supports it.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="wake-on-lan"
                version="1.2"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-wired.c"
             line="1402">The #NMSettingWiredWakeOnLan options to enable. Not all devices support all options.
May be any combination of %NM_SETTING_WIRED_WAKE_ON_LAN_PHY,
%NM_SETTING_WIRED_WAKE_ON_LAN_UNICAST, %NM_SETTING_WIRED_WAKE_ON_LAN_MULTICAST,
%NM_SETTING_WIRED_WAKE_ON_LAN_BROADCAST, %NM_SETTING_WIRED_WAKE_ON_LAN_ARP,
%NM_SETTING_WIRED_WAKE_ON_LAN_MAGIC or the special values
%NM_SETTING_WIRED_WAKE_ON_LAN_DEFAULT (to use global settings) and
%NM_SETTING_WIRED_WAKE_ON_LAN_IGNORE (to disable management of Wake-on-LAN in
NetworkManager).</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="wake-on-lan-password"
                version="1.2"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-wired.c"
             line="1423">If specified, the password used with magic-packet-based
Wake-on-LAN, represented as an Ethernet MAC address.  If %NULL,
no password will be required.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent">
        <type name="Setting" c:type="NMSetting"/>
      </field>
    </class>
    <record name="SettingWiredClass"
            c:type="NMSettingWiredClass"
            glib:is-gtype-struct-for="SettingWired">
      <source-position filename="libnm-core/nm-setting-wired.h" line="110"/>
      <field name="parent">
        <type name="SettingClass" c:type="NMSettingClass"/>
      </field>
      <field name="padding" readable="0" private="1">
        <array zero-terminated="0" fixed-size="4">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <bitfield name="SettingWiredWakeOnLan"
              version="1.2"
              glib:type-name="NMSettingWiredWakeOnLan"
              glib:get-type="nm_setting_wired_wake_on_lan_get_type"
              c:type="NMSettingWiredWakeOnLan">
      <doc xml:space="preserve"
           filename="libnm-core/nm-setting-wired.h"
           line="43">Options for #NMSettingWired:wake-on-lan. Note that not all options
are supported by all devices.</doc>
      <member name="phy"
              value="2"
              c:identifier="NM_SETTING_WIRED_WAKE_ON_LAN_PHY"
              glib:nick="phy">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-wired.h"
             line="46">Wake on PHY activity</doc>
      </member>
      <member name="unicast"
              value="4"
              c:identifier="NM_SETTING_WIRED_WAKE_ON_LAN_UNICAST"
              glib:nick="unicast">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-wired.h"
             line="47">Wake on unicast messages</doc>
      </member>
      <member name="multicast"
              value="8"
              c:identifier="NM_SETTING_WIRED_WAKE_ON_LAN_MULTICAST"
              glib:nick="multicast">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-wired.h"
             line="48">Wake on multicast messages</doc>
      </member>
      <member name="broadcast"
              value="16"
              c:identifier="NM_SETTING_WIRED_WAKE_ON_LAN_BROADCAST"
              glib:nick="broadcast">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-wired.h"
             line="49">Wake on broadcast messages</doc>
      </member>
      <member name="arp"
              value="32"
              c:identifier="NM_SETTING_WIRED_WAKE_ON_LAN_ARP"
              glib:nick="arp">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-wired.h"
             line="50">Wake on ARP</doc>
      </member>
      <member name="magic"
              value="64"
              c:identifier="NM_SETTING_WIRED_WAKE_ON_LAN_MAGIC"
              glib:nick="magic">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-wired.h"
             line="51">Wake on magic packet</doc>
      </member>
      <member name="default"
              value="1"
              c:identifier="NM_SETTING_WIRED_WAKE_ON_LAN_DEFAULT"
              glib:nick="default">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-wired.h"
             line="55">Use the default value</doc>
      </member>
      <member name="ignore"
              value="32768"
              c:identifier="NM_SETTING_WIRED_WAKE_ON_LAN_IGNORE"
              glib:nick="ignore">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-wired.h"
             line="56">Don't change configured settings</doc>
      </member>
    </bitfield>
    <class name="SettingWireless"
           c:symbol-prefix="setting_wireless"
           c:type="NMSettingWireless"
           parent="Setting"
           glib:type-name="NMSettingWireless"
           glib:get-type="nm_setting_wireless_get_type"
           glib:type-struct="SettingWirelessClass">
      <doc xml:space="preserve"
           filename="libnm-core/nm-setting-wireless.h"
           line="145">Wi-Fi Settings</doc>
      <source-position filename="libnm-core/nm-setting-wireless.h" line="159"/>
      <constructor name="new" c:identifier="nm_setting_wireless_new">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-wireless.c"
             line="1158">Creates a new #NMSettingWireless object with default values.</doc>
        <source-position filename="libnm-core/nm-setting-wireless.h"
                         line="163"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-wireless.c"
               line="1163">the new empty #NMSettingWireless object</doc>
          <type name="Setting" c:type="NMSetting*"/>
        </return-value>
      </constructor>
      <method name="add_mac_blacklist_item"
              c:identifier="nm_setting_wireless_add_mac_blacklist_item">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-wireless.c"
             line="481">Adds a new MAC address to the #NMSettingWireless:mac-address-blacklist property.</doc>
        <source-position filename="libnm-core/nm-setting-wireless.h"
                         line="182"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-wireless.c"
               line="488">%TRUE if the MAC address was added; %FALSE if the MAC address
is invalid or was already present</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wireless.c"
                 line="483">the #NMSettingWireless</doc>
            <type name="SettingWireless" c:type="NMSettingWireless*"/>
          </instance-parameter>
          <parameter name="mac" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wireless.c"
                 line="484">the MAC address string (hex-digits-and-colons notation) to blacklist</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_seen_bssid"
              c:identifier="nm_setting_wireless_add_seen_bssid">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-wireless.c"
             line="646">Adds a new Wi-Fi AP's BSSID to the previously seen BSSID list of the setting.
NetworkManager now tracks previously seen BSSIDs internally so this function
no longer has much use. Actually, changes you make using this function will
not be preserved.</doc>
        <source-position filename="libnm-core/nm-setting-wireless.h"
                         line="198"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-wireless.c"
               line="656">%TRUE if @bssid was already known, %FALSE if not</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wireless.c"
                 line="648">the #NMSettingWireless</doc>
            <type name="SettingWireless" c:type="NMSettingWireless*"/>
          </instance-parameter>
          <parameter name="bssid" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wireless.c"
                 line="649">the new BSSID to add to the list</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="ap_security_compatible"
              c:identifier="nm_setting_wireless_ap_security_compatible">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-wireless.c"
             line="106">Given a #NMSettingWireless and an optional #NMSettingWirelessSecurity,
determine if the configuration given by the settings is compatible with
the security of an access point using that access point's capability flags
and mode.  Useful for clients that wish to filter a set of connections
against a set of access points and determine which connections are
compatible with which access points.</doc>
        <source-position filename="libnm-core/nm-setting-wireless.h"
                         line="205"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-wireless.c"
               line="124">%TRUE if the given settings are compatible with the access point's
security flags and mode, %FALSE if they are not.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="s_wireless" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wireless.c"
                 line="108">a #NMSettingWireless</doc>
            <type name="SettingWireless" c:type="NMSettingWireless*"/>
          </instance-parameter>
          <parameter name="s_wireless_sec" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wireless.c"
                 line="109">a #NMSettingWirelessSecurity or %NULL</doc>
            <type name="SettingWirelessSecurity"
                  c:type="NMSettingWirelessSecurity*"/>
          </parameter>
          <parameter name="ap_flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wireless.c"
                 line="110">the %NM80211ApFlags of the given access point</doc>
            <type name="80211ApFlags" c:type="NM80211ApFlags"/>
          </parameter>
          <parameter name="ap_wpa" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wireless.c"
                 line="111">the %NM80211ApSecurityFlags of the given access point's WPA
capabilities</doc>
            <type name="80211ApSecurityFlags" c:type="NM80211ApSecurityFlags"/>
          </parameter>
          <parameter name="ap_rsn" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wireless.c"
                 line="113">the %NM80211ApSecurityFlags of the given access point's WPA2/RSN
capabilities</doc>
            <type name="80211ApSecurityFlags" c:type="NM80211ApSecurityFlags"/>
          </parameter>
          <parameter name="ap_mode" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wireless.c"
                 line="115">the 802.11 mode of the AP, either Ad-Hoc or Infrastructure</doc>
            <type name="80211Mode" c:type="NM80211Mode"/>
          </parameter>
        </parameters>
      </method>
      <method name="clear_mac_blacklist_items"
              c:identifier="nm_setting_wireless_clear_mac_blacklist_items">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-wireless.c"
             line="570">Removes all blacklisted MAC addresses.</doc>
        <source-position filename="libnm-core/nm-setting-wireless.h"
                         line="188"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wireless.c"
                 line="572">the #NMSettingWireless</doc>
            <type name="SettingWireless" c:type="NMSettingWireless*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_band" c:identifier="nm_setting_wireless_get_band">
        <source-position filename="libnm-core/nm-setting-wireless.h"
                         line="167"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-wireless.c"
               line="319">the #NMSettingWireless:band property of the setting</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wireless.c"
                 line="317">the #NMSettingWireless</doc>
            <type name="SettingWireless" c:type="NMSettingWireless*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_bssid" c:identifier="nm_setting_wireless_get_bssid">
        <source-position filename="libnm-core/nm-setting-wireless.h"
                         line="169"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-wireless.c"
               line="347">the #NMSettingWireless:bssid property of the setting</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wireless.c"
                 line="345">the #NMSettingWireless</doc>
            <type name="SettingWireless" c:type="NMSettingWireless*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_channel"
              c:identifier="nm_setting_wireless_get_channel">
        <source-position filename="libnm-core/nm-setting-wireless.h"
                         line="168"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-wireless.c"
               line="333">the #NMSettingWireless:channel property of the setting</doc>
          <type name="guint32" c:type="guint32"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wireless.c"
                 line="331">the #NMSettingWireless</doc>
            <type name="SettingWireless" c:type="NMSettingWireless*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_cloned_mac_address"
              c:identifier="nm_setting_wireless_get_cloned_mac_address">
        <source-position filename="libnm-core/nm-setting-wireless.h"
                         line="173"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-wireless.c"
               line="403">the #NMSettingWireless:cloned-mac-address property of the setting</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wireless.c"
                 line="401">the #NMSettingWireless</doc>
            <type name="SettingWireless" c:type="NMSettingWireless*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_generate_mac_address_mask"
              c:identifier="nm_setting_wireless_get_generate_mac_address_mask"
              version="1.4">
        <source-position filename="libnm-core/nm-setting-wireless.h"
                         line="176"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-wireless.c"
               line="417">the #NMSettingWireless:generate-mac-address-mask property of the setting</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wireless.c"
                 line="415">the #NMSettingWireless</doc>
            <type name="SettingWireless" c:type="NMSettingWireless*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_hidden" c:identifier="nm_setting_wireless_get_hidden">
        <source-position filename="libnm-core/nm-setting-wireless.h"
                         line="191"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-wireless.c"
               line="603">the #NMSettingWireless:hidden property of the setting</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wireless.c"
                 line="601">the #NMSettingWireless</doc>
            <type name="SettingWireless" c:type="NMSettingWireless*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_mac_address"
              c:identifier="nm_setting_wireless_get_mac_address">
        <source-position filename="libnm-core/nm-setting-wireless.h"
                         line="172"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-wireless.c"
               line="389">the #NMSettingWireless:mac-address property of the setting</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wireless.c"
                 line="387">the #NMSettingWireless</doc>
            <type name="SettingWireless" c:type="NMSettingWireless*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_mac_address_blacklist"
              c:identifier="nm_setting_wireless_get_mac_address_blacklist">
        <source-position filename="libnm-core/nm-setting-wireless.h"
                         line="178"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-wireless.c"
               line="433">the #NMSettingWireless:mac-address-blacklist property of the setting</doc>
          <array c:type="const char* const*">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wireless.c"
                 line="431">the #NMSettingWireless</doc>
            <type name="SettingWireless" c:type="NMSettingWireless*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_mac_address_randomization"
              c:identifier="nm_setting_wireless_get_mac_address_randomization"
              version="1.2">
        <source-position filename="libnm-core/nm-setting-wireless.h"
                         line="196"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-wireless.c"
               line="633">the #NMSettingWireless:mac-address-randomization property of the
setting</doc>
          <type name="SettingMacRandomization"
                c:type="NMSettingMacRandomization"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wireless.c"
                 line="631">the #NMSettingWireless</doc>
            <type name="SettingWireless" c:type="NMSettingWireless*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_mac_blacklist_item"
              c:identifier="nm_setting_wireless_get_mac_blacklist_item">
        <source-position filename="libnm-core/nm-setting-wireless.h"
                         line="180"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-wireless.c"
               line="465">the blacklisted MAC address string (hex-digits-and-colons notation)
at index @idx</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wireless.c"
                 line="462">the #NMSettingWireless</doc>
            <type name="SettingWireless" c:type="NMSettingWireless*"/>
          </instance-parameter>
          <parameter name="idx" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wireless.c"
                 line="463">the zero-based index of the MAC address entry</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_mode" c:identifier="nm_setting_wireless_get_mode">
        <source-position filename="libnm-core/nm-setting-wireless.h"
                         line="166"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-wireless.c"
               line="305">the #NMSettingWireless:mode property of the setting</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wireless.c"
                 line="303">the #NMSettingWireless</doc>
            <type name="SettingWireless" c:type="NMSettingWireless*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_mtu" c:identifier="nm_setting_wireless_get_mtu">
        <source-position filename="libnm-core/nm-setting-wireless.h"
                         line="190"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-wireless.c"
               line="589">the #NMSettingWireless:mtu property of the setting</doc>
          <type name="guint32" c:type="guint32"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wireless.c"
                 line="587">the #NMSettingWireless</doc>
            <type name="SettingWireless" c:type="NMSettingWireless*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_num_mac_blacklist_items"
              c:identifier="nm_setting_wireless_get_num_mac_blacklist_items">
        <source-position filename="libnm-core/nm-setting-wireless.h"
                         line="179"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-wireless.c"
               line="450">the number of blacklisted MAC addresses</doc>
          <type name="guint32" c:type="guint32"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wireless.c"
                 line="448">the #NMSettingWireless</doc>
            <type name="SettingWireless" c:type="NMSettingWireless*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_num_seen_bssids"
              c:identifier="nm_setting_wireless_get_num_seen_bssids">
        <source-position filename="libnm-core/nm-setting-wireless.h"
                         line="201"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-wireless.c"
               line="696">the number of BSSIDs in the previously seen BSSID list</doc>
          <type name="guint32" c:type="guint32"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wireless.c"
                 line="694">the #NMSettingWireless</doc>
            <type name="SettingWireless" c:type="NMSettingWireless*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_powersave"
              c:identifier="nm_setting_wireless_get_powersave"
              version="1.2">
        <source-position filename="libnm-core/nm-setting-wireless.h"
                         line="193"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-wireless.c"
               line="617">the #NMSettingWireless:powersave property of the setting</doc>
          <type name="guint32" c:type="guint32"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wireless.c"
                 line="615">the #NMSettingWireless</doc>
            <type name="SettingWireless" c:type="NMSettingWireless*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_rate" c:identifier="nm_setting_wireless_get_rate">
        <source-position filename="libnm-core/nm-setting-wireless.h"
                         line="170"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-wireless.c"
               line="361">the #NMSettingWireless:rate property of the setting</doc>
          <type name="guint32" c:type="guint32"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wireless.c"
                 line="359">the #NMSettingWireless</doc>
            <type name="SettingWireless" c:type="NMSettingWireless*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_seen_bssid"
              c:identifier="nm_setting_wireless_get_seen_bssid">
        <source-position filename="libnm-core/nm-setting-wireless.h"
                         line="202"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-wireless.c"
               line="711">the BSSID at index @i</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wireless.c"
                 line="708">the #NMSettingWireless</doc>
            <type name="SettingWireless" c:type="NMSettingWireless*"/>
          </instance-parameter>
          <parameter name="i" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wireless.c"
                 line="709">index of a BSSID in the previously seen BSSID list</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_ssid" c:identifier="nm_setting_wireless_get_ssid">
        <source-position filename="libnm-core/nm-setting-wireless.h"
                         line="165"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-wireless.c"
               line="291">the #NMSettingWireless:ssid property of the setting</doc>
          <type name="GLib.Bytes" c:type="GBytes*"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wireless.c"
                 line="289">the #NMSettingWireless</doc>
            <type name="SettingWireless" c:type="NMSettingWireless*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_tx_power"
              c:identifier="nm_setting_wireless_get_tx_power">
        <source-position filename="libnm-core/nm-setting-wireless.h"
                         line="171"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-wireless.c"
               line="375">the #NMSettingWireless:tx-power property of the setting</doc>
          <type name="guint32" c:type="guint32"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wireless.c"
                 line="373">the #NMSettingWireless</doc>
            <type name="SettingWireless" c:type="NMSettingWireless*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_wake_on_wlan"
              c:identifier="nm_setting_wireless_get_wake_on_wlan"
              version="1.12">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-wireless.c"
             line="960">Returns the Wake-on-WLAN options enabled for the connection</doc>
        <source-position filename="libnm-core/nm-setting-wireless.h"
                         line="213"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-wireless.c"
               line="966">the Wake-on-WLAN options</doc>
          <type name="SettingWirelessWakeOnWLan"
                c:type="NMSettingWirelessWakeOnWLan"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wireless.c"
                 line="962">the #NMSettingWireless</doc>
            <type name="SettingWireless" c:type="NMSettingWireless*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="remove_mac_blacklist_item"
              c:identifier="nm_setting_wireless_remove_mac_blacklist_item">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-wireless.c"
             line="517">Removes the MAC address at index @idx from the blacklist.</doc>
        <source-position filename="libnm-core/nm-setting-wireless.h"
                         line="184"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wireless.c"
                 line="519">the #NMSettingWireless</doc>
            <type name="SettingWireless" c:type="NMSettingWireless*"/>
          </instance-parameter>
          <parameter name="idx" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wireless.c"
                 line="520">index number of the MAC address</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_mac_blacklist_item_by_value"
              c:identifier="nm_setting_wireless_remove_mac_blacklist_item_by_value">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-wireless.c"
             line="538">Removes the MAC address @mac from the blacklist.</doc>
        <source-position filename="libnm-core/nm-setting-wireless.h"
                         line="186"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-wireless.c"
               line="546">%TRUE if the MAC address was found and removed; %FALSE if it was not.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wireless.c"
                 line="540">the #NMSettingWireless</doc>
            <type name="SettingWireless" c:type="NMSettingWireless*"/>
          </instance-parameter>
          <parameter name="mac" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wireless.c"
                 line="541">the MAC address string (hex-digits-and-colons notation) to remove from
the blacklist</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <property name="band" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-wireless.c"
             line="1250">802.11 frequency band of the network.  One of "a" for 5GHz 802.11a or
"bg" for 2.4GHz 802.11.  This will lock associations to the Wi-Fi network
to the specific band, i.e. if "a" is specified, the device will not
associate with the same network in the 2.4GHz band even if the network's
settings are compatible.  This setting depends on specific driver
capability and may not work with all drivers.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="bssid" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-wireless.c"
             line="1299">If specified, directs the device to only associate with the given access
point.  This capability is highly driver dependent and not supported by
all devices.  Note: this property does not control the BSSID used when
creating an Ad-Hoc network and is unlikely to in the future.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="channel"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-wireless.c"
             line="1275">Wireless channel to use for the Wi-Fi connection.  The device will only
join (or create for Ad-Hoc networks) a Wi-Fi network on the specified
channel.  Because channel numbers overlap between bands, this property
also requires the "band" property to be set.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="cloned-mac-address"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-wireless.c"
             line="1405">If specified, request that the device use this MAC address instead.
This is known as MAC cloning or spoofing.

Beside explicitly specifying a MAC address, the special values "preserve", "permanent",
"random" and "stable" are supported.
"preserve" means not to touch the MAC address on activation.
"permanent" means to use the permanent hardware address of the device.
"random" creates a random MAC address on each connect.
"stable" creates a hashed MAC address based on connection.stable-id and a
machine dependent key.

If unspecified, the value can be overwritten via global defaults, see manual
of NetworkManager.conf. If still unspecified, it defaults to "preserve"
(older versions of NetworkManager may use a different default value).

On D-Bus, this field is expressed as "assigned-mac-address" or the deprecated
"cloned-mac-address".</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="generate-mac-address-mask"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-wireless.c"
             line="1479">With #NMSettingWireless:cloned-mac-address setting "random" or "stable",
by default all bits of the MAC address are scrambled and a locally-administered,
unicast MAC address is created. This property allows to specify that certain bits
are fixed. Note that the least significant bit of the first MAC address will
always be unset to create a unicast MAC address.

If the property is %NULL, it is eligible to be overwritten by a default
connection setting. If the value is still %NULL or an empty string, the
default is to create a locally-administered, unicast MAC address.

If the value contains one MAC address, this address is used as mask. The set
bits of the mask are to be filled with the current MAC address of the device,
while the unset bits are subject to randomization.
Setting "FE:FF:FF:00:00:00" means to preserve the OUI of the current MAC address
and only randomize the lower 3 bytes using the "random" or "stable" algorithm.

If the value contains one additional MAC address after the mask,
this address is used instead of the current MAC address to fill the bits
that shall not be randomized. For example, a value of
"FE:FF:FF:00:00:00 68:F7:28:00:00:00" will set the OUI of the MAC address
to 68:F7:28, while the lower bits are randomized. A value of
"02:00:00:00:00:00 00:00:00:00:00:00" will create a fully scrambled
globally-administered, burned-in MAC address.

If the value contains more than one additional MAC addresses, one of
them is chosen randomly. For example, "02:00:00:00:00:00 00:00:00:00:00:00 02:00:00:00:00:00"
will create a fully scrambled MAC address, randomly locally or globally
administered.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="hidden" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-wireless.c"
             line="1595">If %TRUE, indicates that the network is a non-broadcasting network that
hides its SSID. This works both in infrastructure and AP mode.

In infrastructure mode, various workarounds are used for a more reliable
discovery of hidden networks, such as probe-scanning the SSID.  However,
these workarounds expose inherent insecurities with hidden SSID networks,
and thus hidden SSID networks should be used with caution.

In AP mode, the created network does not broadcast its SSID.

Note that marking the network as hidden may be a privacy issue for you
(in infrastructure mode) or client stations (in AP mode), as the explicit
probe-scans are distinctly recognizable on the air.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="mac-address" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-wireless.c"
             line="1369">If specified, this connection will only apply to the Wi-Fi device whose
permanent MAC address matches. This property does not change the MAC
address of the device (i.e. MAC spoofing).</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="mac-address-blacklist"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-wireless.c"
             line="1525">A list of permanent MAC addresses of Wi-Fi devices to which this
connection should never apply.  Each MAC address should be given in the
standard hex-digits-and-colons notation (eg "00:11:22:33:44:55").</doc>
        <array>
          <type name="utf8"/>
        </array>
      </property>
      <property name="mac-address-randomization"
                version="1.2"
                deprecated="1"
                deprecated-version="1.4"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-wireless.c"
             line="1650">One of %NM_SETTING_MAC_RANDOMIZATION_DEFAULT (never randomize unless
the user has set a global default to randomize and the supplicant
supports randomization),  %NM_SETTING_MAC_RANDOMIZATION_NEVER (never
randomize the MAC address), or %NM_SETTING_MAC_RANDOMIZATION_ALWAYS
(always randomize the MAC address). This property is deprecated for
'cloned-mac-address'.</doc>
        <doc-deprecated xml:space="preserve">Deprecated by NMSettingWireless:cloned-mac-address property</doc-deprecated>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="mode" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-wireless.c"
             line="1231">Wi-Fi network mode; one of "infrastructure", "adhoc" or "ap".  If blank,
infrastructure is assumed.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="mtu"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-wireless.c"
             line="1575">If non-zero, only transmit packets of the specified size or smaller,
breaking larger packets up into multiple Ethernet frames.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="powersave"
                version="1.2"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-wireless.c"
             line="1625">One of %NM_SETTING_WIRELESS_POWERSAVE_DISABLE (disable Wi-Fi power
saving), %NM_SETTING_WIRELESS_POWERSAVE_ENABLE (enable Wi-Fi power
saving), %NM_SETTING_WIRELESS_POWERSAVE_IGNORE (don't touch currently
configure setting) or %NM_SETTING_WIRELESS_POWERSAVE_DEFAULT (use the
globally configured value). All other values are reserved.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="rate"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-wireless.c"
             line="1326">If non-zero, directs the device to only use the specified bitrate for
communication with the access point.  Units are in Kb/s, ie 5500 = 5.5
Mbit/s.  This property is highly driver dependent and not all devices
support setting a static bitrate.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="seen-bssids" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-wireless.c"
             line="1552">A list of BSSIDs (each BSSID formatted as a MAC address like
"00:11:22:33:44:55") that have been detected as part of the Wi-Fi
network.  NetworkManager internally tracks previously seen BSSIDs. The
property is only meant for reading and reflects the BSSID list of
NetworkManager. The changes you make to this property will not be
preserved.</doc>
        <array>
          <type name="utf8"/>
        </array>
      </property>
      <property name="ssid" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-wireless.c"
             line="1207">SSID of the Wi-Fi network. Must be specified.</doc>
        <type name="GLib.Bytes"/>
      </property>
      <property name="tx-power"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-wireless.c"
             line="1348">If non-zero, directs the device to use the specified transmit power.
Units are dBm.  This property is highly driver dependent and not all
devices support setting a static transmit power.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="wake-on-wlan"
                version="1.12"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-wireless.c"
             line="1697">The #NMSettingWirelessWakeOnWLan options to enable. Not all devices support all options.
May be any combination of %NM_SETTING_WIRELESS_WAKE_ON_WLAN_ANY,
%NM_SETTING_WIRELESS_WAKE_ON_WLAN_DISCONNECT,
%NM_SETTING_WIRELESS_WAKE_ON_WLAN_MAGIC,
%NM_SETTING_WIRELESS_WAKE_ON_WLAN_GTK_REKEY_FAILURE,
%NM_SETTING_WIRELESS_WAKE_ON_WLAN_EAP_IDENTITY_REQUEST,
%NM_SETTING_WIRELESS_WAKE_ON_WLAN_4WAY_HANDSHAKE,
%NM_SETTING_WIRELESS_WAKE_ON_WLAN_RFKILL_RELEASE,
%NM_SETTING_WIRELESS_WAKE_ON_WLAN_TCP or the special values
%NM_SETTING_WIRELESS_WAKE_ON_WLAN_DEFAULT (to use global settings) and
%NM_SETTING_WIRELESS_WAKE_ON_WLAN_IGNORE (to disable management of Wake-on-LAN in
NetworkManager).</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <field name="parent">
        <type name="Setting" c:type="NMSetting"/>
      </field>
    </class>
    <record name="SettingWirelessClass"
            c:type="NMSettingWirelessClass"
            glib:is-gtype-struct-for="SettingWireless">
      <source-position filename="libnm-core/nm-setting-wireless.h" line="159"/>
      <field name="parent">
        <type name="SettingClass" c:type="NMSettingClass"/>
      </field>
      <field name="padding" readable="0" private="1">
        <array zero-terminated="0" fixed-size="4">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <enumeration name="SettingWirelessPowersave"
                 glib:type-name="NMSettingWirelessPowersave"
                 glib:get-type="nm_setting_wireless_powersave_get_type"
                 c:type="NMSettingWirelessPowersave">
      <doc xml:space="preserve"
           filename="libnm-core/nm-setting-wireless.h"
           line="127">These flags indicate whether wireless powersave must be enabled.</doc>
      <member name="default"
              value="0"
              c:identifier="NM_SETTING_WIRELESS_POWERSAVE_DEFAULT"
              glib:nick="default">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-wireless.h"
             line="129">use the default value</doc>
      </member>
      <member name="ignore"
              value="1"
              c:identifier="NM_SETTING_WIRELESS_POWERSAVE_IGNORE"
              glib:nick="ignore">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-wireless.h"
             line="130">don't touch existing setting</doc>
      </member>
      <member name="disable"
              value="2"
              c:identifier="NM_SETTING_WIRELESS_POWERSAVE_DISABLE"
              glib:nick="disable">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-wireless.h"
             line="131">disable powersave</doc>
      </member>
      <member name="enable"
              value="3"
              c:identifier="NM_SETTING_WIRELESS_POWERSAVE_ENABLE"
              glib:nick="enable">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-wireless.h"
             line="132">enable powersave</doc>
      </member>
    </enumeration>
    <class name="SettingWirelessSecurity"
           c:symbol-prefix="setting_wireless_security"
           c:type="NMSettingWirelessSecurity"
           parent="Setting"
           glib:type-name="NMSettingWirelessSecurity"
           glib:get-type="nm_setting_wireless_security_get_type"
           glib:type-struct="SettingWirelessSecurityClass">
      <doc xml:space="preserve"
           filename="libnm-core/nm-setting-wireless-security.h"
           line="158">Wi-Fi Security Settings</doc>
      <source-position filename="libnm-core/nm-setting-wireless-security.h"
                       line="172"/>
      <constructor name="new" c:identifier="nm_setting_wireless_security_new">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-wireless-security.c"
             line="1397">Creates a new #NMSettingWirelessSecurity object with default values.</doc>
        <source-position filename="libnm-core/nm-setting-wireless-security.h"
                         line="176"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-wireless-security.c"
               line="1402">the new empty #NMSettingWirelessSecurity object</doc>
          <type name="Setting" c:type="NMSetting*"/>
        </return-value>
      </constructor>
      <method name="add_group"
              c:identifier="nm_setting_wireless_security_add_group">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-wireless-security.c"
             line="460">Adds an encryption algorithm to the list of allowed groupwise encryption
algorithms.  If the list is not empty, then only access points that support
one or more of the encryption algorithms in the list will be considered
compatible with this connection.</doc>
        <source-position filename="libnm-core/nm-setting-wireless-security.h"
                         line="196"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-wireless-security.c"
               line="471">%TRUE if the algorithm was added to the list, %FALSE if it was
already in the list</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wireless-security.c"
                 line="462">the #NMSettingWirelessSecurity</doc>
            <type name="SettingWirelessSecurity"
                  c:type="NMSettingWirelessSecurity*"/>
          </instance-parameter>
          <parameter name="group" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wireless-security.c"
                 line="463">the encryption algorithm to add, one of "wep40", "wep104",
"tkip", or "ccmp"</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_pairwise"
              c:identifier="nm_setting_wireless_security_add_pairwise">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-wireless-security.c"
             line="314">Adds an encryption algorithm to the list of allowed pairwise encryption
algorithms.  If the list is not empty, then only access points that support
one or more of the encryption algorithms in the list will be considered
compatible with this connection.</doc>
        <source-position filename="libnm-core/nm-setting-wireless-security.h"
                         line="189"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-wireless-security.c"
               line="324">%TRUE if the algorithm was added to the list, %FALSE if it was
already in the list</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wireless-security.c"
                 line="316">the #NMSettingWirelessSecurity</doc>
            <type name="SettingWirelessSecurity"
                  c:type="NMSettingWirelessSecurity*"/>
          </instance-parameter>
          <parameter name="pairwise" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wireless-security.c"
                 line="317">the encryption algorithm to add, one of "tkip" or "ccmp"</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_proto"
              c:identifier="nm_setting_wireless_security_add_proto">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-wireless-security.c"
             line="168">Adds a Wi-Fi security protocol (one of "wpa" or "rsn") to the allowed list;
only protocols in this list will be used when finding and connecting to
the Wi-Fi network specified by this connection.  For example, if the
protocol list contains only "wpa" but the access point for the SSID specified
by this connection only supports WPA2/RSN, the connection cannot be used
with the access point.</doc>
        <source-position filename="libnm-core/nm-setting-wireless-security.h"
                         line="182"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-wireless-security.c"
               line="180">%TRUE if the protocol was new and was added to the allowed
protocol list, or %FALSE if it was already in the list</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wireless-security.c"
                 line="170">the #NMSettingWirelessSecurity</doc>
            <type name="SettingWirelessSecurity"
                  c:type="NMSettingWirelessSecurity*"/>
          </instance-parameter>
          <parameter name="proto" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wireless-security.c"
                 line="171">the protocol to add, one of "wpa" or "rsn"</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="clear_groups"
              c:identifier="nm_setting_wireless_security_clear_groups">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-wireless-security.c"
             line="551">Removes all algorithms from the allowed list.  If there are no algorithms
specified then all groupwise encryption algorithms are allowed.</doc>
        <source-position filename="libnm-core/nm-setting-wireless-security.h"
                         line="199"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wireless-security.c"
                 line="553">the #NMSettingWirelessSecurity</doc>
            <type name="SettingWirelessSecurity"
                  c:type="NMSettingWirelessSecurity*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="clear_pairwise"
              c:identifier="nm_setting_wireless_security_clear_pairwise">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-wireless-security.c"
             line="403">Removes all algorithms from the allowed list.  If there are no algorithms
specified then all pairwise encryption algorithms are allowed.</doc>
        <source-position filename="libnm-core/nm-setting-wireless-security.h"
                         line="192"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wireless-security.c"
                 line="405">the #NMSettingWirelessSecurity</doc>
            <type name="SettingWirelessSecurity"
                  c:type="NMSettingWirelessSecurity*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="clear_protos"
              c:identifier="nm_setting_wireless_security_clear_protos">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-wireless-security.c"
             line="257">Removes all protocols from the allowed list.  If there are no protocols
specified then all protocols are allowed.</doc>
        <source-position filename="libnm-core/nm-setting-wireless-security.h"
                         line="185"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wireless-security.c"
                 line="259">the #NMSettingWirelessSecurity</doc>
            <type name="SettingWirelessSecurity"
                  c:type="NMSettingWirelessSecurity*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_auth_alg"
              c:identifier="nm_setting_wireless_security_get_auth_alg">
        <source-position filename="libnm-core/nm-setting-wireless-security.h"
                         line="214"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-wireless-security.c"
               line="751">the #NMSettingWirelessSecurity:auth-alg property of the setting</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wireless-security.c"
                 line="749">the #NMSettingWirelessSecurity</doc>
            <type name="SettingWirelessSecurity"
                  c:type="NMSettingWirelessSecurity*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_fils"
              c:identifier="nm_setting_wireless_security_get_fils">
        <source-position filename="libnm-core/nm-setting-wireless-security.h"
                         line="223"/>
        <return-value transfer-ownership="none">
          <type name="SettingWirelessSecurityFils"
                c:type="NMSettingWirelessSecurityFils"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <type name="SettingWirelessSecurity"
                  c:type="NMSettingWirelessSecurity*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_group"
              c:identifier="nm_setting_wireless_security_get_group">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-wireless-security.c"
             line="437">Returns the allowed groupwise encryption algorithm from allowed algorithm
list.</doc>
        <source-position filename="libnm-core/nm-setting-wireless-security.h"
                         line="195"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-wireless-security.c"
               line="445">the groupwise encryption algorithm at index @i</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wireless-security.c"
                 line="439">the #NMSettingWirelessSecurity</doc>
            <type name="SettingWirelessSecurity"
                  c:type="NMSettingWirelessSecurity*"/>
          </instance-parameter>
          <parameter name="i" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wireless-security.c"
                 line="440">index of an item in the allowed groupwise encryption algorithm list</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_key_mgmt"
              c:identifier="nm_setting_wireless_security_get_key_mgmt">
        <source-position filename="libnm-core/nm-setting-wireless-security.h"
                         line="178"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-wireless-security.c"
               line="123">the #NMSettingWirelessSecurity:key-mgmt property of the setting</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wireless-security.c"
                 line="121">the #NMSettingWirelessSecurity</doc>
            <type name="SettingWirelessSecurity"
                  c:type="NMSettingWirelessSecurity*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_leap_password"
              c:identifier="nm_setting_wireless_security_get_leap_password">
        <source-position filename="libnm-core/nm-setting-wireless-security.h"
                         line="208"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-wireless-security.c"
               line="634">the #NMSettingWirelessSecurity:leap-password property of the setting</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wireless-security.c"
                 line="632">the #NMSettingWirelessSecurity</doc>
            <type name="SettingWirelessSecurity"
                  c:type="NMSettingWirelessSecurity*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_leap_password_flags"
              c:identifier="nm_setting_wireless_security_get_leap_password_flags">
        <source-position filename="libnm-core/nm-setting-wireless-security.h"
                         line="209"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-wireless-security.c"
               line="648">the #NMSettingSecretFlags pertaining to the
#NMSettingWirelessSecurity:leap-password</doc>
          <type name="SettingSecretFlags" c:type="NMSettingSecretFlags"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wireless-security.c"
                 line="646">the #NMSettingWirelessSecurity</doc>
            <type name="SettingWirelessSecurity"
                  c:type="NMSettingWirelessSecurity*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_leap_username"
              c:identifier="nm_setting_wireless_security_get_leap_username">
        <source-position filename="libnm-core/nm-setting-wireless-security.h"
                         line="207"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-wireless-security.c"
               line="620">the #NMSettingWirelessSecurity:leap-username property of the setting</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wireless-security.c"
                 line="618">the #NMSettingWirelessSecurity</doc>
            <type name="SettingWirelessSecurity"
                  c:type="NMSettingWirelessSecurity*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_num_groups"
              c:identifier="nm_setting_wireless_security_get_num_groups">
        <source-position filename="libnm-core/nm-setting-wireless-security.h"
                         line="194"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-wireless-security.c"
               line="427">the number of groupwise encryption algorithms in the allowed list</doc>
          <type name="guint32" c:type="guint32"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wireless-security.c"
                 line="425">the #NMSettingWirelessSecurity</doc>
            <type name="SettingWirelessSecurity"
                  c:type="NMSettingWirelessSecurity*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_num_pairwise"
              c:identifier="nm_setting_wireless_security_get_num_pairwise">
        <source-position filename="libnm-core/nm-setting-wireless-security.h"
                         line="187"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-wireless-security.c"
               line="281">the number of pairwise encryption algorithms in the allowed list</doc>
          <type name="guint32" c:type="guint32"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wireless-security.c"
                 line="279">the #NMSettingWirelessSecurity</doc>
            <type name="SettingWirelessSecurity"
                  c:type="NMSettingWirelessSecurity*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_num_protos"
              c:identifier="nm_setting_wireless_security_get_num_protos">
        <source-position filename="libnm-core/nm-setting-wireless-security.h"
                         line="180"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-wireless-security.c"
               line="137">the number of security protocols this connection allows when
connecting to secure Wi-Fi networks</doc>
          <type name="guint32" c:type="guint32"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wireless-security.c"
                 line="135">the #NMSettingWirelessSecurity</doc>
            <type name="SettingWirelessSecurity"
                  c:type="NMSettingWirelessSecurity*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_pairwise"
              c:identifier="nm_setting_wireless_security_get_pairwise">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-wireless-security.c"
             line="291">Returns the allowed pairwise encryption algorithm from allowed algorithm
list.</doc>
        <source-position filename="libnm-core/nm-setting-wireless-security.h"
                         line="188"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-wireless-security.c"
               line="299">the pairwise encryption algorithm at index @i</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wireless-security.c"
                 line="293">the #NMSettingWirelessSecurity</doc>
            <type name="SettingWirelessSecurity"
                  c:type="NMSettingWirelessSecurity*"/>
          </instance-parameter>
          <parameter name="i" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wireless-security.c"
                 line="294">index of an item in the allowed pairwise encryption algorithm list</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_pmf"
              c:identifier="nm_setting_wireless_security_get_pmf">
        <source-position filename="libnm-core/nm-setting-wireless-security.h"
                         line="202"/>
        <return-value transfer-ownership="none">
          <type name="SettingWirelessSecurityPmf"
                c:type="NMSettingWirelessSecurityPmf"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <type name="SettingWirelessSecurity"
                  c:type="NMSettingWirelessSecurity*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_proto"
              c:identifier="nm_setting_wireless_security_get_proto">
        <source-position filename="libnm-core/nm-setting-wireless-security.h"
                         line="181"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-wireless-security.c"
               line="153">the protocol at index @i</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wireless-security.c"
                 line="150">the #NMSettingWirelessSecurity</doc>
            <type name="SettingWirelessSecurity"
                  c:type="NMSettingWirelessSecurity*"/>
          </instance-parameter>
          <parameter name="i" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wireless-security.c"
                 line="151">an index into the protocol list</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_psk"
              c:identifier="nm_setting_wireless_security_get_psk">
        <source-position filename="libnm-core/nm-setting-wireless-security.h"
                         line="204"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-wireless-security.c"
               line="591">the #NMSettingWirelessSecurity:psk property of the setting</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wireless-security.c"
                 line="589">the #NMSettingWirelessSecurity</doc>
            <type name="SettingWirelessSecurity"
                  c:type="NMSettingWirelessSecurity*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_psk_flags"
              c:identifier="nm_setting_wireless_security_get_psk_flags">
        <source-position filename="libnm-core/nm-setting-wireless-security.h"
                         line="205"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-wireless-security.c"
               line="605">the #NMSettingSecretFlags pertaining to the
#NMSettingWirelessSecurity:psk</doc>
          <type name="SettingSecretFlags" c:type="NMSettingSecretFlags"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wireless-security.c"
                 line="603">the #NMSettingWirelessSecurity</doc>
            <type name="SettingWirelessSecurity"
                  c:type="NMSettingWirelessSecurity*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_wep_key"
              c:identifier="nm_setting_wireless_security_get_wep_key">
        <source-position filename="libnm-core/nm-setting-wireless-security.h"
                         line="211"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-wireless-security.c"
               line="664">the WEP key at the given index</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wireless-security.c"
                 line="661">the #NMSettingWirelessSecurity</doc>
            <type name="SettingWirelessSecurity"
                  c:type="NMSettingWirelessSecurity*"/>
          </instance-parameter>
          <parameter name="idx" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wireless-security.c"
                 line="662">the WEP key index (0..3 inclusive)</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_wep_key_flags"
              c:identifier="nm_setting_wireless_security_get_wep_key_flags">
        <source-position filename="libnm-core/nm-setting-wireless-security.h"
                         line="216"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-wireless-security.c"
               line="765">the #NMSettingSecretFlags pertaining to the all WEP keys</doc>
          <type name="SettingSecretFlags" c:type="NMSettingSecretFlags"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wireless-security.c"
                 line="763">the #NMSettingWirelessSecurity</doc>
            <type name="SettingWirelessSecurity"
                  c:type="NMSettingWirelessSecurity*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_wep_key_type"
              c:identifier="nm_setting_wireless_security_get_wep_key_type">
        <source-position filename="libnm-core/nm-setting-wireless-security.h"
                         line="217"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-wireless-security.c"
               line="779">the #NMSettingWirelessSecurity:wep-key-type property of the setting</doc>
          <type name="WepKeyType" c:type="NMWepKeyType"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wireless-security.c"
                 line="777">the #NMSettingWirelessSecurity</doc>
            <type name="SettingWirelessSecurity"
                  c:type="NMSettingWirelessSecurity*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_wep_tx_keyidx"
              c:identifier="nm_setting_wireless_security_get_wep_tx_keyidx">
        <source-position filename="libnm-core/nm-setting-wireless-security.h"
                         line="213"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-wireless-security.c"
               line="737">the #NMSettingWirelessSecurity:wep-tx-keyidx property of the setting</doc>
          <type name="guint32" c:type="guint32"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wireless-security.c"
                 line="735">the #NMSettingWirelessSecurity</doc>
            <type name="SettingWirelessSecurity"
                  c:type="NMSettingWirelessSecurity*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_wps_method"
              c:identifier="nm_setting_wireless_security_get_wps_method"
              version="1.10">
        <source-position filename="libnm-core/nm-setting-wireless-security.h"
                         line="220"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-wireless-security.c"
               line="793">the #NMSettingWirelessSecurity:wps-method property of the setting</doc>
          <type name="SettingWirelessSecurityWpsMethod"
                c:type="NMSettingWirelessSecurityWpsMethod"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wireless-security.c"
                 line="791">the #NMSettingWirelessSecurity</doc>
            <type name="SettingWirelessSecurity"
                  c:type="NMSettingWirelessSecurity*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="remove_group"
              c:identifier="nm_setting_wireless_security_remove_group">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-wireless-security.c"
             line="494">Removes an encryption algorithm from the allowed groupwise encryption
algorithm list.</doc>
        <source-position filename="libnm-core/nm-setting-wireless-security.h"
                         line="197"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wireless-security.c"
                 line="496">the #NMSettingWirelessSecurity</doc>
            <type name="SettingWirelessSecurity"
                  c:type="NMSettingWirelessSecurity*"/>
          </instance-parameter>
          <parameter name="i" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wireless-security.c"
                 line="497">the index of an item in the allowed groupwise encryption algorithm list</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_group_by_value"
              c:identifier="nm_setting_wireless_security_remove_group_by_value">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-wireless-security.c"
             line="519">Removes an encryption algorithm from the allowed groupwise encryption
algorithm list.</doc>
        <source-position filename="libnm-core/nm-setting-wireless-security.h"
                         line="198"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-wireless-security.c"
               line="528">%TRUE if the algorithm was found and removed; %FALSE if it was not.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wireless-security.c"
                 line="521">the #NMSettingWirelessSecurity</doc>
            <type name="SettingWirelessSecurity"
                  c:type="NMSettingWirelessSecurity*"/>
          </instance-parameter>
          <parameter name="group" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wireless-security.c"
                 line="522">the encryption algorithm to remove, one of "wep40", "wep104",
"tkip", or "ccmp"</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_pairwise"
              c:identifier="nm_setting_wireless_security_remove_pairwise">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-wireless-security.c"
             line="347">Removes an encryption algorithm from the allowed pairwise encryption
algorithm list.</doc>
        <source-position filename="libnm-core/nm-setting-wireless-security.h"
                         line="190"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wireless-security.c"
                 line="349">the #NMSettingWirelessSecurity</doc>
            <type name="SettingWirelessSecurity"
                  c:type="NMSettingWirelessSecurity*"/>
          </instance-parameter>
          <parameter name="i" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wireless-security.c"
                 line="350">the index of an item in the allowed pairwise encryption algorithm list</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_pairwise_by_value"
              c:identifier="nm_setting_wireless_security_remove_pairwise_by_value">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-wireless-security.c"
             line="372">Removes an encryption algorithm from the allowed pairwise encryption
algorithm list.</doc>
        <source-position filename="libnm-core/nm-setting-wireless-security.h"
                         line="191"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-wireless-security.c"
               line="380">%TRUE if the encryption algorithm was found and removed; %FALSE if it was not.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wireless-security.c"
                 line="374">the #NMSettingWirelessSecurity</doc>
            <type name="SettingWirelessSecurity"
                  c:type="NMSettingWirelessSecurity*"/>
          </instance-parameter>
          <parameter name="pairwise" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wireless-security.c"
                 line="375">the encryption algorithm to remove, one of "tkip" or "ccmp"</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_proto"
              c:identifier="nm_setting_wireless_security_remove_proto">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-wireless-security.c"
             line="203">Removes a protocol from the allowed protocol list.</doc>
        <source-position filename="libnm-core/nm-setting-wireless-security.h"
                         line="183"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wireless-security.c"
                 line="205">the #NMSettingWirelessSecurity</doc>
            <type name="SettingWirelessSecurity"
                  c:type="NMSettingWirelessSecurity*"/>
          </instance-parameter>
          <parameter name="i" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wireless-security.c"
                 line="206">index of the protocol to remove</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_proto_by_value"
              c:identifier="nm_setting_wireless_security_remove_proto_by_value">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-wireless-security.c"
             line="227">Removes a protocol from the allowed protocol list.</doc>
        <source-position filename="libnm-core/nm-setting-wireless-security.h"
                         line="184"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-wireless-security.c"
               line="234">%TRUE if the protocol was found and removed; %FALSE if it was not.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wireless-security.c"
                 line="229">the #NMSettingWirelessSecurity</doc>
            <type name="SettingWirelessSecurity"
                  c:type="NMSettingWirelessSecurity*"/>
          </instance-parameter>
          <parameter name="proto" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wireless-security.c"
                 line="230">the protocol to remove, one of "wpa" or "rsn"</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_wep_key"
              c:identifier="nm_setting_wireless_security_set_wep_key">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-wireless-security.c"
             line="688">Sets a WEP key in the given index.</doc>
        <source-position filename="libnm-core/nm-setting-wireless-security.h"
                         line="212"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wireless-security.c"
                 line="690">the #NMSettingWirelessSecurity</doc>
            <type name="SettingWirelessSecurity"
                  c:type="NMSettingWirelessSecurity*"/>
          </instance-parameter>
          <parameter name="idx" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wireless-security.c"
                 line="691">the index of the key (0..3 inclusive)</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wireless-security.c"
                 line="692">the WEP key as a string, in either hexadecimal, ASCII, or passphrase
form as determiend by the value of the #NMSettingWirelessSecurity:wep-key-type
property.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <property name="auth-alg" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-wireless-security.c"
             line="1497">When WEP is used (ie, key-mgmt = "none" or "ieee8021x") indicate the
802.11 authentication algorithm required by the AP here.  One of "open"
for Open System, "shared" for Shared Key, or "leap" for Cisco LEAP.  When
using Cisco LEAP (ie, key-mgmt = "ieee8021x" and auth-alg = "leap") the
"leap-username" and "leap-password" properties must be specified.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="fils"
                version="1.12"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-wireless-security.c"
             line="1875">Indicates whether Fast Initial Link Setup (802.11ai) must be enabled for
the connection.  One of %NM_SETTING_WIRELESS_SECURITY_FILS_DEFAULT (use
global default value), %NM_SETTING_WIRELESS_SECURITY_FILS_DISABLE
(disable FILS), %NM_SETTING_WIRELESS_SECURITY_FILS_OPTIONAL (enable FILS
if the supplicant and the access point support it) or
%NM_SETTING_WIRELESS_SECURITY_FILS_REQUIRED (enable FILS and fail if not
supported).  When set to %NM_SETTING_WIRELESS_SECURITY_FILS_DEFAULT and
no global default is set, FILS will be optionally enabled.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="group" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-wireless-security.c"
             line="1562">A list of group/broadcast encryption algorithms which prevents
connections to Wi-Fi networks that do not utilize one of the algorithms
in the list.  For maximum compatibility leave this property empty.  Each
list element may be one of "wep40", "wep104", "tkip", or "ccmp".</doc>
        <array>
          <type name="utf8"/>
        </array>
      </property>
      <property name="key-mgmt" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-wireless-security.c"
             line="1452">Key management used for the connection.  One of "none" (WEP), "ieee8021x"
(Dynamic WEP), "wpa-none" (Ad-Hoc WPA-PSK), "wpa-psk" (infrastructure
WPA-PSK), "sae" (SAE) or "wpa-eap" (WPA-Enterprise).
This property must be set for any Wi-Fi connection that uses security.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="leap-password" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-wireless-security.c"
             line="1772">The login password for legacy LEAP connections (ie, key-mgmt =
"ieee8021x" and auth-alg = "leap").</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="leap-password-flags"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-wireless-security.c"
             line="1792">Flags indicating how to handle the
#NMSettingWirelessSecurity:leap-password property.</doc>
        <type name="SettingSecretFlags"/>
      </property>
      <property name="leap-username" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-wireless-security.c"
             line="1614">The login username for legacy LEAP connections (ie, key-mgmt =
"ieee8021x" and auth-alg = "leap").</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="pairwise" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-wireless-security.c"
             line="1540">A list of pairwise encryption algorithms which prevents connections to
Wi-Fi networks that do not utilize one of the algorithms in the list.
For maximum compatibility leave this property empty.  Each list element
may be one of "tkip" or "ccmp".</doc>
        <array>
          <type name="utf8"/>
        </array>
      </property>
      <property name="pmf"
                version="1.10"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-wireless-security.c"
             line="1584">Indicates whether Protected Management Frames (802.11w) must be enabled
for the connection.  One of %NM_SETTING_WIRELESS_SECURITY_PMF_DEFAULT
(use global default value), %NM_SETTING_WIRELESS_SECURITY_PMF_DISABLE
(disable PMF), %NM_SETTING_WIRELESS_SECURITY_PMF_OPTIONAL (enable PMF if
the supplicant and the access point support it) or
%NM_SETTING_WIRELESS_SECURITY_PMF_REQUIRED (enable PMF and fail if not
supported).  When set to %NM_SETTING_WIRELESS_SECURITY_PMF_DEFAULT and no
global default is set, PMF will be optionally enabled.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="proto" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-wireless-security.c"
             line="1519">List of strings specifying the allowed WPA protocol versions to use.
Each element may be one "wpa" (allow WPA) or "rsn" (allow WPA2/RSN).  If
not specified, both WPA and RSN connections are allowed.</doc>
        <array>
          <type name="utf8"/>
        </array>
      </property>
      <property name="psk" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-wireless-security.c"
             line="1729">Pre-Shared-Key for WPA networks. For WPA-PSK, it's either an ASCII
passphrase of 8 to 63 characters that is (as specified in the 802.11i
standard) hashed to derive the actual key, or the key in form of 64
hexadecimal character. The WPA3-Personal networks use a passphrase
of any length for SAE authentication.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="psk-flags" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-wireless-security.c"
             line="1751">Flags indicating how to handle the #NMSettingWirelessSecurity:psk
property.</doc>
        <type name="SettingSecretFlags"/>
      </property>
      <property name="wep-key-flags" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-wireless-security.c"
             line="1708">Flags indicating how to handle the #NMSettingWirelessSecurity:wep-key0,
#NMSettingWirelessSecurity:wep-key1, #NMSettingWirelessSecurity:wep-key2,
and #NMSettingWirelessSecurity:wep-key3 properties.</doc>
        <type name="SettingSecretFlags"/>
      </property>
      <property name="wep-key-type"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-wireless-security.c"
             line="1812">Controls the interpretation of WEP keys.  Allowed values are
%NM_WEP_KEY_TYPE_KEY, in which case the key is either a 10- or
26-character hexadecimal string, or a 5- or 13-character ASCII password;
or %NM_WEP_KEY_TYPE_PASSPHRASE, in which case the passphrase is provided
as a string and will be hashed using the de-facto MD5 method to derive
the actual WEP key.</doc>
        <type name="WepKeyType"/>
      </property>
      <property name="wep-key0" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-wireless-security.c"
             line="1632">Index 0 WEP key.  This is the WEP key used in most networks.  See the
"wep-key-type" property for a description of how this key is interpreted.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="wep-key1" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-wireless-security.c"
             line="1651">Index 1 WEP key.  This WEP index is not used by most networks.  See the
"wep-key-type" property for a description of how this key is interpreted.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="wep-key2" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-wireless-security.c"
             line="1670">Index 2 WEP key.  This WEP index is not used by most networks.  See the
"wep-key-type" property for a description of how this key is interpreted.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="wep-key3" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-wireless-security.c"
             line="1689">Index 3 WEP key.  This WEP index is not used by most networks.  See the
"wep-key-type" property for a description of how this key is interpreted.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="wep-tx-keyidx"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-wireless-security.c"
             line="1474">When static WEP is used (ie, key-mgmt = "none") and a non-default WEP key
index is used by the AP, put that WEP key index here.  Valid values are 0
(default key) through 3.  Note that some consumer access points (like the
Linksys WRT54G) number the keys 1 - 4.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="wps-method"
                version="1.10"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-wireless-security.c"
             line="1845">Flags indicating which mode of WPS is to be used if any.

There's little point in changing the default setting as NetworkManager will
automatically determine whether it's feasible to start WPS enrollment from
the Access Point capabilities.

WPS can be disabled by setting this property to a value of 1.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <field name="parent">
        <type name="Setting" c:type="NMSetting"/>
      </field>
    </class>
    <record name="SettingWirelessSecurityClass"
            c:type="NMSettingWirelessSecurityClass"
            glib:is-gtype-struct-for="SettingWirelessSecurity">
      <source-position filename="libnm-core/nm-setting-wireless-security.h"
                       line="172"/>
      <field name="parent">
        <type name="SettingClass" c:type="NMSettingClass"/>
      </field>
      <field name="padding" readable="0" private="1">
        <array zero-terminated="0" fixed-size="4">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <enumeration name="SettingWirelessSecurityFils"
                 version="1.12"
                 glib:type-name="NMSettingWirelessSecurityFils"
                 glib:get-type="nm_setting_wireless_security_fils_get_type"
                 c:type="NMSettingWirelessSecurityFils">
      <doc xml:space="preserve"
           filename="libnm-core/nm-setting-wireless-security.h"
           line="115">These flags indicate whether FILS must be enabled.</doc>
      <member name="default"
              value="0"
              c:identifier="NM_SETTING_WIRELESS_SECURITY_FILS_DEFAULT"
              glib:nick="default">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-wireless-security.h"
             line="117">use the default value</doc>
      </member>
      <member name="disable"
              value="1"
              c:identifier="NM_SETTING_WIRELESS_SECURITY_FILS_DISABLE"
              glib:nick="disable">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-wireless-security.h"
             line="118">disable FILS</doc>
      </member>
      <member name="optional"
              value="2"
              c:identifier="NM_SETTING_WIRELESS_SECURITY_FILS_OPTIONAL"
              glib:nick="optional">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-wireless-security.h"
             line="119">enable FILS if the supplicant and the AP support it</doc>
      </member>
      <member name="required"
              value="3"
              c:identifier="NM_SETTING_WIRELESS_SECURITY_FILS_REQUIRED"
              glib:nick="required">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-wireless-security.h"
             line="120">require FILS and fail if not available</doc>
      </member>
    </enumeration>
    <enumeration name="SettingWirelessSecurityPmf"
                 glib:type-name="NMSettingWirelessSecurityPmf"
                 glib:get-type="nm_setting_wireless_security_pmf_get_type"
                 c:type="NMSettingWirelessSecurityPmf">
      <doc xml:space="preserve"
           filename="libnm-core/nm-setting-wireless-security.h"
           line="74">These flags indicate whether PMF must be enabled.</doc>
      <member name="default"
              value="0"
              c:identifier="NM_SETTING_WIRELESS_SECURITY_PMF_DEFAULT"
              glib:nick="default">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-wireless-security.h"
             line="76">use the default value</doc>
      </member>
      <member name="disable"
              value="1"
              c:identifier="NM_SETTING_WIRELESS_SECURITY_PMF_DISABLE"
              glib:nick="disable">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-wireless-security.h"
             line="77">disable PMF</doc>
      </member>
      <member name="optional"
              value="2"
              c:identifier="NM_SETTING_WIRELESS_SECURITY_PMF_OPTIONAL"
              glib:nick="optional">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-wireless-security.h"
             line="78">enable PMF if the supplicant and the AP support it</doc>
      </member>
      <member name="required"
              value="3"
              c:identifier="NM_SETTING_WIRELESS_SECURITY_PMF_REQUIRED"
              glib:nick="required">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-wireless-security.h"
             line="79">require PMF and fail if not available</doc>
      </member>
    </enumeration>
    <bitfield name="SettingWirelessSecurityWpsMethod"
              version="1.10"
              glib:type-name="NMSettingWirelessSecurityWpsMethod"
              glib:get-type="nm_setting_wireless_security_wps_method_get_type"
              c:type="NMSettingWirelessSecurityWpsMethod">
      <doc xml:space="preserve"
           filename="libnm-core/nm-setting-wireless-security.h"
           line="92">Configure the use of WPS by a connection while it activates.

Note: prior to 1.16, this was a GEnum type instead of a GFlags type
although, with the same numeric values.</doc>
      <member name="default"
              value="0"
              c:identifier="NM_SETTING_WIRELESS_SECURITY_WPS_METHOD_DEFAULT"
              glib:nick="default">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-wireless-security.h"
             line="94">Attempt whichever method AP supports</doc>
      </member>
      <member name="disabled"
              value="1"
              c:identifier="NM_SETTING_WIRELESS_SECURITY_WPS_METHOD_DISABLED"
              glib:nick="disabled">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-wireless-security.h"
             line="95">WPS can not be used.</doc>
      </member>
      <member name="auto"
              value="2"
              c:identifier="NM_SETTING_WIRELESS_SECURITY_WPS_METHOD_AUTO"
              glib:nick="auto">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-wireless-security.h"
             line="96">Use WPS, any method</doc>
      </member>
      <member name="pbc"
              value="4"
              c:identifier="NM_SETTING_WIRELESS_SECURITY_WPS_METHOD_PBC"
              glib:nick="pbc">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-wireless-security.h"
             line="97">use WPS push-buthon method</doc>
      </member>
      <member name="pin"
              value="8"
              c:identifier="NM_SETTING_WIRELESS_SECURITY_WPS_METHOD_PIN"
              glib:nick="pin">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-wireless-security.h"
             line="98">use PIN method</doc>
      </member>
    </bitfield>
    <bitfield name="SettingWirelessWakeOnWLan"
              version="1.12"
              glib:type-name="NMSettingWirelessWakeOnWLan"
              glib:get-type="nm_setting_wireless_wake_on_wlan_get_type"
              c:type="NMSettingWirelessWakeOnWLan">
      <doc xml:space="preserve"
           filename="libnm-core/nm-setting-wireless.h"
           line="44">Options for #NMSettingWireless:wake-on-wlan. Note that not all options
are supported by all devices.</doc>
      <member name="any"
              value="2"
              c:identifier="NM_SETTING_WIRELESS_WAKE_ON_WLAN_ANY"
              glib:nick="any">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-wireless.h"
             line="47">Wake on any activity</doc>
      </member>
      <member name="disconnect"
              value="4"
              c:identifier="NM_SETTING_WIRELESS_WAKE_ON_WLAN_DISCONNECT"
              glib:nick="disconnect">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-wireless.h"
             line="48">Wake on disconnect</doc>
      </member>
      <member name="magic"
              value="8"
              c:identifier="NM_SETTING_WIRELESS_WAKE_ON_WLAN_MAGIC"
              glib:nick="magic">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-wireless.h"
             line="49">Wake on magic packet</doc>
      </member>
      <member name="gtk_rekey_failure"
              value="16"
              c:identifier="NM_SETTING_WIRELESS_WAKE_ON_WLAN_GTK_REKEY_FAILURE"
              glib:nick="gtk-rekey-failure">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-wireless.h"
             line="50">Wake on GTK rekey failure</doc>
      </member>
      <member name="eap_identity_request"
              value="32"
              c:identifier="NM_SETTING_WIRELESS_WAKE_ON_WLAN_EAP_IDENTITY_REQUEST"
              glib:nick="eap-identity-request">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-wireless.h"
             line="51">Wake on EAP identity request</doc>
      </member>
      <member name="4way_handshake"
              value="64"
              c:identifier="NM_SETTING_WIRELESS_WAKE_ON_WLAN_4WAY_HANDSHAKE"
              glib:nick="4way-handshake">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-wireless.h"
             line="52">Wake on 4way handshake</doc>
      </member>
      <member name="rfkill_release"
              value="128"
              c:identifier="NM_SETTING_WIRELESS_WAKE_ON_WLAN_RFKILL_RELEASE"
              glib:nick="rfkill-release">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-wireless.h"
             line="53">Wake on rfkill release</doc>
      </member>
      <member name="tcp"
              value="256"
              c:identifier="NM_SETTING_WIRELESS_WAKE_ON_WLAN_TCP"
              glib:nick="tcp">
      </member>
      <member name="all"
              value="510"
              c:identifier="NM_SETTING_WIRELESS_WAKE_ON_WLAN_ALL"
              glib:nick="all">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-wireless.h"
             line="54">Wake on all events. This does not
  include the exclusive flags @NM_SETTING_WIRELESS_WAKE_ON_WLAN_DEFAULT or
  @NM_SETTING_WIRELESS_WAKE_ON_WLAN_IGNORE.</doc>
      </member>
      <member name="default"
              value="1"
              c:identifier="NM_SETTING_WIRELESS_WAKE_ON_WLAN_DEFAULT"
              glib:nick="default">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-wireless.h"
             line="57">Use the default value</doc>
      </member>
      <member name="ignore"
              value="32768"
              c:identifier="NM_SETTING_WIRELESS_WAKE_ON_WLAN_IGNORE"
              glib:nick="ignore">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-wireless.h"
             line="58">Don't change configured settings</doc>
      </member>
    </bitfield>
    <class name="SettingWpan"
           c:symbol-prefix="setting_wpan"
           c:type="NMSettingWpan"
           parent="Setting"
           glib:type-name="NMSettingWpan"
           glib:get-type="nm_setting_wpan_get_type"
           glib:type-struct="SettingWpanClass">
      <doc xml:space="preserve"
           filename="libnm-core/nm-setting-wpan.c"
           line="68">IEEE 802.15.4 (WPAN) MAC Settings</doc>
      <source-position filename="libnm-core/nm-setting-wpan.h" line="48"/>
      <constructor name="new"
                   c:identifier="nm_setting_wpan_new"
                   version="1.14">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-wpan.c"
             line="286">Creates a new #NMSettingWpan object with default values.</doc>
        <source-position filename="libnm-core/nm-setting-wpan.h" line="53"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-wpan.c"
               line="291">the new empty #NMSettingWpan object</doc>
          <type name="Setting" c:type="NMSetting*"/>
        </return-value>
      </constructor>
      <method name="get_channel"
              c:identifier="nm_setting_wpan_get_channel"
              version="1.16">
        <source-position filename="libnm-core/nm-setting-wpan.h" line="64"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-wpan.c"
               line="155">the #NMSettingWpan:channel property of the setting</doc>
          <type name="gint16" c:type="gint16"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wpan.c"
                 line="153">the #NMSettingWpan</doc>
            <type name="SettingWpan" c:type="NMSettingWpan*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_mac_address"
              c:identifier="nm_setting_wpan_get_mac_address"
              version="1.14">
        <source-position filename="libnm-core/nm-setting-wpan.h" line="56"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-wpan.c"
               line="91">the #NMSettingWpan:mac-address property of the setting</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wpan.c"
                 line="89">the #NMSettingWpan</doc>
            <type name="SettingWpan" c:type="NMSettingWpan*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_page"
              c:identifier="nm_setting_wpan_get_page"
              version="1.16">
        <source-position filename="libnm-core/nm-setting-wpan.h" line="62"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-wpan.c"
               line="139">the #NMSettingWpan:page property of the setting</doc>
          <type name="gint16" c:type="gint16"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wpan.c"
                 line="137">the #NMSettingWpan</doc>
            <type name="SettingWpan" c:type="NMSettingWpan*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_pan_id"
              c:identifier="nm_setting_wpan_get_pan_id"
              version="1.14">
        <source-position filename="libnm-core/nm-setting-wpan.h" line="58"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-wpan.c"
               line="107">the #NMSettingWpan:pan-id property of the setting</doc>
          <type name="guint16" c:type="guint16"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wpan.c"
                 line="105">the #NMSettingWpan</doc>
            <type name="SettingWpan" c:type="NMSettingWpan*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_short_address"
              c:identifier="nm_setting_wpan_get_short_address"
              version="1.14">
        <source-position filename="libnm-core/nm-setting-wpan.h" line="60"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-wpan.c"
               line="123">the #NMSettingWpan:short-address property of the setting</doc>
          <type name="guint16" c:type="guint16"/>
        </return-value>
        <parameters>
          <instance-parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wpan.c"
                 line="121">the #NMSettingWpan</doc>
            <type name="SettingWpan" c:type="NMSettingWpan*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="channel"
                version="1.16"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-wpan.c"
             line="382">IEEE 802.15.4 channel. A positive integer or -1, meaning "do not
set, use whatever the device is already set to".</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="mac-address" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-wpan.c"
             line="325">If specified, this connection will only apply to the IEEE 802.15.4 (WPAN)
MAC layer device whose permanent MAC address matches.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="page"
                version="1.16"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-wpan.c"
             line="366">IEEE 802.15.4 channel page. A positive integer or -1, meaning "do not
set, use whatever the device is already set to".</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="pan-id" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-wpan.c"
             line="344">IEEE 802.15.4 Personal Area Network (PAN) identifier.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="short-address" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-wpan.c"
             line="355">Short IEEE 802.15.4 address to be used within a restricted environment.</doc>
        <type name="guint" c:type="guint"/>
      </property>
    </class>
    <record name="SettingWpanClass"
            c:type="NMSettingWpanClass"
            disguised="1"
            glib:is-gtype-struct-for="SettingWpan">
      <source-position filename="libnm-core/nm-setting-wpan.h" line="48"/>
    </record>
    <bitfield name="SettingsConnectionFlags"
              version="1.12"
              glib:type-name="NMSettingsConnectionFlags"
              glib:get-type="nm_settings_connection_flags_get_type"
              c:type="NMSettingsConnectionFlags">
      <doc xml:space="preserve"
           filename="libnm-core/nm-dbus-interface.h"
           line="934">Flags describing the current activation state.</doc>
      <member name="none"
              value="0"
              c:identifier="NM_SETTINGS_CONNECTION_FLAG_NONE"
              glib:nick="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="936">an alias for numeric zero, no flags set.</doc>
      </member>
      <member name="unsaved"
              value="1"
              c:identifier="NM_SETTINGS_CONNECTION_FLAG_UNSAVED"
              glib:nick="unsaved">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="937">the connection is not saved to disk.
  That either means, that the connection is in-memory only and currently
  is not backed by a file. Or, that the connection is backed by a file,
  but has modifications in-memory that were not persisted to disk.</doc>
      </member>
      <member name="nm_generated"
              value="2"
              c:identifier="NM_SETTINGS_CONNECTION_FLAG_NM_GENERATED"
              glib:nick="nm-generated">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="941">A connection is "nm-generated" if
 it was generated by NetworkManger. If the connection gets modified or saved
 by the user, the flag gets cleared. A nm-generated is also unsaved
 and has no backing file as it is in-memory only.</doc>
      </member>
      <member name="volatile"
              value="4"
              c:identifier="NM_SETTINGS_CONNECTION_FLAG_VOLATILE"
              glib:nick="volatile">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="945">The connection will be deleted
 when it disconnects. That is for in-memory connections (unsaved), which are
 currently active but deleted on disconnect. Volatile connections are
 always unsaved, but they are also no backing file on disk and are entirely
 in-memory only.</doc>
      </member>
    </bitfield>
    <enumeration name="SettingsError"
                 glib:type-name="NMSettingsError"
                 glib:get-type="nm_settings_error_get_type"
                 c:type="NMSettingsError"
                 glib:error-domain="nm-settings-error-quark">
      <doc xml:space="preserve"
           filename="libnm-core/nm-errors.h"
           line="256">Errors related to the settings/persistent configuration interface of
NetworkManager.

These may be returned from #NMClient methods that invoke D-Bus operations on
the "org.freedesktop.NetworkManager.Settings" interface, and correspond to
D-Bus errors in that namespace.</doc>
      <member name="Failed"
              value="0"
              c:identifier="NM_SETTINGS_ERROR_FAILED"
              glib:nick="Failed">
        <doc xml:space="preserve"
             filename="libnm-core/nm-errors.h"
             line="258">unknown or unclassified error</doc>
      </member>
      <member name="PermissionDenied"
              value="1"
              c:identifier="NM_SETTINGS_ERROR_PERMISSION_DENIED"
              glib:nick="PermissionDenied">
        <doc xml:space="preserve"
             filename="libnm-core/nm-errors.h"
             line="259">permission denied</doc>
      </member>
      <member name="NotSupported"
              value="2"
              c:identifier="NM_SETTINGS_ERROR_NOT_SUPPORTED"
              glib:nick="NotSupported">
        <doc xml:space="preserve"
             filename="libnm-core/nm-errors.h"
             line="260">the requested operation is not supported by any
  active settings backend</doc>
      </member>
      <member name="InvalidConnection"
              value="3"
              c:identifier="NM_SETTINGS_ERROR_INVALID_CONNECTION"
              glib:nick="InvalidConnection">
        <doc xml:space="preserve"
             filename="libnm-core/nm-errors.h"
             line="262">the connection was invalid</doc>
      </member>
      <member name="ReadOnlyConnection"
              value="4"
              c:identifier="NM_SETTINGS_ERROR_READ_ONLY_CONNECTION"
              glib:nick="ReadOnlyConnection">
        <doc xml:space="preserve"
             filename="libnm-core/nm-errors.h"
             line="263">attempted to modify a read-only connection</doc>
      </member>
      <member name="UuidExists"
              value="5"
              c:identifier="NM_SETTINGS_ERROR_UUID_EXISTS"
              glib:nick="UuidExists">
        <doc xml:space="preserve"
             filename="libnm-core/nm-errors.h"
             line="264">a connection with that UUID already exists</doc>
      </member>
      <member name="InvalidHostname"
              value="6"
              c:identifier="NM_SETTINGS_ERROR_INVALID_HOSTNAME"
              glib:nick="InvalidHostname">
        <doc xml:space="preserve"
             filename="libnm-core/nm-errors.h"
             line="265">attempted to set an invalid hostname</doc>
      </member>
      <member name="InvalidArguments"
              value="7"
              c:identifier="NM_SETTINGS_ERROR_INVALID_ARGUMENTS"
              glib:nick="InvalidArguments">
        <doc xml:space="preserve"
             filename="libnm-core/nm-errors.h"
             line="266">invalid arguments</doc>
      </member>
      <function name="quark" c:identifier="nm_settings_error_quark">
        <return-value transfer-ownership="none">
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
    </enumeration>
    <bitfield name="SettingsUpdate2Flags"
              version="1.12"
              glib:type-name="NMSettingsUpdate2Flags"
              glib:get-type="nm_settings_update2_flags_get_type"
              c:type="NMSettingsUpdate2Flags">
      <member name="none"
              value="0"
              c:identifier="NM_SETTINGS_UPDATE2_FLAG_NONE"
              glib:nick="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="995">an alias for numeric zero, no flags set.</doc>
      </member>
      <member name="to_disk"
              value="1"
              c:identifier="NM_SETTINGS_UPDATE2_FLAG_TO_DISK"
              glib:nick="to-disk">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="996">to persist the connection to disk.</doc>
      </member>
      <member name="in_memory"
              value="2"
              c:identifier="NM_SETTINGS_UPDATE2_FLAG_IN_MEMORY"
              glib:nick="in-memory">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="997">to make the connection in-memory only.
  If the connection was previously persistent, the corresponding file on disk
  is not deleted but merely the connection is decoupled from the file
  on disk. If you later delete an in-memory connection, the connection
  on disk will be deleted as well.</doc>
      </member>
      <member name="in_memory_detached"
              value="4"
              c:identifier="NM_SETTINGS_UPDATE2_FLAG_IN_MEMORY_DETACHED"
              glib:nick="in-memory-detached">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="1002">this is like @NM_SETTINGS_UPDATE2_FLAG_IN_MEMORY,
  but if the connection has a corresponding file on disk, the association between
  the connection and the file is forgotten but the file is not modified.
  The difference to %NM_SETTINGS_UPDATE2_FLAG_IN_MEMORY is if you later
  save the connection again to disk, a new file name will be chosen without
  overwriting the remaining file on disk. Also, if you delete the connection
  later, the file on disk will not be deleted.</doc>
      </member>
      <member name="in_memory_only"
              value="8"
              c:identifier="NM_SETTINGS_UPDATE2_FLAG_IN_MEMORY_ONLY"
              glib:nick="in-memory-only">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="1009">this is like @NM_SETTINGS_UPDATE2_FLAG_IN_MEMORY,
  but if the connection has a corresponding file on disk, the file on
  disk will be deleted.</doc>
      </member>
      <member name="volatile"
              value="16"
              c:identifier="NM_SETTINGS_UPDATE2_FLAG_VOLATILE"
              glib:nick="volatile">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="1012">This can be specified with either
  %NM_SETTINGS_UPDATE2_FLAG_IN_MEMORY_DETACHED or %NM_SETTINGS_UPDATE2_FLAG_IN_MEMORY_ONLY.
  After making the connection in-memory only, the connection is marked
  as volatile. That means, if the connection is currently not active
  it will be deleted right away. Otherwise, it is marked to for deletion
  once the connection deactivates. A volatile connection cannot autoactivate
  again (because it's about to be deleted), but a manual activation will
  clear the volatile flag.</doc>
      </member>
      <member name="block_autoconnect"
              value="32"
              c:identifier="NM_SETTINGS_UPDATE2_FLAG_BLOCK_AUTOCONNECT"
              glib:nick="block-autoconnect">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="1020">usually, when the connection
  has autoconnect enabled and is modified, it becomes eligible to autoconnect
  right away. Setting this flag, disables autoconnect until the connection
  is manually activated.</doc>
      </member>
    </bitfield>
    <class name="SimpleConnection"
           c:symbol-prefix="simple_connection"
           c:type="NMSimpleConnection"
           parent="GObject.Object"
           glib:type-name="NMSimpleConnection"
           glib:get-type="nm_simple_connection_get_type"
           glib:type-struct="SimpleConnectionClass">
      <source-position filename="libnm-core/nm-simple-connection.h" line="51"/>
      <implements name="Connection"/>
      <function name="new" c:identifier="nm_simple_connection_new">
        <doc xml:space="preserve"
             filename="libnm-core/nm-simple-connection.c"
             line="51">Creates a new #NMSimpleConnection object with no #NMSetting objects.</doc>
        <source-position filename="libnm-core/nm-simple-connection.h"
                         line="55"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libnm-core/nm-simple-connection.c"
               line="56">the new empty #NMConnection object</doc>
          <type name="Connection" c:type="NMConnection*"/>
        </return-value>
      </function>
      <function name="new_clone" c:identifier="nm_simple_connection_new_clone">
        <doc xml:space="preserve"
             filename="libnm-core/nm-simple-connection.c"
             line="114">Clones an #NMConnection as an #NMSimpleConnection.</doc>
        <source-position filename="libnm-core/nm-simple-connection.h"
                         line="60"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libnm-core/nm-simple-connection.c"
               line="120">a new #NMConnection containing the same settings
and properties as the source #NMConnection</doc>
          <type name="Connection" c:type="NMConnection*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-simple-connection.c"
                 line="116">the #NMConnection to clone</doc>
            <type name="Connection" c:type="NMConnection*"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_from_dbus"
                c:identifier="nm_simple_connection_new_from_dbus"
                throws="1">
        <doc xml:space="preserve"
             filename="libnm-core/nm-simple-connection.c"
             line="93">Creates a new #NMSimpleConnection from a hash table describing the
connection and normalize the connection.  See nm_connection_to_dbus() for a
description of the expected hash table.</doc>
        <source-position filename="libnm-core/nm-simple-connection.h"
                         line="57"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libnm-core/nm-simple-connection.c"
               line="102">the new #NMSimpleConnection object, populated with
settings created from the values in the hash table, or %NULL if the
connection failed to normalize.</doc>
          <type name="Connection" c:type="NMConnection*"/>
        </return-value>
        <parameters>
          <parameter name="dict" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-simple-connection.c"
                 line="95">a #GVariant of type %NM_VARIANT_TYPE_CONNECTION describing the connection</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <record name="SimpleConnectionClass"
            c:type="NMSimpleConnectionClass"
            glib:is-gtype-struct-for="SimpleConnection">
      <source-position filename="libnm-core/nm-simple-connection.h" line="51"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="padding" readable="0" private="1">
        <array zero-terminated="0" fixed-size="4">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <record name="SriovVF"
            c:type="NMSriovVF"
            glib:type-name="NMSriovVF"
            glib:get-type="nm_sriov_vf_get_type"
            c:symbol-prefix="sriov_vf">
      <source-position filename="libnm-core/nm-setting-sriov.h" line="46"/>
      <constructor name="new" c:identifier="nm_sriov_vf_new">
        <source-position filename="libnm-core/nm-setting-sriov.h" line="101"/>
        <return-value transfer-ownership="full">
          <type name="SriovVF" c:type="NMSriovVF*"/>
        </return-value>
        <parameters>
          <parameter name="index" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="add_vlan"
              c:identifier="nm_sriov_vf_add_vlan"
              version="1.14">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-sriov.c"
             line="493">Adds a VLAN to the VF.</doc>
        <source-position filename="libnm-core/nm-setting-sriov.h" line="84"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-sriov.c"
               line="500">%TRUE if the VLAN was added; %FALSE if it already existed</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="vf" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-sriov.c"
                 line="495">the #NMSriovVF</doc>
            <type name="SriovVF" c:type="NMSriovVF*"/>
          </instance-parameter>
          <parameter name="vlan_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-sriov.c"
                 line="496">the VLAN id</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="dup" c:identifier="nm_sriov_vf_dup" version="1.14">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-sriov.c"
             line="245">Creates a copy of @vf.</doc>
        <source-position filename="libnm-core/nm-setting-sriov.h" line="109"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-sriov.c"
               line="251">a copy of @vf</doc>
          <type name="SriovVF" c:type="NMSriovVF*"/>
        </return-value>
        <parameters>
          <instance-parameter name="vf" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-sriov.c"
                 line="247">the #NMSriovVF</doc>
            <type name="SriovVF" c:type="const NMSriovVF*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="equal" c:identifier="nm_sriov_vf_equal" version="1.14">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-sriov.c"
             line="163">Determines if two #NMSriovVF objects have the same index,
attributes and VLANs.</doc>
        <source-position filename="libnm-core/nm-setting-sriov.h" line="107"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-sriov.c"
               line="171">%TRUE if the objects contain the same values, %FALSE
   if they do not.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="vf" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-sriov.c"
                 line="165">the #NMSriovVF</doc>
            <type name="SriovVF" c:type="const NMSriovVF*"/>
          </instance-parameter>
          <parameter name="other" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-sriov.c"
                 line="166">the #NMSriovVF to compare @vf to.</doc>
            <type name="SriovVF" c:type="const NMSriovVF*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_attribute"
              c:identifier="nm_sriov_vf_get_attribute"
              version="1.14">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-sriov.c"
             line="346">Gets the value of the attribute with name @name on @vf</doc>
        <source-position filename="libnm-core/nm-setting-sriov.h" line="117"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-sriov.c"
               line="353">the value of the attribute with name @name on
  @vf, or %NULL if @vf has no such attribute.</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="vf" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-sriov.c"
                 line="348">the #NMSriovVF</doc>
            <type name="SriovVF" c:type="const NMSriovVF*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-sriov.c"
                 line="349">the name of a VF attribute</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_attribute_names"
              c:identifier="nm_sriov_vf_get_attribute_names"
              version="1.14">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-sriov.c"
             line="327">Gets an array of attribute names defined on @vf.</doc>
        <source-position filename="libnm-core/nm-setting-sriov.h" line="115"/>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-sriov.c"
               line="333">a %NULL-terminated array of attribute names</doc>
          <array c:type="const char**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="vf" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-sriov.c"
                 line="329">the #NMSriovVF</doc>
            <type name="SriovVF" c:type="const NMSriovVF*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_index"
              c:identifier="nm_sriov_vf_get_index"
              version="1.14">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-sriov.c"
             line="282">Gets the index property of this VF object.</doc>
        <source-position filename="libnm-core/nm-setting-sriov.h" line="111"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-sriov.c"
               line="288">the VF index</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="vf" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-sriov.c"
                 line="284">the #NMSriovVF</doc>
            <type name="SriovVF" c:type="const NMSriovVF*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_vlan_ids"
              c:identifier="nm_sriov_vf_get_vlan_ids"
              version="1.14">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-sriov.c"
             line="558">Returns the VLANs currently configured on the VF.</doc>
        <source-position filename="libnm-core/nm-setting-sriov.h" line="88"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-sriov.c"
               line="565">a list of VLAN ids configured on the VF.</doc>
          <type name="guint" c:type="const guint*"/>
        </return-value>
        <parameters>
          <instance-parameter name="vf" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-sriov.c"
                 line="560">the #NMSriovVF</doc>
            <type name="SriovVF" c:type="const NMSriovVF*"/>
          </instance-parameter>
          <parameter name="length"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-sriov.c"
                 line="561">on return, the number of VLANs configured</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_vlan_protocol"
              c:identifier="nm_sriov_vf_get_vlan_protocol">
        <source-position filename="libnm-core/nm-setting-sriov.h" line="96"/>
        <return-value transfer-ownership="none">
          <type name="SriovVFVlanProtocol" c:type="NMSriovVFVlanProtocol"/>
        </return-value>
        <parameters>
          <instance-parameter name="vf" transfer-ownership="none">
            <type name="SriovVF" c:type="const NMSriovVF*"/>
          </instance-parameter>
          <parameter name="vlan_id" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_vlan_qos"
              c:identifier="nm_sriov_vf_get_vlan_qos"
              version="1.14">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-sriov.c"
             line="653">Returns the QoS value for the given VLAN.</doc>
        <source-position filename="libnm-core/nm-setting-sriov.h" line="94"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-sriov.c"
               line="660">the QoS value</doc>
          <type name="guint32" c:type="guint32"/>
        </return-value>
        <parameters>
          <instance-parameter name="vf" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-sriov.c"
                 line="655">the #NMSriovVF</doc>
            <type name="SriovVF" c:type="const NMSriovVF*"/>
          </instance-parameter>
          <parameter name="vlan_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-sriov.c"
                 line="656">the VLAN id</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="ref" c:identifier="nm_sriov_vf_ref" version="1.14">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-sriov.c"
             line="121">Increases the reference count of the object.</doc>
        <source-position filename="libnm-core/nm-setting-sriov.h" line="103"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="vf" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-sriov.c"
                 line="123">the #NMSriovVF</doc>
            <type name="SriovVF" c:type="NMSriovVF*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="remove_vlan"
              c:identifier="nm_sriov_vf_remove_vlan"
              version="1.14">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-sriov.c"
             line="519">Removes a VLAN from a VF.</doc>
        <source-position filename="libnm-core/nm-setting-sriov.h" line="86"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-sriov.c"
               line="526">%TRUE if the VLAN was removed, %FALSE if the VLAN @vlan_id
    did not belong to the VF.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="vf" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-sriov.c"
                 line="521">the #NMSriovVF</doc>
            <type name="SriovVF" c:type="NMSriovVF*"/>
          </instance-parameter>
          <parameter name="vlan_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-sriov.c"
                 line="522">the VLAN id</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_attribute"
              c:identifier="nm_sriov_vf_set_attribute"
              version="1.14">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-sriov.c"
             line="301">Sets the named attribute on @vf to the given value.</doc>
        <source-position filename="libnm-core/nm-setting-sriov.h" line="113"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="vf" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-sriov.c"
                 line="303">the #NMSriovVF</doc>
            <type name="SriovVF" c:type="NMSriovVF*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-sriov.c"
                 line="304">the name of a route attribute</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="value"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-sriov.c"
                 line="305">the value</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_vlan_protocol"
              c:identifier="nm_sriov_vf_set_vlan_protocol"
              version="1.14">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-sriov.c"
             line="628">Sets the protocol for the given VLAN.</doc>
        <source-position filename="libnm-core/nm-setting-sriov.h" line="92"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="vf" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-sriov.c"
                 line="630">the #NMSriovVF</doc>
            <type name="SriovVF" c:type="NMSriovVF*"/>
          </instance-parameter>
          <parameter name="vlan_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-sriov.c"
                 line="631">the VLAN id</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="protocol" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-sriov.c"
                 line="632">the VLAN protocol</doc>
            <type name="SriovVFVlanProtocol" c:type="NMSriovVFVlanProtocol"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_vlan_qos"
              c:identifier="nm_sriov_vf_set_vlan_qos"
              version="1.14">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-sriov.c"
             line="603">Sets a QoS value for the given VLAN.</doc>
        <source-position filename="libnm-core/nm-setting-sriov.h" line="90"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="vf" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-sriov.c"
                 line="605">the #NMSriovVF</doc>
            <type name="SriovVF" c:type="NMSriovVF*"/>
          </instance-parameter>
          <parameter name="vlan_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-sriov.c"
                 line="606">the VLAN id</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="qos" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-sriov.c"
                 line="607">a QoS (priority) value</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
        </parameters>
      </method>
      <method name="unref" c:identifier="nm_sriov_vf_unref" version="1.14">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-sriov.c"
             line="138">Decreases the reference count of the object.  If the reference count
reaches zero, the object will be destroyed.</doc>
        <source-position filename="libnm-core/nm-setting-sriov.h" line="105"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="vf" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-sriov.c"
                 line="140">the #NMSriovVF</doc>
            <type name="SriovVF" c:type="NMSriovVF*"/>
          </instance-parameter>
        </parameters>
      </method>
      <function name="attribute_validate"
                c:identifier="nm_sriov_vf_attribute_validate"
                version="1.14"
                throws="1">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-sriov.c"
             line="382">Validates a VF attribute, i.e. checks that the attribute is a known one,
the value is of the correct type and well-formed.</doc>
        <source-position filename="libnm-core/nm-setting-sriov.h" line="119"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-sriov.c"
               line="392">%TRUE if the attribute is valid, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-sriov.c"
                 line="384">the attribute name</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-sriov.c"
                 line="385">the attribute value</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="known"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-sriov.c"
                 line="386">on return, whether the attribute name is a known one</doc>
            <type name="gboolean" c:type="gboolean*"/>
          </parameter>
        </parameters>
      </function>
    </record>
    <enumeration name="SriovVFVlanProtocol"
                 version="1.14"
                 glib:type-name="NMSriovVFVlanProtocol"
                 glib:get-type="nm_sriov_vf_vlan_protocol_get_type"
                 c:type="NMSriovVFVlanProtocol">
      <doc xml:space="preserve"
           filename="libnm-core/nm-setting-sriov.h"
           line="48">#NMSriovVFVlanProtocol indicates the VLAN protocol to use.</doc>
      <member name="1q"
              value="0"
              c:identifier="NM_SRIOV_VF_VLAN_PROTOCOL_802_1Q"
              glib:nick="1q">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-sriov.h"
             line="50">use 802.1Q</doc>
      </member>
      <member name="1ad"
              value="1"
              c:identifier="NM_SRIOV_VF_VLAN_PROTOCOL_802_1AD"
              glib:nick="1ad">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-sriov.h"
             line="51">use 802.1ad</doc>
      </member>
    </enumeration>
    <enumeration name="State"
                 glib:type-name="NMState"
                 glib:get-type="nm_state_get_type"
                 c:type="NMState">
      <doc xml:space="preserve"
           filename="libnm-core/nm-dbus-interface.h"
           line="120">#NMState values indicate the current overall networking state.</doc>
      <member name="unknown"
              value="0"
              c:identifier="NM_STATE_UNKNOWN"
              glib:nick="unknown">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="122">Networking state is unknown. This indicates a daemon error
   that makes it unable to reasonably assess the state. In such event the
   applications are expected to assume Internet connectivity might be present
   and not disable controls that require network access.
   The graphical shells may hide the network accessibility indicator altogether
   since no meaningful status indication can be provided.</doc>
      </member>
      <member name="asleep"
              value="10"
              c:identifier="NM_STATE_ASLEEP"
              glib:nick="asleep">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="128">Networking is not enabled, the system is being suspended or
   resumed from suspend.</doc>
      </member>
      <member name="disconnected"
              value="20"
              c:identifier="NM_STATE_DISCONNECTED"
              glib:nick="disconnected">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="130">There is no active network connection.
   The graphical shell should indicate  no network connectivity and the
   applications should not attempt to access the network.</doc>
      </member>
      <member name="disconnecting"
              value="30"
              c:identifier="NM_STATE_DISCONNECTING"
              glib:nick="disconnecting">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="133">Network connections are being cleaned up.
   The applications should tear down their network sessions.</doc>
      </member>
      <member name="connecting"
              value="40"
              c:identifier="NM_STATE_CONNECTING"
              glib:nick="connecting">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="135">A network connection is being started
   The graphical shell should indicate the network is being connected while
   the applications should still make no attempts to connect the network.</doc>
      </member>
      <member name="connected_local"
              value="50"
              c:identifier="NM_STATE_CONNECTED_LOCAL"
              glib:nick="connected-local">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="138">There is only local IPv4 and/or IPv6 connectivity,
   but no default route to access the Internet. The graphical shell should
   indicate no network connectivity.</doc>
      </member>
      <member name="connected_site"
              value="60"
              c:identifier="NM_STATE_CONNECTED_SITE"
              glib:nick="connected-site">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="141">There is only site-wide IPv4 and/or IPv6 connectivity.
   This means a default route is available, but the Internet connectivity check
   (see "Connectivity" property) did not succeed. The graphical shell should
   indicate limited network connectivity.</doc>
      </member>
      <member name="connected_global"
              value="70"
              c:identifier="NM_STATE_CONNECTED_GLOBAL"
              glib:nick="connected-global">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="145">There is global IPv4 and/or IPv6 Internet connectivity
   This means the Internet connectivity check succeeded, the graphical shell should
   indicate full network connectivity.</doc>
      </member>
    </enumeration>
    <record name="TCAction"
            c:type="NMTCAction"
            glib:type-name="NMTCAction"
            glib:get-type="nm_tc_action_get_type"
            c:symbol-prefix="tc_action">
      <source-position filename="libnm-core/nm-setting-tc-config.h" line="62"/>
      <constructor name="new"
                   c:identifier="nm_tc_action_new"
                   version="1.12"
                   throws="1">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-tc-config.c"
             line="276">Creates a new #NMTCAction object.</doc>
        <source-position filename="libnm-core/nm-setting-tc-config.h"
                         line="68"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-tc-config.c"
               line="283">the new #NMTCAction object, or %NULL on error</doc>
          <type name="TCAction" c:type="NMTCAction*"/>
        </return-value>
        <parameters>
          <parameter name="kind" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-tc-config.c"
                 line="278">name of the queueing discipline</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="dup" c:identifier="nm_tc_action_dup" version="1.12">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-tc-config.c"
             line="398">Creates a copy of @action</doc>
        <source-position filename="libnm-core/nm-setting-tc-config.h"
                         line="80"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-tc-config.c"
               line="404">a copy of @action</doc>
          <type name="TCAction" c:type="NMTCAction*"/>
        </return-value>
        <parameters>
          <instance-parameter name="action" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-tc-config.c"
                 line="400">the #NMTCAction</doc>
            <type name="TCAction" c:type="NMTCAction*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="equal" c:identifier="nm_tc_action_equal" version="1.12">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-tc-config.c"
             line="350">Determines if two #NMTCAction objects contain the same kind, family,
handle, parent and info.</doc>
        <source-position filename="libnm-core/nm-setting-tc-config.h"
                         line="76"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-tc-config.c"
               line="358">%TRUE if the objects contain the same values, %FALSE if they do not.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="action" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-tc-config.c"
                 line="352">the #NMTCAction</doc>
            <type name="TCAction" c:type="NMTCAction*"/>
          </instance-parameter>
          <parameter name="other" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-tc-config.c"
                 line="353">the #NMTCAction to compare @action to.</doc>
            <type name="TCAction" c:type="NMTCAction*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_attribute" c:identifier="nm_tc_action_get_attribute">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-tc-config.c"
             line="467">Gets the value of the attribute with name @name on @action</doc>
        <source-position filename="libnm-core/nm-setting-tc-config.h"
                         line="88"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-tc-config.c"
               line="474">the value of the attribute with name @name on
  @action, or %NULL if @action has no such attribute.</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="action" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-tc-config.c"
                 line="469">the #NMTCAction</doc>
            <type name="TCAction" c:type="NMTCAction*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-tc-config.c"
                 line="470">the name of an action attribute</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_attribute_names"
              c:identifier="nm_tc_action_get_attribute_names">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-tc-config.c"
             line="448">Gets an array of attribute names defined on @action.</doc>
        <source-position filename="libnm-core/nm-setting-tc-config.h"
                         line="86"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-tc-config.c"
               line="454">a %NULL-terminated array of attribute names,</doc>
          <array c:type="char**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="action" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-tc-config.c"
                 line="450">the #NMTCAction</doc>
            <type name="TCAction" c:type="NMTCAction*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_kind"
              c:identifier="nm_tc_action_get_kind"
              version="1.12">
        <source-position filename="libnm-core/nm-setting-tc-config.h"
                         line="83"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="action" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-tc-config.c"
                 line="433">the #NMTCAction</doc>
            <type name="TCAction" c:type="NMTCAction*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="ref" c:identifier="nm_tc_action_ref" version="1.12">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-tc-config.c"
             line="309">Increases the reference count of the object.</doc>
        <source-position filename="libnm-core/nm-setting-tc-config.h"
                         line="72"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="action" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-tc-config.c"
                 line="311">the #NMTCAction</doc>
            <type name="TCAction" c:type="NMTCAction*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_attribute" c:identifier="nm_tc_action_set_attribute">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-tc-config.c"
             line="489">Sets or clears the named attribute on @action to the given value.</doc>
        <source-position filename="libnm-core/nm-setting-tc-config.h"
                         line="91"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="action" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-tc-config.c"
                 line="491">the #NMTCAction</doc>
            <type name="TCAction" c:type="NMTCAction*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-tc-config.c"
                 line="492">the name of an action attribute</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="value"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-tc-config.c"
                 line="493">the value</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </method>
      <method name="unref" c:identifier="nm_tc_action_unref" version="1.12">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-tc-config.c"
             line="326">Decreases the reference count of the object.  If the reference count
reaches zero, the object will be destroyed.</doc>
        <source-position filename="libnm-core/nm-setting-tc-config.h"
                         line="74"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="action" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-tc-config.c"
                 line="328">the #NMTCAction</doc>
            <type name="TCAction" c:type="NMTCAction*"/>
          </instance-parameter>
        </parameters>
      </method>
    </record>
    <record name="TCQdisc"
            c:type="NMTCQdisc"
            glib:type-name="NMTCQdisc"
            glib:get-type="nm_tc_qdisc_get_type"
            c:symbol-prefix="tc_qdisc">
      <source-position filename="libnm-core/nm-setting-tc-config.h" line="31"/>
      <constructor name="new"
                   c:identifier="nm_tc_qdisc_new"
                   version="1.12"
                   throws="1">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-tc-config.c"
             line="46">Creates a new #NMTCQdisc object.</doc>
        <source-position filename="libnm-core/nm-setting-tc-config.h"
                         line="37"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-tc-config.c"
               line="54">the new #NMTCQdisc object, or %NULL on error</doc>
          <type name="TCQdisc" c:type="NMTCQdisc*"/>
        </return-value>
        <parameters>
          <parameter name="kind" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-tc-config.c"
                 line="48">name of the queueing discipline</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="parent" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-tc-config.c"
                 line="49">the parent queueing discipline</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="dup" c:identifier="nm_tc_qdisc_dup" version="1.12">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-tc-config.c"
             line="171">Creates a copy of @qdisc</doc>
        <source-position filename="libnm-core/nm-setting-tc-config.h"
                         line="50"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-tc-config.c"
               line="177">a copy of @qdisc</doc>
          <type name="TCQdisc" c:type="NMTCQdisc*"/>
        </return-value>
        <parameters>
          <instance-parameter name="qdisc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-tc-config.c"
                 line="173">the #NMTCQdisc</doc>
            <type name="TCQdisc" c:type="NMTCQdisc*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="equal" c:identifier="nm_tc_qdisc_equal" version="1.12">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-tc-config.c"
             line="129">Determines if two #NMTCQdisc objects contain the same kind, * handle
and parent.</doc>
        <source-position filename="libnm-core/nm-setting-tc-config.h"
                         line="46"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-tc-config.c"
               line="137">%TRUE if the objects contain the same values, %FALSE if they do not.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="qdisc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-tc-config.c"
                 line="131">the #NMTCQdisc</doc>
            <type name="TCQdisc" c:type="NMTCQdisc*"/>
          </instance-parameter>
          <parameter name="other" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-tc-config.c"
                 line="132">the #NMTCQdisc to compare @qdisc to.</doc>
            <type name="TCQdisc" c:type="NMTCQdisc*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_handle"
              c:identifier="nm_tc_qdisc_get_handle"
              version="1.12">
        <source-position filename="libnm-core/nm-setting-tc-config.h"
                         line="55"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-tc-config.c"
               line="216">the queueing discipline handle</doc>
          <type name="guint32" c:type="guint32"/>
        </return-value>
        <parameters>
          <instance-parameter name="qdisc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-tc-config.c"
                 line="214">the #NMTCQdisc</doc>
            <type name="TCQdisc" c:type="NMTCQdisc*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_kind"
              c:identifier="nm_tc_qdisc_get_kind"
              version="1.12">
        <source-position filename="libnm-core/nm-setting-tc-config.h"
                         line="53"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="qdisc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-tc-config.c"
                 line="197">the #NMTCQdisc</doc>
            <type name="TCQdisc" c:type="NMTCQdisc*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_parent"
              c:identifier="nm_tc_qdisc_get_parent"
              version="1.12">
        <source-position filename="libnm-core/nm-setting-tc-config.h"
                         line="60"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-tc-config.c"
               line="251">the parent class</doc>
          <type name="guint32" c:type="guint32"/>
        </return-value>
        <parameters>
          <instance-parameter name="qdisc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-tc-config.c"
                 line="249">the #NMTCQdisc</doc>
            <type name="TCQdisc" c:type="NMTCQdisc*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="ref" c:identifier="nm_tc_qdisc_ref" version="1.12">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-tc-config.c"
             line="90">Increases the reference count of the object.</doc>
        <source-position filename="libnm-core/nm-setting-tc-config.h"
                         line="42"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="qdisc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-tc-config.c"
                 line="92">the #NMTCQdisc</doc>
            <type name="TCQdisc" c:type="NMTCQdisc*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_handle"
              c:identifier="nm_tc_qdisc_set_handle"
              version="1.12">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-tc-config.c"
             line="229">Sets the queueing discipline handle.</doc>
        <source-position filename="libnm-core/nm-setting-tc-config.h"
                         line="57"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="qdisc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-tc-config.c"
                 line="231">the #NMTCQdisc</doc>
            <type name="TCQdisc" c:type="NMTCQdisc*"/>
          </instance-parameter>
          <parameter name="handle" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-tc-config.c"
                 line="232">the queueing discipline handle</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
        </parameters>
      </method>
      <method name="unref" c:identifier="nm_tc_qdisc_unref" version="1.12">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-tc-config.c"
             line="107">Decreases the reference count of the object.  If the reference count
reaches zero, the object will be destroyed.</doc>
        <source-position filename="libnm-core/nm-setting-tc-config.h"
                         line="44"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="qdisc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-tc-config.c"
                 line="109">the #NMTCQdisc</doc>
            <type name="TCQdisc" c:type="NMTCQdisc*"/>
          </instance-parameter>
        </parameters>
      </method>
    </record>
    <record name="TCTfilter"
            c:type="NMTCTfilter"
            glib:type-name="NMTCTfilter"
            glib:get-type="nm_tc_tfilter_get_type"
            c:symbol-prefix="tc_tfilter">
      <source-position filename="libnm-core/nm-setting-tc-config.h" line="95"/>
      <constructor name="new"
                   c:identifier="nm_tc_tfilter_new"
                   version="1.12"
                   throws="1">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-tc-config.c"
             line="528">Creates a new #NMTCTfilter object.</doc>
        <source-position filename="libnm-core/nm-setting-tc-config.h"
                         line="101"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-tc-config.c"
               line="536">the new #NMTCTfilter object, or %NULL on error</doc>
          <type name="TCTfilter" c:type="NMTCTfilter*"/>
        </return-value>
        <parameters>
          <parameter name="kind" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-tc-config.c"
                 line="530">name of the queueing discipline</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="parent" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-tc-config.c"
                 line="531">the parent queueing discipline</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="dup" c:identifier="nm_tc_tfilter_dup" version="1.12">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-tc-config.c"
             line="675">Creates a copy of @tfilter</doc>
        <source-position filename="libnm-core/nm-setting-tc-config.h"
                         line="114"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-tc-config.c"
               line="681">a copy of @tfilter</doc>
          <type name="TCTfilter" c:type="NMTCTfilter*"/>
        </return-value>
        <parameters>
          <instance-parameter name="tfilter" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-tc-config.c"
                 line="677">the #NMTCTfilter</doc>
            <type name="TCTfilter" c:type="NMTCTfilter*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="equal" c:identifier="nm_tc_tfilter_equal" version="1.12">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-tc-config.c"
             line="613">Determines if two #NMTCTfilter objects contain the same kind, family,
handle, parent and info.</doc>
        <source-position filename="libnm-core/nm-setting-tc-config.h"
                         line="110"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-tc-config.c"
               line="621">%TRUE if the objects contain the same values, %FALSE if they do not.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="tfilter" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-tc-config.c"
                 line="615">the #NMTCTfilter</doc>
            <type name="TCTfilter" c:type="NMTCTfilter*"/>
          </instance-parameter>
          <parameter name="other" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-tc-config.c"
                 line="616">the #NMTCTfilter to compare @tfilter to.</doc>
            <type name="TCTfilter" c:type="NMTCTfilter*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_action"
              c:identifier="nm_tc_tfilter_get_action"
              version="1.12">
        <source-position filename="libnm-core/nm-setting-tc-config.h"
                         line="126"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-tc-config.c"
               line="773">the action associated with a traffic filter.</doc>
          <type name="TCAction" c:type="NMTCAction*"/>
        </return-value>
        <parameters>
          <instance-parameter name="tfilter" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-tc-config.c"
                 line="771">the #NMTCTfilter</doc>
            <type name="TCTfilter" c:type="NMTCTfilter*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_handle"
              c:identifier="nm_tc_tfilter_get_handle"
              version="1.12">
        <source-position filename="libnm-core/nm-setting-tc-config.h"
                         line="119"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-tc-config.c"
               line="721">the queueing discipline handle</doc>
          <type name="guint32" c:type="guint32"/>
        </return-value>
        <parameters>
          <instance-parameter name="tfilter" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-tc-config.c"
                 line="719">the #NMTCTfilter</doc>
            <type name="TCTfilter" c:type="NMTCTfilter*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_kind"
              c:identifier="nm_tc_tfilter_get_kind"
              version="1.12">
        <source-position filename="libnm-core/nm-setting-tc-config.h"
                         line="117"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="tfilter" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-tc-config.c"
                 line="702">the #NMTCTfilter</doc>
            <type name="TCTfilter" c:type="NMTCTfilter*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_parent"
              c:identifier="nm_tc_tfilter_get_parent"
              version="1.12">
        <source-position filename="libnm-core/nm-setting-tc-config.h"
                         line="124"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-tc-config.c"
               line="756">the parent class</doc>
          <type name="guint32" c:type="guint32"/>
        </return-value>
        <parameters>
          <instance-parameter name="tfilter" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-tc-config.c"
                 line="754">the #NMTCTfilter</doc>
            <type name="TCTfilter" c:type="NMTCTfilter*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="ref" c:identifier="nm_tc_tfilter_ref" version="1.12">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-tc-config.c"
             line="572">Increases the reference count of the object.</doc>
        <source-position filename="libnm-core/nm-setting-tc-config.h"
                         line="106"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="tfilter" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-tc-config.c"
                 line="574">the #NMTCTfilter</doc>
            <type name="TCTfilter" c:type="NMTCTfilter*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_action"
              c:identifier="nm_tc_tfilter_set_action"
              version="1.12">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-tc-config.c"
             line="789">Sets the action associated with a traffic filter.</doc>
        <source-position filename="libnm-core/nm-setting-tc-config.h"
                         line="128"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="tfilter" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-tc-config.c"
                 line="791">the #NMTCTfilter</doc>
            <type name="TCTfilter" c:type="NMTCTfilter*"/>
          </instance-parameter>
          <parameter name="action" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-tc-config.c"
                 line="792">the action object</doc>
            <type name="TCAction" c:type="NMTCAction*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_handle"
              c:identifier="nm_tc_tfilter_set_handle"
              version="1.12">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-tc-config.c"
             line="734">Sets the queueing discipline handle.</doc>
        <source-position filename="libnm-core/nm-setting-tc-config.h"
                         line="121"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="tfilter" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-tc-config.c"
                 line="736">the #NMTCTfilter</doc>
            <type name="TCTfilter" c:type="NMTCTfilter*"/>
          </instance-parameter>
          <parameter name="handle" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-tc-config.c"
                 line="737">the queueing discipline handle</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
        </parameters>
      </method>
      <method name="unref" c:identifier="nm_tc_tfilter_unref" version="1.12">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-tc-config.c"
             line="589">Decreases the reference count of the object.  If the reference count
reaches zero, the object will be destroyed.</doc>
        <source-position filename="libnm-core/nm-setting-tc-config.h"
                         line="108"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="tfilter" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-tc-config.c"
                 line="591">the #NMTCTfilter</doc>
            <type name="TCTfilter" c:type="NMTCTfilter*"/>
          </instance-parameter>
        </parameters>
      </method>
    </record>
    <constant name="TEAM_LINK_WATCHER_ARP_PING"
              value="arp_ping"
              c:type="NM_TEAM_LINK_WATCHER_ARP_PING">
      <source-position filename="libnm-core/nm-setting-team.h" line="52"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="TEAM_LINK_WATCHER_ETHTOOL"
              value="ethtool"
              c:type="NM_TEAM_LINK_WATCHER_ETHTOOL">
      <source-position filename="libnm-core/nm-setting-team.h" line="51"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="TEAM_LINK_WATCHER_NSNA_PING"
              value="nsna_ping"
              c:type="NM_TEAM_LINK_WATCHER_NSNA_PING">
      <source-position filename="libnm-core/nm-setting-team.h" line="53"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <record name="TeamLinkWatcher"
            c:type="NMTeamLinkWatcher"
            glib:type-name="NMTeamLinkWatcher"
            glib:get-type="nm_team_link_watcher_get_type"
            c:symbol-prefix="team_link_watcher">
      <source-position filename="libnm-core/nm-setting-team.h" line="55"/>
      <constructor name="new_arp_ping"
                   c:identifier="nm_team_link_watcher_new_arp_ping"
                   version="1.12"
                   throws="1">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-team.c"
             line="210">Creates a new arp_ping #NMTeamLinkWatcher object</doc>
        <source-position filename="libnm-core/nm-setting-team.h" line="70"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-team.c"
               line="224">the new #NMTeamLinkWatcher object, or %NULL on error</doc>
          <type name="TeamLinkWatcher" c:type="NMTeamLinkWatcher*"/>
        </return-value>
        <parameters>
          <parameter name="init_wait" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-team.c"
                 line="212">init_wait value</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="interval" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-team.c"
                 line="213">interval value</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="missed_max" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-team.c"
                 line="214">missed_max value</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="target_host" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-team.c"
                 line="215">the host name or the ip address that will be used as destination
  address in the arp request</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="source_host" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-team.c"
                 line="217">the host name or the ip address that will be used as source
  address in the arp request</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-team.c"
                 line="219">the watcher #NMTeamLinkWatcherArpPingFlags</doc>
            <type name="TeamLinkWatcherArpPingFlags"
                  c:type="NMTeamLinkWatcherArpPingFlags"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_arp_ping2"
                   c:identifier="nm_team_link_watcher_new_arp_ping2"
                   version="1.16"
                   throws="1">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-team.c"
             line="247">Creates a new arp_ping #NMTeamLinkWatcher object</doc>
        <source-position filename="libnm-core/nm-setting-team.h" line="78"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-team.c"
               line="262">the new #NMTeamLinkWatcher object, or %NULL on error</doc>
          <type name="TeamLinkWatcher" c:type="NMTeamLinkWatcher*"/>
        </return-value>
        <parameters>
          <parameter name="init_wait" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-team.c"
                 line="249">init_wait value</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="interval" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-team.c"
                 line="250">interval value</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="missed_max" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-team.c"
                 line="251">missed_max value</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="vlanid" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-team.c"
                 line="252">vlanid value</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="target_host" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-team.c"
                 line="253">the host name or the ip address that will be used as destination
  address in the arp request</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="source_host" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-team.c"
                 line="255">the host name or the ip address that will be used as source
  address in the arp request</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-team.c"
                 line="257">the watcher #NMTeamLinkWatcherArpPingFlags</doc>
            <type name="TeamLinkWatcherArpPingFlags"
                  c:type="NMTeamLinkWatcherArpPingFlags"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_ethtool"
                   c:identifier="nm_team_link_watcher_new_ethtool"
                   version="1.12"
                   throws="1">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-team.c"
             line="108">Creates a new ethtool #NMTeamLinkWatcher object</doc>
        <source-position filename="libnm-core/nm-setting-team.h" line="60"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-team.c"
               line="117">the new #NMTeamLinkWatcher object</doc>
          <type name="TeamLinkWatcher" c:type="NMTeamLinkWatcher*"/>
        </return-value>
        <parameters>
          <parameter name="delay_up" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-team.c"
                 line="110">delay_up value</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="delay_down" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-team.c"
                 line="111">delay_down value</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_nsna_ping"
                   c:identifier="nm_team_link_watcher_new_nsna_ping"
                   version="1.12"
                   throws="1">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-team.c"
             line="149">Creates a new nsna_ping #NMTeamLinkWatcher object</doc>
        <source-position filename="libnm-core/nm-setting-team.h" line="64"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-team.c"
               line="160">the new #NMTeamLinkWatcher object, or %NULL on error</doc>
          <type name="TeamLinkWatcher" c:type="NMTeamLinkWatcher*"/>
        </return-value>
        <parameters>
          <parameter name="init_wait" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-team.c"
                 line="151">init_wait value</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="interval" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-team.c"
                 line="152">interval value</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="missed_max" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-team.c"
                 line="153">missed_max value</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="target_host" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-team.c"
                 line="154">the host name or the ipv6 address that will be used as
  target address in the NS packet</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="dup"
              c:identifier="nm_team_link_watcher_dup"
              version="1.12">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-team.c"
             line="399">Creates a copy of @watcher</doc>
        <source-position filename="libnm-core/nm-setting-team.h" line="93"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-team.c"
               line="405">a copy of @watcher</doc>
          <type name="TeamLinkWatcher" c:type="NMTeamLinkWatcher*"/>
        </return-value>
        <parameters>
          <instance-parameter name="watcher" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-team.c"
                 line="401">the #NMTeamLinkWatcher</doc>
            <type name="TeamLinkWatcher" c:type="NMTeamLinkWatcher*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="equal"
              c:identifier="nm_team_link_watcher_equal"
              version="1.12">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-team.c"
             line="368">Determines if two #NMTeamLinkWatcher objects contain the same values
in all the properties.</doc>
        <source-position filename="libnm-core/nm-setting-team.h" line="91"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-team.c"
               line="376">%TRUE if the objects contain the same values, %FALSE if they do not.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="watcher" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-team.c"
                 line="370">the #NMTeamLinkWatcher</doc>
            <type name="TeamLinkWatcher" c:type="NMTeamLinkWatcher*"/>
          </instance-parameter>
          <parameter name="other" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-team.c"
                 line="371">the #NMTeamLinkWatcher to compare @watcher to.</doc>
            <type name="TeamLinkWatcher" c:type="NMTeamLinkWatcher*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_delay_down"
              c:identifier="nm_team_link_watcher_get_delay_down"
              version="1.12">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-team.c"
             line="477">Gets the delay_down interval (in milliseconds) that elapses between the link
going down and the runner being notified about it.</doc>
        <source-position filename="libnm-core/nm-setting-team.h" line="99"/>
        <return-value transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="watcher" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-team.c"
                 line="479">the #NMTeamLinkWatcher</doc>
            <type name="TeamLinkWatcher" c:type="NMTeamLinkWatcher*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_delay_up"
              c:identifier="nm_team_link_watcher_get_delay_up"
              version="1.12">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-team.c"
             line="458">Gets the delay_up interval (in milliseconds) that elapses between the link
coming up and the runner being notified about it.</doc>
        <source-position filename="libnm-core/nm-setting-team.h" line="97"/>
        <return-value transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="watcher" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-team.c"
                 line="460">the #NMTeamLinkWatcher</doc>
            <type name="TeamLinkWatcher" c:type="NMTeamLinkWatcher*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_flags"
              c:identifier="nm_team_link_watcher_get_flags"
              version="1.12">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-team.c"
             line="609">Gets the arp ping watcher flags.</doc>
        <source-position filename="libnm-core/nm-setting-team.h" line="111"/>
        <return-value transfer-ownership="none">
          <type name="TeamLinkWatcherArpPingFlags"
                c:type="NMTeamLinkWatcherArpPingFlags"/>
        </return-value>
        <parameters>
          <instance-parameter name="watcher" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-team.c"
                 line="611">the #NMTeamLinkWatcher</doc>
            <type name="TeamLinkWatcher" c:type="NMTeamLinkWatcher*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_init_wait"
              c:identifier="nm_team_link_watcher_get_init_wait"
              version="1.12">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-team.c"
             line="496">Gets the init_wait interval (in milliseconds) that the team slave should
wait before sending the first packet to the target host.</doc>
        <source-position filename="libnm-core/nm-setting-team.h" line="101"/>
        <return-value transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="watcher" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-team.c"
                 line="498">the #NMTeamLinkWatcher</doc>
            <type name="TeamLinkWatcher" c:type="NMTeamLinkWatcher*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_interval"
              c:identifier="nm_team_link_watcher_get_interval"
              version="1.12">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-team.c"
             line="517">Gets the interval (in milliseconds) that the team slave should wait between
sending two check packets to the target host.</doc>
        <source-position filename="libnm-core/nm-setting-team.h" line="103"/>
        <return-value transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="watcher" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-team.c"
                 line="519">the #NMTeamLinkWatcher</doc>
            <type name="TeamLinkWatcher" c:type="NMTeamLinkWatcher*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_missed_max"
              c:identifier="nm_team_link_watcher_get_missed_max"
              version="1.12">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-team.c"
             line="538">Gets the number of missed replies after which the link is considered down.</doc>
        <source-position filename="libnm-core/nm-setting-team.h" line="105"/>
        <return-value transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="watcher" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-team.c"
                 line="540">the #NMTeamLinkWatcher</doc>
            <type name="TeamLinkWatcher" c:type="NMTeamLinkWatcher*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_name"
              c:identifier="nm_team_link_watcher_get_name"
              version="1.12">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-team.c"
             line="442">Gets the name of the link watcher to be used.</doc>
        <source-position filename="libnm-core/nm-setting-team.h" line="95"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="watcher" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-team.c"
                 line="444">the #NMTeamLinkWatcher</doc>
            <type name="TeamLinkWatcher" c:type="NMTeamLinkWatcher*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_source_host"
              c:identifier="nm_team_link_watcher_get_source_host"
              version="1.12">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-team.c"
             line="593">Gets the ip address to be used as source for the link probing packets.</doc>
        <source-position filename="libnm-core/nm-setting-team.h" line="109"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="watcher" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-team.c"
                 line="595">the #NMTeamLinkWatcher</doc>
            <type name="TeamLinkWatcher" c:type="NMTeamLinkWatcher*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_target_host"
              c:identifier="nm_team_link_watcher_get_target_host"
              version="1.12">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-team.c"
             line="576">Gets the host name/ip address to be used as destination for the link probing
packets.</doc>
        <source-position filename="libnm-core/nm-setting-team.h" line="107"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="watcher" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-team.c"
                 line="578">the #NMTeamLinkWatcher</doc>
            <type name="TeamLinkWatcher" c:type="NMTeamLinkWatcher*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_vlanid"
              c:identifier="nm_team_link_watcher_get_vlanid"
              version="1.16">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-team.c"
             line="558">Gets the VLAN tag ID to be used to outgoing link probes</doc>
        <source-position filename="libnm-core/nm-setting-team.h" line="113"/>
        <return-value transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="watcher" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-team.c"
                 line="560">the #NMTeamLinkWatcher</doc>
            <type name="TeamLinkWatcher" c:type="NMTeamLinkWatcher*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="ref"
              c:identifier="nm_team_link_watcher_ref"
              version="1.12">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-team.c"
             line="331">Increases the reference count of the object.</doc>
        <source-position filename="libnm-core/nm-setting-team.h" line="87"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="watcher" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-team.c"
                 line="333">the #NMTeamLinkWatcher</doc>
            <type name="TeamLinkWatcher" c:type="NMTeamLinkWatcher*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="unref"
              c:identifier="nm_team_link_watcher_unref"
              version="1.12">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-team.c"
             line="346">Decreases the reference count of the object.  If the reference count
reaches zero, the object will be destroyed.</doc>
        <source-position filename="libnm-core/nm-setting-team.h" line="89"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="watcher" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-team.c"
                 line="348">the #NMTeamLinkWatcher</doc>
            <type name="TeamLinkWatcher" c:type="NMTeamLinkWatcher*"/>
          </instance-parameter>
        </parameters>
      </method>
    </record>
    <bitfield name="TeamLinkWatcherArpPingFlags"
              glib:type-name="NMTeamLinkWatcherArpPingFlags"
              glib:get-type="nm_team_link_watcher_arp_ping_flags_get_type"
              c:type="NMTeamLinkWatcherArpPingFlags">
      <member name="validate_active"
              value="2"
              c:identifier="NM_TEAM_LINK_WATCHER_ARP_PING_FLAG_VALIDATE_ACTIVE"
              glib:nick="validate-active">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-team.h"
             line="37">the arp_ping link watcher
   option 'validate_active' is enabled (set to true).</doc>
      </member>
      <member name="validate_inactive"
              value="4"
              c:identifier="NM_TEAM_LINK_WATCHER_ARP_PING_FLAG_VALIDATE_INACTIVE"
              glib:nick="validate-inactive">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-team.h"
             line="39">the arp_ping link watcher
   option 'validate_inactive' is enabled (set to true).</doc>
      </member>
      <member name="send_always"
              value="8"
              c:identifier="NM_TEAM_LINK_WATCHER_ARP_PING_FLAG_SEND_ALWAYS"
              glib:nick="send-always">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-team.h"
             line="41">the arp_ping link watcher option
   'send_always' is enabled (set to true).</doc>
      </member>
    </bitfield>
    <enumeration name="Ternary"
                 version="1.14"
                 glib:type-name="NMTernary"
                 glib:get-type="nm_ternary_get_type"
                 c:type="NMTernary">
      <doc xml:space="preserve"
           filename="libnm-core/nm-dbus-interface.h"
           line="1037">An boolean value that can be overridden by a default.</doc>
      <member name="default"
              value="-1"
              c:identifier="NM_TERNARY_DEFAULT"
              glib:nick="default">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="1039">use the globally-configured default value.</doc>
      </member>
      <member name="false"
              value="0"
              c:identifier="NM_TERNARY_FALSE"
              glib:nick="false">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="1040">the option is disabled.</doc>
      </member>
      <member name="true"
              value="1"
              c:identifier="NM_TERNARY_TRUE"
              glib:nick="true">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="1041">the option is enabled.</doc>
      </member>
    </enumeration>
    <constant name="UTILS_HWADDR_LEN_MAX"
              value="20"
              c:type="NM_UTILS_HWADDR_LEN_MAX">
      <doc xml:space="preserve"
           filename="libnm-core/nm-utils.h"
           line="162">The maximum length of hardware addresses handled by NetworkManager itself,
nm_utils_hwaddr_len(), and nm_utils_hwaddr_aton().</doc>
      <source-position filename="libnm-core/nm-utils.h" line="168"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <callback name="UtilsCheckFilePredicate"
              c:type="NMUtilsCheckFilePredicate"
              throws="1">
      <source-position filename="libnm-core/nm-utils.h" line="141"/>
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="filename" transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="stat"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <type name="gpointer" c:type="const stat*"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="2">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="UtilsFileSearchInPathsPredicate"
              c:type="NMUtilsFileSearchInPathsPredicate">
      <source-position filename="libnm-core/nm-utils.h" line="137"/>
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="filename" transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="1">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <enumeration name="UtilsSecurityType"
                 glib:type-name="NMUtilsSecurityType"
                 glib:get-type="nm_utils_security_type_get_type"
                 c:type="NMUtilsSecurityType">
      <doc xml:space="preserve"
           filename="libnm-core/nm-utils.h"
           line="55">Describes generic security mechanisms that 802.11 access points may offer.
Used with nm_utils_security_valid() for checking whether a given access
point is compatible with a network device.</doc>
      <member name="invalid"
              value="0"
              c:identifier="NMU_SEC_INVALID"
              glib:nick="invalid">
        <doc xml:space="preserve"
             filename="libnm-core/nm-utils.h"
             line="57">unknown or invalid security, placeholder and not used</doc>
      </member>
      <member name="none"
              value="1"
              c:identifier="NMU_SEC_NONE"
              glib:nick="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-utils.h"
             line="58">unencrypted and open</doc>
      </member>
      <member name="static_wep"
              value="2"
              c:identifier="NMU_SEC_STATIC_WEP"
              glib:nick="static-wep">
        <doc xml:space="preserve"
             filename="libnm-core/nm-utils.h"
             line="59">static WEP keys are used for encryption</doc>
      </member>
      <member name="leap"
              value="3"
              c:identifier="NMU_SEC_LEAP"
              glib:nick="leap">
        <doc xml:space="preserve"
             filename="libnm-core/nm-utils.h"
             line="60">Cisco LEAP is used for authentication and for generating the
dynamic WEP keys automatically</doc>
      </member>
      <member name="dynamic_wep"
              value="4"
              c:identifier="NMU_SEC_DYNAMIC_WEP"
              glib:nick="dynamic-wep">
        <doc xml:space="preserve"
             filename="libnm-core/nm-utils.h"
             line="62">standard 802.1x is used for authentication and
generating the dynamic WEP keys automatically</doc>
      </member>
      <member name="wpa_psk"
              value="5"
              c:identifier="NMU_SEC_WPA_PSK"
              glib:nick="wpa-psk">
        <doc xml:space="preserve"
             filename="libnm-core/nm-utils.h"
             line="64">WPA1 is used with Pre-Shared Keys (PSK)</doc>
      </member>
      <member name="wpa_enterprise"
              value="6"
              c:identifier="NMU_SEC_WPA_ENTERPRISE"
              glib:nick="wpa-enterprise">
        <doc xml:space="preserve"
             filename="libnm-core/nm-utils.h"
             line="65">WPA1 is used with 802.1x authentication</doc>
      </member>
      <member name="wpa2_psk"
              value="7"
              c:identifier="NMU_SEC_WPA2_PSK"
              glib:nick="wpa2-psk">
        <doc xml:space="preserve"
             filename="libnm-core/nm-utils.h"
             line="66">WPA2/RSN is used with Pre-Shared Keys (PSK)</doc>
      </member>
      <member name="wpa2_enterprise"
              value="8"
              c:identifier="NMU_SEC_WPA2_ENTERPRISE"
              glib:nick="wpa2-enterprise">
        <doc xml:space="preserve"
             filename="libnm-core/nm-utils.h"
             line="67">WPA2 is used with 802.1x authentication</doc>
      </member>
    </enumeration>
    <constant name="VLAN_FLAGS_ALL" value="15" c:type="NM_VLAN_FLAGS_ALL">
      <source-position filename="libnm-core/nm-setting-vlan.h" line="104"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="VPN_CONNECTION_BANNER"
              value="banner"
              c:type="NM_VPN_CONNECTION_BANNER">
      <source-position filename="libnm/nm-vpn-connection.h" line="42"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="VPN_CONNECTION_VPN_STATE"
              value="vpn-state"
              c:type="NM_VPN_CONNECTION_VPN_STATE">
      <source-position filename="libnm/nm-vpn-connection.h" line="41"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="VPN_DBUS_PLUGIN_INTERFACE"
              value="org.freedesktop.NetworkManager.VPN.Plugin"
              c:type="NM_VPN_DBUS_PLUGIN_INTERFACE">
      <source-position filename="libnm-core/nm-vpn-dbus-interface.h"
                       line="45"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="VPN_DBUS_PLUGIN_PATH"
              value="/org/freedesktop/NetworkManager/VPN/Plugin"
              c:type="NM_VPN_DBUS_PLUGIN_PATH">
      <source-position filename="libnm-core/nm-vpn-dbus-interface.h"
                       line="44"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="VPN_EDITOR_PLUGIN_DESCRIPTION"
              value="description"
              c:type="NM_VPN_EDITOR_PLUGIN_DESCRIPTION">
      <source-position filename="libnm-core/nm-vpn-editor-plugin.h" line="79"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="VPN_EDITOR_PLUGIN_NAME"
              value="name"
              c:type="NM_VPN_EDITOR_PLUGIN_NAME">
      <source-position filename="libnm-core/nm-vpn-editor-plugin.h" line="76"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="VPN_EDITOR_PLUGIN_SERVICE"
              value="service"
              c:type="NM_VPN_EDITOR_PLUGIN_SERVICE">
      <source-position filename="libnm-core/nm-vpn-editor-plugin.h" line="82"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="VPN_PLUGIN_CAN_PERSIST"
              value="can-persist"
              c:type="NM_VPN_PLUGIN_CAN_PERSIST">
      <source-position filename="libnm-core/nm-vpn-dbus-interface.h"
                       line="215"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="VPN_PLUGIN_CONFIG_BANNER"
              value="banner"
              c:type="NM_VPN_PLUGIN_CONFIG_BANNER">
      <source-position filename="libnm-core/nm-vpn-dbus-interface.h"
                       line="198"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="VPN_PLUGIN_CONFIG_EXT_GATEWAY"
              value="gateway"
              c:type="NM_VPN_PLUGIN_CONFIG_EXT_GATEWAY">
      <source-position filename="libnm-core/nm-vpn-dbus-interface.h"
                       line="201"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="VPN_PLUGIN_CONFIG_HAS_IP4"
              value="has-ip4"
              c:type="NM_VPN_PLUGIN_CONFIG_HAS_IP4">
      <source-position filename="libnm-core/nm-vpn-dbus-interface.h"
                       line="207"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="VPN_PLUGIN_CONFIG_HAS_IP6"
              value="has-ip6"
              c:type="NM_VPN_PLUGIN_CONFIG_HAS_IP6">
      <source-position filename="libnm-core/nm-vpn-dbus-interface.h"
                       line="210"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="VPN_PLUGIN_CONFIG_MTU"
              value="mtu"
              c:type="NM_VPN_PLUGIN_CONFIG_MTU">
      <source-position filename="libnm-core/nm-vpn-dbus-interface.h"
                       line="204"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="VPN_PLUGIN_CONFIG_PROXY_PAC"
              value="pac"
              c:type="NM_VPN_PLUGIN_CONFIG_PROXY_PAC">
      <source-position filename="libnm-core/nm-vpn-dbus-interface.h"
                       line="195"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="VPN_PLUGIN_CONFIG_TUNDEV"
              value="tundev"
              c:type="NM_VPN_PLUGIN_CONFIG_TUNDEV">
      <source-position filename="libnm-core/nm-vpn-dbus-interface.h"
                       line="192"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="VPN_PLUGIN_INFO_FILENAME"
              value="filename"
              c:type="NM_VPN_PLUGIN_INFO_FILENAME">
      <source-position filename="libnm-core/nm-vpn-plugin-info.h" line="40"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="VPN_PLUGIN_INFO_KEYFILE"
              value="keyfile"
              c:type="NM_VPN_PLUGIN_INFO_KEYFILE">
      <source-position filename="libnm-core/nm-vpn-plugin-info.h" line="41"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="VPN_PLUGIN_INFO_KF_GROUP_CONNECTION"
              value="VPN Connection"
              c:type="NM_VPN_PLUGIN_INFO_KF_GROUP_CONNECTION">
      <source-position filename="libnm-core/nm-vpn-plugin-info.h" line="43"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="VPN_PLUGIN_INFO_KF_GROUP_GNOME"
              value="GNOME"
              c:type="NM_VPN_PLUGIN_INFO_KF_GROUP_GNOME">
      <source-position filename="libnm-core/nm-vpn-plugin-info.h" line="45"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="VPN_PLUGIN_INFO_KF_GROUP_LIBNM"
              value="libnm"
              c:type="NM_VPN_PLUGIN_INFO_KF_GROUP_LIBNM">
      <source-position filename="libnm-core/nm-vpn-plugin-info.h" line="44"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="VPN_PLUGIN_INFO_NAME"
              value="name"
              c:type="NM_VPN_PLUGIN_INFO_NAME">
      <source-position filename="libnm-core/nm-vpn-plugin-info.h" line="39"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="VPN_PLUGIN_IP4_CONFIG_ADDRESS"
              value="address"
              c:type="NM_VPN_PLUGIN_IP4_CONFIG_ADDRESS">
      <source-position filename="libnm-core/nm-vpn-dbus-interface.h"
                       line="225"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="VPN_PLUGIN_IP4_CONFIG_DNS"
              value="dns"
              c:type="NM_VPN_PLUGIN_IP4_CONFIG_DNS">
      <source-position filename="libnm-core/nm-vpn-dbus-interface.h"
                       line="236"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="VPN_PLUGIN_IP4_CONFIG_DOMAIN"
              value="domain"
              c:type="NM_VPN_PLUGIN_IP4_CONFIG_DOMAIN">
      <source-position filename="libnm-core/nm-vpn-dbus-interface.h"
                       line="245"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="VPN_PLUGIN_IP4_CONFIG_DOMAINS"
              value="domains"
              c:type="NM_VPN_PLUGIN_IP4_CONFIG_DOMAINS">
      <source-position filename="libnm-core/nm-vpn-dbus-interface.h"
                       line="248"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="VPN_PLUGIN_IP4_CONFIG_INT_GATEWAY"
              value="internal-gateway"
              c:type="NM_VPN_PLUGIN_IP4_CONFIG_INT_GATEWAY">
      <source-position filename="libnm-core/nm-vpn-dbus-interface.h"
                       line="222"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="VPN_PLUGIN_IP4_CONFIG_MSS"
              value="mss"
              c:type="NM_VPN_PLUGIN_IP4_CONFIG_MSS">
      <source-position filename="libnm-core/nm-vpn-dbus-interface.h"
                       line="242"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="VPN_PLUGIN_IP4_CONFIG_NBNS"
              value="nbns"
              c:type="NM_VPN_PLUGIN_IP4_CONFIG_NBNS">
      <source-position filename="libnm-core/nm-vpn-dbus-interface.h"
                       line="239"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="VPN_PLUGIN_IP4_CONFIG_NEVER_DEFAULT"
              value="never-default"
              c:type="NM_VPN_PLUGIN_IP4_CONFIG_NEVER_DEFAULT">
      <source-position filename="libnm-core/nm-vpn-dbus-interface.h"
                       line="259"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="VPN_PLUGIN_IP4_CONFIG_PREFIX"
              value="prefix"
              c:type="NM_VPN_PLUGIN_IP4_CONFIG_PREFIX">
      <source-position filename="libnm-core/nm-vpn-dbus-interface.h"
                       line="233"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="VPN_PLUGIN_IP4_CONFIG_PRESERVE_ROUTES"
              value="preserve-routes"
              c:type="NM_VPN_PLUGIN_IP4_CONFIG_PRESERVE_ROUTES">
      <source-position filename="libnm-core/nm-vpn-dbus-interface.h"
                       line="256"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="VPN_PLUGIN_IP4_CONFIG_PTP"
              value="ptp"
              c:type="NM_VPN_PLUGIN_IP4_CONFIG_PTP">
      <source-position filename="libnm-core/nm-vpn-dbus-interface.h"
                       line="230"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="VPN_PLUGIN_IP4_CONFIG_ROUTES"
              value="routes"
              c:type="NM_VPN_PLUGIN_IP4_CONFIG_ROUTES">
      <source-position filename="libnm-core/nm-vpn-dbus-interface.h"
                       line="253"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="VPN_PLUGIN_IP6_CONFIG_ADDRESS"
              value="address"
              c:type="NM_VPN_PLUGIN_IP6_CONFIG_ADDRESS">
      <source-position filename="libnm-core/nm-vpn-dbus-interface.h"
                       line="281"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="VPN_PLUGIN_IP6_CONFIG_DNS"
              value="dns"
              c:type="NM_VPN_PLUGIN_IP6_CONFIG_DNS">
      <source-position filename="libnm-core/nm-vpn-dbus-interface.h"
                       line="292"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="VPN_PLUGIN_IP6_CONFIG_DOMAIN"
              value="domain"
              c:type="NM_VPN_PLUGIN_IP6_CONFIG_DOMAIN">
      <source-position filename="libnm-core/nm-vpn-dbus-interface.h"
                       line="298"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="VPN_PLUGIN_IP6_CONFIG_DOMAINS"
              value="domains"
              c:type="NM_VPN_PLUGIN_IP6_CONFIG_DOMAINS">
      <source-position filename="libnm-core/nm-vpn-dbus-interface.h"
                       line="301"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="VPN_PLUGIN_IP6_CONFIG_INT_GATEWAY"
              value="internal-gateway"
              c:type="NM_VPN_PLUGIN_IP6_CONFIG_INT_GATEWAY">
      <source-position filename="libnm-core/nm-vpn-dbus-interface.h"
                       line="278"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="VPN_PLUGIN_IP6_CONFIG_MSS"
              value="mss"
              c:type="NM_VPN_PLUGIN_IP6_CONFIG_MSS">
      <source-position filename="libnm-core/nm-vpn-dbus-interface.h"
                       line="295"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="VPN_PLUGIN_IP6_CONFIG_NEVER_DEFAULT"
              value="never-default"
              c:type="NM_VPN_PLUGIN_IP6_CONFIG_NEVER_DEFAULT">
      <source-position filename="libnm-core/nm-vpn-dbus-interface.h"
                       line="312"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="VPN_PLUGIN_IP6_CONFIG_PREFIX"
              value="prefix"
              c:type="NM_VPN_PLUGIN_IP6_CONFIG_PREFIX">
      <source-position filename="libnm-core/nm-vpn-dbus-interface.h"
                       line="289"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="VPN_PLUGIN_IP6_CONFIG_PRESERVE_ROUTES"
              value="preserve-routes"
              c:type="NM_VPN_PLUGIN_IP6_CONFIG_PRESERVE_ROUTES">
      <source-position filename="libnm-core/nm-vpn-dbus-interface.h"
                       line="309"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="VPN_PLUGIN_IP6_CONFIG_PTP"
              value="ptp"
              c:type="NM_VPN_PLUGIN_IP6_CONFIG_PTP">
      <source-position filename="libnm-core/nm-vpn-dbus-interface.h"
                       line="286"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="VPN_PLUGIN_IP6_CONFIG_ROUTES"
              value="routes"
              c:type="NM_VPN_PLUGIN_IP6_CONFIG_ROUTES">
      <source-position filename="libnm-core/nm-vpn-dbus-interface.h"
                       line="306"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="VPN_PLUGIN_OLD_DBUS_SERVICE_NAME"
              value="service-name"
              c:type="NM_VPN_PLUGIN_OLD_DBUS_SERVICE_NAME">
      <source-position filename="libnm/nm-vpn-plugin-old.h" line="38"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="VPN_PLUGIN_OLD_STATE"
              value="state"
              c:type="NM_VPN_PLUGIN_OLD_STATE">
      <source-position filename="libnm/nm-vpn-plugin-old.h" line="39"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="VPN_SERVICE_PLUGIN_DBUS_SERVICE_NAME"
              value="service-name"
              c:type="NM_VPN_SERVICE_PLUGIN_DBUS_SERVICE_NAME">
      <source-position filename="libnm/nm-vpn-service-plugin.h" line="42"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="VPN_SERVICE_PLUGIN_DBUS_WATCH_PEER"
              value="watch-peer"
              c:type="NM_VPN_SERVICE_PLUGIN_DBUS_WATCH_PEER">
      <source-position filename="libnm/nm-vpn-service-plugin.h" line="43"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="VPN_SERVICE_PLUGIN_STATE"
              value="state"
              c:type="NM_VPN_SERVICE_PLUGIN_STATE">
      <source-position filename="libnm/nm-vpn-service-plugin.h" line="44"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <record name="VariantAttributeSpec"
            c:type="NMVariantAttributeSpec"
            disguised="1">
      <source-position filename="libnm-core/nm-utils.h" line="45"/>
    </record>
    <bitfield name="VlanFlags"
              glib:type-name="NMVlanFlags"
              glib:get-type="nm_vlan_flags_get_type"
              c:type="NMVlanFlags">
      <doc xml:space="preserve"
           filename="libnm-core/nm-setting-vlan.h"
           line="78">#NMVlanFlags values control the behavior of the VLAN interface.</doc>
      <member name="reorder_headers"
              value="1"
              c:identifier="NM_VLAN_FLAG_REORDER_HEADERS"
              glib:nick="reorder-headers">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-vlan.h"
             line="80">indicates that this interface should reorder
 outgoing packet headers to look more like a non-VLAN Ethernet interface</doc>
      </member>
      <member name="gvrp"
              value="2"
              c:identifier="NM_VLAN_FLAG_GVRP"
              glib:nick="gvrp">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-vlan.h"
             line="82">indicates that this interface should use GVRP to register
 itself with its switch</doc>
      </member>
      <member name="loose_binding"
              value="4"
              c:identifier="NM_VLAN_FLAG_LOOSE_BINDING"
              glib:nick="loose-binding">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-vlan.h"
             line="84">indicates that this interface's operating
 state is tied to the underlying network interface but other details
 (like routing) are not.</doc>
      </member>
      <member name="mvrp"
              value="8"
              c:identifier="NM_VLAN_FLAG_MVRP"
              glib:nick="mvrp">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-vlan.h"
             line="87">indicates that this interface should use MVRP to register
 itself with its switch</doc>
      </member>
    </bitfield>
    <enumeration name="VlanPriorityMap"
                 glib:type-name="NMVlanPriorityMap"
                 glib:get-type="nm_vlan_priority_map_get_type"
                 c:type="NMVlanPriorityMap">
      <doc xml:space="preserve"
           filename="libnm-core/nm-setting-vlan.h"
           line="65">A selector for traffic priority maps; these map Linux SKB priorities
to 802.1p priorities used in VLANs.</doc>
      <member name="ingress_map"
              value="0"
              c:identifier="NM_VLAN_INGRESS_MAP"
              glib:nick="ingress-map">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-vlan.h"
             line="67">map for incoming data</doc>
      </member>
      <member name="egress_map"
              value="1"
              c:identifier="NM_VLAN_EGRESS_MAP"
              glib:nick="egress-map">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-vlan.h"
             line="68">map for outgoing data</doc>
      </member>
    </enumeration>
    <class name="VpnConnection"
           c:symbol-prefix="vpn_connection"
           c:type="NMVpnConnection"
           parent="ActiveConnection"
           glib:type-name="NMVpnConnection"
           glib:get-type="nm_vpn_connection_get_type"
           glib:type-struct="VpnConnectionClass">
      <source-position filename="libnm/nm-vpn-connection.h" line="71"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.Initable"/>
      <virtual-method name="vpn_state_changed">
        <source-position filename="libnm/nm-vpn-connection.h" line="64"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="connection" transfer-ownership="none">
            <type name="VpnConnection" c:type="NMVpnConnection*"/>
          </instance-parameter>
          <parameter name="state" transfer-ownership="none">
            <type name="VpnConnectionState" c:type="NMVpnConnectionState"/>
          </parameter>
          <parameter name="reason" transfer-ownership="none">
            <type name="VpnConnectionStateReason"
                  c:type="NMVpnConnectionStateReason"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="get_banner" c:identifier="nm_vpn_connection_get_banner">
        <doc xml:space="preserve"
             filename="libnm/nm-vpn-connection.c"
             line="61">Gets the VPN login banner of the active #NMVpnConnection.</doc>
        <source-position filename="libnm/nm-vpn-connection.h" line="76"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-vpn-connection.c"
               line="67">the VPN login banner of the VPN connection. This is the internal
string used by the connection, and must not be modified.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="vpn" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-vpn-connection.c"
                 line="63">a #NMVpnConnection</doc>
            <type name="VpnConnection" c:type="NMVpnConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_vpn_state"
              c:identifier="nm_vpn_connection_get_vpn_state">
        <doc xml:space="preserve"
             filename="libnm/nm-vpn-connection.c"
             line="78">Gets the current #NMVpnConnection state.</doc>
        <source-position filename="libnm/nm-vpn-connection.h" line="75"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-vpn-connection.c"
               line="84">the VPN state of the active VPN connection.</doc>
          <type name="VpnConnectionState" c:type="NMVpnConnectionState"/>
        </return-value>
        <parameters>
          <instance-parameter name="vpn" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-vpn-connection.c"
                 line="80">a #NMVpnConnection</doc>
            <type name="VpnConnection" c:type="NMVpnConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="banner" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-vpn-connection.c"
             line="203">The VPN login banner of the active VPN connection.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="vpn-state" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-vpn-connection.c"
             line="190">The VPN state of the active VPN connection.</doc>
        <type name="VpnConnectionState"/>
      </property>
      <field name="parent">
        <type name="ActiveConnection" c:type="NMActiveConnection"/>
      </field>
      <glib:signal name="vpn-state-changed" when="first">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="VpnConnectionClass"
            c:type="NMVpnConnectionClass"
            glib:is-gtype-struct-for="VpnConnection">
      <source-position filename="libnm/nm-vpn-connection.h" line="71"/>
      <field name="parent">
        <type name="ActiveConnectionClass" c:type="NMActiveConnectionClass"/>
      </field>
      <field name="vpn_state_changed">
        <callback name="vpn_state_changed">
          <source-position filename="libnm/nm-vpn-connection.h" line="64"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="connection" transfer-ownership="none">
              <type name="VpnConnection" c:type="NMVpnConnection*"/>
            </parameter>
            <parameter name="state" transfer-ownership="none">
              <type name="VpnConnectionState" c:type="NMVpnConnectionState"/>
            </parameter>
            <parameter name="reason" transfer-ownership="none">
              <type name="VpnConnectionStateReason"
                    c:type="NMVpnConnectionStateReason"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="padding" readable="0" private="1">
        <array zero-terminated="0" fixed-size="4">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <enumeration name="VpnConnectionState"
                 glib:type-name="NMVpnConnectionState"
                 glib:get-type="nm_vpn_connection_state_get_type"
                 c:type="NMVpnConnectionState">
      <doc xml:space="preserve"
           filename="libnm-core/nm-vpn-dbus-interface.h"
           line="97">VPN connection states</doc>
      <member name="unknown"
              value="0"
              c:identifier="NM_VPN_CONNECTION_STATE_UNKNOWN"
              glib:nick="unknown">
        <doc xml:space="preserve"
             filename="libnm-core/nm-vpn-dbus-interface.h"
             line="99">The state of the VPN connection is
  unknown.</doc>
      </member>
      <member name="prepare"
              value="1"
              c:identifier="NM_VPN_CONNECTION_STATE_PREPARE"
              glib:nick="prepare">
        <doc xml:space="preserve"
             filename="libnm-core/nm-vpn-dbus-interface.h"
             line="101">The VPN connection is preparing to
  connect.</doc>
      </member>
      <member name="need_auth"
              value="2"
              c:identifier="NM_VPN_CONNECTION_STATE_NEED_AUTH"
              glib:nick="need-auth">
        <doc xml:space="preserve"
             filename="libnm-core/nm-vpn-dbus-interface.h"
             line="103">The VPN connection needs authorization
  credentials.</doc>
      </member>
      <member name="connect"
              value="3"
              c:identifier="NM_VPN_CONNECTION_STATE_CONNECT"
              glib:nick="connect">
        <doc xml:space="preserve"
             filename="libnm-core/nm-vpn-dbus-interface.h"
             line="105">The VPN connection is being established.</doc>
      </member>
      <member name="ip_config_get"
              value="4"
              c:identifier="NM_VPN_CONNECTION_STATE_IP_CONFIG_GET"
              glib:nick="ip-config-get">
        <doc xml:space="preserve"
             filename="libnm-core/nm-vpn-dbus-interface.h"
             line="106">The VPN connection is getting an IP
  address.</doc>
      </member>
      <member name="activated"
              value="5"
              c:identifier="NM_VPN_CONNECTION_STATE_ACTIVATED"
              glib:nick="activated">
        <doc xml:space="preserve"
             filename="libnm-core/nm-vpn-dbus-interface.h"
             line="108">The VPN connection is active.</doc>
      </member>
      <member name="failed"
              value="6"
              c:identifier="NM_VPN_CONNECTION_STATE_FAILED"
              glib:nick="failed">
        <doc xml:space="preserve"
             filename="libnm-core/nm-vpn-dbus-interface.h"
             line="109">The VPN connection failed.</doc>
      </member>
      <member name="disconnected"
              value="7"
              c:identifier="NM_VPN_CONNECTION_STATE_DISCONNECTED"
              glib:nick="disconnected">
        <doc xml:space="preserve"
             filename="libnm-core/nm-vpn-dbus-interface.h"
             line="110">The VPN connection is disconnected.</doc>
      </member>
    </enumeration>
    <enumeration name="VpnConnectionStateReason"
                 glib:type-name="NMVpnConnectionStateReason"
                 glib:get-type="nm_vpn_connection_state_reason_get_type"
                 c:type="NMVpnConnectionStateReason">
      <doc xml:space="preserve"
           filename="libnm-core/nm-vpn-dbus-interface.h"
           line="125">VPN connection state reasons</doc>
      <member name="unknown"
              value="0"
              c:identifier="NM_VPN_CONNECTION_STATE_REASON_UNKNOWN"
              glib:nick="unknown">
        <doc xml:space="preserve"
             filename="libnm-core/nm-vpn-dbus-interface.h"
             line="127">The reason for the VPN connection
  state change is unknown.</doc>
      </member>
      <member name="none"
              value="1"
              c:identifier="NM_VPN_CONNECTION_STATE_REASON_NONE"
              glib:nick="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-vpn-dbus-interface.h"
             line="129">No reason was given for the VPN
  connection state change.</doc>
      </member>
      <member name="user_disconnected"
              value="2"
              c:identifier="NM_VPN_CONNECTION_STATE_REASON_USER_DISCONNECTED"
              glib:nick="user-disconnected">
        <doc xml:space="preserve"
             filename="libnm-core/nm-vpn-dbus-interface.h"
             line="131">The VPN connection changed
  state because the user disconnected it.</doc>
      </member>
      <member name="device_disconnected"
              value="3"
              c:identifier="NM_VPN_CONNECTION_STATE_REASON_DEVICE_DISCONNECTED"
              glib:nick="device-disconnected">
        <doc xml:space="preserve"
             filename="libnm-core/nm-vpn-dbus-interface.h"
             line="133">The VPN connection
  changed state because the device it was using was disconnected.</doc>
      </member>
      <member name="service_stopped"
              value="4"
              c:identifier="NM_VPN_CONNECTION_STATE_REASON_SERVICE_STOPPED"
              glib:nick="service-stopped">
        <doc xml:space="preserve"
             filename="libnm-core/nm-vpn-dbus-interface.h"
             line="135">The service providing the
  VPN connection was stopped.</doc>
      </member>
      <member name="ip_config_invalid"
              value="5"
              c:identifier="NM_VPN_CONNECTION_STATE_REASON_IP_CONFIG_INVALID"
              glib:nick="ip-config-invalid">
        <doc xml:space="preserve"
             filename="libnm-core/nm-vpn-dbus-interface.h"
             line="137">The IP config of the VPN
  connection was invalid.</doc>
      </member>
      <member name="connect_timeout"
              value="6"
              c:identifier="NM_VPN_CONNECTION_STATE_REASON_CONNECT_TIMEOUT"
              glib:nick="connect-timeout">
        <doc xml:space="preserve"
             filename="libnm-core/nm-vpn-dbus-interface.h"
             line="139">The connection attempt to
  the VPN service timed out.</doc>
      </member>
      <member name="service_start_timeout"
              value="7"
              c:identifier="NM_VPN_CONNECTION_STATE_REASON_SERVICE_START_TIMEOUT"
              glib:nick="service-start-timeout">
        <doc xml:space="preserve"
             filename="libnm-core/nm-vpn-dbus-interface.h"
             line="141">A timeout occurred
  while starting the service providing the VPN connection.</doc>
      </member>
      <member name="service_start_failed"
              value="8"
              c:identifier="NM_VPN_CONNECTION_STATE_REASON_SERVICE_START_FAILED"
              glib:nick="service-start-failed">
        <doc xml:space="preserve"
             filename="libnm-core/nm-vpn-dbus-interface.h"
             line="143">Starting the service
  starting the service providing the VPN connection failed.</doc>
      </member>
      <member name="no_secrets"
              value="9"
              c:identifier="NM_VPN_CONNECTION_STATE_REASON_NO_SECRETS"
              glib:nick="no-secrets">
        <doc xml:space="preserve"
             filename="libnm-core/nm-vpn-dbus-interface.h"
             line="145">Necessary secrets for the VPN
  connection were not provided.</doc>
      </member>
      <member name="login_failed"
              value="10"
              c:identifier="NM_VPN_CONNECTION_STATE_REASON_LOGIN_FAILED"
              glib:nick="login-failed">
        <doc xml:space="preserve"
             filename="libnm-core/nm-vpn-dbus-interface.h"
             line="147">Authentication to the VPN
  server failed.</doc>
      </member>
      <member name="connection_removed"
              value="11"
              c:identifier="NM_VPN_CONNECTION_STATE_REASON_CONNECTION_REMOVED"
              glib:nick="connection-removed">
        <doc xml:space="preserve"
             filename="libnm-core/nm-vpn-dbus-interface.h"
             line="149">The connection was
  deleted from settings.</doc>
      </member>
    </enumeration>
    <interface name="VpnEditor"
               c:symbol-prefix="vpn_editor"
               c:type="NMVpnEditor"
               glib:type-name="NMVpnEditor"
               glib:get-type="nm_vpn_editor_get_type"
               glib:type-struct="VpnEditorInterface">
      <source-position filename="libnm/nm-vpn-editor.h" line="74"/>
      <virtual-method name="changed">
        <source-position filename="libnm/nm-vpn-editor.h" line="73"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="editor" transfer-ownership="none">
            <type name="VpnEditor" c:type="NMVpnEditor*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_widget" invoker="get_widget">
        <source-position filename="libnm/nm-vpn-editor.h" line="65"/>
        <return-value transfer-ownership="none">
          <type name="GObject.Object" c:type="GObject*"/>
        </return-value>
        <parameters>
          <instance-parameter name="editor" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-vpn-editor.c"
                 line="47">the #NMVpnEditor</doc>
            <type name="VpnEditor" c:type="NMVpnEditor*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="update_connection"
                      invoker="update_connection"
                      throws="1">
        <source-position filename="libnm/nm-vpn-editor.h" line="69"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="editor" transfer-ownership="none">
            <type name="VpnEditor" c:type="NMVpnEditor*"/>
          </instance-parameter>
          <parameter name="connection" transfer-ownership="none">
            <type name="Connection" c:type="NMConnection*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="get_widget" c:identifier="nm_vpn_editor_get_widget">
        <source-position filename="libnm/nm-vpn-editor.h" line="78"/>
        <return-value transfer-ownership="none">
          <type name="GObject.Object" c:type="GObject*"/>
        </return-value>
        <parameters>
          <instance-parameter name="editor" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-vpn-editor.c"
                 line="47">the #NMVpnEditor</doc>
            <type name="VpnEditor" c:type="NMVpnEditor*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="update_connection"
              c:identifier="nm_vpn_editor_update_connection"
              throws="1">
        <source-position filename="libnm/nm-vpn-editor.h" line="80"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="editor" transfer-ownership="none">
            <type name="VpnEditor" c:type="NMVpnEditor*"/>
          </instance-parameter>
          <parameter name="connection" transfer-ownership="none">
            <type name="Connection" c:type="NMConnection*"/>
          </parameter>
        </parameters>
      </method>
      <glib:signal name="changed" when="first">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </interface>
    <record name="VpnEditorInterface"
            c:type="NMVpnEditorInterface"
            glib:is-gtype-struct-for="VpnEditor">
      <doc xml:space="preserve"
           filename="libnm/nm-vpn-editor.h"
           line="46">Interface for editing a specific #NMConnection</doc>
      <source-position filename="libnm/nm-vpn-editor.h" line="74"/>
      <field name="g_iface">
        <doc xml:space="preserve"
             filename="libnm/nm-vpn-editor.h"
             line="48">the parent interface</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="get_widget">
        <callback name="get_widget">
          <source-position filename="libnm/nm-vpn-editor.h" line="65"/>
          <return-value transfer-ownership="none">
            <type name="GObject.Object" c:type="GObject*"/>
          </return-value>
          <parameters>
            <parameter name="editor" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="libnm/nm-vpn-editor.c"
                   line="47">the #NMVpnEditor</doc>
              <type name="VpnEditor" c:type="NMVpnEditor*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="placeholder">
        <callback name="placeholder">
          <source-position filename="libnm/nm-vpn-editor.h" line="67"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="update_connection">
        <callback name="update_connection" throws="1">
          <source-position filename="libnm/nm-vpn-editor.h" line="69"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="editor" transfer-ownership="none">
              <type name="VpnEditor" c:type="NMVpnEditor*"/>
            </parameter>
            <parameter name="connection" transfer-ownership="none">
              <type name="Connection" c:type="NMConnection*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="changed">
        <callback name="changed">
          <source-position filename="libnm/nm-vpn-editor.h" line="73"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="editor" transfer-ownership="none">
              <type name="VpnEditor" c:type="NMVpnEditor*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <interface name="VpnEditorPlugin"
               c:symbol-prefix="vpn_editor_plugin"
               c:type="NMVpnEditorPlugin"
               glib:type-name="NMVpnEditorPlugin"
               glib:get-type="nm_vpn_editor_plugin_get_type"
               glib:type-struct="VpnEditorPluginInterface">
      <source-position filename="libnm-core/nm-vpn-editor-plugin.h"
                       line="134"/>
      <function name="load"
                c:identifier="nm_vpn_editor_plugin_load"
                version="1.4"
                throws="1">
        <doc xml:space="preserve"
             filename="libnm-core/nm-vpn-editor-plugin.c"
             line="413">Load the shared library @plugin_name and create a new
#NMVpnEditorPlugin instance via the #NMVpnEditorPluginFactory
function.

This is similar to nm_vpn_editor_plugin_load_from_file(), but
it does no validation of the plugin name, instead passes it directly
to dlopen(). If you have the full path to a plugin file,
nm_vpn_editor_plugin_load_from_file() is preferred.</doc>
        <source-position filename="libnm-core/nm-vpn-editor-plugin.h"
                         line="168"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libnm-core/nm-vpn-editor-plugin.c"
               line="431">a new plugin instance or %NULL on error.</doc>
          <type name="VpnEditorPlugin" c:type="NMVpnEditorPlugin*"/>
        </return-value>
        <parameters>
          <parameter name="plugin_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-vpn-editor-plugin.c"
                 line="415">The name of the shared library to load.
 This path will be directly passed to dlopen() without
 further checks.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="check_service" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-vpn-editor-plugin.c"
                 line="418">if not-null, check that the loaded plugin advertises
 the given service.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </function>
      <function name="load_from_file"
                c:identifier="nm_vpn_editor_plugin_load_from_file"
                version="1.2"
                throws="1">
        <doc xml:space="preserve"
             filename="libnm-core/nm-vpn-editor-plugin.c"
             line="366">Load the shared library @plugin_name and create a new
#NMVpnEditorPlugin instance via the #NMVpnEditorPluginFactory
function.

If @plugin_name is not an absolute path name, it assumes the file
is in the plugin directory of NetworkManager. In any case, the call
will do certain checks on the file before passing it to dlopen.
A consequence for that is, that you cannot omit the ".so" suffix
as you could for nm_vpn_editor_plugin_load().</doc>
        <source-position filename="libnm-core/nm-vpn-editor-plugin.h"
                         line="160"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libnm-core/nm-vpn-editor-plugin.c"
               line="392">a new plugin instance or %NULL on error.</doc>
          <type name="VpnEditorPlugin" c:type="NMVpnEditorPlugin*"/>
        </return-value>
        <parameters>
          <parameter name="plugin_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-vpn-editor-plugin.c"
                 line="368">The path or name of the shared library to load.
 The path must either be an absolute filename to an existing file.
 Alternatively, it can be the name (without path) of a library in the
 plugin directory of NetworkManager.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="check_service" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-vpn-editor-plugin.c"
                 line="372">if not-null, check that the loaded plugin advertises
 the given service.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="check_owner" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-vpn-editor-plugin.c"
                 line="374">if non-negative, check whether the file is owned
 by UID @check_owner or by root. In this case also check that
 the file is not writable by anybody else.</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="check_file"
                     transfer-ownership="none"
                     scope="call"
                     closure="4">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-vpn-editor-plugin.c"
                 line="377">optional callback to validate the file prior to
  loading the shared library.</doc>
            <type name="UtilsCheckFilePredicate"
                  c:type="NMUtilsCheckFilePredicate"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-vpn-editor-plugin.c"
                 line="379">user data for @check_file</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="export_to_file" throws="1">
        <source-position filename="libnm-core/nm-vpn-editor-plugin.h"
                         line="122"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="plugin" transfer-ownership="none">
            <type name="VpnEditorPlugin" c:type="NMVpnEditorPlugin*"/>
          </instance-parameter>
          <parameter name="path" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="connection" transfer-ownership="none">
            <type name="Connection" c:type="NMConnection*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_capabilities" invoker="get_capabilities">
        <source-position filename="libnm-core/nm-vpn-editor-plugin.h"
                         line="116"/>
        <return-value transfer-ownership="none">
          <type name="VpnEditorPluginCapability"
                c:type="NMVpnEditorPluginCapability"/>
        </return-value>
        <parameters>
          <instance-parameter name="plugin" transfer-ownership="none">
            <type name="VpnEditorPlugin" c:type="NMVpnEditorPlugin*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_editor" invoker="get_editor" throws="1">
        <source-position filename="libnm-core/nm-vpn-editor-plugin.h"
                         line="112"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libnm-core/nm-vpn-editor-plugin.c"
               line="457">a new #NMVpnEditor or %NULL on error</doc>
          <type name="VpnEditor" c:type="NMVpnEditor*"/>
        </return-value>
        <parameters>
          <instance-parameter name="plugin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-vpn-editor-plugin.c"
                 line="453">the #NMVpnEditorPlugin</doc>
            <type name="VpnEditorPlugin" c:type="NMVpnEditorPlugin*"/>
          </instance-parameter>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-vpn-editor-plugin.c"
                 line="454">the #NMConnection to be edited</doc>
            <type name="Connection" c:type="NMConnection*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_suggested_filename"
                      invoker="get_suggested_filename">
        <source-position filename="libnm-core/nm-vpn-editor-plugin.h"
                         line="127"/>
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="plugin" transfer-ownership="none">
            <type name="VpnEditorPlugin" c:type="NMVpnEditorPlugin*"/>
          </instance-parameter>
          <parameter name="connection" transfer-ownership="none">
            <type name="Connection" c:type="NMConnection*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_vt">
        <source-position filename="libnm-core/nm-vpn-editor-plugin.h"
                         line="132"/>
        <return-value transfer-ownership="none">
          <type name="VpnEditorPluginVT" c:type="const NMVpnEditorPluginVT*"/>
        </return-value>
        <parameters>
          <instance-parameter name="plugin" transfer-ownership="none">
            <type name="VpnEditorPlugin" c:type="NMVpnEditorPlugin*"/>
          </instance-parameter>
          <parameter name="out_vt_size" transfer-ownership="none">
            <type name="gsize" c:type="gsize*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="import_from_file" introspectable="0" throws="1">
        <source-position filename="libnm-core/nm-vpn-editor-plugin.h"
                         line="118"/>
        <return-value>
          <type name="Connection" c:type="NMConnection*"/>
        </return-value>
        <parameters>
          <instance-parameter name="plugin" transfer-ownership="none">
            <type name="VpnEditorPlugin" c:type="NMVpnEditorPlugin*"/>
          </instance-parameter>
          <parameter name="path" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="notify_plugin_info_set">
        <source-position filename="libnm-core/nm-vpn-editor-plugin.h"
                         line="129"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="plugin" transfer-ownership="none">
            <type name="VpnEditorPlugin" c:type="NMVpnEditorPlugin*"/>
          </instance-parameter>
          <parameter name="plugin_info" transfer-ownership="none">
            <type name="VpnPluginInfo" c:type="NMVpnPluginInfo*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="export"
              c:identifier="nm_vpn_editor_plugin_export"
              throws="1">
        <source-position filename="libnm-core/nm-vpn-editor-plugin.h"
                         line="152"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="plugin" transfer-ownership="none">
            <type name="VpnEditorPlugin" c:type="NMVpnEditorPlugin*"/>
          </instance-parameter>
          <parameter name="path" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="connection" transfer-ownership="none">
            <type name="Connection" c:type="NMConnection*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_capabilities"
              c:identifier="nm_vpn_editor_plugin_get_capabilities">
        <source-position filename="libnm-core/nm-vpn-editor-plugin.h"
                         line="142"/>
        <return-value transfer-ownership="none">
          <type name="VpnEditorPluginCapability"
                c:type="NMVpnEditorPluginCapability"/>
        </return-value>
        <parameters>
          <instance-parameter name="plugin" transfer-ownership="none">
            <type name="VpnEditorPlugin" c:type="NMVpnEditorPlugin*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_editor"
              c:identifier="nm_vpn_editor_plugin_get_editor"
              throws="1">
        <source-position filename="libnm-core/nm-vpn-editor-plugin.h"
                         line="138"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libnm-core/nm-vpn-editor-plugin.c"
               line="457">a new #NMVpnEditor or %NULL on error</doc>
          <type name="VpnEditor" c:type="NMVpnEditor*"/>
        </return-value>
        <parameters>
          <instance-parameter name="plugin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-vpn-editor-plugin.c"
                 line="453">the #NMVpnEditorPlugin</doc>
            <type name="VpnEditorPlugin" c:type="NMVpnEditorPlugin*"/>
          </instance-parameter>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-vpn-editor-plugin.c"
                 line="454">the #NMConnection to be edited</doc>
            <type name="Connection" c:type="NMConnection*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_plugin_info"
              c:identifier="nm_vpn_editor_plugin_get_plugin_info"
              version="1.4">
        <source-position filename="libnm-core/nm-vpn-editor-plugin.h"
                         line="173"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-vpn-editor-plugin.c"
               line="122">if set, return the #NMVpnPluginInfo instance.</doc>
          <type name="VpnPluginInfo" c:type="NMVpnPluginInfo*"/>
        </return-value>
        <parameters>
          <instance-parameter name="plugin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-vpn-editor-plugin.c"
                 line="120">the #NMVpnEditorPlugin instance</doc>
            <type name="VpnEditorPlugin" c:type="NMVpnEditorPlugin*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_suggested_filename"
              c:identifier="nm_vpn_editor_plugin_get_suggested_filename">
        <source-position filename="libnm-core/nm-vpn-editor-plugin.h"
                         line="156"/>
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="plugin" transfer-ownership="none">
            <type name="VpnEditorPlugin" c:type="NMVpnEditorPlugin*"/>
          </instance-parameter>
          <parameter name="connection" transfer-ownership="none">
            <type name="Connection" c:type="NMConnection*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_vt"
              c:identifier="nm_vpn_editor_plugin_get_vt"
              version="1.4">
        <doc xml:space="preserve"
             filename="libnm-core/nm-vpn-editor-plugin.c"
             line="183">Returns an opaque VT function table for the plugin to extend
functionality. The actual meaning of NMVpnEditorPluginVT is not
defined in public API of libnm, instead it must be agreed by
both the plugin and the caller. See the header-only file
'nm-vpn-editor-plugin-call.h' which defines the meaning.</doc>
        <source-position filename="libnm-core/nm-vpn-editor-plugin.h"
                         line="145"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-vpn-editor-plugin.c"
               line="196">the actual size of the @plugin's virtual function table.</doc>
          <type name="gsize" c:type="gsize"/>
        </return-value>
        <parameters>
          <instance-parameter name="plugin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-vpn-editor-plugin.c"
                 line="185">the #NMVpnEditorPlugin</doc>
            <type name="VpnEditorPlugin" c:type="NMVpnEditorPlugin*"/>
          </instance-parameter>
          <parameter name="vt"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-vpn-editor-plugin.c"
                 line="186">buffer to be filled with the VT table of the plugin</doc>
            <type name="VpnEditorPluginVT" c:type="NMVpnEditorPluginVT*"/>
          </parameter>
          <parameter name="vt_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-vpn-editor-plugin.c"
                 line="187">the size of the buffer. Can be 0 to only query the
  size of plugin's VT.</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
        </parameters>
      </method>
      <method name="import"
              c:identifier="nm_vpn_editor_plugin_import"
              throws="1">
        <source-position filename="libnm-core/nm-vpn-editor-plugin.h"
                         line="149"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libnm-core/nm-vpn-editor-plugin.c"
               line="483">a new #NMConnection imported from @path, or %NULL
on error or if the file at @path was not recognized by this plugin</doc>
          <type name="Connection" c:type="NMConnection*"/>
        </return-value>
        <parameters>
          <instance-parameter name="plugin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-vpn-editor-plugin.c"
                 line="479">the #NMVpnEditorPlugin</doc>
            <type name="VpnEditorPlugin" c:type="NMVpnEditorPlugin*"/>
          </instance-parameter>
          <parameter name="path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-vpn-editor-plugin.c"
                 line="480">full path to the file to attempt to read into a new #NMConnection</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_plugin_info"
              c:identifier="nm_vpn_editor_plugin_set_plugin_info"
              version="1.4">
        <doc xml:space="preserve"
             filename="libnm-core/nm-vpn-editor-plugin.c"
             line="137">Set or clear the plugin-info instance.
This takes a weak reference on @plugin_info, to avoid circular
reference as the plugin-info might also reference the editor-plugin.</doc>
        <source-position filename="libnm-core/nm-vpn-editor-plugin.h"
                         line="175"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="plugin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-vpn-editor-plugin.c"
                 line="139">the #NMVpnEditorPlugin instance</doc>
            <type name="VpnEditorPlugin" c:type="NMVpnEditorPlugin*"/>
          </instance-parameter>
          <parameter name="plugin_info"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-vpn-editor-plugin.c"
                 line="140">a #NMVpnPluginInfo instance or %NULL</doc>
            <type name="VpnPluginInfo" c:type="NMVpnPluginInfo*"/>
          </parameter>
        </parameters>
      </method>
      <property name="description" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-vpn-editor-plugin.c"
             line="52">Longer description of the VPN plugin.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="name" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-vpn-editor-plugin.c"
             line="41">Short display name of the VPN plugin.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="service" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-vpn-editor-plugin.c"
             line="63">D-Bus service name of the plugin's VPN service.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
    </interface>
    <bitfield name="VpnEditorPluginCapability"
              glib:type-name="NMVpnEditorPluginCapability"
              glib:get-type="nm_vpn_editor_plugin_capability_get_type"
              c:type="NMVpnEditorPluginCapability">
      <doc xml:space="preserve"
           filename="libnm-core/nm-vpn-editor-plugin.h"
           line="59">Flags that indicate certain capabilities of the plugin to editor programs.</doc>
      <member name="none"
              value="0"
              c:identifier="NM_VPN_EDITOR_PLUGIN_CAPABILITY_NONE"
              glib:nick="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-vpn-editor-plugin.h"
             line="61">unknown or no capability</doc>
      </member>
      <member name="import"
              value="1"
              c:identifier="NM_VPN_EDITOR_PLUGIN_CAPABILITY_IMPORT"
              glib:nick="import">
        <doc xml:space="preserve"
             filename="libnm-core/nm-vpn-editor-plugin.h"
             line="62">the plugin can import new connections</doc>
      </member>
      <member name="export"
              value="2"
              c:identifier="NM_VPN_EDITOR_PLUGIN_CAPABILITY_EXPORT"
              glib:nick="export">
        <doc xml:space="preserve"
             filename="libnm-core/nm-vpn-editor-plugin.h"
             line="63">the plugin can export connections</doc>
      </member>
      <member name="ipv6"
              value="4"
              c:identifier="NM_VPN_EDITOR_PLUGIN_CAPABILITY_IPV6"
              glib:nick="ipv6">
        <doc xml:space="preserve"
             filename="libnm-core/nm-vpn-editor-plugin.h"
             line="64">the plugin supports IPv6 addressing</doc>
      </member>
    </bitfield>
    <record name="VpnEditorPluginInterface"
            c:type="NMVpnEditorPluginInterface"
            glib:is-gtype-struct-for="VpnEditorPlugin">
      <doc xml:space="preserve"
           filename="libnm-core/nm-vpn-editor-plugin.h"
           line="86">Interface for VPN editor plugins.</doc>
      <source-position filename="libnm-core/nm-vpn-editor-plugin.h"
                       line="134"/>
      <field name="g_iface">
        <doc xml:space="preserve"
             filename="libnm-core/nm-vpn-editor-plugin.h"
             line="88">the parent interface</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="get_editor">
        <callback name="get_editor" throws="1">
          <source-position filename="libnm-core/nm-vpn-editor-plugin.h"
                           line="112"/>
          <return-value transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-vpn-editor-plugin.c"
                 line="457">a new #NMVpnEditor or %NULL on error</doc>
            <type name="VpnEditor" c:type="NMVpnEditor*"/>
          </return-value>
          <parameters>
            <parameter name="plugin" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="libnm-core/nm-vpn-editor-plugin.c"
                   line="453">the #NMVpnEditorPlugin</doc>
              <type name="VpnEditorPlugin" c:type="NMVpnEditorPlugin*"/>
            </parameter>
            <parameter name="connection" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="libnm-core/nm-vpn-editor-plugin.c"
                   line="454">the #NMConnection to be edited</doc>
              <type name="Connection" c:type="NMConnection*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_capabilities">
        <callback name="get_capabilities">
          <source-position filename="libnm-core/nm-vpn-editor-plugin.h"
                           line="116"/>
          <return-value transfer-ownership="none">
            <type name="VpnEditorPluginCapability"
                  c:type="NMVpnEditorPluginCapability"/>
          </return-value>
          <parameters>
            <parameter name="plugin" transfer-ownership="none">
              <type name="VpnEditorPlugin" c:type="NMVpnEditorPlugin*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="import_from_file" introspectable="0">
        <callback name="import_from_file" introspectable="0" throws="1">
          <source-position filename="libnm-core/nm-vpn-editor-plugin.h"
                           line="118"/>
          <return-value>
            <type name="Connection" c:type="NMConnection*"/>
          </return-value>
          <parameters>
            <parameter name="plugin" transfer-ownership="none">
              <type name="VpnEditorPlugin" c:type="NMVpnEditorPlugin*"/>
            </parameter>
            <parameter name="path" transfer-ownership="none">
              <type name="utf8" c:type="const char*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="export_to_file">
        <callback name="export_to_file" throws="1">
          <source-position filename="libnm-core/nm-vpn-editor-plugin.h"
                           line="122"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="plugin" transfer-ownership="none">
              <type name="VpnEditorPlugin" c:type="NMVpnEditorPlugin*"/>
            </parameter>
            <parameter name="path" transfer-ownership="none">
              <type name="utf8" c:type="const char*"/>
            </parameter>
            <parameter name="connection" transfer-ownership="none">
              <type name="Connection" c:type="NMConnection*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_suggested_filename">
        <callback name="get_suggested_filename">
          <source-position filename="libnm-core/nm-vpn-editor-plugin.h"
                           line="127"/>
          <return-value transfer-ownership="full">
            <type name="utf8" c:type="char*"/>
          </return-value>
          <parameters>
            <parameter name="plugin" transfer-ownership="none">
              <type name="VpnEditorPlugin" c:type="NMVpnEditorPlugin*"/>
            </parameter>
            <parameter name="connection" transfer-ownership="none">
              <type name="Connection" c:type="NMConnection*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="notify_plugin_info_set">
        <callback name="notify_plugin_info_set">
          <source-position filename="libnm-core/nm-vpn-editor-plugin.h"
                           line="129"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="plugin" transfer-ownership="none">
              <type name="VpnEditorPlugin" c:type="NMVpnEditorPlugin*"/>
            </parameter>
            <parameter name="plugin_info" transfer-ownership="none">
              <type name="VpnPluginInfo" c:type="NMVpnPluginInfo*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_vt">
        <callback name="get_vt">
          <source-position filename="libnm-core/nm-vpn-editor-plugin.h"
                           line="132"/>
          <return-value transfer-ownership="none">
            <type name="VpnEditorPluginVT"
                  c:type="const NMVpnEditorPluginVT*"/>
          </return-value>
          <parameters>
            <parameter name="plugin" transfer-ownership="none">
              <type name="VpnEditorPlugin" c:type="NMVpnEditorPlugin*"/>
            </parameter>
            <parameter name="out_vt_size" transfer-ownership="none">
              <type name="gsize" c:type="gsize*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <record name="VpnEditorPluginVT"
            c:type="NMVpnEditorPluginVT"
            disguised="1">
      <source-position filename="libnm-core/nm-vpn-editor-plugin.h" line="84"/>
    </record>
    <callback name="VpnIterFunc" c:type="NMVpnIterFunc">
      <source-position filename="libnm-core/nm-setting-vpn.h" line="73"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="key" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-vpn.h"
               line="68">the name of the data or secret item</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="value" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-vpn.h"
               line="69">the value of the data or secret item</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="2">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-vpn.h"
               line="70">User data passed to nm_setting_vpn_foreach_data_item() or
nm_setting_vpn_foreach_secret()</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <enumeration name="VpnPluginError"
                 glib:type-name="NMVpnPluginError"
                 glib:get-type="nm_vpn_plugin_error_get_type"
                 c:type="NMVpnPluginError"
                 glib:error-domain="nm-vpn-plugin-error-quark">
      <doc xml:space="preserve"
           filename="libnm-core/nm-errors.h"
           line="289">Returned by the VPN service plugin to indicate errors. These codes correspond
to errors in the "org.freedesktop.NetworkManager.VPN.Error" namespace.</doc>
      <member name="Failed"
              value="0"
              c:identifier="NM_VPN_PLUGIN_ERROR_FAILED"
              glib:nick="Failed">
        <doc xml:space="preserve"
             filename="libnm-core/nm-errors.h"
             line="291">unknown or unclassified error</doc>
      </member>
      <member name="StartingInProgress"
              value="1"
              c:identifier="NM_VPN_PLUGIN_ERROR_STARTING_IN_PROGRESS"
              glib:nick="StartingInProgress">
        <doc xml:space="preserve"
             filename="libnm-core/nm-errors.h"
             line="292">the plugin is already starting,
  and another connect request was received</doc>
      </member>
      <member name="AlreadyStarted"
              value="2"
              c:identifier="NM_VPN_PLUGIN_ERROR_ALREADY_STARTED"
              glib:nick="AlreadyStarted">
        <doc xml:space="preserve"
             filename="libnm-core/nm-errors.h"
             line="294">the plugin is already connected, and
  another connect request was received</doc>
      </member>
      <member name="StoppingInProgress"
              value="3"
              c:identifier="NM_VPN_PLUGIN_ERROR_STOPPING_IN_PROGRESS"
              glib:nick="StoppingInProgress">
        <doc xml:space="preserve"
             filename="libnm-core/nm-errors.h"
             line="296">the plugin is already stopping,
  and another stop request was received</doc>
      </member>
      <member name="AlreadyStopped"
              value="4"
              c:identifier="NM_VPN_PLUGIN_ERROR_ALREADY_STOPPED"
              glib:nick="AlreadyStopped">
        <doc xml:space="preserve"
             filename="libnm-core/nm-errors.h"
             line="298">the plugin is already stopped, and
  another disconnect request was received</doc>
      </member>
      <member name="WrongState"
              value="5"
              c:identifier="NM_VPN_PLUGIN_ERROR_WRONG_STATE"
              glib:nick="WrongState">
        <doc xml:space="preserve"
             filename="libnm-core/nm-errors.h"
             line="300">the operation could not be performed in
  this state</doc>
      </member>
      <member name="BadArguments"
              value="6"
              c:identifier="NM_VPN_PLUGIN_ERROR_BAD_ARGUMENTS"
              glib:nick="BadArguments">
        <doc xml:space="preserve"
             filename="libnm-core/nm-errors.h"
             line="302">the operation could not be performed as
  the request contained malformed arguments, or arguments of unexpected type.
  Usually means that one of the VPN setting data items or secrets was not of
  the expected type (ie int, string, bool, etc).</doc>
      </member>
      <member name="LaunchFailed"
              value="7"
              c:identifier="NM_VPN_PLUGIN_ERROR_LAUNCH_FAILED"
              glib:nick="LaunchFailed">
        <doc xml:space="preserve"
             filename="libnm-core/nm-errors.h"
             line="306">a child process failed to launch</doc>
      </member>
      <member name="InvalidConnection"
              value="8"
              c:identifier="NM_VPN_PLUGIN_ERROR_INVALID_CONNECTION"
              glib:nick="InvalidConnection">
        <doc xml:space="preserve"
             filename="libnm-core/nm-errors.h"
             line="307">the operation could not be performed
  because the connection was invalid.  Usually means that the connection's
  VPN setting was missing some required data item or secret.</doc>
      </member>
      <member name="InteractiveNotSupported"
              value="9"
              c:identifier="NM_VPN_PLUGIN_ERROR_INTERACTIVE_NOT_SUPPORTED"
              glib:nick="InteractiveNotSupported">
        <doc xml:space="preserve"
             filename="libnm-core/nm-errors.h"
             line="310">the operation could not be
  performed as the plugin does not support interactive operations, such as
  ConnectInteractive() or NewSecrets()</doc>
      </member>
      <function name="quark" c:identifier="nm_vpn_plugin_error_quark">
        <return-value transfer-ownership="none">
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
    </enumeration>
    <enumeration name="VpnPluginFailure"
                 glib:type-name="NMVpnPluginFailure"
                 glib:get-type="nm_vpn_plugin_failure_get_type"
                 c:type="NMVpnPluginFailure">
      <doc xml:space="preserve"
           filename="libnm-core/nm-vpn-dbus-interface.h"
           line="170">VPN plugin failure reasons</doc>
      <member name="login_failed"
              value="0"
              c:identifier="NM_VPN_PLUGIN_FAILURE_LOGIN_FAILED"
              glib:nick="login-failed">
        <doc xml:space="preserve"
             filename="libnm-core/nm-vpn-dbus-interface.h"
             line="172">Login failed.</doc>
      </member>
      <member name="connect_failed"
              value="1"
              c:identifier="NM_VPN_PLUGIN_FAILURE_CONNECT_FAILED"
              glib:nick="connect-failed">
        <doc xml:space="preserve"
             filename="libnm-core/nm-vpn-dbus-interface.h"
             line="173">Connect failed.</doc>
      </member>
      <member name="bad_ip_config"
              value="2"
              c:identifier="NM_VPN_PLUGIN_FAILURE_BAD_IP_CONFIG"
              glib:nick="bad-ip-config">
        <doc xml:space="preserve"
             filename="libnm-core/nm-vpn-dbus-interface.h"
             line="174">Invalid IP configuration returned from
  the VPN plugin.</doc>
      </member>
    </enumeration>
    <class name="VpnPluginInfo"
           c:symbol-prefix="vpn_plugin_info"
           c:type="NMVpnPluginInfo"
           parent="GObject.Object"
           glib:type-name="NMVpnPluginInfo"
           glib:get-type="nm_vpn_plugin_info_get_type"
           glib:type-struct="VpnPluginInfoClass">
      <source-position filename="libnm-core/nm-vpn-plugin-info.h" line="64"/>
      <implements name="Gio.Initable"/>
      <constructor name="new_from_file"
                   c:identifier="nm_vpn_plugin_info_new_from_file"
                   version="1.2"
                   throws="1">
        <doc xml:space="preserve"
             filename="libnm-core/nm-vpn-plugin-info.c"
             line="1207">Read the plugin info from file @filename. Does not do
any further verification on the file. You might want to check
file permissions and ownership of the file.</doc>
        <source-position filename="libnm-core/nm-vpn-plugin-info.h" line="70"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libnm-core/nm-vpn-plugin-info.c"
               line="1216">%NULL if there is any error or a newly created
#NMVpnPluginInfo instance.</doc>
          <type name="VpnPluginInfo" c:type="NMVpnPluginInfo*"/>
        </return-value>
        <parameters>
          <parameter name="filename" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-vpn-plugin-info.c"
                 line="1209">filename to read.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_search_file"
                   c:identifier="nm_vpn_plugin_info_new_search_file"
                   version="1.4">
        <doc xml:space="preserve"
             filename="libnm-core/nm-vpn-plugin-info.c"
             line="353">This has the same effect as doing a full nm_vpn_plugin_info_list_load()
followed by a search for the first matching VPN plugin info that has the
given @name and/or @service.</doc>
        <source-position filename="libnm-core/nm-vpn-plugin-info.h" line="79"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libnm-core/nm-vpn-plugin-info.c"
               line="364">a newly created instance of plugin info
  or %NULL if no matching value was found.</doc>
          <type name="VpnPluginInfo" c:type="NMVpnPluginInfo*"/>
        </return-value>
        <parameters>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-vpn-plugin-info.c"
                 line="355">the name to search for. Either @name or @service
  must be present.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="service"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-vpn-plugin-info.c"
                 line="357">the service to search for. Either @name  or
  @service must be present.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_with_data"
                   c:identifier="nm_vpn_plugin_info_new_with_data"
                   version="1.2"
                   throws="1">
        <doc xml:space="preserve"
             filename="libnm-core/nm-vpn-plugin-info.c"
             line="1234">This constructor does not read any data from file but
takes instead a @keyfile argument.</doc>
        <source-position filename="libnm-core/nm-vpn-plugin-info.h" line="74"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libnm-core/nm-vpn-plugin-info.c"
               line="1244">new plugin info instance.</doc>
          <type name="VpnPluginInfo" c:type="NMVpnPluginInfo*"/>
        </return-value>
        <parameters>
          <parameter name="filename" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-vpn-plugin-info.c"
                 line="1236">optional filename.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="keyfile" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-vpn-plugin-info.c"
                 line="1237">inject data for the plugin info instance.</doc>
            <type name="GLib.KeyFile" c:type="GKeyFile*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="list_add"
                c:identifier="nm_vpn_plugin_info_list_add"
                version="1.2"
                throws="1">
        <source-position filename="libnm-core/nm-vpn-plugin-info.h"
                         line="109"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-vpn-plugin-info.c"
               line="463">%TRUE if the plugin was added to @list. This will fail
to add duplicate plugins.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="list" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-vpn-plugin-info.c"
                 line="459">list of plugins</doc>
            <type name="GLib.SList" c:type="GSList**">
              <type name="VpnPluginInfo"/>
            </type>
          </parameter>
          <parameter name="plugin_info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-vpn-plugin-info.c"
                 line="460">instance to add</doc>
            <type name="VpnPluginInfo" c:type="NMVpnPluginInfo*"/>
          </parameter>
        </parameters>
      </function>
      <function name="list_find_by_filename"
                c:identifier="nm_vpn_plugin_info_list_find_by_filename"
                version="1.2">
        <source-position filename="libnm-core/nm-vpn-plugin-info.h"
                         line="115"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-vpn-plugin-info.c"
               line="555">the first plugin with a matching @filename (or %NULL).</doc>
          <type name="VpnPluginInfo" c:type="NMVpnPluginInfo*"/>
        </return-value>
        <parameters>
          <parameter name="list" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-vpn-plugin-info.c"
                 line="552">list of plugins</doc>
            <type name="GLib.SList" c:type="GSList*">
              <type name="VpnPluginInfo"/>
            </type>
          </parameter>
          <parameter name="filename" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-vpn-plugin-info.c"
                 line="553">filename to search</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </function>
      <function name="list_find_by_name"
                c:identifier="nm_vpn_plugin_info_list_find_by_name"
                version="1.2">
        <source-position filename="libnm-core/nm-vpn-plugin-info.h"
                         line="113"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-vpn-plugin-info.c"
               line="531">the first plugin with a matching @name (or %NULL).</doc>
          <type name="VpnPluginInfo" c:type="NMVpnPluginInfo*"/>
        </return-value>
        <parameters>
          <parameter name="list" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-vpn-plugin-info.c"
                 line="528">list of plugins</doc>
            <type name="GLib.SList" c:type="GSList*">
              <type name="VpnPluginInfo"/>
            </type>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-vpn-plugin-info.c"
                 line="529">name to search</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </function>
      <function name="list_find_by_service"
                c:identifier="nm_vpn_plugin_info_list_find_by_service"
                version="1.2">
        <source-position filename="libnm-core/nm-vpn-plugin-info.h"
                         line="117"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-vpn-plugin-info.c"
               line="593">the first plugin with a matching @service (or %NULL).</doc>
          <type name="VpnPluginInfo" c:type="NMVpnPluginInfo*"/>
        </return-value>
        <parameters>
          <parameter name="list" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-vpn-plugin-info.c"
                 line="589">list of plugins</doc>
            <type name="GLib.SList" c:type="GSList*">
              <type name="VpnPluginInfo"/>
            </type>
          </parameter>
          <parameter name="service" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-vpn-plugin-info.c"
                 line="590">service to search. This can be the main service-type
  or one of the provided aliases.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </function>
      <function name="list_find_service_type"
                c:identifier="nm_vpn_plugin_info_list_find_service_type"
                version="1.4">
        <doc xml:space="preserve"
             filename="libnm-core/nm-vpn-plugin-info.c"
             line="621">A VPN plugin provides one or several service-types, like org.freedesktop.NetworkManager.libreswan
Certain plugins provide more then one service type, via aliases (org.freedesktop.NetworkManager.openswan).
This function looks up a service-type (or an alias) based on a name.

Preferably, the name can be a full service-type/alias of an installed
plugin. Otherwise, it can be the name of a VPN plugin (in which case, the
primary, non-aliased service-type is returned). Otherwise, it can be
one of several well known short-names (which is a hard-coded list of
types in libnm). On success, this returns a full qualified service-type
(or an alias). It doesn't say, that such an plugin is actually available,
but it could be retrieved via nm_vpn_plugin_info_list_find_by_service().</doc>
        <source-position filename="libnm-core/nm-vpn-plugin-info.h"
                         line="120"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libnm-core/nm-vpn-plugin-info.c"
               line="638">the resolved service-type or %NULL on failure.</doc>
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <parameter name="list" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-vpn-plugin-info.c"
                 line="623">a possibly empty #GSList of #NMVpnPluginInfo instances</doc>
            <type name="GLib.SList" c:type="GSList*">
              <type name="VpnPluginInfo"/>
            </type>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-vpn-plugin-info.c"
                 line="624">a name to lookup the service-type.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </function>
      <function name="list_get_service_types"
                c:identifier="nm_vpn_plugin_info_list_get_service_types"
                version="1.4">
        <source-position filename="libnm-core/nm-vpn-plugin-info.h"
                         line="122"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libnm-core/nm-vpn-plugin-info.c"
               line="708">a %NULL terminated strv list of strings.
  The list itself and the values must be freed with g_strfreev().</doc>
          <array c:type="char**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <parameter name="list" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-vpn-plugin-info.c"
                 line="700">a possibly empty #GSList of #NMVpnPluginInfo</doc>
            <type name="GLib.SList" c:type="GSList*">
              <type name="VpnPluginInfo"/>
            </type>
          </parameter>
          <parameter name="only_existing" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-vpn-plugin-info.c"
                 line="701">only include results that are actually in @list.
  Otherwise, the result is extended with a hard-code list or
  well-known plugins</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="with_abbreviations" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-vpn-plugin-info.c"
                 line="704">if %FALSE, only full service types are returned.
  Otherwise, this also includes abbreviated names that can be used
  with nm_vpn_plugin_info_list_find_service_type().</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </function>
      <function name="list_load"
                c:identifier="nm_vpn_plugin_info_list_load"
                version="1.2">
        <source-position filename="libnm-core/nm-vpn-plugin-info.h"
                         line="107"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libnm-core/nm-vpn-plugin-info.c"
               line="322">list of plugins
loaded from the default directories rejecting duplicates.</doc>
          <type name="GLib.SList" c:type="GSList*">
            <type name="VpnPluginInfo"/>
          </type>
        </return-value>
      </function>
      <function name="list_remove"
                c:identifier="nm_vpn_plugin_info_list_remove"
                version="1.2">
        <doc xml:space="preserve"
             filename="libnm-core/nm-vpn-plugin-info.c"
             line="501">Remove @plugin_info from @list.</doc>
        <source-position filename="libnm-core/nm-vpn-plugin-info.h"
                         line="111"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-vpn-plugin-info.c"
               line="508">%TRUE if @plugin_info was in @list and successfully removed.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="list" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-vpn-plugin-info.c"
                 line="503">list of plugins</doc>
            <type name="GLib.SList" c:type="GSList**">
              <type name="VpnPluginInfo"/>
            </type>
          </parameter>
          <parameter name="plugin_info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-vpn-plugin-info.c"
                 line="504">instance</doc>
            <type name="VpnPluginInfo" c:type="NMVpnPluginInfo*"/>
          </parameter>
        </parameters>
      </function>
      <function name="validate_filename"
                c:identifier="nm_vpn_plugin_info_validate_filename"
                version="1.2">
        <doc xml:space="preserve"
             filename="libnm-core/nm-vpn-plugin-info.c"
             line="70">Regular name files have a certain pattern. That basically means
they have the file extension "name". Check if @filename
is valid according to that pattern.</doc>
        <source-position filename="libnm-core/nm-vpn-plugin-info.h"
                         line="104"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="filename" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-vpn-plugin-info.c"
                 line="72">the filename to check</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </function>
      <method name="get_aliases"
              c:identifier="nm_vpn_plugin_info_get_aliases"
              version="1.4">
        <source-position filename="libnm-core/nm-vpn-plugin-info.h" line="99"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-vpn-plugin-info.c"
               line="938">
  the aliases from the name-file.</doc>
          <array c:type="const char* const*">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-vpn-plugin-info.c"
                 line="936">plugin info instance</doc>
            <type name="VpnPluginInfo" c:type="NMVpnPluginInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_auth_dialog"
              c:identifier="nm_vpn_plugin_info_get_auth_dialog"
              version="1.4">
        <source-position filename="libnm-core/nm-vpn-plugin-info.h" line="93"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-vpn-plugin-info.c"
               line="830">the absolute path to the auth-dialog helper or %NULL.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-vpn-plugin-info.c"
                 line="828">plugin info instance</doc>
            <type name="VpnPluginInfo" c:type="NMVpnPluginInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_editor_plugin"
              c:identifier="nm_vpn_plugin_info_get_editor_plugin"
              version="1.2">
        <source-position filename="libnm-core/nm-vpn-plugin-info.h"
                         line="127"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-vpn-plugin-info.c"
               line="993">the cached #NMVpnEditorPlugin instance.</doc>
          <type name="VpnEditorPlugin" c:type="NMVpnEditorPlugin*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-vpn-plugin-info.c"
                 line="991">plugin info instance</doc>
            <type name="VpnPluginInfo" c:type="NMVpnPluginInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_filename"
              c:identifier="nm_vpn_plugin_info_get_filename"
              version="1.2">
        <source-position filename="libnm-core/nm-vpn-plugin-info.h" line="85"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-vpn-plugin-info.c"
               line="782">the filename. Can be %NULL.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-vpn-plugin-info.c"
                 line="780">plugin info instance</doc>
            <type name="VpnPluginInfo" c:type="NMVpnPluginInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_name"
              c:identifier="nm_vpn_plugin_info_get_name"
              version="1.2">
        <source-position filename="libnm-core/nm-vpn-plugin-info.h" line="83"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-vpn-plugin-info.c"
               line="798">the name. Cannot be %NULL.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-vpn-plugin-info.c"
                 line="796">plugin info instance</doc>
            <type name="VpnPluginInfo" c:type="NMVpnPluginInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_plugin"
              c:identifier="nm_vpn_plugin_info_get_plugin"
              version="1.2">
        <source-position filename="libnm-core/nm-vpn-plugin-info.h" line="89"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-vpn-plugin-info.c"
               line="885">the plugin. Can be %NULL.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-vpn-plugin-info.c"
                 line="883">plugin info instance</doc>
            <type name="VpnPluginInfo" c:type="NMVpnPluginInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_program"
              c:identifier="nm_vpn_plugin_info_get_program"
              version="1.2">
        <source-position filename="libnm-core/nm-vpn-plugin-info.h" line="91"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-vpn-plugin-info.c"
               line="902">the program. Can be %NULL.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-vpn-plugin-info.c"
                 line="900">plugin info instance</doc>
            <type name="VpnPluginInfo" c:type="NMVpnPluginInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_service"
              c:identifier="nm_vpn_plugin_info_get_service"
              version="1.4">
        <source-position filename="libnm-core/nm-vpn-plugin-info.h" line="87"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-vpn-plugin-info.c"
               line="814">the service. Cannot be %NULL.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-vpn-plugin-info.c"
                 line="812">plugin info instance</doc>
            <type name="VpnPluginInfo" c:type="NMVpnPluginInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="load_editor_plugin"
              c:identifier="nm_vpn_plugin_info_load_editor_plugin"
              version="1.2"
              throws="1">
        <source-position filename="libnm-core/nm-vpn-plugin-info.h"
                         line="132"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-vpn-plugin-info.c"
               line="1042">loads the plugin and returns the newly created
  instance. The plugin is owned by @self and can be later retrieved again
  via nm_vpn_plugin_info_get_editor_plugin(). You can load the
  plugin only once, unless you reset the state via
  nm_vpn_plugin_info_set_editor_plugin().</doc>
          <type name="VpnEditorPlugin" c:type="NMVpnEditorPlugin*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-vpn-plugin-info.c"
                 line="1039">plugin info instance</doc>
            <type name="VpnPluginInfo" c:type="NMVpnPluginInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="lookup_property"
              c:identifier="nm_vpn_plugin_info_lookup_property"
              version="1.2">
        <source-position filename="libnm-core/nm-vpn-plugin-info.h"
                         line="101"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-vpn-plugin-info.c"
               line="966">#NMVpnPluginInfo is internally a #GKeyFile. Returns the matching
property.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-vpn-plugin-info.c"
                 line="962">plugin info instance</doc>
            <type name="VpnPluginInfo" c:type="NMVpnPluginInfo*"/>
          </instance-parameter>
          <parameter name="group" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-vpn-plugin-info.c"
                 line="963">group name</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-vpn-plugin-info.c"
                 line="964">name of the property</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_editor_plugin"
              c:identifier="nm_vpn_plugin_info_set_editor_plugin"
              version="1.2">
        <doc xml:space="preserve"
             filename="libnm-core/nm-vpn-plugin-info.c"
             line="1005">Set the internal plugin instance. If %NULL, only clear the previous instance.</doc>
        <source-position filename="libnm-core/nm-vpn-plugin-info.h"
                         line="129"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-vpn-plugin-info.c"
                 line="1007">plugin info instance</doc>
            <type name="VpnPluginInfo" c:type="NMVpnPluginInfo*"/>
          </instance-parameter>
          <parameter name="plugin"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-vpn-plugin-info.c"
                 line="1008">plugin instance</doc>
            <type name="VpnEditorPlugin" c:type="NMVpnEditorPlugin*"/>
          </parameter>
        </parameters>
      </method>
      <method name="supports_hints"
              c:identifier="nm_vpn_plugin_info_supports_hints"
              version="1.4">
        <source-position filename="libnm-core/nm-vpn-plugin-info.h" line="95"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-vpn-plugin-info.c"
               line="866">%TRUE if the supports hints for secret requests, otherwise %FALSE</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-vpn-plugin-info.c"
                 line="864">plugin info instance</doc>
            <type name="VpnPluginInfo" c:type="NMVpnPluginInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="supports_multiple"
              c:identifier="nm_vpn_plugin_info_supports_multiple"
              version="1.2">
        <source-position filename="libnm-core/nm-vpn-plugin-info.h" line="97"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-vpn-plugin-info.c"
               line="919">%TRUE if the service supports multiple instances with different bus names, otherwise %FALSE</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-vpn-plugin-info.c"
                 line="917">plugin info instance</doc>
            <type name="VpnPluginInfo" c:type="NMVpnPluginInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="filename"
                version="1.2"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-vpn-plugin-info.c"
             line="1318">The filename from which the info was loaded.
Can be %NULL if the instance was not loaded from
a file (i.e. the keyfile instance was passed to the
constructor).</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="keyfile"
                version="1.2"
                readable="0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-vpn-plugin-info.c"
             line="1336">Initialize the instance with a different keyfile instance.
When passing a keyfile instance, the constructor will not
try to read from filename.</doc>
        <type name="GLib.KeyFile"/>
      </property>
      <property name="name" version="1.2" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-vpn-plugin-info.c"
             line="1304">The name of the VPN plugin.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <record name="VpnPluginInfoClass"
            c:type="NMVpnPluginInfoClass"
            glib:is-gtype-struct-for="VpnPluginInfo">
      <source-position filename="libnm-core/nm-vpn-plugin-info.h" line="64"/>
      <field name="parent">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="padding" readable="0" private="1">
        <array zero-terminated="0" fixed-size="8">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <class name="VpnPluginOld"
           c:symbol-prefix="vpn_plugin_old"
           c:type="NMVpnPluginOld"
           parent="GObject.Object"
           abstract="1"
           glib:type-name="NMVpnPluginOld"
           glib:get-type="nm_vpn_plugin_old_get_type"
           glib:type-struct="VpnPluginOldClass">
      <source-position filename="libnm/nm-vpn-plugin-old.h" line="111"/>
      <implements name="Gio.Initable"/>
      <function name="get_secret_flags"
                c:identifier="nm_vpn_plugin_old_get_secret_flags"
                deprecated="1"
                deprecated-version="1.2">
        <doc xml:space="preserve"
             filename="libnm/nm-vpn-plugin-old.c"
             line="708">Given a VPN secret key name, attempts to find the corresponding flags data
item in @data.  If found, converts the flags data item to
#NMSettingSecretFlags and returns it.</doc>
        <doc-deprecated xml:space="preserve">replaced by NMVpnServicePlugin</doc-deprecated>
        <source-position filename="libnm/nm-vpn-plugin-old.h" line="161"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-vpn-plugin-old.c"
               line="718">%TRUE if the flag data item was found and successfully converted
to flags, %FALSE if not</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-vpn-plugin-old.c"
                 line="710">hash table containing VPN key/value pair data items</doc>
            <type name="GLib.HashTable" c:type="GHashTable*">
              <type name="gpointer" c:type="gpointer"/>
              <type name="gpointer" c:type="gpointer"/>
            </type>
          </parameter>
          <parameter name="secret_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-vpn-plugin-old.c"
                 line="711">VPN secret key name for which to retrieve flags for</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="out_flags"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libnm/nm-vpn-plugin-old.c"
                 line="712">on success, the flags associated with @secret_name</doc>
            <type name="SettingSecretFlags" c:type="NMSettingSecretFlags*"/>
          </parameter>
        </parameters>
      </function>
      <function name="read_vpn_details"
                c:identifier="nm_vpn_plugin_old_read_vpn_details"
                deprecated="1"
                deprecated-version="1.2">
        <doc xml:space="preserve"
             filename="libnm/nm-vpn-plugin-old.c"
             line="685">Parses key/value pairs from a file descriptor (normally stdin) passed by
an applet when the applet calls the authentication dialog of the VPN plugin.</doc>
        <doc-deprecated xml:space="preserve">replaced by NMVpnServicePlugin</doc-deprecated>
        <source-position filename="libnm/nm-vpn-plugin-old.h" line="156"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-vpn-plugin-old.c"
               line="696">%TRUE if reading values was successful, %FALSE if not</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="fd" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-vpn-plugin-old.c"
                 line="687">file descriptor to read from, usually stdin (0)</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="out_data"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libnm/nm-vpn-plugin-old.c"
                 line="688">on successful return, a hash table
(mapping char*:char*) containing the key/value pairs of VPN data items</doc>
            <type name="GLib.HashTable" c:type="GHashTable**">
              <type name="gpointer" c:type="gpointer"/>
              <type name="gpointer" c:type="gpointer"/>
            </type>
          </parameter>
          <parameter name="out_secrets"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libnm/nm-vpn-plugin-old.c"
                 line="690">on successful return, a hash table
(mapping char*:char*) containing the key/value pairsof VPN secrets</doc>
            <type name="GLib.HashTable" c:type="GHashTable**">
              <type name="gpointer" c:type="gpointer"/>
              <type name="gpointer" c:type="gpointer"/>
            </type>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="config">
        <source-position filename="libnm/nm-vpn-plugin-old.h" line="74"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="plugin" transfer-ownership="none">
            <type name="VpnPluginOld" c:type="NMVpnPluginOld*"/>
          </instance-parameter>
          <parameter name="config" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="connect" throws="1">
        <source-position filename="libnm/nm-vpn-plugin-old.h" line="83"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="plugin" transfer-ownership="none">
            <type name="VpnPluginOld" c:type="NMVpnPluginOld*"/>
          </instance-parameter>
          <parameter name="connection" transfer-ownership="none">
            <type name="Connection" c:type="NMConnection*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="connect_interactive" throws="1">
        <source-position filename="libnm/nm-vpn-plugin-old.h" line="103"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="plugin" transfer-ownership="none">
            <type name="VpnPluginOld" c:type="NMVpnPluginOld*"/>
          </instance-parameter>
          <parameter name="connection" transfer-ownership="none">
            <type name="Connection" c:type="NMConnection*"/>
          </parameter>
          <parameter name="details" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="disconnect"
                      invoker="disconnect"
                      deprecated="1"
                      deprecated-version="1.2"
                      throws="1">
        <doc-deprecated xml:space="preserve">replaced by NMVpnServicePlugin</doc-deprecated>
        <source-position filename="libnm/nm-vpn-plugin-old.h" line="94"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="plugin" transfer-ownership="none">
            <type name="VpnPluginOld" c:type="NMVpnPluginOld*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="failure"
                      invoker="failure"
                      deprecated="1"
                      deprecated-version="1.2">
        <doc-deprecated xml:space="preserve">replaced by NMVpnServicePlugin</doc-deprecated>
        <source-position filename="libnm/nm-vpn-plugin-old.h" line="67"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="plugin" transfer-ownership="none">
            <type name="VpnPluginOld" c:type="NMVpnPluginOld*"/>
          </instance-parameter>
          <parameter name="reason" transfer-ownership="none">
            <type name="VpnPluginFailure" c:type="NMVpnPluginFailure"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="ip4_config">
        <source-position filename="libnm/nm-vpn-plugin-old.h" line="59"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="plugin" transfer-ownership="none">
            <type name="VpnPluginOld" c:type="NMVpnPluginOld*"/>
          </instance-parameter>
          <parameter name="ip4_config" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="ip6_config">
        <source-position filename="libnm/nm-vpn-plugin-old.h" line="78"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="plugin" transfer-ownership="none">
            <type name="VpnPluginOld" c:type="NMVpnPluginOld*"/>
          </instance-parameter>
          <parameter name="config" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="login_banner">
        <source-position filename="libnm/nm-vpn-plugin-old.h" line="63"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="plugin" transfer-ownership="none">
            <type name="VpnPluginOld" c:type="NMVpnPluginOld*"/>
          </instance-parameter>
          <parameter name="banner" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="need_secrets" throws="1">
        <source-position filename="libnm/nm-vpn-plugin-old.h" line="88"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="plugin" transfer-ownership="none">
            <type name="VpnPluginOld" c:type="NMVpnPluginOld*"/>
          </instance-parameter>
          <parameter name="connection" transfer-ownership="none">
            <type name="Connection" c:type="NMConnection*"/>
          </parameter>
          <parameter name="setting_name" transfer-ownership="none">
            <type name="utf8" c:type="const char**"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="new_secrets" throws="1">
        <source-position filename="libnm/nm-vpn-plugin-old.h" line="98"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="plugin" transfer-ownership="none">
            <type name="VpnPluginOld" c:type="NMVpnPluginOld*"/>
          </instance-parameter>
          <parameter name="connection" transfer-ownership="none">
            <type name="Connection" c:type="NMConnection*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="quit">
        <source-position filename="libnm/nm-vpn-plugin-old.h" line="71"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="plugin" transfer-ownership="none">
            <type name="VpnPluginOld" c:type="NMVpnPluginOld*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="state_changed">
        <source-position filename="libnm/nm-vpn-plugin-old.h" line="55"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="plugin" transfer-ownership="none">
            <type name="VpnPluginOld" c:type="NMVpnPluginOld*"/>
          </instance-parameter>
          <parameter name="state" transfer-ownership="none">
            <type name="VpnServiceState" c:type="NMVpnServiceState"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="disconnect"
              c:identifier="nm_vpn_plugin_old_disconnect"
              deprecated="1"
              deprecated-version="1.2"
              throws="1">
        <doc-deprecated xml:space="preserve">replaced by NMVpnServicePlugin</doc-deprecated>
        <source-position filename="libnm/nm-vpn-plugin-old.h" line="150"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="plugin" transfer-ownership="none">
            <type name="VpnPluginOld" c:type="NMVpnPluginOld*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="failure"
              c:identifier="nm_vpn_plugin_old_failure"
              deprecated="1"
              deprecated-version="1.2">
        <doc-deprecated xml:space="preserve">replaced by NMVpnServicePlugin</doc-deprecated>
        <source-position filename="libnm/nm-vpn-plugin-old.h" line="134"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="plugin" transfer-ownership="none">
            <type name="VpnPluginOld" c:type="NMVpnPluginOld*"/>
          </instance-parameter>
          <parameter name="reason" transfer-ownership="none">
            <type name="VpnPluginFailure" c:type="NMVpnPluginFailure"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_connection"
              c:identifier="nm_vpn_plugin_old_get_connection"
              deprecated="1"
              deprecated-version="1.2">
        <doc-deprecated xml:space="preserve">replaced by NMVpnServicePlugin</doc-deprecated>
        <source-position filename="libnm/nm-vpn-plugin-old.h" line="117"/>
        <return-value transfer-ownership="full">
          <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
        </return-value>
        <parameters>
          <instance-parameter name="plugin" transfer-ownership="none">
            <type name="VpnPluginOld" c:type="NMVpnPluginOld*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_state"
              c:identifier="nm_vpn_plugin_old_get_state"
              deprecated="1"
              deprecated-version="1.2">
        <doc-deprecated xml:space="preserve">replaced by NMVpnServicePlugin</doc-deprecated>
        <source-position filename="libnm/nm-vpn-plugin-old.h" line="119"/>
        <return-value transfer-ownership="none">
          <type name="VpnServiceState" c:type="NMVpnServiceState"/>
        </return-value>
        <parameters>
          <instance-parameter name="plugin" transfer-ownership="none">
            <type name="VpnPluginOld" c:type="NMVpnPluginOld*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="secrets_required"
              c:identifier="nm_vpn_plugin_old_secrets_required"
              deprecated="1"
              deprecated-version="1.2">
        <doc xml:space="preserve"
             filename="libnm/nm-vpn-plugin-old.c"
             line="646">Called by VPN plugin implementations to signal to NetworkManager that secrets
are required during the connection process.  This signal may be used to
request new secrets when the secrets originally provided by NetworkManager
are insufficient, or the VPN process indicates that it needs additional
information to complete the request.</doc>
        <doc-deprecated xml:space="preserve">replaced by NMVpnServicePlugin</doc-deprecated>
        <source-position filename="libnm/nm-vpn-plugin-old.h" line="125"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="plugin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-vpn-plugin-old.c"
                 line="648">the #NMVpnPluginOld</doc>
            <type name="VpnPluginOld" c:type="NMVpnPluginOld*"/>
          </instance-parameter>
          <parameter name="message" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-vpn-plugin-old.c"
                 line="649">an information message about why secrets are required, if any</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="hints" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-vpn-plugin-old.c"
                 line="650">VPN specific secret names for required new secrets</doc>
            <type name="utf8" c:type="const char**"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_config"
              c:identifier="nm_vpn_plugin_old_set_config"
              deprecated="1"
              deprecated-version="1.2">
        <doc-deprecated xml:space="preserve">replaced by NMVpnServicePlugin</doc-deprecated>
        <source-position filename="libnm/nm-vpn-plugin-old.h" line="138"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="plugin" transfer-ownership="none">
            <type name="VpnPluginOld" c:type="NMVpnPluginOld*"/>
          </instance-parameter>
          <parameter name="config" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_ip4_config"
              c:identifier="nm_vpn_plugin_old_set_ip4_config"
              deprecated="1"
              deprecated-version="1.2">
        <doc-deprecated xml:space="preserve">replaced by NMVpnServicePlugin</doc-deprecated>
        <source-position filename="libnm/nm-vpn-plugin-old.h" line="142"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="plugin" transfer-ownership="none">
            <type name="VpnPluginOld" c:type="NMVpnPluginOld*"/>
          </instance-parameter>
          <parameter name="ip4_config" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_ip6_config"
              c:identifier="nm_vpn_plugin_old_set_ip6_config"
              deprecated="1"
              deprecated-version="1.2">
        <doc-deprecated xml:space="preserve">replaced by NMVpnServicePlugin</doc-deprecated>
        <source-position filename="libnm/nm-vpn-plugin-old.h" line="146"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="plugin" transfer-ownership="none">
            <type name="VpnPluginOld" c:type="NMVpnPluginOld*"/>
          </instance-parameter>
          <parameter name="ip6_config" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_login_banner"
              c:identifier="nm_vpn_plugin_old_set_login_banner"
              deprecated="1"
              deprecated-version="1.2">
        <doc-deprecated xml:space="preserve">replaced by NMVpnServicePlugin</doc-deprecated>
        <source-position filename="libnm/nm-vpn-plugin-old.h" line="130"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="plugin" transfer-ownership="none">
            <type name="VpnPluginOld" c:type="NMVpnPluginOld*"/>
          </instance-parameter>
          <parameter name="banner" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_state"
              c:identifier="nm_vpn_plugin_old_set_state"
              deprecated="1"
              deprecated-version="1.2">
        <doc-deprecated xml:space="preserve">replaced by NMVpnServicePlugin</doc-deprecated>
        <source-position filename="libnm/nm-vpn-plugin-old.h" line="121"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="plugin" transfer-ownership="none">
            <type name="VpnPluginOld" c:type="NMVpnPluginOld*"/>
          </instance-parameter>
          <parameter name="state" transfer-ownership="none">
            <type name="VpnServiceState" c:type="NMVpnServiceState"/>
          </parameter>
        </parameters>
      </method>
      <property name="service-name"
                deprecated="1"
                deprecated-version="1.2"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-vpn-plugin-old.c"
             line="1031">The D-Bus service name of this plugin.</doc>
        <doc-deprecated xml:space="preserve">replaced by NMVpnServicePlugin</doc-deprecated>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="state"
                deprecated="1"
                deprecated-version="1.2"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-vpn-plugin-old.c"
             line="1046">The state of the plugin.</doc>
        <doc-deprecated xml:space="preserve">replaced by NMVpnServicePlugin</doc-deprecated>
        <type name="VpnServiceState"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <glib:signal name="config" when="first">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="failure" when="first">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="ip4-config" when="first">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="ip6-config" when="first">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="login-banner" when="first">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="quit" when="first">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="secrets-required" when="first">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <array>
              <type name="utf8"/>
            </array>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="state-changed" when="first">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="VpnPluginOldClass"
            c:type="NMVpnPluginOldClass"
            glib:is-gtype-struct-for="VpnPluginOld">
      <source-position filename="libnm/nm-vpn-plugin-old.h" line="111"/>
      <field name="parent">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="state_changed">
        <callback name="state_changed">
          <source-position filename="libnm/nm-vpn-plugin-old.h" line="55"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="plugin" transfer-ownership="none">
              <type name="VpnPluginOld" c:type="NMVpnPluginOld*"/>
            </parameter>
            <parameter name="state" transfer-ownership="none">
              <type name="VpnServiceState" c:type="NMVpnServiceState"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="ip4_config">
        <callback name="ip4_config">
          <source-position filename="libnm/nm-vpn-plugin-old.h" line="59"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="plugin" transfer-ownership="none">
              <type name="VpnPluginOld" c:type="NMVpnPluginOld*"/>
            </parameter>
            <parameter name="ip4_config" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="login_banner">
        <callback name="login_banner">
          <source-position filename="libnm/nm-vpn-plugin-old.h" line="63"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="plugin" transfer-ownership="none">
              <type name="VpnPluginOld" c:type="NMVpnPluginOld*"/>
            </parameter>
            <parameter name="banner" transfer-ownership="none">
              <type name="utf8" c:type="const char*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="failure">
        <callback name="failure">
          <source-position filename="libnm/nm-vpn-plugin-old.h" line="67"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="plugin" transfer-ownership="none">
              <type name="VpnPluginOld" c:type="NMVpnPluginOld*"/>
            </parameter>
            <parameter name="reason" transfer-ownership="none">
              <type name="VpnPluginFailure" c:type="NMVpnPluginFailure"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="quit">
        <callback name="quit">
          <source-position filename="libnm/nm-vpn-plugin-old.h" line="71"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="plugin" transfer-ownership="none">
              <type name="VpnPluginOld" c:type="NMVpnPluginOld*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="config">
        <callback name="config">
          <source-position filename="libnm/nm-vpn-plugin-old.h" line="74"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="plugin" transfer-ownership="none">
              <type name="VpnPluginOld" c:type="NMVpnPluginOld*"/>
            </parameter>
            <parameter name="config" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="ip6_config">
        <callback name="ip6_config">
          <source-position filename="libnm/nm-vpn-plugin-old.h" line="78"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="plugin" transfer-ownership="none">
              <type name="VpnPluginOld" c:type="NMVpnPluginOld*"/>
            </parameter>
            <parameter name="config" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="connect">
        <callback name="connect" throws="1">
          <source-position filename="libnm/nm-vpn-plugin-old.h" line="83"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="plugin" transfer-ownership="none">
              <type name="VpnPluginOld" c:type="NMVpnPluginOld*"/>
            </parameter>
            <parameter name="connection" transfer-ownership="none">
              <type name="Connection" c:type="NMConnection*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="need_secrets">
        <callback name="need_secrets" throws="1">
          <source-position filename="libnm/nm-vpn-plugin-old.h" line="88"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="plugin" transfer-ownership="none">
              <type name="VpnPluginOld" c:type="NMVpnPluginOld*"/>
            </parameter>
            <parameter name="connection" transfer-ownership="none">
              <type name="Connection" c:type="NMConnection*"/>
            </parameter>
            <parameter name="setting_name" transfer-ownership="none">
              <type name="utf8" c:type="const char**"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="disconnect">
        <callback name="disconnect" throws="1">
          <source-position filename="libnm/nm-vpn-plugin-old.h" line="94"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="plugin" transfer-ownership="none">
              <type name="VpnPluginOld" c:type="NMVpnPluginOld*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="new_secrets">
        <callback name="new_secrets" throws="1">
          <source-position filename="libnm/nm-vpn-plugin-old.h" line="98"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="plugin" transfer-ownership="none">
              <type name="VpnPluginOld" c:type="NMVpnPluginOld*"/>
            </parameter>
            <parameter name="connection" transfer-ownership="none">
              <type name="Connection" c:type="NMConnection*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="connect_interactive">
        <callback name="connect_interactive" throws="1">
          <source-position filename="libnm/nm-vpn-plugin-old.h" line="103"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="plugin" transfer-ownership="none">
              <type name="VpnPluginOld" c:type="NMVpnPluginOld*"/>
            </parameter>
            <parameter name="connection" transfer-ownership="none">
              <type name="Connection" c:type="NMConnection*"/>
            </parameter>
            <parameter name="details" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="padding" readable="0" private="1">
        <array zero-terminated="0" fixed-size="8">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <class name="VpnServicePlugin"
           c:symbol-prefix="vpn_service_plugin"
           c:type="NMVpnServicePlugin"
           parent="GObject.Object"
           abstract="1"
           glib:type-name="NMVpnServicePlugin"
           glib:get-type="nm_vpn_service_plugin_get_type"
           glib:type-struct="VpnServicePluginClass">
      <source-position filename="libnm/nm-vpn-service-plugin.h" line="116"/>
      <implements name="Gio.Initable"/>
      <function name="get_secret_flags"
                c:identifier="nm_vpn_service_plugin_get_secret_flags"
                version="1.2">
        <doc xml:space="preserve"
             filename="libnm/nm-vpn-service-plugin.c"
             line="891">Given a VPN secret key name, attempts to find the corresponding flags data
item in @data.  If found, converts the flags data item to
#NMSettingSecretFlags and returns it.</doc>
        <source-position filename="libnm/nm-vpn-service-plugin.h" line="164"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-vpn-service-plugin.c"
               line="901">%TRUE if the flag data item was found and successfully converted
to flags, %FALSE if not</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-vpn-service-plugin.c"
                 line="893">hash table containing VPN key/value pair data items</doc>
            <type name="GLib.HashTable" c:type="GHashTable*">
              <type name="gpointer" c:type="gpointer"/>
              <type name="gpointer" c:type="gpointer"/>
            </type>
          </parameter>
          <parameter name="secret_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-vpn-service-plugin.c"
                 line="894">VPN secret key name for which to retrieve flags for</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="out_flags"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libnm/nm-vpn-service-plugin.c"
                 line="895">on success, the flags associated with @secret_name</doc>
            <type name="SettingSecretFlags" c:type="NMSettingSecretFlags*"/>
          </parameter>
        </parameters>
      </function>
      <function name="read_vpn_details"
                c:identifier="nm_vpn_service_plugin_read_vpn_details"
                version="1.2">
        <doc xml:space="preserve"
             filename="libnm/nm-vpn-service-plugin.c"
             line="766">Parses key/value pairs from a file descriptor (normally stdin) passed by
an applet when the applet calls the authentication dialog of the VPN plugin.</doc>
        <source-position filename="libnm/nm-vpn-service-plugin.h" line="159"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-vpn-service-plugin.c"
               line="777">%TRUE if reading values was successful, %FALSE if not</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="fd" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-vpn-service-plugin.c"
                 line="768">file descriptor to read from, usually stdin (0)</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="out_data"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libnm/nm-vpn-service-plugin.c"
                 line="769">on successful return, a hash table
(mapping char*:char*) containing the key/value pairs of VPN data items</doc>
            <type name="GLib.HashTable" c:type="GHashTable**">
              <type name="gpointer" c:type="gpointer"/>
              <type name="gpointer" c:type="gpointer"/>
            </type>
          </parameter>
          <parameter name="out_secrets"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libnm/nm-vpn-service-plugin.c"
                 line="771">on successful return, a hash table
(mapping char*:char*) containing the key/value pairsof VPN secrets</doc>
            <type name="GLib.HashTable" c:type="GHashTable**">
              <type name="gpointer" c:type="gpointer"/>
              <type name="gpointer" c:type="gpointer"/>
            </type>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="config">
        <source-position filename="libnm/nm-vpn-service-plugin.h" line="79"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="plugin" transfer-ownership="none">
            <type name="VpnServicePlugin" c:type="NMVpnServicePlugin*"/>
          </instance-parameter>
          <parameter name="config" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="connect" throws="1">
        <source-position filename="libnm/nm-vpn-service-plugin.h" line="88"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="plugin" transfer-ownership="none">
            <type name="VpnServicePlugin" c:type="NMVpnServicePlugin*"/>
          </instance-parameter>
          <parameter name="connection" transfer-ownership="none">
            <type name="Connection" c:type="NMConnection*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="connect_interactive" throws="1">
        <source-position filename="libnm/nm-vpn-service-plugin.h" line="108"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="plugin" transfer-ownership="none">
            <type name="VpnServicePlugin" c:type="NMVpnServicePlugin*"/>
          </instance-parameter>
          <parameter name="connection" transfer-ownership="none">
            <type name="Connection" c:type="NMConnection*"/>
          </parameter>
          <parameter name="details" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="disconnect" invoker="disconnect" throws="1">
        <source-position filename="libnm/nm-vpn-service-plugin.h" line="99"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="plugin" transfer-ownership="none">
            <type name="VpnServicePlugin" c:type="NMVpnServicePlugin*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="failure" invoker="failure">
        <source-position filename="libnm/nm-vpn-service-plugin.h" line="72"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="plugin" transfer-ownership="none">
            <type name="VpnServicePlugin" c:type="NMVpnServicePlugin*"/>
          </instance-parameter>
          <parameter name="reason" transfer-ownership="none">
            <type name="VpnPluginFailure" c:type="NMVpnPluginFailure"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="ip4_config">
        <source-position filename="libnm/nm-vpn-service-plugin.h" line="64"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="plugin" transfer-ownership="none">
            <type name="VpnServicePlugin" c:type="NMVpnServicePlugin*"/>
          </instance-parameter>
          <parameter name="ip4_config" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="ip6_config">
        <source-position filename="libnm/nm-vpn-service-plugin.h" line="83"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="plugin" transfer-ownership="none">
            <type name="VpnServicePlugin" c:type="NMVpnServicePlugin*"/>
          </instance-parameter>
          <parameter name="config" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="login_banner">
        <source-position filename="libnm/nm-vpn-service-plugin.h" line="68"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="plugin" transfer-ownership="none">
            <type name="VpnServicePlugin" c:type="NMVpnServicePlugin*"/>
          </instance-parameter>
          <parameter name="banner" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="need_secrets" throws="1">
        <source-position filename="libnm/nm-vpn-service-plugin.h" line="93"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="plugin" transfer-ownership="none">
            <type name="VpnServicePlugin" c:type="NMVpnServicePlugin*"/>
          </instance-parameter>
          <parameter name="connection" transfer-ownership="none">
            <type name="Connection" c:type="NMConnection*"/>
          </parameter>
          <parameter name="setting_name" transfer-ownership="none">
            <type name="utf8" c:type="const char**"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="new_secrets" throws="1">
        <source-position filename="libnm/nm-vpn-service-plugin.h" line="103"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="plugin" transfer-ownership="none">
            <type name="VpnServicePlugin" c:type="NMVpnServicePlugin*"/>
          </instance-parameter>
          <parameter name="connection" transfer-ownership="none">
            <type name="Connection" c:type="NMConnection*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="quit">
        <source-position filename="libnm/nm-vpn-service-plugin.h" line="76"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="plugin" transfer-ownership="none">
            <type name="VpnServicePlugin" c:type="NMVpnServicePlugin*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="state_changed">
        <source-position filename="libnm/nm-vpn-service-plugin.h" line="60"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="plugin" transfer-ownership="none">
            <type name="VpnServicePlugin" c:type="NMVpnServicePlugin*"/>
          </instance-parameter>
          <parameter name="state" transfer-ownership="none">
            <type name="VpnServiceState" c:type="NMVpnServiceState"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="disconnect"
              c:identifier="nm_vpn_service_plugin_disconnect"
              throws="1">
        <source-position filename="libnm/nm-vpn-service-plugin.h" line="150"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="plugin" transfer-ownership="none">
            <type name="VpnServicePlugin" c:type="NMVpnServicePlugin*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="failure" c:identifier="nm_vpn_service_plugin_failure">
        <source-position filename="libnm/nm-vpn-service-plugin.h" line="134"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="plugin" transfer-ownership="none">
            <type name="VpnServicePlugin" c:type="NMVpnServicePlugin*"/>
          </instance-parameter>
          <parameter name="reason" transfer-ownership="none">
            <type name="VpnPluginFailure" c:type="NMVpnPluginFailure"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_connection"
              c:identifier="nm_vpn_service_plugin_get_connection"
              version="1.2">
        <source-position filename="libnm/nm-vpn-service-plugin.h" line="122"/>
        <return-value transfer-ownership="full">
          <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
        </return-value>
        <parameters>
          <instance-parameter name="plugin" transfer-ownership="none">
            <type name="VpnServicePlugin" c:type="NMVpnServicePlugin*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="secrets_required"
              c:identifier="nm_vpn_service_plugin_secrets_required"
              version="1.2">
        <doc xml:space="preserve"
             filename="libnm/nm-vpn-service-plugin.c"
             line="720">Called by VPN plugin implementations to signal to NetworkManager that secrets
are required during the connection process.  This signal may be used to
request new secrets when the secrets originally provided by NetworkManager
are insufficient, or the VPN process indicates that it needs additional
information to complete the request.</doc>
        <source-position filename="libnm/nm-vpn-service-plugin.h" line="125"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="plugin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-vpn-service-plugin.c"
                 line="722">the #NMVpnServicePlugin</doc>
            <type name="VpnServicePlugin" c:type="NMVpnServicePlugin*"/>
          </instance-parameter>
          <parameter name="message" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-vpn-service-plugin.c"
                 line="723">an information message about why secrets are required, if any</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="hints" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-vpn-service-plugin.c"
                 line="724">VPN specific secret names for required new secrets</doc>
            <type name="utf8" c:type="const char**"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_config"
              c:identifier="nm_vpn_service_plugin_set_config">
        <source-position filename="libnm/nm-vpn-service-plugin.h" line="138"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="plugin" transfer-ownership="none">
            <type name="VpnServicePlugin" c:type="NMVpnServicePlugin*"/>
          </instance-parameter>
          <parameter name="config" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_ip4_config"
              c:identifier="nm_vpn_service_plugin_set_ip4_config">
        <source-position filename="libnm/nm-vpn-service-plugin.h" line="142"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="plugin" transfer-ownership="none">
            <type name="VpnServicePlugin" c:type="NMVpnServicePlugin*"/>
          </instance-parameter>
          <parameter name="ip4_config" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_ip6_config"
              c:identifier="nm_vpn_service_plugin_set_ip6_config">
        <source-position filename="libnm/nm-vpn-service-plugin.h" line="146"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="plugin" transfer-ownership="none">
            <type name="VpnServicePlugin" c:type="NMVpnServicePlugin*"/>
          </instance-parameter>
          <parameter name="ip6_config" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_login_banner"
              c:identifier="nm_vpn_service_plugin_set_login_banner">
        <source-position filename="libnm/nm-vpn-service-plugin.h" line="130"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="plugin" transfer-ownership="none">
            <type name="VpnServicePlugin" c:type="NMVpnServicePlugin*"/>
          </instance-parameter>
          <parameter name="banner" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="shutdown"
              c:identifier="nm_vpn_service_plugin_shutdown"
              version="1.12">
        <doc xml:space="preserve"
             filename="libnm/nm-vpn-service-plugin.c"
             line="246">Shutdown the @plugin and disconnect from D-Bus. After this,
the plugin instance is dead and should no longer be used.
It ensures to get no more requests from D-Bus. In principle,
you don't need to shutdown the plugin, disposing the instance
has the same effect. However, this gives a way to deactivate
the plugin before giving up the last reference.</doc>
        <source-position filename="libnm/nm-vpn-service-plugin.h" line="154"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="plugin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-vpn-service-plugin.c"
                 line="248">the #NMVpnServicePlugin instance</doc>
            <type name="VpnServicePlugin" c:type="NMVpnServicePlugin*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="service-name"
                version="1.2"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-vpn-service-plugin.c"
             line="1225">The D-Bus service name of this plugin.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="state"
                version="1.2"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-vpn-service-plugin.c"
             line="1254">The state of the plugin.</doc>
        <type name="VpnServiceState"/>
      </property>
      <property name="watch-peer"
                version="1.2"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-vpn-service-plugin.c"
             line="1240">Whether to watch for D-Bus peer's changes.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <glib:signal name="config" when="first">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="failure" when="first">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="ip4-config" when="first">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="ip6-config" when="first">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="login-banner" when="first">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="quit" when="first">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="secrets-required" when="first">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <array>
              <type name="utf8"/>
            </array>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="state-changed" when="first">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="VpnServicePluginClass"
            c:type="NMVpnServicePluginClass"
            glib:is-gtype-struct-for="VpnServicePlugin">
      <source-position filename="libnm/nm-vpn-service-plugin.h" line="116"/>
      <field name="parent">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="state_changed">
        <callback name="state_changed">
          <source-position filename="libnm/nm-vpn-service-plugin.h" line="60"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="plugin" transfer-ownership="none">
              <type name="VpnServicePlugin" c:type="NMVpnServicePlugin*"/>
            </parameter>
            <parameter name="state" transfer-ownership="none">
              <type name="VpnServiceState" c:type="NMVpnServiceState"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="ip4_config">
        <callback name="ip4_config">
          <source-position filename="libnm/nm-vpn-service-plugin.h" line="64"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="plugin" transfer-ownership="none">
              <type name="VpnServicePlugin" c:type="NMVpnServicePlugin*"/>
            </parameter>
            <parameter name="ip4_config" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="login_banner">
        <callback name="login_banner">
          <source-position filename="libnm/nm-vpn-service-plugin.h" line="68"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="plugin" transfer-ownership="none">
              <type name="VpnServicePlugin" c:type="NMVpnServicePlugin*"/>
            </parameter>
            <parameter name="banner" transfer-ownership="none">
              <type name="utf8" c:type="const char*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="failure">
        <callback name="failure">
          <source-position filename="libnm/nm-vpn-service-plugin.h" line="72"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="plugin" transfer-ownership="none">
              <type name="VpnServicePlugin" c:type="NMVpnServicePlugin*"/>
            </parameter>
            <parameter name="reason" transfer-ownership="none">
              <type name="VpnPluginFailure" c:type="NMVpnPluginFailure"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="quit">
        <callback name="quit">
          <source-position filename="libnm/nm-vpn-service-plugin.h" line="76"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="plugin" transfer-ownership="none">
              <type name="VpnServicePlugin" c:type="NMVpnServicePlugin*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="config">
        <callback name="config">
          <source-position filename="libnm/nm-vpn-service-plugin.h" line="79"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="plugin" transfer-ownership="none">
              <type name="VpnServicePlugin" c:type="NMVpnServicePlugin*"/>
            </parameter>
            <parameter name="config" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="ip6_config">
        <callback name="ip6_config">
          <source-position filename="libnm/nm-vpn-service-plugin.h" line="83"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="plugin" transfer-ownership="none">
              <type name="VpnServicePlugin" c:type="NMVpnServicePlugin*"/>
            </parameter>
            <parameter name="config" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="connect">
        <callback name="connect" throws="1">
          <source-position filename="libnm/nm-vpn-service-plugin.h" line="88"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="plugin" transfer-ownership="none">
              <type name="VpnServicePlugin" c:type="NMVpnServicePlugin*"/>
            </parameter>
            <parameter name="connection" transfer-ownership="none">
              <type name="Connection" c:type="NMConnection*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="need_secrets">
        <callback name="need_secrets" throws="1">
          <source-position filename="libnm/nm-vpn-service-plugin.h" line="93"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="plugin" transfer-ownership="none">
              <type name="VpnServicePlugin" c:type="NMVpnServicePlugin*"/>
            </parameter>
            <parameter name="connection" transfer-ownership="none">
              <type name="Connection" c:type="NMConnection*"/>
            </parameter>
            <parameter name="setting_name" transfer-ownership="none">
              <type name="utf8" c:type="const char**"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="disconnect">
        <callback name="disconnect" throws="1">
          <source-position filename="libnm/nm-vpn-service-plugin.h" line="99"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="plugin" transfer-ownership="none">
              <type name="VpnServicePlugin" c:type="NMVpnServicePlugin*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="new_secrets">
        <callback name="new_secrets" throws="1">
          <source-position filename="libnm/nm-vpn-service-plugin.h"
                           line="103"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="plugin" transfer-ownership="none">
              <type name="VpnServicePlugin" c:type="NMVpnServicePlugin*"/>
            </parameter>
            <parameter name="connection" transfer-ownership="none">
              <type name="Connection" c:type="NMConnection*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="connect_interactive">
        <callback name="connect_interactive" throws="1">
          <source-position filename="libnm/nm-vpn-service-plugin.h"
                           line="108"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="plugin" transfer-ownership="none">
              <type name="VpnServicePlugin" c:type="NMVpnServicePlugin*"/>
            </parameter>
            <parameter name="connection" transfer-ownership="none">
              <type name="Connection" c:type="NMConnection*"/>
            </parameter>
            <parameter name="details" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="padding" readable="0" private="1">
        <array zero-terminated="0" fixed-size="8">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <enumeration name="VpnServiceState"
                 glib:type-name="NMVpnServiceState"
                 glib:get-type="nm_vpn_service_state_get_type"
                 c:type="NMVpnServiceState">
      <doc xml:space="preserve"
           filename="libnm-core/nm-vpn-dbus-interface.h"
           line="75">VPN daemon states</doc>
      <member name="unknown"
              value="0"
              c:identifier="NM_VPN_SERVICE_STATE_UNKNOWN"
              glib:nick="unknown">
        <doc xml:space="preserve"
             filename="libnm-core/nm-vpn-dbus-interface.h"
             line="77">The state of the VPN plugin is unknown.</doc>
      </member>
      <member name="init"
              value="1"
              c:identifier="NM_VPN_SERVICE_STATE_INIT"
              glib:nick="init">
        <doc xml:space="preserve"
             filename="libnm-core/nm-vpn-dbus-interface.h"
             line="78">The VPN plugin is initialized.</doc>
      </member>
      <member name="shutdown"
              value="2"
              c:identifier="NM_VPN_SERVICE_STATE_SHUTDOWN"
              glib:nick="shutdown">
        <doc xml:space="preserve"
             filename="libnm-core/nm-vpn-dbus-interface.h"
             line="79">Not used.</doc>
      </member>
      <member name="starting"
              value="3"
              c:identifier="NM_VPN_SERVICE_STATE_STARTING"
              glib:nick="starting">
        <doc xml:space="preserve"
             filename="libnm-core/nm-vpn-dbus-interface.h"
             line="80">The plugin is attempting to connect to a VPN server.</doc>
      </member>
      <member name="started"
              value="4"
              c:identifier="NM_VPN_SERVICE_STATE_STARTED"
              glib:nick="started">
        <doc xml:space="preserve"
             filename="libnm-core/nm-vpn-dbus-interface.h"
             line="81">The plugin has connected to a VPN server.</doc>
      </member>
      <member name="stopping"
              value="5"
              c:identifier="NM_VPN_SERVICE_STATE_STOPPING"
              glib:nick="stopping">
        <doc xml:space="preserve"
             filename="libnm-core/nm-vpn-dbus-interface.h"
             line="82">The plugin is disconnecting from the VPN server.</doc>
      </member>
      <member name="stopped"
              value="6"
              c:identifier="NM_VPN_SERVICE_STATE_STOPPED"
              glib:nick="stopped">
        <doc xml:space="preserve"
             filename="libnm-core/nm-vpn-dbus-interface.h"
             line="83">The plugin has disconnected from the VPN server.</doc>
      </member>
    </enumeration>
    <constant name="WIFI_P2P_PEER_FLAGS"
              value="flags"
              c:type="NM_WIFI_P2P_PEER_FLAGS">
      <source-position filename="libnm/nm-wifi-p2p-peer.h" line="38"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="WIFI_P2P_PEER_HW_ADDRESS"
              value="hw-address"
              c:type="NM_WIFI_P2P_PEER_HW_ADDRESS">
      <source-position filename="libnm/nm-wifi-p2p-peer.h" line="45"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="WIFI_P2P_PEER_LAST_SEEN"
              value="last-seen"
              c:type="NM_WIFI_P2P_PEER_LAST_SEEN">
      <source-position filename="libnm/nm-wifi-p2p-peer.h" line="47"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="WIFI_P2P_PEER_MANUFACTURER"
              value="manufacturer"
              c:type="NM_WIFI_P2P_PEER_MANUFACTURER">
      <source-position filename="libnm/nm-wifi-p2p-peer.h" line="40"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="WIFI_P2P_PEER_MODEL"
              value="model"
              c:type="NM_WIFI_P2P_PEER_MODEL">
      <source-position filename="libnm/nm-wifi-p2p-peer.h" line="41"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="WIFI_P2P_PEER_MODEL_NUMBER"
              value="model-number"
              c:type="NM_WIFI_P2P_PEER_MODEL_NUMBER">
      <source-position filename="libnm/nm-wifi-p2p-peer.h" line="42"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="WIFI_P2P_PEER_NAME"
              value="name"
              c:type="NM_WIFI_P2P_PEER_NAME">
      <source-position filename="libnm/nm-wifi-p2p-peer.h" line="39"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="WIFI_P2P_PEER_SERIAL"
              value="serial"
              c:type="NM_WIFI_P2P_PEER_SERIAL">
      <source-position filename="libnm/nm-wifi-p2p-peer.h" line="43"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="WIFI_P2P_PEER_STRENGTH"
              value="strength"
              c:type="NM_WIFI_P2P_PEER_STRENGTH">
      <source-position filename="libnm/nm-wifi-p2p-peer.h" line="46"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="WIFI_P2P_PEER_WFD_IES"
              value="wfd-ies"
              c:type="NM_WIFI_P2P_PEER_WFD_IES">
      <source-position filename="libnm/nm-wifi-p2p-peer.h" line="44"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="WIMAX_NSP_NAME" value="name" c:type="NM_WIMAX_NSP_NAME">
      <source-position filename="libnm/nm-wimax-nsp.h" line="40"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="WIMAX_NSP_NETWORK_TYPE"
              value="network-type"
              c:type="NM_WIMAX_NSP_NETWORK_TYPE">
      <source-position filename="libnm/nm-wimax-nsp.h" line="42"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="WIMAX_NSP_SIGNAL_QUALITY"
              value="signal-quality"
              c:type="NM_WIMAX_NSP_SIGNAL_QUALITY">
      <source-position filename="libnm/nm-wimax-nsp.h" line="41"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="WIREGUARD_PEER_ATTR_ALLOWED_IPS"
              value="allowed-ips"
              c:type="NM_WIREGUARD_PEER_ATTR_ALLOWED_IPS">
      <source-position filename="libnm-core/nm-setting-wireguard.h"
                       line="139"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="WIREGUARD_PEER_ATTR_ENDPOINT"
              value="endpoint"
              c:type="NM_WIREGUARD_PEER_ATTR_ENDPOINT">
      <source-position filename="libnm-core/nm-setting-wireguard.h"
                       line="140"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="WIREGUARD_PEER_ATTR_PERSISTENT_KEEPALIVE"
              value="persistent-keepalive"
              c:type="NM_WIREGUARD_PEER_ATTR_PERSISTENT_KEEPALIVE">
      <source-position filename="libnm-core/nm-setting-wireguard.h"
                       line="141"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="WIREGUARD_PEER_ATTR_PRESHARED_KEY"
              value="preshared-key"
              c:type="NM_WIREGUARD_PEER_ATTR_PRESHARED_KEY">
      <source-position filename="libnm-core/nm-setting-wireguard.h"
                       line="142"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="WIREGUARD_PEER_ATTR_PRESHARED_KEY_FLAGS"
              value="preshared-key-flags"
              c:type="NM_WIREGUARD_PEER_ATTR_PRESHARED_KEY_FLAGS">
      <source-position filename="libnm-core/nm-setting-wireguard.h"
                       line="143"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="WIREGUARD_PEER_ATTR_PUBLIC_KEY"
              value="public-key"
              c:type="NM_WIREGUARD_PEER_ATTR_PUBLIC_KEY">
      <source-position filename="libnm-core/nm-setting-wireguard.h"
                       line="144"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="WIREGUARD_PUBLIC_KEY_LEN"
              value="32"
              c:type="NM_WIREGUARD_PUBLIC_KEY_LEN">
      <source-position filename="libnm-core/nm-setting-wireguard.h" line="34"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="WIREGUARD_SYMMETRIC_KEY_LEN"
              value="32"
              c:type="NM_WIREGUARD_SYMMETRIC_KEY_LEN">
      <source-position filename="libnm-core/nm-setting-wireguard.h" line="35"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <enumeration name="WepKeyType"
                 glib:type-name="NMWepKeyType"
                 glib:get-type="nm_wep_key_type_get_type"
                 c:type="NMWepKeyType">
      <doc xml:space="preserve"
           filename="libnm-core/nm-setting-wireless-security.h"
           line="43">The #NMWepKeyType values specify how any WEP keys present in the setting
are interpreted.  There are no standards governing how to hash the various WEP
key/passphrase formats into the actual WEP key.  Unfortunately some WEP keys
can be interpreted in multiple ways, requiring the setting to specify how to
interpret the any WEP keys.  For example, the key "732f2d712e4a394a375d366931"
is both a valid Hexadecimal WEP key and a WEP passphrase.  Further, many
ASCII keys are also valid WEP passphrases, but since passphrases and ASCII
keys are hashed differently to determine the actual WEP key the type must be
specified.</doc>
      <member name="unknown"
              value="0"
              c:identifier="NM_WEP_KEY_TYPE_UNKNOWN"
              glib:nick="unknown">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-wireless-security.h"
             line="45">unknown WEP key type</doc>
      </member>
      <member name="key"
              value="1"
              c:identifier="NM_WEP_KEY_TYPE_KEY"
              glib:nick="key">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-wireless-security.h"
             line="46">indicates a hexadecimal or ASCII formatted WEP key.
Hex keys are either 10 or 26 hexadecimal characters (ie "5f782f2f5f" or
"732f2d712e4a394a375d366931"), while ASCII keys are either 5 or 13 ASCII
characters (ie "abcde" or "blahblah99$*1").</doc>
      </member>
      <member name="passphrase"
              value="2"
              c:identifier="NM_WEP_KEY_TYPE_PASSPHRASE"
              glib:nick="passphrase">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-wireless-security.h"
             line="50">indicates a WEP passphrase (ex "I bought a duck
on my way back from the market 235Q&amp;^%^*%") instead of a hexadecimal or ASCII
key.  Passphrases are between 8 and 64 characters inclusive and are hashed
the actual WEP key using the MD5 hash algorithm.</doc>
      </member>
    </enumeration>
    <class name="WifiP2PPeer"
           c:symbol-prefix="wifi_p2p_peer"
           c:type="NMWifiP2PPeer"
           parent="Object"
           glib:type-name="NMWifiP2PPeer"
           glib:get-type="nm_wifi_p2p_peer_get_type"
           glib:type-struct="WifiP2PPeerClass">
      <source-position filename="libnm/nm-wifi-p2p-peer.h" line="49"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.Initable"/>
      <method name="connection_valid"
              c:identifier="nm_wifi_p2p_peer_connection_valid"
              version="1.16">
        <doc xml:space="preserve"
             filename="libnm/nm-wifi-p2p-peer.c"
             line="269">Validates a given connection against a given Wi-Fi P2P peer to ensure that
the connection may be activated with that peer. The connection must match the
@peer's address and in the future possibly other attributes.</doc>
        <source-position filename="libnm/nm-wifi-p2p-peer.h" line="84"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-wifi-p2p-peer.c"
               line="278">%TRUE if the connection may be activated with this Wi-Fi P2P Peer,
%FALSE if it cannot be.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="peer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-wifi-p2p-peer.c"
                 line="271">an #NMWifiP2PPeer to validate @connection against</doc>
            <type name="WifiP2PPeer" c:type="NMWifiP2PPeer*"/>
          </instance-parameter>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-wifi-p2p-peer.c"
                 line="272">an #NMConnection to validate against @peer</doc>
            <type name="Connection" c:type="NMConnection*"/>
          </parameter>
        </parameters>
      </method>
      <method name="filter_connections"
              c:identifier="nm_wifi_p2p_peer_filter_connections"
              version="1.16">
        <doc xml:space="preserve"
             filename="libnm/nm-wifi-p2p-peer.c"
             line="318">Filters a given array of connections for a given #NMWifiP2PPeer object and
returns connections which may be activated with the P2P peer.  Any
returned connections will match the @peers's HW address and in the future
possibly other attributes.

To obtain the list of connections that are compatible with this P2P peer,
use nm_client_get_connections() and then filter the returned list for a given
#NMDevice using nm_device_filter_connections() and finally filter that list
with this function.</doc>
        <source-position filename="libnm/nm-wifi-p2p-peer.h" line="80"/>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve"
               filename="libnm/nm-wifi-p2p-peer.c"
               line="334">an array of
#NMConnections that could be activated with the given @peer. The array should
be freed with g_ptr_array_unref() when it is no longer required.</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="Connection"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="peer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-wifi-p2p-peer.c"
                 line="320">an #NMWifiP2PPeer to filter connections for</doc>
            <type name="WifiP2PPeer" c:type="NMWifiP2PPeer*"/>
          </instance-parameter>
          <parameter name="connections" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-wifi-p2p-peer.c"
                 line="321">an array of #NMConnections to
filter</doc>
            <array name="GLib.PtrArray" c:type="const GPtrArray*">
              <type name="Connection"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="get_flags"
              c:identifier="nm_wifi_p2p_peer_get_flags"
              version="1.16">
        <doc xml:space="preserve"
             filename="libnm/nm-wifi-p2p-peer.c"
             line="82">Gets the flags of the P2P peer.</doc>
        <source-position filename="libnm/nm-wifi-p2p-peer.h" line="55"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-wifi-p2p-peer.c"
               line="88">the flags</doc>
          <type name="80211ApFlags" c:type="NM80211ApFlags"/>
        </return-value>
        <parameters>
          <instance-parameter name="peer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-wifi-p2p-peer.c"
                 line="84">a #NMWifiP2PPeer</doc>
            <type name="WifiP2PPeer" c:type="NMWifiP2PPeer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_hw_address"
              c:identifier="nm_wifi_p2p_peer_get_hw_address"
              version="1.16">
        <doc xml:space="preserve"
             filename="libnm/nm-wifi-p2p-peer.c"
             line="214">Gets the hardware address of the P2P peer.</doc>
        <source-position filename="libnm/nm-wifi-p2p-peer.h" line="72"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-wifi-p2p-peer.c"
               line="220">the hardware adress</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="peer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-wifi-p2p-peer.c"
                 line="216">a #NMWifiP2PPeer</doc>
            <type name="WifiP2PPeer" c:type="NMWifiP2PPeer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_last_seen"
              c:identifier="nm_wifi_p2p_peer_get_last_seen"
              version="1.16">
        <doc xml:space="preserve"
             filename="libnm/nm-wifi-p2p-peer.c"
             line="250">Returns the timestamp (in CLOCK_BOOTTIME seconds) for the last time the
P2P peer was seen.  A value of -1 means the P2P peer has never been seen.</doc>
        <source-position filename="libnm/nm-wifi-p2p-peer.h" line="77"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-wifi-p2p-peer.c"
               line="257">the last seen time in seconds</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="peer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-wifi-p2p-peer.c"
                 line="252">a #NMWifiP2PPeer</doc>
            <type name="WifiP2PPeer" c:type="NMWifiP2PPeer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_manufacturer"
              c:identifier="nm_wifi_p2p_peer_get_manufacturer"
              version="1.16">
        <doc xml:space="preserve"
             filename="libnm/nm-wifi-p2p-peer.c"
             line="118">Gets the manufacturer of the P2P peer.</doc>
        <source-position filename="libnm/nm-wifi-p2p-peer.h" line="60"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-wifi-p2p-peer.c"
               line="124">the manufacturer</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="peer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-wifi-p2p-peer.c"
                 line="120">a #NMWifiP2PPeer</doc>
            <type name="WifiP2PPeer" c:type="NMWifiP2PPeer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_model"
              c:identifier="nm_wifi_p2p_peer_get_model"
              version="1.16">
        <doc xml:space="preserve"
             filename="libnm/nm-wifi-p2p-peer.c"
             line="136">Gets the model of the P2P peer.</doc>
        <source-position filename="libnm/nm-wifi-p2p-peer.h" line="62"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-wifi-p2p-peer.c"
               line="142">the model</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="peer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-wifi-p2p-peer.c"
                 line="138">a #NMWifiP2PPeer</doc>
            <type name="WifiP2PPeer" c:type="NMWifiP2PPeer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_model_number"
              c:identifier="nm_wifi_p2p_peer_get_model_number"
              version="1.16">
        <doc xml:space="preserve"
             filename="libnm/nm-wifi-p2p-peer.c"
             line="154">Gets the model number of the P2P peer.</doc>
        <source-position filename="libnm/nm-wifi-p2p-peer.h" line="64"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-wifi-p2p-peer.c"
               line="160">the model number</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="peer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-wifi-p2p-peer.c"
                 line="156">a #NMWifiP2PPeer</doc>
            <type name="WifiP2PPeer" c:type="NMWifiP2PPeer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_name"
              c:identifier="nm_wifi_p2p_peer_get_name"
              version="1.16">
        <doc xml:space="preserve"
             filename="libnm/nm-wifi-p2p-peer.c"
             line="100">Gets the name of the P2P peer.</doc>
        <source-position filename="libnm/nm-wifi-p2p-peer.h" line="58"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-wifi-p2p-peer.c"
               line="106">the name</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="peer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-wifi-p2p-peer.c"
                 line="102">a #NMWifiP2PPeer</doc>
            <type name="WifiP2PPeer" c:type="NMWifiP2PPeer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_serial"
              c:identifier="nm_wifi_p2p_peer_get_serial"
              version="1.16">
        <doc xml:space="preserve"
             filename="libnm/nm-wifi-p2p-peer.c"
             line="172">Gets the serial number of the P2P peer.</doc>
        <source-position filename="libnm/nm-wifi-p2p-peer.h" line="66"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-wifi-p2p-peer.c"
               line="178">the serial number</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="peer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-wifi-p2p-peer.c"
                 line="174">a #NMWifiP2PPeer</doc>
            <type name="WifiP2PPeer" c:type="NMWifiP2PPeer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_strength"
              c:identifier="nm_wifi_p2p_peer_get_strength"
              version="1.16">
        <doc xml:space="preserve"
             filename="libnm/nm-wifi-p2p-peer.c"
             line="232">Gets the current signal strength of the P2P peer as a percentage.</doc>
        <source-position filename="libnm/nm-wifi-p2p-peer.h" line="75"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-wifi-p2p-peer.c"
               line="238">the signal strength (0 to 100)</doc>
          <type name="guint8" c:type="guint8"/>
        </return-value>
        <parameters>
          <instance-parameter name="peer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-wifi-p2p-peer.c"
                 line="234">a #NMWifiP2PPeer</doc>
            <type name="WifiP2PPeer" c:type="NMWifiP2PPeer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_wfd_ies"
              c:identifier="nm_wifi_p2p_peer_get_wfd_ies"
              version="1.16">
        <doc xml:space="preserve"
             filename="libnm/nm-wifi-p2p-peer.c"
             line="190">Gets the WFD information elements of the P2P peer.</doc>
        <source-position filename="libnm/nm-wifi-p2p-peer.h" line="69"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-wifi-p2p-peer.c"
               line="196">the #GBytes containing the WFD IEs, or %NULL.</doc>
          <type name="GLib.Bytes" c:type="GBytes*"/>
        </return-value>
        <parameters>
          <instance-parameter name="peer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-wifi-p2p-peer.c"
                 line="192">a #NMWifiP2PPeer</doc>
            <type name="WifiP2PPeer" c:type="NMWifiP2PPeer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="flags" version="1.16" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-wifi-p2p-peer.c"
             line="468">The flags of the P2P peer.</doc>
        <type name="80211ApFlags"/>
      </property>
      <property name="hw-address" version="1.16" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-wifi-p2p-peer.c"
             line="559">The hardware address of the P2P peer.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="last-seen" version="1.16" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-wifi-p2p-peer.c"
             line="585">The timestamp (in CLOCK_BOOTTIME seconds) for the last time the
P2P peer was found.  A value of -1 means the peer has never been seen.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="manufacturer" version="1.16" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-wifi-p2p-peer.c"
             line="495">The manufacturer of the P2P peer.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="model" version="1.16" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-wifi-p2p-peer.c"
             line="508">The model of the P2P peer.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="model-number" version="1.16" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-wifi-p2p-peer.c"
             line="521">The hardware address of the P2P peer.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="name" version="1.16" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-wifi-p2p-peer.c"
             line="482">The name of the P2P peer.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="serial" version="1.16" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-wifi-p2p-peer.c"
             line="534">The serial number of the P2P peer.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="strength" version="1.16" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-wifi-p2p-peer.c"
             line="572">The current signal strength of the P2P peer.</doc>
        <type name="guint8" c:type="guint8"/>
      </property>
      <property name="wfd-ies" version="1.16" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-wifi-p2p-peer.c"
             line="547">The WFD information elements of the P2P peer.</doc>
        <type name="GLib.Bytes"/>
      </property>
    </class>
    <record name="WifiP2PPeerClass"
            c:type="NMWifiP2PPeerClass"
            disguised="1"
            glib:is-gtype-struct-for="WifiP2PPeer">
      <source-position filename="libnm/nm-wifi-p2p-peer.h" line="49"/>
    </record>
    <class name="WimaxNsp"
           c:symbol-prefix="wimax_nsp"
           c:type="NMWimaxNsp"
           parent="Object"
           glib:type-name="NMWimaxNsp"
           glib:get-type="nm_wimax_nsp_get_type"
           glib:type-struct="WimaxNspClass">
      <source-position filename="libnm/nm-wimax-nsp.h" line="56"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.Initable"/>
      <method name="connection_valid"
              c:identifier="nm_wimax_nsp_connection_valid">
        <doc xml:space="preserve"
             filename="libnm/nm-wimax-nsp.c"
             line="99">Validates a given connection against a given WiMAX NSP to ensure that the
connection may be activated with that NSP.  The connection must match the
@nsp's network name and other attributes.</doc>
        <source-position filename="libnm/nm-wimax-nsp.h" line="67"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-wimax-nsp.c"
               line="108">%TRUE if the connection may be activated with this WiMAX NSP,
%FALSE if it cannot be.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="nsp" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-wimax-nsp.c"
                 line="101">an #NMWimaxNsp to validate @connection against</doc>
            <type name="WimaxNsp" c:type="NMWimaxNsp*"/>
          </instance-parameter>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-wimax-nsp.c"
                 line="102">an #NMConnection to validate against @nsp</doc>
            <type name="Connection" c:type="NMConnection*"/>
          </parameter>
        </parameters>
      </method>
      <method name="filter_connections"
              c:identifier="nm_wimax_nsp_filter_connections">
        <doc xml:space="preserve"
             filename="libnm/nm-wimax-nsp.c"
             line="142">Filters a given array of connections for a given #NMWimaxNsp object and
return connections which may be activated with the NSP.  Any returned
connections will match the @nsp's network name and other attributes.</doc>
        <source-position filename="libnm/nm-wimax-nsp.h" line="64"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libnm/nm-wimax-nsp.c"
               line="152">an array of
#NMConnections that could be activated with the given @nsp.  The array should
be freed with g_ptr_array_unref() when it is no longer required.</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="Connection"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="nsp" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-wimax-nsp.c"
                 line="144">an #NMWimaxNsp to filter connections for</doc>
            <type name="WimaxNsp" c:type="NMWimaxNsp*"/>
          </instance-parameter>
          <parameter name="connections" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-wimax-nsp.c"
                 line="145">an array of #NMConnections to
filter</doc>
            <array name="GLib.PtrArray" c:type="const GPtrArray*">
              <type name="Connection"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="get_name" c:identifier="nm_wimax_nsp_get_name">
        <doc xml:space="preserve"
             filename="libnm/nm-wimax-nsp.c"
             line="51">Gets the name of the wimax NSP</doc>
        <source-position filename="libnm/nm-wimax-nsp.h" line="60"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-wimax-nsp.c"
               line="57">the name</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="nsp" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-wimax-nsp.c"
                 line="53">a #NMWimaxNsp</doc>
            <type name="WimaxNsp" c:type="NMWimaxNsp*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_network_type"
              c:identifier="nm_wimax_nsp_get_network_type">
        <doc xml:space="preserve"
             filename="libnm/nm-wimax-nsp.c"
             line="83">Gets the network type of the wimax NSP.</doc>
        <source-position filename="libnm/nm-wimax-nsp.h" line="62"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-wimax-nsp.c"
               line="89">the network type</doc>
          <type name="WimaxNspNetworkType" c:type="NMWimaxNspNetworkType"/>
        </return-value>
        <parameters>
          <instance-parameter name="nsp" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-wimax-nsp.c"
                 line="85">a #NMWimaxNsp</doc>
            <type name="WimaxNsp" c:type="NMWimaxNsp*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_signal_quality"
              c:identifier="nm_wimax_nsp_get_signal_quality">
        <doc xml:space="preserve"
             filename="libnm/nm-wimax-nsp.c"
             line="67">Gets the WPA signal quality of the wimax NSP.</doc>
        <source-position filename="libnm/nm-wimax-nsp.h" line="61"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm/nm-wimax-nsp.c"
               line="73">the signal quality</doc>
          <type name="guint32" c:type="guint32"/>
        </return-value>
        <parameters>
          <instance-parameter name="nsp" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm/nm-wimax-nsp.c"
                 line="69">a #NMWimaxNsp</doc>
            <type name="WimaxNsp" c:type="NMWimaxNsp*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="name" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-wimax-nsp.c"
             line="248">The name of the WiMAX NSP.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="network-type" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-wimax-nsp.c"
             line="272">The network type of the WiMAX NSP.</doc>
        <type name="WimaxNspNetworkType"/>
      </property>
      <property name="signal-quality" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-wimax-nsp.c"
             line="260">The signal quality of the WiMAX NSP.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <field name="parent">
        <type name="Object" c:type="NMObject"/>
      </field>
    </class>
    <record name="WimaxNspClass"
            c:type="NMWimaxNspClass"
            glib:is-gtype-struct-for="WimaxNsp">
      <source-position filename="libnm/nm-wimax-nsp.h" line="56"/>
      <field name="parent">
        <type name="ObjectClass" c:type="NMObjectClass"/>
      </field>
      <field name="padding" readable="0" private="1">
        <array zero-terminated="0" fixed-size="4">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <enumeration name="WimaxNspNetworkType"
                 glib:type-name="NMWimaxNspNetworkType"
                 glib:get-type="nm_wimax_nsp_network_type_get_type"
                 c:type="NMWimaxNspNetworkType">
      <doc xml:space="preserve"
           filename="libnm-core/nm-dbus-interface.h"
           line="434">WiMAX network type.</doc>
      <member name="unknown"
              value="0"
              c:identifier="NM_WIMAX_NSP_NETWORK_TYPE_UNKNOWN"
              glib:nick="unknown">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="436">unknown network type</doc>
      </member>
      <member name="home"
              value="1"
              c:identifier="NM_WIMAX_NSP_NETWORK_TYPE_HOME"
              glib:nick="home">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="437">home network</doc>
      </member>
      <member name="partner"
              value="2"
              c:identifier="NM_WIMAX_NSP_NETWORK_TYPE_PARTNER"
              glib:nick="partner">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="438">partner network</doc>
      </member>
      <member name="roaming_partner"
              value="3"
              c:identifier="NM_WIMAX_NSP_NETWORK_TYPE_ROAMING_PARTNER"
              glib:nick="roaming-partner">
        <doc xml:space="preserve"
             filename="libnm-core/nm-dbus-interface.h"
             line="439">roaming partner network</doc>
      </member>
    </enumeration>
    <record name="WireGuardPeer"
            c:type="NMWireGuardPeer"
            version="1.16"
            glib:type-name="NMWireGuardPeer"
            glib:get-type="nm_wireguard_peer_get_type"
            c:symbol-prefix="wireguard_peer">
      <doc xml:space="preserve"
           filename="libnm-core/nm-setting-wireguard.c"
           line="52">The settings of one WireGuard peer.</doc>
      <source-position filename="libnm-core/nm-setting-wireguard.h" line="39"/>
      <constructor name="new"
                   c:identifier="nm_wireguard_peer_new"
                   version="1.16">
        <source-position filename="libnm-core/nm-setting-wireguard.h"
                         line="45"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-wireguard.c"
               line="84">a new, default, unsealed #NMWireGuardPeer instance.</doc>
          <type name="WireGuardPeer" c:type="NMWireGuardPeer*"/>
        </return-value>
      </constructor>
      <method name="append_allowed_ip"
              c:identifier="nm_wireguard_peer_append_allowed_ip"
              version="1.16">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-wireguard.c"
             line="631">Appends @allowed_ip setting to the list. This does not check
for duplicates and always appends @allowed_ip to the end of the
list. If @allowed_ip is valid, it will be normalized and a modified
for might be appended. If @allowed_ip is invalid, it will still be
appended, but later verification will fail.

It is a bug trying to modify a sealed #NMWireGuardPeer instance.</doc>
        <source-position filename="libnm-core/nm-setting-wireguard.h"
                         line="100"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-wireguard.c"
               line="647">%TRUE if the value is a valid allowed-ips value, %FALSE otherwise.
  Depending on @accept_invalid, also invalid values are added.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wireguard.c"
                 line="633">the unsealed #NMWireGuardPeer instance</doc>
            <type name="WireGuardPeer" c:type="NMWireGuardPeer*"/>
          </instance-parameter>
          <parameter name="allowed_ip" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wireguard.c"
                 line="634">the allowed-ip entry to set.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="accept_invalid" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wireguard.c"
                 line="635">if %TRUE, also invalid @allowed_ip value
  will be appended. Otherwise, the function does nothing
  in face of invalid values and returns %FALSE.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="clear_allowed_ips"
              c:identifier="nm_wireguard_peer_clear_allowed_ips"
              version="1.16">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-wireguard.c"
             line="568">Removes all allowed-ip entries.

It is a bug trying to modify a sealed #NMWireGuardPeer instance.</doc>
        <source-position filename="libnm-core/nm-setting-wireguard.h"
                         line="98"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wireguard.c"
                 line="570">the unsealed #NMWireGuardPeer instance</doc>
            <type name="WireGuardPeer" c:type="NMWireGuardPeer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="cmp" c:identifier="nm_wireguard_peer_cmp" version="1.16">
        <source-position filename="libnm-core/nm-setting-wireguard.h"
                         line="114"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-wireguard.c"
               line="786">zero of the two instances are equivalent or
  a non-zero integer otherwise. This defines a total ordering
  over the peers. Whether a peer is sealed or not, does not
  affect the comparison.</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="a"
                              transfer-ownership="none"
                              nullable="1"
                              allow-none="1">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wireguard.c"
                 line="782">the #NMWireGuardPeer to compare.</doc>
            <type name="WireGuardPeer" c:type="const NMWireGuardPeer*"/>
          </instance-parameter>
          <parameter name="b"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wireguard.c"
                 line="783">the other #NMWireGuardPeer to compare.</doc>
            <type name="WireGuardPeer" c:type="const NMWireGuardPeer*"/>
          </parameter>
          <parameter name="compare_flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wireguard.c"
                 line="784">#NMSettingCompareFlags to affect the comparison.</doc>
            <type name="SettingCompareFlags" c:type="NMSettingCompareFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_allowed_ip"
              c:identifier="nm_wireguard_peer_get_allowed_ip"
              version="1.16">
        <source-position filename="libnm-core/nm-setting-wireguard.h"
                         line="94"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-wireguard.c"
               line="543">the allowed-ip setting at index @idx.
  If @idx is out of range, %NULL will be returned.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wireguard.c"
                 line="537">the #NMWireGuardPeer instance</doc>
            <type name="WireGuardPeer" c:type="const NMWireGuardPeer*"/>
          </instance-parameter>
          <parameter name="idx" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wireguard.c"
                 line="538">the index from zero to (allowed-ips-len - 1) to
  retrieve.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="out_is_valid"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wireguard.c"
                 line="540">%TRUE if the returned value is a valid allowed-ip
  setting.</doc>
            <type name="gboolean" c:type="gboolean*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_allowed_ips_len"
              c:identifier="nm_wireguard_peer_get_allowed_ips_len"
              version="1.16">
        <source-position filename="libnm-core/nm-setting-wireguard.h"
                         line="92"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-wireguard.c"
               line="523">the number of allowed-ips entries.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wireguard.c"
                 line="521">the #NMWireGuardPeer instance</doc>
            <type name="WireGuardPeer" c:type="const NMWireGuardPeer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_endpoint"
              c:identifier="nm_wireguard_peer_get_endpoint"
              version="1.16">
        <source-position filename="libnm-core/nm-setting-wireguard.h"
                         line="86"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-wireguard.c"
               line="466">the endpoint or %NULL if none was set.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wireguard.c"
                 line="464">the #NMWireGuardPeer instance</doc>
            <type name="WireGuardPeer" c:type="const NMWireGuardPeer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_persistent_keepalive"
              c:identifier="nm_wireguard_peer_get_persistent_keepalive"
              version="1.16">
        <source-position filename="libnm-core/nm-setting-wireguard.h"
                         line="80"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-wireguard.c"
               line="423">get the persistent-keepalive setting in seconds. Set to zero to disable
  keep-alive.</doc>
          <type name="guint16" c:type="guint16"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wireguard.c"
                 line="421">the #NMWireGuardPeer instance</doc>
            <type name="WireGuardPeer" c:type="const NMWireGuardPeer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_preshared_key"
              c:identifier="nm_wireguard_peer_get_preshared_key"
              version="1.16">
        <source-position filename="libnm-core/nm-setting-wireguard.h"
                         line="68"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-wireguard.c"
               line="332">the preshared key or %NULL if unset.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wireguard.c"
                 line="330">the #NMWireGuardPeer instance</doc>
            <type name="WireGuardPeer" c:type="const NMWireGuardPeer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_preshared_key_flags"
              c:identifier="nm_wireguard_peer_get_preshared_key_flags"
              version="1.16">
        <source-position filename="libnm-core/nm-setting-wireguard.h"
                         line="74"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-wireguard.c"
               line="389">get the secret flags for the preshared-key.</doc>
          <type name="SettingSecretFlags" c:type="NMSettingSecretFlags"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wireguard.c"
                 line="387">the #NMWireGuardPeer instance</doc>
            <type name="WireGuardPeer" c:type="const NMWireGuardPeer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_public_key"
              c:identifier="nm_wireguard_peer_get_public_key"
              version="1.16">
        <source-position filename="libnm-core/nm-setting-wireguard.h"
                         line="62"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-wireguard.c"
               line="266">the public key or %NULL if unset.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wireguard.c"
                 line="264">the #NMWireGuardPeer instance</doc>
            <type name="WireGuardPeer" c:type="const NMWireGuardPeer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_sealed"
              c:identifier="nm_wireguard_peer_is_sealed"
              version="1.16">
        <source-position filename="libnm-core/nm-setting-wireguard.h"
                         line="59"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-wireguard.c"
               line="250">whether @self is sealed or not.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wireguard.c"
                 line="248">the #NMWireGuardPeer instance</doc>
            <type name="WireGuardPeer" c:type="const NMWireGuardPeer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_valid"
              c:identifier="nm_wireguard_peer_is_valid"
              version="1.16"
              throws="1">
        <source-position filename="libnm-core/nm-setting-wireguard.h"
                         line="108"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-wireguard.c"
               line="703">%TRUE if the peer is valid or fails with an error
  reason.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wireguard.c"
                 line="696">the #NMWireGuardPeer instance</doc>
            <type name="WireGuardPeer" c:type="const NMWireGuardPeer*"/>
          </instance-parameter>
          <parameter name="check_non_secrets" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wireguard.c"
                 line="699">if %TRUE, secret properties are validated.
  Otherwise they are ignored for this purpose.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="check_secrets" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wireguard.c"
                 line="697">if %TRUE, non-secret properties are validated.
  Otherwise they are ignored for this purpose.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="new_clone"
              c:identifier="nm_wireguard_peer_new_clone"
              version="1.16">
        <source-position filename="libnm-core/nm-setting-wireguard.h"
                         line="48"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-wireguard.c"
               line="107">a clone of @self. This instance
  is always unsealed.</doc>
          <type name="WireGuardPeer" c:type="NMWireGuardPeer*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wireguard.c"
                 line="103">the #NMWireGuardPeer instance to copy.</doc>
            <type name="WireGuardPeer" c:type="const NMWireGuardPeer*"/>
          </instance-parameter>
          <parameter name="with_secrets" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wireguard.c"
                 line="104">if %TRUE, the preshared-key secrets are copied
 as well. Otherwise, they will be removed.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="ref" c:identifier="nm_wireguard_peer_ref" version="1.16">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-wireguard.c"
             line="144">This is not thread-safe.</doc>
        <source-position filename="libnm-core/nm-setting-wireguard.h"
                         line="52"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-wireguard.c"
               line="150">returns the input argument @self after incrementing
  the reference count.</doc>
          <type name="WireGuardPeer" c:type="NMWireGuardPeer*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self"
                              transfer-ownership="none"
                              nullable="1"
                              allow-none="1">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wireguard.c"
                 line="146">the #NMWireGuardPeer instance</doc>
            <type name="WireGuardPeer" c:type="NMWireGuardPeer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="remove_allowed_ip"
              c:identifier="nm_wireguard_peer_remove_allowed_ip"
              version="1.16">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-wireguard.c"
             line="663">Removes the allowed-ip at the given @idx. This shifts all
following entries one index down.

It is a bug trying to modify a sealed #NMWireGuardPeer instance.</doc>
        <source-position filename="libnm-core/nm-setting-wireguard.h"
                         line="104"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-wireguard.c"
               line="675">%TRUE if @idx was valid and the allowed-ip was removed.
  %FALSE otherwise, and the peer will not be changed.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wireguard.c"
                 line="665">the unsealed #NMWireGuardPeer instance</doc>
            <type name="WireGuardPeer" c:type="NMWireGuardPeer*"/>
          </instance-parameter>
          <parameter name="idx" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wireguard.c"
                 line="666">the index from zero to (allowed-ips-len - 1) to
  retrieve. If the index is out of range, %FALSE is returned
  and nothing is done.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="seal" c:identifier="nm_wireguard_peer_seal" version="1.16">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-wireguard.c"
             line="222">Seal the #NMWireGuardPeer instance. Afterwards, it is a bug
to call all functions that modify the instance (except ref/unref).
A sealed instance cannot be unsealed again, but you can create
an unsealed copy with nm_wireguard_peer_new_clone().</doc>
        <source-position filename="libnm-core/nm-setting-wireguard.h"
                         line="57"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wireguard.c"
                 line="224">the #NMWireGuardPeer instance</doc>
            <type name="WireGuardPeer" c:type="NMWireGuardPeer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_endpoint"
              c:identifier="nm_wireguard_peer_set_endpoint"
              version="1.16">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-wireguard.c"
             line="493">Sets or clears the endpoint of @self.

It is a bug trying to modify a sealed #NMWireGuardPeer instance.</doc>
        <source-position filename="libnm-core/nm-setting-wireguard.h"
                         line="88"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wireguard.c"
                 line="495">the unsealed #NMWireGuardPeer instance</doc>
            <type name="WireGuardPeer" c:type="NMWireGuardPeer*"/>
          </instance-parameter>
          <parameter name="endpoint" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wireguard.c"
                 line="496">the socket address endpoint to set or %NULL.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_persistent_keepalive"
              c:identifier="nm_wireguard_peer_set_persistent_keepalive"
              version="1.16">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-wireguard.c"
             line="436">It is a bug trying to modify a sealed #NMWireGuardPeer instance.</doc>
        <source-position filename="libnm-core/nm-setting-wireguard.h"
                         line="82"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wireguard.c"
                 line="438">the unsealed #NMWireGuardPeer instance</doc>
            <type name="WireGuardPeer" c:type="NMWireGuardPeer*"/>
          </instance-parameter>
          <parameter name="persistent_keepalive" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wireguard.c"
                 line="439">the keep-alive value to set.</doc>
            <type name="guint16" c:type="guint16"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_preshared_key"
              c:identifier="nm_wireguard_peer_set_preshared_key"
              version="1.16">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-wireguard.c"
             line="344">Reset the preshared key. Note that if the preshared key is valid, it
will be normalized (which may or may not modify the set value).

Note that the preshared-key is a secret and consequently has corresponding
preshared-key-flags property. This is so that secrets can be optional
and requested on demand from a secret-agent. Also, an invalid  preshared-key
may optionally cause nm_wireguard_peer_is_valid() to fail or it may
be accepted.

It is a bug trying to modify a sealed #NMWireGuardPeer instance.</doc>
        <source-position filename="libnm-core/nm-setting-wireguard.h"
                         line="70"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wireguard.c"
                 line="346">the unsealed #NMWireGuardPeer instance</doc>
            <type name="WireGuardPeer" c:type="NMWireGuardPeer*"/>
          </instance-parameter>
          <parameter name="preshared_key"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wireguard.c"
                 line="347">(transfer none): the new preshared
  key or %NULL to clear the preshared key.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_preshared_key_flags"
              c:identifier="nm_wireguard_peer_set_preshared_key_flags"
              version="1.16">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-wireguard.c"
             line="401">It is a bug trying to modify a sealed #NMWireGuardPeer instance.</doc>
        <source-position filename="libnm-core/nm-setting-wireguard.h"
                         line="76"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wireguard.c"
                 line="403">the unsealed #NMWireGuardPeer instance</doc>
            <type name="WireGuardPeer" c:type="NMWireGuardPeer*"/>
          </instance-parameter>
          <parameter name="preshared_key_flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wireguard.c"
                 line="404">the secret flags to set.</doc>
            <type name="SettingSecretFlags" c:type="NMSettingSecretFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_public_key"
              c:identifier="nm_wireguard_peer_set_public_key"
              version="1.16">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-wireguard.c"
             line="278">Reset the public key. Note that if the public key is valid, it
will be normalized (which may or may not modify the set value).

It is a bug trying to modify a sealed #NMWireGuardPeer instance.</doc>
        <source-position filename="libnm-core/nm-setting-wireguard.h"
                         line="64"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wireguard.c"
                 line="280">the unsealed #NMWireGuardPeer instance</doc>
            <type name="WireGuardPeer" c:type="NMWireGuardPeer*"/>
          </instance-parameter>
          <parameter name="public_key"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wireguard.c"
                 line="281">(transfer none): the new public
  key or %NULL to clear the public key.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="unref"
              c:identifier="nm_wireguard_peer_unref"
              version="1.16">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-wireguard.c"
             line="169">Drop a reference to @self. If the last reference is dropped,
the instance is freed and all accociate data released.

This is not thread-safe.</doc>
        <source-position filename="libnm-core/nm-setting-wireguard.h"
                         line="54"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self"
                              transfer-ownership="none"
                              nullable="1"
                              allow-none="1">
            <doc xml:space="preserve"
                 filename="libnm-core/nm-setting-wireguard.c"
                 line="171">the #NMWireGuardPeer instance</doc>
            <type name="WireGuardPeer" c:type="NMWireGuardPeer*"/>
          </instance-parameter>
        </parameters>
      </method>
    </record>
    <callback name="_ConnectionForEachSecretFunc"
              c:type="_NMConnectionForEachSecretFunc">
      <source-position filename="libnm-core/nm-setting.h" line="191"/>
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="flags" transfer-ownership="none">
          <type name="SettingSecretFlags" c:type="NMSettingSecretFlags"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="1">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <function name="agent_manager_error_quark"
              c:identifier="nm_agent_manager_error_quark"
              moved-to="AgentManagerError.quark">
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="client_error_quark"
              c:identifier="nm_client_error_quark"
              moved-to="ClientError.quark">
      <doc xml:space="preserve"
           filename="libnm/nm-client.c"
           line="175">Registers an error quark for #NMClient if necessary.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm/nm-client.c"
             line="180">the error quark used for #NMClient errors.</doc>
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="connection_error_quark"
              c:identifier="nm_connection_error_quark"
              moved-to="ConnectionError.quark">
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="crypto_error_quark"
              c:identifier="nm_crypto_error_quark"
              moved-to="CryptoError.quark">
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="device_error_quark"
              c:identifier="nm_device_error_quark"
              moved-to="DeviceError.quark">
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="ethtool_optname_is_feature"
              c:identifier="nm_ethtool_optname_is_feature"
              version="1.14">
      <doc xml:space="preserve"
           filename="libnm-core/nm-setting-ethtool.c"
           line="41">Checks whether @optname is a valid option name for an offload feature.

%Returns: %TRUE, if @optname is valid</doc>
      <source-position filename="libnm-core/nm-setting-ethtool.h" line="88"/>
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="optname" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-ethtool.c"
               line="43">the option name to check</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="ip_route_attribute_validate"
              c:identifier="nm_ip_route_attribute_validate"
              moved-to="IPRoute.attribute_validate"
              version="1.8"
              throws="1">
      <doc xml:space="preserve"
           filename="libnm-core/nm-setting-ip-config.c"
           line="1247">Validates a route attribute, i.e. checks that the attribute is a known one
and the value is of the correct type and well-formed.</doc>
      <source-position filename="libnm-core/nm-setting-ip-config.h"
                       line="140"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-ip-config.c"
             line="1258">%TRUE if the attribute is valid, %FALSE otherwise</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-ip-config.c"
               line="1249">the attribute name</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="value" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-ip-config.c"
               line="1250">the attribute value</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </parameter>
        <parameter name="family" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-ip-config.c"
               line="1251">IP address family of the route</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="known"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-ip-config.c"
               line="1252">on return, whether the attribute name is a known one</doc>
          <type name="gboolean" c:type="gboolean*"/>
        </parameter>
      </parameters>
    </function>
    <function name="ip_route_get_variant_attribute_spec"
              c:identifier="nm_ip_route_get_variant_attribute_spec"
              moved-to="IPRoute.get_variant_attribute_spec"
              version="1.8">
      <source-position filename="libnm-core/nm-setting-ip-config.h"
                       line="138"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-ip-config.c"
             line="1237">the specifiers for route attributes</doc>
        <type name="VariantAttributeSpec"
              c:type="const NMVariantAttributeSpec* const*"/>
      </return-value>
    </function>
    <function name="manager_error_quark"
              c:identifier="nm_manager_error_quark"
              moved-to="ManagerError.quark">
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="secret_agent_error_quark"
              c:identifier="nm_secret_agent_error_quark"
              moved-to="SecretAgentError.quark">
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="settings_error_quark"
              c:identifier="nm_settings_error_quark"
              moved-to="SettingsError.quark">
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="sriov_vf_attribute_validate"
              c:identifier="nm_sriov_vf_attribute_validate"
              moved-to="SriovVF.attribute_validate"
              version="1.14"
              throws="1">
      <doc xml:space="preserve"
           filename="libnm-core/nm-setting-sriov.c"
           line="382">Validates a VF attribute, i.e. checks that the attribute is a known one,
the value is of the correct type and well-formed.</doc>
      <source-position filename="libnm-core/nm-setting-sriov.h" line="119"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-setting-sriov.c"
             line="392">%TRUE if the attribute is valid, %FALSE otherwise</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-sriov.c"
               line="384">the attribute name</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="value" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-sriov.c"
               line="385">the attribute value</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </parameter>
        <parameter name="known"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libnm-core/nm-setting-sriov.c"
               line="386">on return, whether the attribute name is a known one</doc>
          <type name="gboolean" c:type="gboolean*"/>
        </parameter>
      </parameters>
    </function>
    <function name="utils_ap_mode_security_valid"
              c:identifier="nm_utils_ap_mode_security_valid">
      <doc xml:space="preserve"
           filename="libnm-core/nm-utils.c"
           line="1108">Given a set of device capabilities, and a desired security type to check
against, determines whether the combination of device capabilities and
desired security type are valid for AP/Hotspot connections.</doc>
      <source-position filename="libnm-core/nm-utils.h" line="93"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-utils.c"
             line="1119">%TRUE if the device capabilities are compatible with the desired
@type, %FALSE if they are not.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="type" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-utils.c"
               line="1110">the security type to check device capabilities against,
e.g. #NMU_SEC_STATIC_WEP</doc>
          <type name="UtilsSecurityType" c:type="NMUtilsSecurityType"/>
        </parameter>
        <parameter name="wifi_caps" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-utils.c"
               line="1112">bitfield of the capabilities of the specific Wi-Fi device, e.g.
#NM_WIFI_DEVICE_CAP_CIPHER_WEP40</doc>
          <type name="DeviceWifiCapabilities"
                c:type="NMDeviceWifiCapabilities"/>
        </parameter>
      </parameters>
    </function>
    <function name="utils_bin2hexstr" c:identifier="nm_utils_bin2hexstr">
      <doc xml:space="preserve"
           filename="libnm-core/nm-utils.c"
           line="3997">Converts the byte array @src into a hexadecimal string. If @final_len is
greater than -1, the returned string is terminated at that index
(returned_string[final_len] == '\0'),</doc>
      <source-position filename="libnm-core/nm-utils.h" line="183"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="libnm-core/nm-utils.c"
             line="4007">the textual form of @bytes</doc>
        <type name="utf8" c:type="char*"/>
      </return-value>
      <parameters>
        <parameter name="src" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-utils.c"
               line="3999">an array of bytes</doc>
          <array length="1" zero-terminated="0" c:type="gconstpointer">
            <type name="guint8" c:type="gconstpointer"/>
          </array>
        </parameter>
        <parameter name="len" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-utils.c"
               line="4000">the length of the @src array</doc>
          <type name="gsize" c:type="gsize"/>
        </parameter>
        <parameter name="final_len" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-utils.c"
               line="4001">an index where to cut off the returned string, or -1</doc>
          <type name="gint" c:type="int"/>
        </parameter>
      </parameters>
    </function>
    <function name="utils_bond_mode_int_to_string"
              c:identifier="nm_utils_bond_mode_int_to_string"
              version="1.2">
      <doc xml:space="preserve"
           filename="libnm-core/nm-utils.c"
           line="4925">Convert bonding mode from integer value to descriptive name.
See https://www.kernel.org/doc/Documentation/networking/bonding.txt for
available modes.</doc>
      <source-position filename="libnm-core/nm-utils.h" line="210"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-utils.c"
             line="4933">bonding mode string, or NULL on error</doc>
        <type name="utf8" c:type="const char*"/>
      </return-value>
      <parameters>
        <parameter name="mode" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-utils.c"
               line="4927">bonding mode as a numeric value</doc>
          <type name="gint" c:type="int"/>
        </parameter>
      </parameters>
    </function>
    <function name="utils_bond_mode_string_to_int"
              c:identifier="nm_utils_bond_mode_string_to_int"
              version="1.2">
      <doc xml:space="preserve"
           filename="libnm-core/nm-utils.c"
           line="4945">Convert bonding mode from string representation to numeric value.
See https://www.kernel.org/doc/Documentation/networking/bonding.txt for
available modes.
The @mode string can be either a descriptive name or a number (as string).</doc>
      <source-position filename="libnm-core/nm-utils.h" line="208"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-utils.c"
             line="4954">numeric bond mode, or -1 on error</doc>
        <type name="gint" c:type="int"/>
      </return-value>
      <parameters>
        <parameter name="mode" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-utils.c"
               line="4947">bonding mode as string</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="utils_check_virtual_device_compatibility"
              c:identifier="nm_utils_check_virtual_device_compatibility">
      <doc xml:space="preserve"
           filename="libnm-core/nm-utils.c"
           line="4850">Determines if a connection of type @virtual_type can (in the
general case) work with connections of type @other_type.

If @virtual_type is %NM_TYPE_SETTING_VLAN, then this checks if
@other_type is a valid type for the parent of a VLAN.

If @virtual_type is a "master" type (eg, %NM_TYPE_SETTING_BRIDGE),
then this checks if @other_type is a valid type for a slave of that
master.

Note that even if this returns %TRUE it is not guaranteed that
&lt;emphasis&gt;every&lt;/emphasis&gt; connection of type @other_type is
compatible with @virtual_type; it may depend on the exact
configuration of the two connections, or on the capabilities of an
underlying device driver.</doc>
      <source-position filename="libnm-core/nm-utils.h" line="205"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-utils.c"
             line="4871">%TRUE or %FALSE</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="virtual_type" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-utils.c"
               line="4852">a virtual connection type</doc>
          <type name="GType" c:type="GType"/>
        </parameter>
        <parameter name="other_type" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-utils.c"
               line="4853">a connection type to test against @virtual_type</doc>
          <type name="GType" c:type="GType"/>
        </parameter>
      </parameters>
    </function>
    <function name="utils_enum_from_str"
              c:identifier="nm_utils_enum_from_str"
              version="1.2">
      <doc xml:space="preserve"
           filename="libnm-core/nm-utils.c"
           line="5221">Converts a string to the matching enum value.

If the enum is a %G_TYPE_FLAGS the function returns the logical OR of values
matching the comma-separated tokens in the string; if an unknown token is found
the function returns %FALSE and stores a pointer to a newly allocated string
containing the unrecognized token in @err_token.</doc>
      <source-position filename="libnm-core/nm-utils.h" line="216"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-utils.c"
             line="5235">%TRUE if the conversion was successful, %FALSE otherwise</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="type" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-utils.c"
               line="5223">the %GType of the enum</doc>
          <type name="GType" c:type="GType"/>
        </parameter>
        <parameter name="str" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-utils.c"
               line="5224">the input string</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="out_value"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full"
                   optional="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="libnm-core/nm-utils.c"
               line="5225">the output value</doc>
          <type name="gint" c:type="int*"/>
        </parameter>
        <parameter name="err_token"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full"
                   optional="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="libnm-core/nm-utils.c"
               line="5226">location to store the first unrecognized token</doc>
          <type name="utf8" c:type="char**"/>
        </parameter>
      </parameters>
    </function>
    <function name="utils_enum_get_values"
              c:identifier="nm_utils_enum_get_values"
              version="1.2">
      <doc xml:space="preserve"
           filename="libnm-core/nm-utils.c"
           line="5246">Returns the list of possible values for a given enum.</doc>
      <source-position filename="libnm-core/nm-utils.h" line="219"/>
      <return-value transfer-ownership="container">
        <doc xml:space="preserve"
             filename="libnm-core/nm-utils.c"
             line="5254">a NULL-terminated dynamically-allocated array of static strings
or %NULL on error</doc>
        <array c:type="const char**">
          <type name="utf8"/>
        </array>
      </return-value>
      <parameters>
        <parameter name="type" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-utils.c"
               line="5248">the %GType of the enum</doc>
          <type name="GType" c:type="GType"/>
        </parameter>
        <parameter name="from" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-utils.c"
               line="5249">the first element to be returned</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="to" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-utils.c"
               line="5250">the last element to be returned</doc>
          <type name="gint" c:type="int"/>
        </parameter>
      </parameters>
    </function>
    <function name="utils_enum_to_str"
              c:identifier="nm_utils_enum_to_str"
              version="1.2">
      <doc xml:space="preserve"
           filename="libnm-core/nm-utils.c"
           line="5200">Converts an enum value to its string representation. If the enum is a
%G_TYPE_FLAGS the function returns a comma-separated list of matching values.
If the value has no corresponding string representation, it is converted
to a number. For enums it is converted to a decimal number, for flags
to an (unsigned) hex number.</doc>
      <source-position filename="libnm-core/nm-utils.h" line="213"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="libnm-core/nm-utils.c"
             line="5211">a newly allocated string or %NULL</doc>
        <type name="utf8" c:type="char*"/>
      </return-value>
      <parameters>
        <parameter name="type" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-utils.c"
               line="5202">the %GType of the enum</doc>
          <type name="GType" c:type="GType"/>
        </parameter>
        <parameter name="value" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-utils.c"
               line="5203">the value to be translated</doc>
          <type name="gint" c:type="int"/>
        </parameter>
      </parameters>
    </function>
    <function name="utils_escape_ssid" c:identifier="nm_utils_escape_ssid">
      <doc xml:space="preserve"
           filename="libnm-core/nm-utils.c"
           line="663">This function does a quick printable character conversion of the SSID, simply
replacing embedded NULLs and non-printable characters with the hexadecimal
representation of that character.  Intended for debugging only, should not
be used for display of SSIDs.</doc>
      <source-position filename="libnm-core/nm-utils.h" line="49"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-utils.c"
             line="673">pointer to the escaped SSID, which uses an internal static buffer
and will be overwritten by subsequent calls to this function</doc>
        <type name="utf8" c:type="const char*"/>
      </return-value>
      <parameters>
        <parameter name="ssid" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-utils.c"
               line="665">pointer to a buffer containing the SSID data</doc>
          <array length="1" zero-terminated="0" c:type="const guint8*">
            <type name="guint8" c:type="guint8"/>
          </array>
        </parameter>
        <parameter name="len" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-utils.c"
               line="666">length of the SSID data in @ssid</doc>
          <type name="gsize" c:type="gsize"/>
        </parameter>
      </parameters>
    </function>
    <function name="utils_file_is_certificate"
              c:identifier="nm_utils_file_is_certificate">
      <doc xml:space="preserve"
           filename="libnm-core/nm-utils.c"
           line="3293">Tests if @filename has a valid extension for an X.509 certificate file
(".cer", ".crt", ".der", or ".pem"), and contains a certificate in a format
recognized by NetworkManager.</doc>
      <source-position filename="libnm-core/nm-utils.h" line="133"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-utils.c"
             line="3301">%TRUE if the file is a certificate, %FALSE if it is not</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="filename" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-utils.c"
               line="3295">name of the file to test</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="utils_file_is_pkcs12"
              c:identifier="nm_utils_file_is_pkcs12">
      <doc xml:space="preserve"
           filename="libnm-core/nm-utils.c"
           line="3344">Tests if @filename is a PKCS#&lt;!-- --&gt;12 file.</doc>
      <source-position filename="libnm-core/nm-utils.h" line="135"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-utils.c"
             line="3350">%TRUE if the file is PKCS#&lt;!-- --&gt;12, %FALSE if it is not</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="filename" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-utils.c"
               line="3346">name of the file to test</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="utils_file_is_private_key"
              c:identifier="nm_utils_file_is_private_key">
      <doc xml:space="preserve"
           filename="libnm-core/nm-utils.c"
           line="3319">Tests if @filename has a valid extension for an X.509 private key file
(".der", ".key", ".pem", or ".p12"), and contains a private key in a format
recognized by NetworkManager.</doc>
      <source-position filename="libnm-core/nm-utils.h" line="134"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-utils.c"
             line="3328">%TRUE if the file is a private key, %FALSE if it is not</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="filename" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-utils.c"
               line="3321">name of the file to test</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="out_encrypted"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libnm-core/nm-utils.c"
               line="3322">on return, whether the file is encrypted</doc>
          <type name="gboolean" c:type="gboolean*"/>
        </parameter>
      </parameters>
    </function>
    <function name="utils_file_search_in_paths"
              c:identifier="nm_utils_file_search_in_paths"
              throws="1">
      <doc xml:space="preserve"
           filename="libnm-core/nm-utils.c"
           line="3487">Searches for a @progname file in a list of search @paths.</doc>
      <source-position filename="libnm-core/nm-utils.h" line="143"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-utils.c"
             line="3505">the full path to the helper, if found, or %NULL if not found.
  The returned string is not owned by the caller, but later
  invocations of the function might overwrite it.</doc>
        <type name="utf8" c:type="const char*"/>
      </return-value>
      <parameters>
        <parameter name="progname" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-utils.c"
               line="3489">the helper program name, like "iptables"
  Must be a non-empty string, without path separator (/).</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="try_first"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="libnm-core/nm-utils.c"
               line="3491">a custom path to try first before searching.
  It is silently ignored if it is empty or not an absolute path.</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="paths"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="libnm-core/nm-utils.c"
               line="3493">a %NULL terminated list of search paths.
  Can be empty or %NULL, in which case only @try_first is checked.</doc>
          <type name="utf8" c:type="const char* const*"/>
        </parameter>
        <parameter name="file_test_flags" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-utils.c"
               line="3495">the flags passed to g_file_test() when searching
  for @progname. Set it to 0 to skip the g_file_test().</doc>
          <type name="GLib.FileTest" c:type="GFileTest"/>
        </parameter>
        <parameter name="predicate"
                   transfer-ownership="none"
                   scope="call"
                   closure="5">
          <doc xml:space="preserve"
               filename="libnm-core/nm-utils.c"
               line="3497">if given, pass the file name to this function
  for additional checks. This check is performed after the check for
  @file_test_flags. You cannot omit both @file_test_flags and @predicate.</doc>
          <type name="UtilsFileSearchInPathsPredicate"
                c:type="NMUtilsFileSearchInPathsPredicate"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="libnm-core/nm-utils.c"
               line="3500">(allow-none): user data for @predicate function.</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="utils_format_variant_attributes"
              c:identifier="nm_utils_format_variant_attributes">
      <source-position filename="libnm-core/nm-utils.h" line="233"/>
      <return-value transfer-ownership="full">
        <type name="utf8" c:type="char*"/>
      </return-value>
      <parameters>
        <parameter name="attributes" transfer-ownership="none">
          <type name="GLib.HashTable" c:type="GHashTable*">
            <type name="gpointer" c:type="gpointer"/>
            <type name="gpointer" c:type="gpointer"/>
          </type>
        </parameter>
        <parameter name="attr_separator" transfer-ownership="none">
          <type name="gchar" c:type="char"/>
        </parameter>
        <parameter name="key_value_separator" transfer-ownership="none">
          <type name="gchar" c:type="char"/>
        </parameter>
      </parameters>
    </function>
    <function name="utils_get_timestamp_msec"
              c:identifier="nm_utils_get_timestamp_msec">
      <source-position filename="libnm-core/nm-utils.h" line="264"/>
      <return-value transfer-ownership="none">
        <type name="gint64" c:type="gint64"/>
      </return-value>
    </function>
    <function name="utils_hexstr2bin" c:identifier="nm_utils_hexstr2bin">
      <doc xml:space="preserve"
           filename="libnm-core/nm-utils.c"
           line="3877">Converts a hexadecimal string @hex into an array of bytes.  The optional
separator ':' may be used between single or pairs of hexadecimal characters,
eg "00:11" or "0:1".  Any "0x" at the beginning of @hex is ignored.  @hex
may not start or end with ':'.</doc>
      <source-position filename="libnm-core/nm-utils.h" line="184"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="libnm-core/nm-utils.c"
             line="3886">the converted bytes, or %NULL on error</doc>
        <type name="GLib.Bytes" c:type="GBytes*"/>
      </return-value>
      <parameters>
        <parameter name="hex" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-utils.c"
               line="3879">a string of hexadecimal characters with optional ':' separators</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="utils_hwaddr_atoba" c:identifier="nm_utils_hwaddr_atoba">
      <doc xml:space="preserve"
           filename="libnm-core/nm-utils.c"
           line="3903">Parses @asc and converts it to binary form in a #GByteArray. See
nm_utils_hwaddr_aton() if you don't want a #GByteArray.</doc>
      <source-position filename="libnm-core/nm-utils.h" line="173"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="libnm-core/nm-utils.c"
             line="3911">a new #GByteArray, or %NULL if @asc couldn't
be parsed</doc>
        <array name="GLib.ByteArray" c:type="GByteArray*">
          <type name="guint8" c:type="guint8"/>
        </array>
      </return-value>
      <parameters>
        <parameter name="asc" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-utils.c"
               line="3905">the ASCII representation of a hardware address</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="length" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-utils.c"
               line="3906">the expected length in bytes of the result</doc>
          <type name="gsize" c:type="gsize"/>
        </parameter>
      </parameters>
    </function>
    <function name="utils_hwaddr_aton" c:identifier="nm_utils_hwaddr_aton">
      <doc xml:space="preserve"
           filename="libnm-core/nm-utils.c"
           line="3966">Parses @asc and converts it to binary form in @buffer.
Bytes in @asc can be sepatared by colons (:), or hyphens (-), but not mixed.</doc>
      <source-position filename="libnm-core/nm-utils.h" line="174"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-utils.c"
             line="3976">@buffer, or %NULL if @asc couldn't be parsed
  or would be shorter or longer than @length.</doc>
        <type name="guint8" c:type="guint8*"/>
      </return-value>
      <parameters>
        <parameter name="asc" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-utils.c"
               line="3968">the ASCII representation of a hardware address</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="buffer" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-utils.c"
               line="3969">buffer to store the result into</doc>
          <array length="2" zero-terminated="0" c:type="gpointer">
            <type name="guint8" c:type="gpointer"/>
          </array>
        </parameter>
        <parameter name="length" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-utils.c"
               line="3970">the expected length in bytes of the result and
the size of the buffer in bytes.</doc>
          <type name="gsize" c:type="gsize"/>
        </parameter>
      </parameters>
    </function>
    <function name="utils_hwaddr_canonical"
              c:identifier="nm_utils_hwaddr_canonical">
      <doc xml:space="preserve"
           filename="libnm-core/nm-utils.c"
           line="4092">Parses @asc to see if it is a valid hardware address of the given
length, and if so, returns it in canonical form (uppercase, with
leading 0s as needed, and with colons rather than hyphens).</doc>
      <source-position filename="libnm-core/nm-utils.h" line="177"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="libnm-core/nm-utils.c"
             line="4102">the canonicalized address if @asc appears to
  be a valid hardware address of the indicated length, %NULL if not.</doc>
        <type name="utf8" c:type="char*"/>
      </return-value>
      <parameters>
        <parameter name="asc" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-utils.c"
               line="4094">the ASCII representation of a hardware address</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="length" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-utils.c"
               line="4095">the length of address that @asc is expected to convert to
  (or -1 to accept any length up to %NM_UTILS_HWADDR_LEN_MAX)</doc>
          <type name="gssize" c:type="gssize"/>
        </parameter>
      </parameters>
    </function>
    <function name="utils_hwaddr_len" c:identifier="nm_utils_hwaddr_len">
      <doc xml:space="preserve"
           filename="libnm-core/nm-utils.c"
           line="3854">Returns the length in octets of a hardware address of type @type.

It is an error to call this function with any value other than
&lt;literal&gt;ARPHRD_ETHER&lt;/literal&gt; or &lt;literal&gt;ARPHRD_INFINIBAND&lt;/literal&gt;.</doc>
      <source-position filename="libnm-core/nm-utils.h" line="170"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-utils.c"
             line="3864">the length.</doc>
        <type name="gsize" c:type="gsize"/>
      </return-value>
      <parameters>
        <parameter name="type" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-utils.c"
               line="3856">the type of address; either &lt;literal&gt;ARPHRD_ETHER&lt;/literal&gt; or
&lt;literal&gt;ARPHRD_INFINIBAND&lt;/literal&gt;</doc>
          <type name="gint" c:type="int"/>
        </parameter>
      </parameters>
    </function>
    <function name="utils_hwaddr_matches"
              c:identifier="nm_utils_hwaddr_matches">
      <doc xml:space="preserve"
           filename="libnm-core/nm-utils.c"
           line="4148">Generalized hardware address comparison function. Tests if @hwaddr1 and
@hwaddr2 "equal" (or more precisely, "equivalent"), with several advantages
over a simple memcmp():

  1. If @hwaddr1_len or @hwaddr2_len is -1, then the corresponding address is
     assumed to be ASCII rather than binary, and will be converted to binary
     before being compared.

  2. If @hwaddr1 or @hwaddr2 is %NULL, it is treated instead as though it was
     a zero-filled buffer @hwaddr1_len or @hwaddr2_len bytes long.

  3. If @hwaddr1 and @hwaddr2 are InfiniBand hardware addresses (that is, if
     they are &lt;literal&gt;INFINIBAND_ALEN&lt;/literal&gt; bytes long in binary form)
     then only the last 8 bytes are compared, since those are the only bytes
     that actually identify the hardware. (The other 12 bytes will change
     depending on the configuration of the InfiniBand fabric that the device
     is connected to.)

If a passed-in ASCII hardware address cannot be parsed, or would parse to an
address larger than %NM_UTILS_HWADDR_LEN_MAX, then it will silently fail to
match. (This means that externally-provided address strings do not need to be
sanity-checked before comparing them against known good addresses; they are
guaranteed to not match if they are invalid.)</doc>
      <source-position filename="libnm-core/nm-utils.h" line="178"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-utils.c"
             line="4179">%TRUE if @hwaddr1 and @hwaddr2 are equivalent, %FALSE if they are
  different (or either of them is invalid).</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="hwaddr1"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="libnm-core/nm-utils.c"
               line="4150">pointer to a binary or ASCII hardware address, or %NULL</doc>
          <type name="gpointer" c:type="gconstpointer"/>
        </parameter>
        <parameter name="hwaddr1_len" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-utils.c"
               line="4151">size of @hwaddr1, or -1 if @hwaddr1 is ASCII</doc>
          <type name="gssize" c:type="gssize"/>
        </parameter>
        <parameter name="hwaddr2"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="libnm-core/nm-utils.c"
               line="4152">pointer to a binary or ASCII hardware address, or %NULL</doc>
          <type name="gpointer" c:type="gconstpointer"/>
        </parameter>
        <parameter name="hwaddr2_len" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-utils.c"
               line="4153">size of @hwaddr2, or -1 if @hwaddr2 is ASCII</doc>
          <type name="gssize" c:type="gssize"/>
        </parameter>
      </parameters>
    </function>
    <function name="utils_hwaddr_ntoa" c:identifier="nm_utils_hwaddr_ntoa">
      <doc xml:space="preserve"
           filename="libnm-core/nm-utils.c"
           line="4030">Converts @addr to textual form.</doc>
      <source-position filename="libnm-core/nm-utils.h" line="172"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="libnm-core/nm-utils.c"
             line="4037">the textual form of @addr</doc>
        <type name="utf8" c:type="char*"/>
      </return-value>
      <parameters>
        <parameter name="addr" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-utils.c"
               line="4032">a binary hardware address</doc>
          <array length="1" zero-terminated="0" c:type="gconstpointer">
            <type name="guint8" c:type="gconstpointer"/>
          </array>
        </parameter>
        <parameter name="length" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-utils.c"
               line="4033">the length of @addr</doc>
          <type name="gsize" c:type="gsize"/>
        </parameter>
      </parameters>
    </function>
    <function name="utils_hwaddr_valid" c:identifier="nm_utils_hwaddr_valid">
      <doc xml:space="preserve"
           filename="libnm-core/nm-utils.c"
           line="4060">Parses @asc to see if it is a valid hardware address of the given
length.</doc>
      <source-position filename="libnm-core/nm-utils.h" line="176"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-utils.c"
             line="4069">%TRUE if @asc appears to be a valid hardware address
  of the indicated length, %FALSE if not.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="asc" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-utils.c"
               line="4062">the ASCII representation of a hardware address</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="length" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-utils.c"
               line="4063">the length of address that @asc is expected to convert to
  (or -1 to accept any length up to %NM_UTILS_HWADDR_LEN_MAX)</doc>
          <type name="gssize" c:type="gssize"/>
        </parameter>
      </parameters>
    </function>
    <function name="utils_iface_valid_name"
              c:identifier="nm_utils_iface_valid_name"
              deprecated="1"
              deprecated-version="1.6">
      <doc xml:space="preserve"
           filename="libnm-core/nm-utils.c"
           line="4620">Validate the network interface name.</doc>
      <doc-deprecated xml:space="preserve">use nm_utils_is_valid_iface_name() instead, with better error reporting.</doc-deprecated>
      <source-position filename="libnm-core/nm-utils.h" line="187"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-utils.c"
             line="4628">%TRUE if interface name is valid, otherwise %FALSE is returned.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-utils.c"
               line="4622">Name of interface</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="utils_inet4_ntop"
              c:identifier="nm_utils_inet4_ntop"
              introspectable="0">
      <doc xml:space="preserve"
           filename="libnm-core/nm-utils.c"
           line="4689">Wrapper for inet_ntop.</doc>
      <source-position filename="libnm-core/nm-utils.h" line="200"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-utils.c"
             line="4703">the input buffer @dst, or a pointer to an
 internal, static buffer. This function cannot fail.</doc>
        <type name="utf8" c:type="const char*"/>
      </return-value>
      <parameters>
        <parameter name="inaddr" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-utils.c"
               line="4691">the address that should be converted to string.</doc>
          <type c:type="in_addr_t"/>
        </parameter>
        <parameter name="dst" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-utils.c"
               line="4692">the destination buffer, it must contain at least
 &lt;literal&gt;INET_ADDRSTRLEN&lt;/literal&gt; or %NM_UTILS_INET_ADDRSTRLEN
 characters. If set to %NULL, it will return a pointer to an internal, static
 buffer (shared with nm_utils_inet6_ntop()).  Beware, that the internal
 buffer will be overwritten with ever new call of nm_utils_inet4_ntop() or
 nm_utils_inet6_ntop() that does not provide its own @dst buffer. Also,
 using the internal buffer is not thread safe. When in doubt, pass your own
 @dst buffer to avoid these issues.</doc>
          <type name="utf8" c:type="char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="utils_inet6_ntop"
              c:identifier="nm_utils_inet6_ntop"
              introspectable="0">
      <doc xml:space="preserve"
           filename="libnm-core/nm-utils.c"
           line="4718">Wrapper for inet_ntop.</doc>
      <source-position filename="libnm-core/nm-utils.h" line="201"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-utils.c"
             line="4732">the input buffer @dst, or a pointer to an
 internal, static buffer. %NULL is not allowed as @in6addr,
 otherwise, this function cannot fail.</doc>
        <type name="utf8" c:type="const char*"/>
      </return-value>
      <parameters>
        <parameter name="in6addr"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="libnm-core/nm-utils.c"
               line="4720">the address that should be converted to string.</doc>
          <type name="gpointer" c:type="const in6_addr*"/>
        </parameter>
        <parameter name="dst" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-utils.c"
               line="4721">the destination buffer, it must contain at least
 &lt;literal&gt;INET6_ADDRSTRLEN&lt;/literal&gt; or %NM_UTILS_INET_ADDRSTRLEN
 characters. If set to %NULL, it will return a pointer to an internal, static
 buffer (shared with nm_utils_inet4_ntop()).  Beware, that the internal
 buffer will be overwritten with ever new call of nm_utils_inet4_ntop() or
 nm_utils_inet6_ntop() that does not provide its own @dst buffer. Also,
 using the internal buffer is not thread safe. When in doubt, pass your own
 @dst buffer to avoid these issues.</doc>
          <type name="utf8" c:type="char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="utils_ip4_addresses_from_variant"
              c:identifier="nm_utils_ip4_addresses_from_variant">
      <doc xml:space="preserve"
           filename="libnm-core/nm-utils.c"
           line="1498">Utility function to convert a #GVariant of type 'aau' representing a list of
NetworkManager IPv4 addresses (which are tuples of address, prefix, and
gateway) into a #GPtrArray of #NMIPAddress objects. The "gateway" field of
the first address (if set) will be returned in @out_gateway; the "gateway" fields
of the other addresses are ignored.</doc>
      <source-position filename="libnm-core/nm-utils.h" line="106"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="libnm-core/nm-utils.c"
             line="1509">a newly allocated
  #GPtrArray of #NMIPAddress objects</doc>
        <array name="GLib.PtrArray" c:type="GPtrArray*">
          <type name="IPAddress"/>
        </array>
      </return-value>
      <parameters>
        <parameter name="value" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-utils.c"
               line="1500">a #GVariant of type 'aau'</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </parameter>
        <parameter name="out_gateway"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full"
                   optional="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="libnm-core/nm-utils.c"
               line="1501">on return, will contain the IP gateway</doc>
          <type name="utf8" c:type="char**"/>
        </parameter>
      </parameters>
    </function>
    <function name="utils_ip4_addresses_to_variant"
              c:identifier="nm_utils_ip4_addresses_to_variant">
      <doc xml:space="preserve"
           filename="libnm-core/nm-utils.c"
           line="1453">Utility function to convert a #GPtrArray of #NMIPAddress objects representing
IPv4 addresses into a #GVariant of type 'aau' representing an array of
NetworkManager IPv4 addresses (which are tuples of address, prefix, and
gateway). The "gateway" field of the first address will get the value of
@gateway (if non-%NULL). In all of the other addresses, that field will be 0.</doc>
      <source-position filename="libnm-core/nm-utils.h" line="104"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-utils.c"
             line="1464">a new floating #GVariant representing @addresses.</doc>
        <type name="GLib.Variant" c:type="GVariant*"/>
      </return-value>
      <parameters>
        <parameter name="addresses" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-utils.c"
               line="1455">an array of #NMIPAddress objects</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="IPAddress"/>
          </array>
        </parameter>
        <parameter name="gateway"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="libnm-core/nm-utils.c"
               line="1456">the gateway IP address</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="utils_ip4_dns_from_variant"
              c:identifier="nm_utils_ip4_dns_from_variant">
      <doc xml:space="preserve"
           filename="libnm-core/nm-utils.c"
           line="1424">Utility function to convert a #GVariant of type 'au' representing a list of
IPv4 addresses into an array of IP address strings.</doc>
      <source-position filename="libnm-core/nm-utils.h" line="103"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="libnm-core/nm-utils.c"
             line="1431">a %NULL-terminated array of IP address strings.</doc>
        <type name="utf8" c:type="char**"/>
      </return-value>
      <parameters>
        <parameter name="value" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-utils.c"
               line="1426">a #GVariant of type 'au'</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </parameter>
      </parameters>
    </function>
    <function name="utils_ip4_dns_to_variant"
              c:identifier="nm_utils_ip4_dns_to_variant">
      <doc xml:space="preserve"
           filename="libnm-core/nm-utils.c"
           line="1395">Utility function to convert an array of IP address strings int a #GVariant of
type 'au' representing an array of IPv4 addresses.</doc>
      <source-position filename="libnm-core/nm-utils.h" line="102"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-utils.c"
             line="1402">a new floating #GVariant representing @dns.</doc>
        <type name="GLib.Variant" c:type="GVariant*"/>
      </return-value>
      <parameters>
        <parameter name="dns" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-utils.c"
               line="1397">an array of IP address strings</doc>
          <type name="utf8" c:type="char**"/>
        </parameter>
      </parameters>
    </function>
    <function name="utils_ip4_get_default_prefix"
              c:identifier="nm_utils_ip4_get_default_prefix">
      <doc xml:space="preserve"
           filename="libnm-core/nm-utils.c"
           line="1684">When the Internet was originally set up, various ranges of IP addresses were
segmented into three network classes: A, B, and C.  This function will return
a prefix that is associated with the IP address specified defining where it
falls in the predefined classes.</doc>
      <source-position filename="libnm-core/nm-utils.h" line="113"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-utils.c"
             line="1693">the default class prefix for the given IP</doc>
        <type name="guint32" c:type="guint32"/>
      </return-value>
      <parameters>
        <parameter name="ip" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-utils.c"
               line="1686">an IPv4 address (in network byte order)</doc>
          <type name="guint32" c:type="guint32"/>
        </parameter>
      </parameters>
    </function>
    <function name="utils_ip4_netmask_to_prefix"
              c:identifier="nm_utils_ip4_netmask_to_prefix">
      <source-position filename="libnm-core/nm-utils.h" line="111"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-utils.c"
             line="1658">the CIDR prefix represented by the netmask</doc>
        <type name="guint32" c:type="guint32"/>
      </return-value>
      <parameters>
        <parameter name="netmask" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-utils.c"
               line="1656">an IPv4 netmask in network byte order</doc>
          <type name="guint32" c:type="guint32"/>
        </parameter>
      </parameters>
    </function>
    <function name="utils_ip4_prefix_to_netmask"
              c:identifier="nm_utils_ip4_prefix_to_netmask">
      <source-position filename="libnm-core/nm-utils.h" line="112"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-utils.c"
             line="1676">the netmask represented by the prefix, in network byte order</doc>
        <type name="guint32" c:type="guint32"/>
      </return-value>
      <parameters>
        <parameter name="prefix" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-utils.c"
               line="1674">a CIDR prefix</doc>
          <type name="guint32" c:type="guint32"/>
        </parameter>
      </parameters>
    </function>
    <function name="utils_ip4_routes_from_variant"
              c:identifier="nm_utils_ip4_routes_from_variant">
      <doc xml:space="preserve"
           filename="libnm-core/nm-utils.c"
           line="1599">Utility function to convert a #GVariant of type 'aau' representing an array
of NetworkManager IPv4 routes (which are tuples of route, prefix, next hop,
and metric) into a #GPtrArray of #NMIPRoute objects.</doc>
      <source-position filename="libnm-core/nm-utils.h" line="109"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="libnm-core/nm-utils.c"
             line="1607">a newly allocated
  #GPtrArray of #NMIPRoute objects</doc>
        <array name="GLib.PtrArray" c:type="GPtrArray*">
          <type name="IPRoute"/>
        </array>
      </return-value>
      <parameters>
        <parameter name="value" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-utils.c"
               line="1601">#GVariant of type 'aau'</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </parameter>
      </parameters>
    </function>
    <function name="utils_ip4_routes_to_variant"
              c:identifier="nm_utils_ip4_routes_to_variant">
      <doc xml:space="preserve"
           filename="libnm-core/nm-utils.c"
           line="1557">Utility function to convert a #GPtrArray of #NMIPRoute objects representing
IPv4 routes into a #GVariant of type 'aau' representing an array of
NetworkManager IPv4 routes (which are tuples of route, prefix, next hop, and
metric).</doc>
      <source-position filename="libnm-core/nm-utils.h" line="108"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-utils.c"
             line="1566">a new floating #GVariant representing @routes.</doc>
        <type name="GLib.Variant" c:type="GVariant*"/>
      </return-value>
      <parameters>
        <parameter name="routes" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-utils.c"
               line="1559">an array of #NMIP4Route objects</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="IPRoute"/>
          </array>
        </parameter>
      </parameters>
    </function>
    <function name="utils_ip6_addresses_from_variant"
              c:identifier="nm_utils_ip6_addresses_from_variant">
      <doc xml:space="preserve"
           filename="libnm-core/nm-utils.c"
           line="1825">Utility function to convert a #GVariant of type 'a(ayuay)' representing a
list of NetworkManager IPv6 addresses (which are tuples of address, prefix,
and gateway) into a #GPtrArray of #NMIPAddress objects. The "gateway" field
of the first address (if set) will be returned in @out_gateway; the "gateway"
fields of the other addresses are ignored.</doc>
      <source-position filename="libnm-core/nm-utils.h" line="119"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="libnm-core/nm-utils.c"
             line="1836">a newly allocated
  #GPtrArray of #NMIPAddress objects</doc>
        <array name="GLib.PtrArray" c:type="GPtrArray*">
          <type name="IPAddress"/>
        </array>
      </return-value>
      <parameters>
        <parameter name="value" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-utils.c"
               line="1827">a #GVariant of type 'a(ayuay)'</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </parameter>
        <parameter name="out_gateway"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full"
                   optional="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="libnm-core/nm-utils.c"
               line="1828">on return, will contain the IP gateway</doc>
          <type name="utf8" c:type="char**"/>
        </parameter>
      </parameters>
    </function>
    <function name="utils_ip6_addresses_to_variant"
              c:identifier="nm_utils_ip6_addresses_to_variant">
      <doc xml:space="preserve"
           filename="libnm-core/nm-utils.c"
           line="1775">Utility function to convert a #GPtrArray of #NMIPAddress objects representing
IPv6 addresses into a #GVariant of type 'a(ayuay)' representing an array of
NetworkManager IPv6 addresses (which are tuples of address, prefix, and
gateway).  The "gateway" field of the first address will get the value of
@gateway (if non-%NULL). In all of the other addresses, that field will be
all 0s.</doc>
      <source-position filename="libnm-core/nm-utils.h" line="117"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-utils.c"
             line="1787">a new floating #GVariant representing @addresses.</doc>
        <type name="GLib.Variant" c:type="GVariant*"/>
      </return-value>
      <parameters>
        <parameter name="addresses" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-utils.c"
               line="1777">an array of #NMIPAddress objects</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="IPAddress"/>
          </array>
        </parameter>
        <parameter name="gateway"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="libnm-core/nm-utils.c"
               line="1778">the gateway IP address</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="utils_ip6_dns_from_variant"
              c:identifier="nm_utils_ip6_dns_from_variant">
      <doc xml:space="preserve"
           filename="libnm-core/nm-utils.c"
           line="1733">Utility function to convert a #GVariant of type 'aay' representing a list of
IPv6 addresses into an array of IP address strings.</doc>
      <source-position filename="libnm-core/nm-utils.h" line="116"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="libnm-core/nm-utils.c"
             line="1740">a %NULL-terminated array of IP address strings.</doc>
        <type name="utf8" c:type="char**"/>
      </return-value>
      <parameters>
        <parameter name="value" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-utils.c"
               line="1735">a #GVariant of type 'aay'</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </parameter>
      </parameters>
    </function>
    <function name="utils_ip6_dns_to_variant"
              c:identifier="nm_utils_ip6_dns_to_variant">
      <doc xml:space="preserve"
           filename="libnm-core/nm-utils.c"
           line="1702">Utility function to convert an array of IP address strings int a #GVariant of
type 'aay' representing an array of IPv6 addresses.</doc>
      <source-position filename="libnm-core/nm-utils.h" line="115"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-utils.c"
             line="1709">a new floating #GVariant representing @dns.</doc>
        <type name="GLib.Variant" c:type="GVariant*"/>
      </return-value>
      <parameters>
        <parameter name="dns" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-utils.c"
               line="1704">an array of IP address strings</doc>
          <type name="utf8" c:type="char**"/>
        </parameter>
      </parameters>
    </function>
    <function name="utils_ip6_routes_from_variant"
              c:identifier="nm_utils_ip6_routes_from_variant">
      <doc xml:space="preserve"
           filename="libnm-core/nm-utils.c"
           line="1945">Utility function to convert a #GVariant of type 'a(ayuayu)' representing an
array of NetworkManager IPv6 routes (which are tuples of route, prefix, next
hop, and metric) into a #GPtrArray of #NMIPRoute objects.</doc>
      <source-position filename="libnm-core/nm-utils.h" line="122"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="libnm-core/nm-utils.c"
             line="1953">a newly allocated
  #GPtrArray of #NMIPRoute objects</doc>
        <array name="GLib.PtrArray" c:type="GPtrArray*">
          <type name="IPRoute"/>
        </array>
      </return-value>
      <parameters>
        <parameter name="value" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-utils.c"
               line="1947">#GVariant of type 'a(ayuayu)'</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </parameter>
      </parameters>
    </function>
    <function name="utils_ip6_routes_to_variant"
              c:identifier="nm_utils_ip6_routes_to_variant">
      <doc xml:space="preserve"
           filename="libnm-core/nm-utils.c"
           line="1901">Utility function to convert a #GPtrArray of #NMIPRoute objects representing
IPv6 routes into a #GVariant of type 'a(ayuayu)' representing an array of
NetworkManager IPv6 routes (which are tuples of route, prefix, next hop, and
metric).</doc>
      <source-position filename="libnm-core/nm-utils.h" line="121"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-utils.c"
             line="1910">a new floating #GVariant representing @routes.</doc>
        <type name="GLib.Variant" c:type="GVariant*"/>
      </return-value>
      <parameters>
        <parameter name="routes" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-utils.c"
               line="1903">an array of #NMIPRoute objects</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="IPRoute"/>
          </array>
        </parameter>
      </parameters>
    </function>
    <function name="utils_ip_addresses_from_variant"
              c:identifier="nm_utils_ip_addresses_from_variant">
      <doc xml:space="preserve"
           filename="libnm-core/nm-utils.c"
           line="2062">Utility function to convert a #GVariant representing a list of new-style
NetworkManager IPv4 or IPv6 addresses (as described in the documentation for
nm_utils_ip_addresses_to_variant()) into a #GPtrArray of #NMIPAddress
objects.</doc>
      <source-position filename="libnm-core/nm-utils.h" line="125"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="libnm-core/nm-utils.c"
             line="2072">a newly allocated
  #GPtrArray of #NMIPAddress objects</doc>
        <array name="GLib.PtrArray" c:type="GPtrArray*">
          <type name="IPAddress"/>
        </array>
      </return-value>
      <parameters>
        <parameter name="value" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-utils.c"
               line="2064">a #GVariant of type 'aa{sv}'</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </parameter>
        <parameter name="family" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-utils.c"
               line="2065">an IP address family</doc>
          <type name="gint" c:type="int"/>
        </parameter>
      </parameters>
    </function>
    <function name="utils_ip_addresses_to_variant"
              c:identifier="nm_utils_ip_addresses_to_variant">
      <doc xml:space="preserve"
           filename="libnm-core/nm-utils.c"
           line="2013">Utility function to convert a #GPtrArray of #NMIPAddress objects representing
IPv4 or IPv6 addresses into a #GVariant of type 'aa{sv}' representing an
array of new-style NetworkManager IP addresses. All addresses will include
"address" (an IP address string), and "prefix" (a uint). Some addresses may
include additional attributes.</doc>
      <source-position filename="libnm-core/nm-utils.h" line="124"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-utils.c"
             line="2023">a new floating #GVariant representing @addresses.</doc>
        <type name="GLib.Variant" c:type="GVariant*"/>
      </return-value>
      <parameters>
        <parameter name="addresses" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-utils.c"
               line="2015">an array of #NMIPAddress objects</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="IPAddress"/>
          </array>
        </parameter>
      </parameters>
    </function>
    <function name="utils_ip_routes_from_variant"
              c:identifier="nm_utils_ip_routes_from_variant">
      <doc xml:space="preserve"
           filename="libnm-core/nm-utils.c"
           line="2183">Utility function to convert a #GVariant representing a list of new-style
NetworkManager IPv4 or IPv6 addresses (which are tuples of destination,
prefix, next hop, metric, and additional attributes) into a #GPtrArray of
#NMIPRoute objects.</doc>
      <source-position filename="libnm-core/nm-utils.h" line="128"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="libnm-core/nm-utils.c"
             line="2193">a newly allocated
  #GPtrArray of #NMIPRoute objects</doc>
        <array name="GLib.PtrArray" c:type="GPtrArray*">
          <type name="IPRoute"/>
        </array>
      </return-value>
      <parameters>
        <parameter name="value" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-utils.c"
               line="2185">a #GVariant of type 'aa{sv}'</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </parameter>
        <parameter name="family" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-utils.c"
               line="2186">an IP address family</doc>
          <type name="gint" c:type="int"/>
        </parameter>
      </parameters>
    </function>
    <function name="utils_ip_routes_to_variant"
              c:identifier="nm_utils_ip_routes_to_variant">
      <doc xml:space="preserve"
           filename="libnm-core/nm-utils.c"
           line="2125">Utility function to convert a #GPtrArray of #NMIPRoute objects representing
IPv4 or IPv6 routes into a #GVariant of type 'aa{sv}' representing an array
of new-style NetworkManager IP routes (which are tuples of destination,
prefix, next hop, metric, and additional attributes).</doc>
      <source-position filename="libnm-core/nm-utils.h" line="127"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-utils.c"
             line="2134">a new floating #GVariant representing @routes.</doc>
        <type name="GLib.Variant" c:type="GVariant*"/>
      </return-value>
      <parameters>
        <parameter name="routes" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-utils.c"
               line="2127">an array of #NMIPRoute objects</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="IPRoute"/>
          </array>
        </parameter>
      </parameters>
    </function>
    <function name="utils_ipaddr_valid" c:identifier="nm_utils_ipaddr_valid">
      <doc xml:space="preserve"
           filename="libnm-core/nm-utils.c"
           line="4749">Checks if @ip contains a valid IP address of the given family.</doc>
      <source-position filename="libnm-core/nm-utils.h" line="203"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-utils.c"
             line="4757">%TRUE or %FALSE</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="family" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-utils.c"
               line="4751">&lt;literal&gt;AF_INET&lt;/literal&gt; or &lt;literal&gt;AF_INET6&lt;/literal&gt;, or
  &lt;literal&gt;AF_UNSPEC&lt;/literal&gt; to accept either</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="ip" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-utils.c"
               line="4753">an IP address</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="utils_is_empty_ssid" c:identifier="nm_utils_is_empty_ssid">
      <doc xml:space="preserve"
           filename="libnm-core/nm-utils.c"
           line="623">Different manufacturers use different mechanisms for not broadcasting the
AP's SSID.  This function attempts to detect blank/empty SSIDs using a
number of known SSID-cloaking methods.</doc>
      <source-position filename="libnm-core/nm-utils.h" line="48"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-utils.c"
             line="632">%TRUE if the SSID is "empty", %FALSE if it is not</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="ssid" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-utils.c"
               line="625">pointer to a buffer containing the SSID data</doc>
          <array length="1" zero-terminated="0" c:type="const guint8*">
            <type name="guint8" c:type="guint8"/>
          </array>
        </parameter>
        <parameter name="len" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-utils.c"
               line="626">length of the SSID data in @ssid</doc>
          <type name="gsize" c:type="gsize"/>
        </parameter>
      </parameters>
    </function>
    <function name="utils_is_json_object"
              c:identifier="nm_utils_is_json_object"
              version="1.6"
              throws="1">
      <source-position filename="libnm-core/nm-utils.h" line="100"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-utils.c"
             line="5727">whether the passed string is valid JSON.
  If libnm is not compiled with libjansson support, this check will
  also return %TRUE for possibly invalid inputs. If that is a problem
  for you, you must validate the JSON yourself.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="str" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-utils.c"
               line="5724">the JSON string to test</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="utils_is_uuid" c:identifier="nm_utils_is_uuid">
      <doc xml:space="preserve"
           filename="libnm-core/nm-utils.c"
           line="4636">Checks if @str is a UUID</doc>
      <source-position filename="libnm-core/nm-utils.h" line="191"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-utils.c"
             line="4642">%TRUE if @str is a UUID, %FALSE if not</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="str" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-utils.c"
               line="4638">a string that might be a UUID</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="utils_is_valid_iface_name"
              c:identifier="nm_utils_is_valid_iface_name"
              throws="1">
      <doc xml:space="preserve"
           filename="libnm-core/nm-utils.c"
           line="4568">Validate the network interface name.

This function is a 1:1 copy of the kernel's interface validation
function in net/core/dev.c.</doc>
      <source-position filename="libnm-core/nm-utils.h" line="189"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-utils.c"
             line="4578">%TRUE if interface name is valid, otherwise %FALSE is returned.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-utils.c"
               line="4570">Name of interface</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="utils_parse_variant_attributes"
              c:identifier="nm_utils_parse_variant_attributes"
              version="1.8"
              throws="1">
      <doc xml:space="preserve"
           filename="libnm-core/nm-utils.c"
           line="6364">Parse attributes from a string.</doc>
      <source-position filename="libnm-core/nm-utils.h" line="225"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="libnm-core/nm-utils.c"
             line="6375">a #GHashTable mapping
attribute names to #GVariant values. Warning: the variant are still floating
references, owned by the hash table. If you take a reference, ensure to sink
the one of the hash table first.</doc>
        <type name="GLib.HashTable" c:type="GHashTable*">
          <type name="utf8"/>
          <type name="GLib.Variant"/>
        </type>
      </return-value>
      <parameters>
        <parameter name="string" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-utils.c"
               line="6366">the input string</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="attr_separator" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-utils.c"
               line="6367">the attribute separator character</doc>
          <type name="gchar" c:type="char"/>
        </parameter>
        <parameter name="key_value_separator" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-utils.c"
               line="6368">character separating key and values</doc>
          <type name="gchar" c:type="char"/>
        </parameter>
        <parameter name="ignore_unknown" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-utils.c"
               line="6369">whether unknown attributes should be ignored</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
        <parameter name="spec" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-utils.c"
               line="6370">the attribute format specifiers</doc>
          <type name="VariantAttributeSpec"
                c:type="const NMVariantAttributeSpec* const*"/>
        </parameter>
      </parameters>
    </function>
    <function name="utils_same_ssid" c:identifier="nm_utils_same_ssid">
      <doc xml:space="preserve"
           filename="libnm-core/nm-utils.c"
           line="733">Earlier versions of the Linux kernel added a NULL byte to the end of the
SSID to enable easy printing of the SSID on the console or in a terminal,
but this behavior was problematic (SSIDs are simply byte arrays, not strings)
and thus was changed.  This function compensates for that behavior at the
cost of some compatibility with odd SSIDs that may legitimately have trailing
NULLs, even though that is functionally pointless.</doc>
      <source-position filename="libnm-core/nm-utils.h" line="50"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-utils.c"
             line="748">%TRUE if the SSIDs are the same, %FALSE if they are not</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="ssid1" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-utils.c"
               line="735">the first SSID to compare</doc>
          <array length="1" zero-terminated="0" c:type="const guint8*">
            <type name="guint8" c:type="guint8"/>
          </array>
        </parameter>
        <parameter name="len1" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-utils.c"
               line="736">length of the SSID data in @ssid1</doc>
          <type name="gsize" c:type="gsize"/>
        </parameter>
        <parameter name="ssid2" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-utils.c"
               line="737">the second SSID to compare</doc>
          <array length="3" zero-terminated="0" c:type="const guint8*">
            <type name="guint8" c:type="guint8"/>
          </array>
        </parameter>
        <parameter name="len2" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-utils.c"
               line="738">length of the SSID data in @ssid2</doc>
          <type name="gsize" c:type="gsize"/>
        </parameter>
        <parameter name="ignore_trailing_null" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-utils.c"
               line="739">%TRUE to ignore one trailing NULL byte</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="utils_security_valid"
              c:identifier="nm_utils_security_valid">
      <doc xml:space="preserve"
           filename="libnm-core/nm-utils.c"
           line="1144">Given a set of device capabilities, and a desired security type to check
against, determines whether the combination of device, desired security
type, and AP capabilities intersect.

NOTE: this function cannot handle checking security for AP/Hotspot mode;
use nm_utils_ap_mode_security_valid() instead.</doc>
      <source-position filename="libnm-core/nm-utils.h" line="85"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-utils.c"
             line="1165">%TRUE if the device capabilities and AP capabilities intersect and are
compatible with the desired @type, %FALSE if they are not</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="type" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-utils.c"
               line="1146">the security type to check AP flags and device capabilities against,
e.g. #NMU_SEC_STATIC_WEP</doc>
          <type name="UtilsSecurityType" c:type="NMUtilsSecurityType"/>
        </parameter>
        <parameter name="wifi_caps" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-utils.c"
               line="1148">bitfield of the capabilities of the specific Wi-Fi device, e.g.
#NM_WIFI_DEVICE_CAP_CIPHER_WEP40</doc>
          <type name="DeviceWifiCapabilities"
                c:type="NMDeviceWifiCapabilities"/>
        </parameter>
        <parameter name="have_ap" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-utils.c"
               line="1150">whether the @ap_flags, @ap_wpa, and @ap_rsn arguments are valid</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
        <parameter name="adhoc" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-utils.c"
               line="1151">whether the capabilities being tested are from an Ad-Hoc AP (IBSS)</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
        <parameter name="ap_flags" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-utils.c"
               line="1152">bitfield of AP capabilities, e.g. #NM_802_11_AP_FLAGS_PRIVACY</doc>
          <type name="80211ApFlags" c:type="NM80211ApFlags"/>
        </parameter>
        <parameter name="ap_wpa" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-utils.c"
               line="1153">bitfield of AP capabilities derived from the AP's WPA beacon,
e.g. (#NM_802_11_AP_SEC_PAIR_TKIP | #NM_802_11_AP_SEC_KEY_MGMT_PSK)</doc>
          <type name="80211ApSecurityFlags" c:type="NM80211ApSecurityFlags"/>
        </parameter>
        <parameter name="ap_rsn" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-utils.c"
               line="1155">bitfield of AP capabilities derived from the AP's RSN/WPA2 beacon,
e.g. (#NM_802_11_AP_SEC_PAIR_CCMP | #NM_802_11_AP_SEC_PAIR_TKIP)</doc>
          <type name="80211ApSecurityFlags" c:type="NM80211ApSecurityFlags"/>
        </parameter>
      </parameters>
    </function>
    <function name="utils_sriov_vf_from_str"
              c:identifier="nm_utils_sriov_vf_from_str"
              version="1.14"
              throws="1">
      <doc xml:space="preserve"
           filename="libnm-core/nm-utils.c"
           line="2964">Converts a string to a SR-IOV virtual function object.</doc>
      <source-position filename="libnm-core/nm-utils.h" line="259"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="libnm-core/nm-utils.c"
             line="2971">the virtual function object</doc>
        <type name="SriovVF" c:type="NMSriovVF*"/>
      </return-value>
      <parameters>
        <parameter name="str" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-utils.c"
               line="2966">the input string</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="utils_sriov_vf_to_str"
              c:identifier="nm_utils_sriov_vf_to_str"
              version="1.14"
              throws="1">
      <doc xml:space="preserve"
           filename="libnm-core/nm-utils.c"
           line="2801">Converts a SR-IOV virtual function object to its string representation.</doc>
      <source-position filename="libnm-core/nm-utils.h" line="257"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="libnm-core/nm-utils.c"
             line="2809">a newly allocated string or %NULL on error</doc>
        <type name="utf8" c:type="char*"/>
      </return-value>
      <parameters>
        <parameter name="vf" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-utils.c"
               line="2803">the %NMSriovVF</doc>
          <type name="SriovVF" c:type="const NMSriovVF*"/>
        </parameter>
        <parameter name="omit_index" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-utils.c"
               line="2804">if %TRUE, the VF index will be omitted from output string</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="utils_ssid_to_utf8" c:identifier="nm_utils_ssid_to_utf8">
      <doc xml:space="preserve"
           filename="libnm-core/nm-utils.c"
           line="535">Wi-Fi SSIDs are byte arrays, they are _not_ strings.  Thus, an SSID may
contain embedded NULLs and other unprintable characters.  Often it is
useful to print the SSID out for debugging purposes, but that should be the
_only_ use of this function.  Do not use this function for any persistent
storage of the SSID, since the printable SSID returned from this function
cannot be converted back into the real SSID of the access point.

This function does almost everything humanly possible to convert the input
into a printable UTF-8 string, using roughly the following procedure:

1) if the input data is already UTF-8 safe, no conversion is performed
2) attempts to get the current system language from the LANG environment
   variable, and depending on the language, uses a table of alternative
   encodings to try.  For example, if LANG=hu_HU, the table may first try
   the ISO-8859-2 encoding, and if that fails, try the Windows-1250 encoding.
   If all fallback encodings fail, replaces non-UTF-8 characters with '?'.
3) If the system language was unable to be determined, falls back to the
   ISO-8859-1 encoding, then to the Windows-1251 encoding.
4) If step 3 fails, replaces non-UTF-8 characters with '?'.

Again, this function should be used for debugging and display purposes
_only_.</doc>
      <source-position filename="libnm-core/nm-utils.h" line="53"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="libnm-core/nm-utils.c"
             line="563">an allocated string containing a UTF-8
representation of the SSID, which must be freed by the caller using g_free().
Returns %NULL on errors.</doc>
        <type name="utf8" c:type="char*"/>
      </return-value>
      <parameters>
        <parameter name="ssid" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-utils.c"
               line="537">pointer to a buffer containing the SSID data</doc>
          <array length="1" zero-terminated="0" c:type="const guint8*">
            <type name="guint8" c:type="guint8"/>
          </array>
        </parameter>
        <parameter name="len" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-utils.c"
               line="538">length of the SSID data in @ssid</doc>
          <type name="gsize" c:type="gsize"/>
        </parameter>
      </parameters>
    </function>
    <function name="utils_tc_action_from_str"
              c:identifier="nm_utils_tc_action_from_str"
              version="1.12"
              throws="1">
      <doc xml:space="preserve"
           filename="libnm-core/nm-utils.c"
           line="2576">Parces the tc style string action representation of the queueing
discipline to a %NMTCAction instance. Supports a subset of the tc language.</doc>
      <source-position filename="libnm-core/nm-utils.h" line="245"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="libnm-core/nm-utils.c"
             line="2584">the %NMTCAction or %NULL</doc>
        <type name="TCAction" c:type="NMTCAction*"/>
      </return-value>
      <parameters>
        <parameter name="str" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-utils.c"
               line="2578">the string representation of a action</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="utils_tc_action_to_str"
              c:identifier="nm_utils_tc_action_to_str"
              version="1.12"
              throws="1">
      <doc xml:space="preserve"
           filename="libnm-core/nm-utils.c"
           line="2550">Turns the %NMTCAction into a tc style string representation of the queueing
discipline.</doc>
      <source-position filename="libnm-core/nm-utils.h" line="247"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="libnm-core/nm-utils.c"
             line="2558">formatted string or %NULL</doc>
        <type name="utf8" c:type="char*"/>
      </return-value>
      <parameters>
        <parameter name="action" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-utils.c"
               line="2552">the %NMTCAction</doc>
          <type name="TCAction" c:type="NMTCAction*"/>
        </parameter>
      </parameters>
    </function>
    <function name="utils_tc_qdisc_from_str"
              c:identifier="nm_utils_tc_qdisc_from_str"
              version="1.12"
              throws="1">
      <doc xml:space="preserve"
           filename="libnm-core/nm-utils.c"
           line="2461">Parces the tc style string qdisc representation of the queueing
discipline to a %NMTCQdisc instance. Supports a subset of the tc language.</doc>
      <source-position filename="libnm-core/nm-utils.h" line="240"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="libnm-core/nm-utils.c"
             line="2469">the %NMTCQdisc or %NULL</doc>
        <type name="TCQdisc" c:type="NMTCQdisc*"/>
      </return-value>
      <parameters>
        <parameter name="str" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-utils.c"
               line="2463">the string representation of a qdisc</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="utils_tc_qdisc_to_str"
              c:identifier="nm_utils_tc_qdisc_to_str"
              version="1.12"
              throws="1">
      <doc xml:space="preserve"
           filename="libnm-core/nm-utils.c"
           line="2361">Turns the %NMTCQdisc into a tc style string representation of the queueing
discipline.</doc>
      <source-position filename="libnm-core/nm-utils.h" line="242"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="libnm-core/nm-utils.c"
             line="2369">formatted string or %NULL</doc>
        <type name="utf8" c:type="char*"/>
      </return-value>
      <parameters>
        <parameter name="qdisc" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-utils.c"
               line="2363">the %NMTCQdisc</doc>
          <type name="TCQdisc" c:type="NMTCQdisc*"/>
        </parameter>
      </parameters>
    </function>
    <function name="utils_tc_tfilter_from_str"
              c:identifier="nm_utils_tc_tfilter_from_str"
              version="1.12"
              throws="1">
      <doc xml:space="preserve"
           filename="libnm-core/nm-utils.c"
           line="2729">Parces the tc style string tfilter representation of the queueing
discipline to a %NMTCTfilter instance. Supports a subset of the tc language.</doc>
      <source-position filename="libnm-core/nm-utils.h" line="250"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="libnm-core/nm-utils.c"
             line="2737">the %NMTCTfilter or %NULL</doc>
        <type name="TCTfilter" c:type="NMTCTfilter*"/>
      </return-value>
      <parameters>
        <parameter name="str" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-utils.c"
               line="2731">the string representation of a tfilter</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="utils_tc_tfilter_to_str"
              c:identifier="nm_utils_tc_tfilter_to_str"
              version="1.12"
              throws="1">
      <doc xml:space="preserve"
           filename="libnm-core/nm-utils.c"
           line="2694">Turns the %NMTCTfilter into a tc style string representation of the queueing
discipline.</doc>
      <source-position filename="libnm-core/nm-utils.h" line="252"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="libnm-core/nm-utils.c"
             line="2702">formatted string or %NULL</doc>
        <type name="utf8" c:type="char*"/>
      </return-value>
      <parameters>
        <parameter name="tfilter" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-utils.c"
               line="2696">the %NMTCTfilter</doc>
          <type name="TCTfilter" c:type="NMTCTfilter*"/>
        </parameter>
      </parameters>
    </function>
    <function name="utils_uuid_generate" c:identifier="nm_utils_uuid_generate">
      <source-position filename="libnm-core/nm-utils.h" line="131"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="libnm-core/nm-utils.c"
             line="3121">a newly allocated UUID suitable for use as the #NMSettingConnection
object's #NMSettingConnection:id: property.  Should be freed with g_free()</doc>
        <type name="utf8" c:type="char*"/>
      </return-value>
    </function>
    <function name="utils_version"
              c:identifier="nm_utils_version"
              version="1.6.0">
      <source-position filename="libnm-core/nm-utils.h" line="222"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-utils.c"
             line="6662">the version ID of the libnm version. That is, the %NM_VERSION
  at runtime.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
    </function>
    <function name="utils_wep_key_valid" c:identifier="nm_utils_wep_key_valid">
      <doc xml:space="preserve"
           filename="libnm-core/nm-utils.c"
           line="1318">Checks if @key is a valid WEP key</doc>
      <source-position filename="libnm-core/nm-utils.h" line="96"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-utils.c"
             line="1325">%TRUE if @key is a WEP key, %FALSE if not</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="key" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-utils.c"
               line="1320">a string that might be a WEP key</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="wep_type" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-utils.c"
               line="1321">the #NMWepKeyType type of the WEP key</doc>
          <type name="WepKeyType" c:type="NMWepKeyType"/>
        </parameter>
      </parameters>
    </function>
    <function name="utils_wifi_2ghz_freqs"
              c:identifier="nm_utils_wifi_2ghz_freqs"
              version="1.2">
      <doc xml:space="preserve"
           filename="libnm-core/nm-utils.c"
           line="3795">Utility function to return 2.4 GHz Wi-Fi frequencies (802.11bg band).</doc>
      <source-position filename="libnm-core/nm-utils.h" line="156"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-utils.c"
             line="3800">zero-terminated array of frequencies numbers (in MHz)</doc>
        <type name="guint" c:type="const guint*"/>
      </return-value>
    </function>
    <function name="utils_wifi_5ghz_freqs"
              c:identifier="nm_utils_wifi_5ghz_freqs"
              version="1.2">
      <doc xml:space="preserve"
           filename="libnm-core/nm-utils.c"
           line="3810">Utility function to return 5 GHz Wi-Fi frequencies (802.11a band).</doc>
      <source-position filename="libnm-core/nm-utils.h" line="158"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-utils.c"
             line="3815">zero-terminated array of frequencies numbers (in MHz)</doc>
        <type name="guint" c:type="const guint*"/>
      </return-value>
    </function>
    <function name="utils_wifi_channel_to_freq"
              c:identifier="nm_utils_wifi_channel_to_freq">
      <doc xml:space="preserve"
           filename="libnm-core/nm-utils.c"
           line="3662">Utility function to translate a Wi-Fi channel to its corresponding frequency.</doc>
      <source-position filename="libnm-core/nm-utils.h" line="152"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-utils.c"
             line="3669">the frequency represented by the channel of the band,
         or -1 when the freq is invalid, or 0 when the band
         is invalid</doc>
        <type name="guint32" c:type="guint32"/>
      </return-value>
      <parameters>
        <parameter name="channel" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-utils.c"
               line="3664">channel</doc>
          <type name="guint32" c:type="guint32"/>
        </parameter>
        <parameter name="band" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-utils.c"
               line="3665">frequency band for wireless ("a" or "bg")</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="utils_wifi_find_next_channel"
              c:identifier="nm_utils_wifi_find_next_channel">
      <doc xml:space="preserve"
           filename="libnm-core/nm-utils.c"
           line="3691">Utility function to find out next/previous Wi-Fi channel for a channel.</doc>
      <source-position filename="libnm-core/nm-utils.h" line="153"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-utils.c"
             line="3699">the next channel in the specified direction or 0</doc>
        <type name="guint32" c:type="guint32"/>
      </return-value>
      <parameters>
        <parameter name="channel" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-utils.c"
               line="3693">current channel</doc>
          <type name="guint32" c:type="guint32"/>
        </parameter>
        <parameter name="direction" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-utils.c"
               line="3694">whether going downward (0 or less) or upward (1 or more)</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="band" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-utils.c"
               line="3695">frequency band for wireless ("a" or "bg")</doc>
          <type name="utf8" c:type="char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="utils_wifi_freq_to_channel"
              c:identifier="nm_utils_wifi_freq_to_channel">
      <doc xml:space="preserve"
           filename="libnm-core/nm-utils.c"
           line="3636">Utility function to translate a Wi-Fi frequency to its corresponding channel.</doc>
      <source-position filename="libnm-core/nm-utils.h" line="151"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-utils.c"
             line="3642">the channel represented by the frequency or 0</doc>
        <type name="guint32" c:type="guint32"/>
      </return-value>
      <parameters>
        <parameter name="freq" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-utils.c"
               line="3638">frequency</doc>
          <type name="guint32" c:type="guint32"/>
        </parameter>
      </parameters>
    </function>
    <function name="utils_wifi_is_channel_valid"
              c:identifier="nm_utils_wifi_is_channel_valid">
      <doc xml:space="preserve"
           filename="libnm-core/nm-utils.c"
           line="3739">Utility function to verify Wi-Fi channel validity.</doc>
      <source-position filename="libnm-core/nm-utils.h" line="154"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-utils.c"
             line="3746">%TRUE or %FALSE</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="channel" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-utils.c"
               line="3741">channel</doc>
          <type name="guint32" c:type="guint32"/>
        </parameter>
        <parameter name="band" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-utils.c"
               line="3742">frequency band for wireless ("a" or "bg")</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="utils_wifi_strength_bars"
              c:identifier="nm_utils_wifi_strength_bars">
      <doc xml:space="preserve"
           filename="libnm-core/nm-utils.c"
           line="3825">Converts @strength into a 4-character-wide graphical representation of
strength suitable for printing to stdout.

Previous versions used to take a guess at the terminal type and possibly
return a wide UTF-8 encoded string. Now it always returns a 7-bit
clean strings of one to 0 to 4 asterisks. Users that actually need
the functionality are encouraged to make their implementations instead.</doc>
      <source-position filename="libnm-core/nm-utils.h" line="160"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-utils.c"
             line="3837">the graphical representation of the access point strength</doc>
        <type name="utf8" c:type="const char*"/>
      </return-value>
      <parameters>
        <parameter name="strength" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-utils.c"
               line="3827">the access point strength, from 0 to 100</doc>
          <type name="guint8" c:type="guint8"/>
        </parameter>
      </parameters>
    </function>
    <function name="utils_wpa_psk_valid" c:identifier="nm_utils_wpa_psk_valid">
      <doc xml:space="preserve"
           filename="libnm-core/nm-utils.c"
           line="1364">Checks if @psk is a valid WPA PSK</doc>
      <source-position filename="libnm-core/nm-utils.h" line="97"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libnm-core/nm-utils.c"
             line="1370">%TRUE if @psk is a WPA PSK, %FALSE if not</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="psk" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-utils.c"
               line="1366">a string that might be a WPA PSK</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="vpn_editor_plugin_load"
              c:identifier="nm_vpn_editor_plugin_load"
              moved-to="VpnEditorPlugin.load"
              version="1.4"
              throws="1">
      <doc xml:space="preserve"
           filename="libnm-core/nm-vpn-editor-plugin.c"
           line="413">Load the shared library @plugin_name and create a new
#NMVpnEditorPlugin instance via the #NMVpnEditorPluginFactory
function.

This is similar to nm_vpn_editor_plugin_load_from_file(), but
it does no validation of the plugin name, instead passes it directly
to dlopen(). If you have the full path to a plugin file,
nm_vpn_editor_plugin_load_from_file() is preferred.</doc>
      <source-position filename="libnm-core/nm-vpn-editor-plugin.h"
                       line="168"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="libnm-core/nm-vpn-editor-plugin.c"
             line="431">a new plugin instance or %NULL on error.</doc>
        <type name="VpnEditorPlugin" c:type="NMVpnEditorPlugin*"/>
      </return-value>
      <parameters>
        <parameter name="plugin_name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-vpn-editor-plugin.c"
               line="415">The name of the shared library to load.
 This path will be directly passed to dlopen() without
 further checks.</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="check_service" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-vpn-editor-plugin.c"
               line="418">if not-null, check that the loaded plugin advertises
 the given service.</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="vpn_editor_plugin_load_from_file"
              c:identifier="nm_vpn_editor_plugin_load_from_file"
              moved-to="VpnEditorPlugin.load_from_file"
              version="1.2"
              throws="1">
      <doc xml:space="preserve"
           filename="libnm-core/nm-vpn-editor-plugin.c"
           line="366">Load the shared library @plugin_name and create a new
#NMVpnEditorPlugin instance via the #NMVpnEditorPluginFactory
function.

If @plugin_name is not an absolute path name, it assumes the file
is in the plugin directory of NetworkManager. In any case, the call
will do certain checks on the file before passing it to dlopen.
A consequence for that is, that you cannot omit the ".so" suffix
as you could for nm_vpn_editor_plugin_load().</doc>
      <source-position filename="libnm-core/nm-vpn-editor-plugin.h"
                       line="160"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="libnm-core/nm-vpn-editor-plugin.c"
             line="392">a new plugin instance or %NULL on error.</doc>
        <type name="VpnEditorPlugin" c:type="NMVpnEditorPlugin*"/>
      </return-value>
      <parameters>
        <parameter name="plugin_name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-vpn-editor-plugin.c"
               line="368">The path or name of the shared library to load.
 The path must either be an absolute filename to an existing file.
 Alternatively, it can be the name (without path) of a library in the
 plugin directory of NetworkManager.</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="check_service" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-vpn-editor-plugin.c"
               line="372">if not-null, check that the loaded plugin advertises
 the given service.</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="check_owner" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libnm-core/nm-vpn-editor-plugin.c"
               line="374">if non-negative, check whether the file is owned
 by UID @check_owner or by root. In this case also check that
 the file is not writable by anybody else.</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="check_file"
                   transfer-ownership="none"
                   scope="call"
                   closure="4">
          <doc xml:space="preserve"
               filename="libnm-core/nm-vpn-editor-plugin.c"
               line="377">optional callback to validate the file prior to
  loading the shared library.</doc>
          <type name="UtilsCheckFilePredicate"
                c:type="NMUtilsCheckFilePredicate"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="libnm-core/nm-vpn-editor-plugin.c"
               line="379">user data for @check_file</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="vpn_plugin_error_quark"
              c:identifier="nm_vpn_plugin_error_quark"
              moved-to="VpnPluginError.quark">
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
  </namespace>
</repository>
