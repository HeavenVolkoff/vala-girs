<?xml version="1.0"?>
<!-- This file was automatically generated from C sources - DO NOT EDIT!
To affect the contents of this file, edit the original C definitions,
and/or use gtk-doc annotations.  -->
<repository version="1.2"
            xmlns="http://www.gtk.org/introspection/core/1.0"
            xmlns:c="http://www.gtk.org/introspection/c/1.0"
            xmlns:glib="http://www.gtk.org/introspection/glib/1.0">
  <include name="Atk" version="1.0"/>
  <include name="GLib" version="2.0"/>
  <include name="GModule" version="2.0"/>
  <include name="GObject" version="2.0"/>
  <include name="Gdk" version="3.0"/>
  <include name="GdkPixbuf" version="2.0"/>
  <include name="Gio" version="2.0"/>
  <include name="Gtk" version="3.0"/>
  <include name="JSCore" version="3.0"/>
  <include name="Pango" version="1.0"/>
  <include name="Soup" version="2.4"/>
  <include name="cairo" version="1.0"/>
  <include name="xlib" version="2.0"/>
  <package name="webkitgtk-3.0"/>
  <c:include name="webkit/webkit.h"/>
  <namespace name="WebKit"
             version="3.0"
             shared-library="libwebkitgtk-3.0.so.0,libjavascriptcoregtk-3.0.so.0"
             c:identifier-prefixes="WebKit"
             c:symbol-prefixes="webkit">
    <enumeration name="CacheModel"
                 glib:type-name="WebKitCacheModel"
                 glib:get-type="webkit_cache_model_get_type"
                 c:type="WebKitCacheModel">
      <doc xml:whitespace="preserve">Enum values used for determining the webview cache model.</doc>
      <member name="default"
              value="0"
              c:identifier="WEBKIT_CACHE_MODEL_DEFAULT"
              glib:nick="default">
        <doc xml:whitespace="preserve">The default cache model. This is WEBKIT_CACHE_MODEL_WEB_BROWSER.</doc>
      </member>
      <member name="document_viewer"
              value="1"
              c:identifier="WEBKIT_CACHE_MODEL_DOCUMENT_VIEWER"
              glib:nick="document-viewer">
        <doc xml:whitespace="preserve">Disable the cache completely, which substantially reduces memory usage. Useful for applications that only access a single local file, with no navigation to other pages. No remote resources will be cached.</doc>
      </member>
      <member name="web_browser"
              value="2"
              c:identifier="WEBKIT_CACHE_MODEL_WEB_BROWSER"
              glib:nick="web-browser">
        <doc xml:whitespace="preserve">Improve document load speed substantially by caching a very large number of resources and previously viewed content.</doc>
      </member>
      <member name="document_browser"
              value="3"
              c:identifier="WEBKIT_CACHE_MODEL_DOCUMENT_BROWSER"
              glib:nick="document-browser">
        <doc xml:whitespace="preserve">A cache model optimized for viewing a series of local files -- for example, a documentation viewer or a website designer. WebKit will cache a moderate number of resources.</doc>
      </member>
    </enumeration>
    <enumeration name="ContextMenuAction"
                 version="1.10"
                 glib:type-name="WebKitContextMenuAction"
                 glib:get-type="webkit_context_menu_action_get_type"
                 c:type="WebKitContextMenuAction">
      <doc xml:whitespace="preserve">Enum values used to denote actions of items in the default context menu.</doc>
      <member name="no_action"
              value="0"
              c:identifier="WEBKIT_CONTEXT_MENU_ACTION_NO_ACTION"
              glib:nick="no-action">
        <doc xml:whitespace="preserve">No action, used by separator menu items.</doc>
      </member>
      <member name="open_link"
              value="1"
              c:identifier="WEBKIT_CONTEXT_MENU_ACTION_OPEN_LINK"
              glib:nick="open-link">
        <doc xml:whitespace="preserve">Open current link.</doc>
      </member>
      <member name="open_link_in_new_window"
              value="2"
              c:identifier="WEBKIT_CONTEXT_MENU_ACTION_OPEN_LINK_IN_NEW_WINDOW"
              glib:nick="open-link-in-new-window">
        <doc xml:whitespace="preserve">Open current link in a new window.</doc>
      </member>
      <member name="download_link_to_disk"
              value="3"
              c:identifier="WEBKIT_CONTEXT_MENU_ACTION_DOWNLOAD_LINK_TO_DISK"
              glib:nick="download-link-to-disk">
        <doc xml:whitespace="preserve">Download link destination.</doc>
      </member>
      <member name="copy_link_to_clipboard"
              value="4"
              c:identifier="WEBKIT_CONTEXT_MENU_ACTION_COPY_LINK_TO_CLIPBOARD"
              glib:nick="copy-link-to-clipboard">
        <doc xml:whitespace="preserve">Copy link location to the clipboard.</doc>
      </member>
      <member name="open_image_in_new_window"
              value="5"
              c:identifier="WEBKIT_CONTEXT_MENU_ACTION_OPEN_IMAGE_IN_NEW_WINDOW"
              glib:nick="open-image-in-new-window">
        <doc xml:whitespace="preserve">Open current image in a new window.</doc>
      </member>
      <member name="download_image_to_disk"
              value="6"
              c:identifier="WEBKIT_CONTEXT_MENU_ACTION_DOWNLOAD_IMAGE_TO_DISK"
              glib:nick="download-image-to-disk">
        <doc xml:whitespace="preserve">Download current image.</doc>
      </member>
      <member name="copy_image_to_clipboard"
              value="7"
              c:identifier="WEBKIT_CONTEXT_MENU_ACTION_COPY_IMAGE_TO_CLIPBOARD"
              glib:nick="copy-image-to-clipboard">
        <doc xml:whitespace="preserve">Copy current image to the clipboard.</doc>
      </member>
      <member name="copy_image_url_to_clipboard"
              value="8"
              c:identifier="WEBKIT_CONTEXT_MENU_ACTION_COPY_IMAGE_URL_TO_CLIPBOARD"
              glib:nick="copy-image-url-to-clipboard">
        <doc xml:whitespace="preserve">Copy curent image location to the clipboard.</doc>
      </member>
      <member name="open_frame_in_new_window"
              value="9"
              c:identifier="WEBKIT_CONTEXT_MENU_ACTION_OPEN_FRAME_IN_NEW_WINDOW"
              glib:nick="open-frame-in-new-window">
        <doc xml:whitespace="preserve">Open current frame in a new window.</doc>
      </member>
      <member name="go_back"
              value="10"
              c:identifier="WEBKIT_CONTEXT_MENU_ACTION_GO_BACK"
              glib:nick="go-back">
        <doc xml:whitespace="preserve">Load the previous history item.</doc>
      </member>
      <member name="go_forward"
              value="11"
              c:identifier="WEBKIT_CONTEXT_MENU_ACTION_GO_FORWARD"
              glib:nick="go-forward">
        <doc xml:whitespace="preserve">Load the next history item.</doc>
      </member>
      <member name="stop"
              value="12"
              c:identifier="WEBKIT_CONTEXT_MENU_ACTION_STOP"
              glib:nick="stop">
        <doc xml:whitespace="preserve">Stop any ongoing loading operation.</doc>
      </member>
      <member name="reload"
              value="13"
              c:identifier="WEBKIT_CONTEXT_MENU_ACTION_RELOAD"
              glib:nick="reload">
        <doc xml:whitespace="preserve">Reload the conents of current view.</doc>
      </member>
      <member name="copy"
              value="14"
              c:identifier="WEBKIT_CONTEXT_MENU_ACTION_COPY"
              glib:nick="copy">
        <doc xml:whitespace="preserve">Copy current selection the clipboard.</doc>
      </member>
      <member name="cut"
              value="15"
              c:identifier="WEBKIT_CONTEXT_MENU_ACTION_CUT"
              glib:nick="cut">
        <doc xml:whitespace="preserve">Cut current selection to the clipboard.</doc>
      </member>
      <member name="paste"
              value="16"
              c:identifier="WEBKIT_CONTEXT_MENU_ACTION_PASTE"
              glib:nick="paste">
        <doc xml:whitespace="preserve">Paste clipboard contents.</doc>
      </member>
      <member name="delete"
              value="17"
              c:identifier="WEBKIT_CONTEXT_MENU_ACTION_DELETE"
              glib:nick="delete">
        <doc xml:whitespace="preserve">Delete current selection.</doc>
      </member>
      <member name="select_all"
              value="18"
              c:identifier="WEBKIT_CONTEXT_MENU_ACTION_SELECT_ALL"
              glib:nick="select-all">
        <doc xml:whitespace="preserve">Select all text.</doc>
      </member>
      <member name="input_methods"
              value="19"
              c:identifier="WEBKIT_CONTEXT_MENU_ACTION_INPUT_METHODS"
              glib:nick="input-methods">
        <doc xml:whitespace="preserve">Input methods menu.</doc>
      </member>
      <member name="unicode"
              value="20"
              c:identifier="WEBKIT_CONTEXT_MENU_ACTION_UNICODE"
              glib:nick="unicode">
        <doc xml:whitespace="preserve">Unicode menu.</doc>
      </member>
      <member name="spelling_guess"
              value="21"
              c:identifier="WEBKIT_CONTEXT_MENU_ACTION_SPELLING_GUESS"
              glib:nick="spelling-guess">
        <doc xml:whitespace="preserve">Guess spelling.</doc>
      </member>
      <member name="no_guesses_found"
              value="22"
              c:identifier="WEBKIT_CONTEXT_MENU_ACTION_NO_GUESSES_FOUND"
              glib:nick="no-guesses-found">
        <doc xml:whitespace="preserve">No guesses found.</doc>
      </member>
      <member name="ignore_spelling"
              value="23"
              c:identifier="WEBKIT_CONTEXT_MENU_ACTION_IGNORE_SPELLING"
              glib:nick="ignore-spelling">
        <doc xml:whitespace="preserve">Ignore spelling.</doc>
      </member>
      <member name="learn_spelling"
              value="24"
              c:identifier="WEBKIT_CONTEXT_MENU_ACTION_LEARN_SPELLING"
              glib:nick="learn-spelling">
        <doc xml:whitespace="preserve">Learn spelling.</doc>
      </member>
      <member name="ignore_grammar"
              value="25"
              c:identifier="WEBKIT_CONTEXT_MENU_ACTION_IGNORE_GRAMMAR"
              glib:nick="ignore-grammar">
        <doc xml:whitespace="preserve">Ignore grammar.</doc>
      </member>
      <member name="font_menu"
              value="26"
              c:identifier="WEBKIT_CONTEXT_MENU_ACTION_FONT_MENU"
              glib:nick="font-menu">
        <doc xml:whitespace="preserve">Font menu.</doc>
      </member>
      <member name="bold"
              value="27"
              c:identifier="WEBKIT_CONTEXT_MENU_ACTION_BOLD"
              glib:nick="bold">
        <doc xml:whitespace="preserve">Bold.</doc>
      </member>
      <member name="italic"
              value="28"
              c:identifier="WEBKIT_CONTEXT_MENU_ACTION_ITALIC"
              glib:nick="italic">
        <doc xml:whitespace="preserve">Italic.</doc>
      </member>
      <member name="underline"
              value="29"
              c:identifier="WEBKIT_CONTEXT_MENU_ACTION_UNDERLINE"
              glib:nick="underline">
        <doc xml:whitespace="preserve">Underline.</doc>
      </member>
      <member name="outline"
              value="30"
              c:identifier="WEBKIT_CONTEXT_MENU_ACTION_OUTLINE"
              glib:nick="outline">
        <doc xml:whitespace="preserve">Outline.</doc>
      </member>
      <member name="inspect_element"
              value="31"
              c:identifier="WEBKIT_CONTEXT_MENU_ACTION_INSPECT_ELEMENT"
              glib:nick="inspect-element">
        <doc xml:whitespace="preserve">Open current element in the inspector.</doc>
      </member>
      <member name="open_media_in_new_window"
              value="32"
              c:identifier="WEBKIT_CONTEXT_MENU_ACTION_OPEN_MEDIA_IN_NEW_WINDOW"
              glib:nick="open-media-in-new-window">
        <doc xml:whitespace="preserve">Open current media element in a new window.</doc>
      </member>
      <member name="copy_media_link_to_clipboard"
              value="33"
              c:identifier="WEBKIT_CONTEXT_MENU_ACTION_COPY_MEDIA_LINK_TO_CLIPBOARD"
              glib:nick="copy-media-link-to-clipboard">
        <doc xml:whitespace="preserve">Copy media link location in to the clipboard.</doc>
      </member>
      <member name="toggle_media_controls"
              value="34"
              c:identifier="WEBKIT_CONTEXT_MENU_ACTION_TOGGLE_MEDIA_CONTROLS"
              glib:nick="toggle-media-controls">
        <doc xml:whitespace="preserve">Enable or disable media controls.</doc>
      </member>
      <member name="toggle_media_loop"
              value="35"
              c:identifier="WEBKIT_CONTEXT_MENU_ACTION_TOGGLE_MEDIA_LOOP"
              glib:nick="toggle-media-loop">
        <doc xml:whitespace="preserve">Enable or disable media loop.</doc>
      </member>
      <member name="enter_video_fullscreen"
              value="36"
              c:identifier="WEBKIT_CONTEXT_MENU_ACTION_ENTER_VIDEO_FULLSCREEN"
              glib:nick="enter-video-fullscreen">
        <doc xml:whitespace="preserve">Show current video element in fullscreen mode.</doc>
      </member>
      <member name="media_play_pause"
              value="37"
              c:identifier="WEBKIT_CONTEXT_MENU_ACTION_MEDIA_PLAY_PAUSE"
              glib:nick="media-play-pause">
        <doc xml:whitespace="preserve">Play or pause current media element.</doc>
      </member>
      <member name="media_mute"
              value="38"
              c:identifier="WEBKIT_CONTEXT_MENU_ACTION_MEDIA_MUTE"
              glib:nick="media-mute">
        <doc xml:whitespace="preserve">Mute current media element.</doc>
      </member>
    </enumeration>
    <class name="Download"
           c:symbol-prefix="download"
           c:type="WebKitDownload"
           parent="GObject.Object"
           glib:type-name="WebKitDownload"
           glib:get-type="webkit_download_get_type"
           glib:type-struct="DownloadClass">
      <doc xml:whitespace="preserve">#WebKitDownload carries information about a download request,
including a #WebKitNetworkRequest object. The application may use
this object to control the download process, or to simply figure
out what is to be downloaded, and do it itself.</doc>
      <constructor name="new"
                   c:identifier="webkit_download_new"
                   version="1.1.2">
        <doc xml:whitespace="preserve">Creates a new #WebKitDownload object for the given
#WebKitNetworkRequest object.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">the new #WebKitDownload</doc>
          <type name="Download" c:type="WebKitDownload*"/>
        </return-value>
        <parameters>
          <parameter name="request" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitNetworkRequest</doc>
            <type name="NetworkRequest" c:type="WebKitNetworkRequest*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="cancel"
              c:identifier="webkit_download_cancel"
              version="1.1.2">
        <doc xml:whitespace="preserve">Cancels the download. Calling this will not free the
#WebKitDownload object, so you still need to call
g_object_unref() on it, if you are the owner of a reference. Notice
that cancelling the download provokes the emission of the
WebKitDownload::error signal, reporting that the download was
cancelled.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="download" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #WebKitDownload</doc>
            <type name="Download" c:type="WebKitDownload*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_current_size"
              c:identifier="webkit_download_get_current_size"
              version="1.1.2">
        <doc xml:whitespace="preserve">Current already downloaded size.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the already downloaded size</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="download" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #WebKitDownload</doc>
            <type name="Download" c:type="WebKitDownload*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_destination_uri"
              c:identifier="webkit_download_get_destination_uri"
              version="1.1.2">
        <doc xml:whitespace="preserve">Obtains the URI to which the downloaded file will be written. This
must have been set by the application before calling
webkit_download_start(), and may be %NULL.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the destination URI or %NULL</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="download" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #WebKitDownload</doc>
            <type name="Download" c:type="WebKitDownload*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_elapsed_time"
              c:identifier="webkit_download_get_elapsed_time"
              version="1.1.2">
        <doc xml:whitespace="preserve">Elapsed time for the download in seconds, including any fractional
part. If the download is finished, had an error or was cancelled
this is the time between its start and the event.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">seconds since the download was started, as a #gdouble</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="download" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitDownload</doc>
            <type name="Download" c:type="WebKitDownload*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_network_request"
              c:identifier="webkit_download_get_network_request"
              version="1.1.2">
        <doc xml:whitespace="preserve">Retrieves the #WebKitNetworkRequest object that backs the download
process.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the #WebKitNetworkRequest instance</doc>
          <type name="NetworkRequest" c:type="WebKitNetworkRequest*"/>
        </return-value>
        <parameters>
          <instance-parameter name="download" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #WebKitDownload</doc>
            <type name="Download" c:type="WebKitDownload*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_network_response"
              c:identifier="webkit_download_get_network_response"
              version="1.1.16">
        <doc xml:whitespace="preserve">Retrieves the #WebKitNetworkResponse object that backs the download
process.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the #WebKitNetworkResponse instance</doc>
          <type name="NetworkResponse" c:type="WebKitNetworkResponse*"/>
        </return-value>
        <parameters>
          <instance-parameter name="download" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #WebKitDownload</doc>
            <type name="Download" c:type="WebKitDownload*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_progress"
              c:identifier="webkit_download_get_progress"
              version="1.1.2">
        <doc xml:whitespace="preserve">Determines the current progress of the download.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a #gdouble ranging from 0.0 to 1.0.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="download" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitDownload</doc>
            <type name="Download" c:type="WebKitDownload*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_status"
              c:identifier="webkit_download_get_status"
              version="1.1.2">
        <doc xml:whitespace="preserve">Obtains the current status of the download, as a
#WebKitDownloadStatus.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the current #WebKitDownloadStatus</doc>
          <type name="DownloadStatus" c:type="WebKitDownloadStatus"/>
        </return-value>
        <parameters>
          <instance-parameter name="download" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #WebKitDownload</doc>
            <type name="Download" c:type="WebKitDownload*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_suggested_filename"
              c:identifier="webkit_download_get_suggested_filename"
              version="1.1.2">
        <doc xml:whitespace="preserve">Retrieves the filename that was suggested by the server, or the one
derived by WebKit from the URI.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the suggested filename</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="download" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #WebKitDownload</doc>
            <type name="Download" c:type="WebKitDownload*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_total_size"
              c:identifier="webkit_download_get_total_size"
              version="1.1.2">
        <doc xml:whitespace="preserve">Returns the expected total size of the download. This is expected
because the server may provide incorrect or missing
Content-Length. Notice that this may grow over time, as it will be
always the same as current_size in the cases where current size
surpasses it.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the expected total size of the downloaded file</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="download" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #WebKitDownload</doc>
            <type name="Download" c:type="WebKitDownload*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_uri"
              c:identifier="webkit_download_get_uri"
              version="1.1.2">
        <doc xml:whitespace="preserve">Convenience method to retrieve the URI from the
#WebKitNetworkRequest which is being downloaded.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the URI</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="download" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #WebKitDownload</doc>
            <type name="Download" c:type="WebKitDownload*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_destination_uri"
              c:identifier="webkit_download_set_destination_uri"
              version="1.1.2">
        <doc xml:whitespace="preserve">Defines the URI that should be used to save the downloaded file to.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="download" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #WebKitDownload</doc>
            <type name="Download" c:type="WebKitDownload*"/>
          </instance-parameter>
          <parameter name="destination_uri" transfer-ownership="none">
            <doc xml:whitespace="preserve">the destination URI</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="start"
              c:identifier="webkit_download_start"
              version="1.1.2">
        <doc xml:whitespace="preserve">Initiates the download. Notice that you must have set the
destination-uri property before calling this method.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="download" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #WebKitDownload</doc>
            <type name="Download" c:type="WebKitDownload*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="current-size" version="1.1.2" transfer-ownership="none">
        <doc xml:whitespace="preserve">The length of the data already downloaded</doc>
        <type name="guint64" c:type="guint64"/>
      </property>
      <property name="destination-uri"
                version="1.1.2"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The URI of the save location for this download.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="network-request"
                version="1.1.2"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The #WebKitNetworkRequest instance associated with the download.</doc>
        <type name="NetworkRequest"/>
      </property>
      <property name="network-response"
                version="1.1.16"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The #WebKitNetworkResponse instance associated with the download.</doc>
        <type name="NetworkResponse"/>
      </property>
      <property name="progress" version="1.1.2" transfer-ownership="none">
        <doc xml:whitespace="preserve">Determines the current progress of the download. Notice that,
although the progress changes are reported as soon as possible,
the emission of the notify signal for this property is
throttled, for the benefit of download managers. If you care
about every update, use WebKitDownload:current-size.</doc>
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="status" version="1.1.2" transfer-ownership="none">
        <doc xml:whitespace="preserve">Determines the current status of the download.</doc>
        <type name="DownloadStatus"/>
      </property>
      <property name="suggested-filename"
                version="1.1.2"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The file name suggested as default when saving</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="total-size" version="1.1.2" transfer-ownership="none">
        <doc xml:whitespace="preserve">The total size of the file</doc>
        <type name="guint64" c:type="guint64"/>
      </property>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="DownloadPrivate" c:type="WebKitDownloadPrivate*"/>
      </field>
      <glib:signal name="error" when="last" version="1.1.2">
        <doc xml:whitespace="preserve">Emitted when @download is interrupted either by user action or by
network errors, @error_detail will take any value of
#WebKitDownloadError.</doc>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="error_code" transfer-ownership="none">
            <doc xml:whitespace="preserve">the corresponding error code</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="error_detail" transfer-ownership="none">
            <doc xml:whitespace="preserve">detailed error code for the error, see #WebKitDownloadError</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="reason" transfer-ownership="none">
            <doc xml:whitespace="preserve">a string describing the error</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="DownloadClass"
            c:type="WebKitDownloadClass"
            glib:is-gtype-struct-for="Download">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="_webkit_reserved0" introspectable="0">
        <callback name="_webkit_reserved0">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_webkit_reserved1" introspectable="0">
        <callback name="_webkit_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_webkit_reserved2" introspectable="0">
        <callback name="_webkit_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_webkit_reserved3" introspectable="0">
        <callback name="_webkit_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <enumeration name="DownloadError"
                 glib:type-name="WebKitDownloadError"
                 glib:get-type="webkit_download_error_get_type"
                 c:type="WebKitDownloadError">
      <doc xml:whitespace="preserve">Enum values used to denote the various download errors.</doc>
      <member name="cancelled_by_user"
              value="0"
              c:identifier="WEBKIT_DOWNLOAD_ERROR_CANCELLED_BY_USER"
              glib:nick="cancelled-by-user">
        <doc xml:whitespace="preserve">The download failed due to user cancellation.</doc>
      </member>
      <member name="destination"
              value="1"
              c:identifier="WEBKIT_DOWNLOAD_ERROR_DESTINATION"
              glib:nick="destination">
        <doc xml:whitespace="preserve">The download failed due to disk write failure.</doc>
      </member>
      <member name="network"
              value="2"
              c:identifier="WEBKIT_DOWNLOAD_ERROR_NETWORK"
              glib:nick="network">
        <doc xml:whitespace="preserve">The download failed due to a network error.</doc>
      </member>
    </enumeration>
    <record name="DownloadPrivate"
            c:type="WebKitDownloadPrivate"
            disguised="1">
    </record>
    <enumeration name="DownloadStatus"
                 glib:type-name="WebKitDownloadStatus"
                 glib:get-type="webkit_download_status_get_type"
                 c:type="WebKitDownloadStatus">
      <doc xml:whitespace="preserve">Enum values used to denote the various states of a download.</doc>
      <member name="error"
              value="-1"
              c:identifier="WEBKIT_DOWNLOAD_STATUS_ERROR"
              glib:nick="error">
        <doc xml:whitespace="preserve">The download failed because of an error other than user cancellation.</doc>
      </member>
      <member name="created"
              value="0"
              c:identifier="WEBKIT_DOWNLOAD_STATUS_CREATED"
              glib:nick="created">
        <doc xml:whitespace="preserve">The download has not started yet.</doc>
      </member>
      <member name="started"
              value="1"
              c:identifier="WEBKIT_DOWNLOAD_STATUS_STARTED"
              glib:nick="started">
        <doc xml:whitespace="preserve">The download has started, but has not completed yet.</doc>
      </member>
      <member name="cancelled"
              value="2"
              c:identifier="WEBKIT_DOWNLOAD_STATUS_CANCELLED"
              glib:nick="cancelled">
        <doc xml:whitespace="preserve">The user canceled the download.</doc>
      </member>
      <member name="finished"
              value="3"
              c:identifier="WEBKIT_DOWNLOAD_STATUS_FINISHED"
              glib:nick="finished">
        <doc xml:whitespace="preserve">The download completed successfully.</doc>
      </member>
    </enumeration>
    <enumeration name="EditingBehavior"
                 glib:type-name="WebKitEditingBehavior"
                 glib:get-type="webkit_editing_behavior_get_type"
                 c:type="WebKitEditingBehavior">
      <doc xml:whitespace="preserve">Enum values used for determining the editing behavior of editable elements.</doc>
      <member name="mac"
              value="0"
              c:identifier="WEBKIT_EDITING_BEHAVIOR_MAC"
              glib:nick="mac">
        <doc xml:whitespace="preserve">Editing behavior mimicking OS X user interfaces.</doc>
      </member>
      <member name="windows"
              value="1"
              c:identifier="WEBKIT_EDITING_BEHAVIOR_WINDOWS"
              glib:nick="windows">
        <doc xml:whitespace="preserve">Editing behavior mimicking Windows user interfaces.</doc>
      </member>
      <member name="unix"
              value="2"
              c:identifier="WEBKIT_EDITING_BEHAVIOR_UNIX"
              glib:nick="unix">
        <doc xml:whitespace="preserve">Editing behavior mimicking free desktop user interfaces.</doc>
      </member>
    </enumeration>
    <class name="FaviconDatabase"
           c:symbol-prefix="favicon_database"
           c:type="WebKitFaviconDatabase"
           parent="GObject.Object"
           glib:type-name="WebKitFaviconDatabase"
           glib:get-type="webkit_favicon_database_get_type"
           glib:type-struct="FaviconDatabaseClass">
      <doc xml:whitespace="preserve">#WebKitFaviconDatabase provides access to the icons associated with
web sites.

WebKit will automatically look for available icons in link elements
on opened pages as well as an existing favicon.ico and load the
images found into a memory cache if possible. That cache is frozen
to an on-disk database for persistence.

The database is disabled by default. In order for icons to be
stored and accessed, you will need to set an icon database path
using webkit_favicon_database_set_path(). Disable the database
again passing %NULL to the previous call.

If WebKitWebSettings::enable-private-browsing is %TRUE new icons
won't be added to the on-disk database and no existing icons will
be deleted from it. Nevertheless, WebKit will still store them in
the in-memory cache during the current execution.</doc>
      <method name="clear"
              c:identifier="webkit_favicon_database_clear"
              version="1.8">
        <doc xml:whitespace="preserve">Clears all icons from the database.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="database" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitFaviconDatabase</doc>
            <type name="FaviconDatabase" c:type="WebKitFaviconDatabase*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_favicon_pixbuf"
              c:identifier="webkit_favicon_database_get_favicon_pixbuf"
              version="1.8">
        <doc xml:whitespace="preserve">Asynchronously obtains a #GdkPixbuf of the favicon for the given
page URI. The advantage of this method over
webkit_favicon_database_try_get_favicon_pixbuf() is that it always returns the
cached icon if it's in the database asynchronously waiting for the
icon to be read from the database.

This is an asynchronous method. When the operation is finished, callback will
be invoked. You can then call webkit_favicon_database_get_favicon_pixbuf_finish()
to get the result of the operation.
See also webkit_favicon_database_try_get_favicon_pixbuf().

If @width and @height are both 0 then this method will return the
maximum available size for the icon. Note that if you specify a
different size the icon will be scaled each time you call this
function.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="database" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitFaviconDatabase</doc>
            <type name="FaviconDatabase" c:type="WebKitFaviconDatabase*"/>
          </instance-parameter>
          <parameter name="page_uri" transfer-ownership="none">
            <doc xml:whitespace="preserve">URI of the page containing the icon</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="width" transfer-ownership="none">
            <doc xml:whitespace="preserve">the desired width for the icon</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <doc xml:whitespace="preserve">the desired height for the icon</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     allow-none="1">
            <doc xml:whitespace="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     allow-none="1"
                     scope="async"
                     closure="5">
            <doc xml:whitespace="preserve">A #GAsyncReadyCallback to call when the request is satisfied or %NULL if you don't care about the result.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <doc xml:whitespace="preserve">The data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_favicon_pixbuf_finish"
              c:identifier="webkit_favicon_database_get_favicon_pixbuf_finish"
              version="1.8"
              throws="1">
        <doc xml:whitespace="preserve">Finishes an operation started with webkit_favicon_database_get_favicon_pixbuf().</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a new reference to a #GdkPixbuf, or %NULL.</doc>
          <type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*"/>
        </return-value>
        <parameters>
          <instance-parameter name="database" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitFaviconDatabase</doc>
            <type name="FaviconDatabase" c:type="WebKitFaviconDatabase*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:whitespace="preserve">A #GAsyncResult obtained from the #GAsyncReadyCallback passed to webkit_favicon_database_get_favicon_pixbuf()</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_favicon_uri"
              c:identifier="webkit_favicon_database_get_favicon_uri"
              version="1.8">
        <doc xml:whitespace="preserve">Obtains the URI for the favicon for the given page URI.
See also webkit_web_view_get_icon_uri().</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a newly allocated URI for the favicon, or %NULL</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="database" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitFaviconDatabase</doc>
            <type name="FaviconDatabase" c:type="WebKitFaviconDatabase*"/>
          </instance-parameter>
          <parameter name="page_uri" transfer-ownership="none">
            <doc xml:whitespace="preserve">URI of the page containing the icon</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_path"
              c:identifier="webkit_favicon_database_get_path"
              version="1.8">
        <doc xml:whitespace="preserve">Determines the absolute path to the database folder on disk.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the absolute path of the database folder, or %NULL</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="database" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitFaviconDatabase</doc>
            <type name="FaviconDatabase" c:type="WebKitFaviconDatabase*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_path"
              c:identifier="webkit_favicon_database_set_path"
              version="1.8">
        <doc xml:whitespace="preserve">Specifies the absolute path to the database folder on disk. The
icon database will only be enabled after a call to this method.

Passing %NULL or "" as path disables the icon database.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="database" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitFaviconDatabase</doc>
            <type name="FaviconDatabase" c:type="WebKitFaviconDatabase*"/>
          </instance-parameter>
          <parameter name="path" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">an absolute path to the icon database folder or %NULL to disable the database</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="try_get_favicon_pixbuf"
              c:identifier="webkit_favicon_database_try_get_favicon_pixbuf"
              version="1.8">
        <doc xml:whitespace="preserve">Obtains a #GdkPixbuf of the favicon for the given page URI, or
%NULL if there is no icon for the given page or it hasn't been
loaded from disk yet. Use webkit_favicon_database_get_favicon_uri()
if you need to distinguish these cases.  To make sure this method
will return a valid icon when the given URI has one, you should
connect to #WebKitFaviconDatabase::icon-loaded and use this function
in the callback.

If @width and @height ar both 0 then this method will return the
maximum available size for the icon. Note that if you specify a
different size the icon will be scaled each time you call this
function.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a new reference to a #GdkPixbuf, or %NULL if the given URI doesn't have an icon or it hasn't been loaded yet.</doc>
          <type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*"/>
        </return-value>
        <parameters>
          <instance-parameter name="database" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitFaviconDatabase</doc>
            <type name="FaviconDatabase" c:type="WebKitFaviconDatabase*"/>
          </instance-parameter>
          <parameter name="page_uri" transfer-ownership="none">
            <doc xml:whitespace="preserve">URI of the page containing the icon</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="width" transfer-ownership="none">
            <doc xml:whitespace="preserve">the desired width for the icon</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <doc xml:whitespace="preserve">the desired height for the icon</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <property name="path"
                version="1.8"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The absolute path of the icon database folder.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="FaviconDatabasePrivate"
              c:type="WebKitFaviconDatabasePrivate*"/>
      </field>
      <glib:signal name="icon-loaded" when="last" version="1.8">
        <doc xml:whitespace="preserve">This signal is fired if an icon is loaded on any
#WebKitWebView. If you are only interested in a particular
#WebKitWebView see #WebKitWebView::icon-loaded.

Note that this signal carries the URI of the frame that loads
the icon, while #WebKitWebView::icon-loaded provides the URI
of the favicon.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="frame_uri" transfer-ownership="none">
            <doc xml:whitespace="preserve">the URI of the main frame of a Web page containing the icon</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="FaviconDatabaseClass"
            c:type="WebKitFaviconDatabaseClass"
            glib:is-gtype-struct-for="FaviconDatabase">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="_webkit_reserved1" introspectable="0">
        <callback name="_webkit_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_webkit_reserved2" introspectable="0">
        <callback name="_webkit_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_webkit_reserved3" introspectable="0">
        <callback name="_webkit_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_webkit_reserved4" introspectable="0">
        <callback name="_webkit_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <record name="FaviconDatabasePrivate"
            c:type="WebKitFaviconDatabasePrivate"
            disguised="1">
    </record>
    <class name="FileChooserRequest"
           c:symbol-prefix="file_chooser_request"
           c:type="WebKitFileChooserRequest"
           parent="GObject.Object"
           glib:type-name="WebKitFileChooserRequest"
           glib:get-type="webkit_file_chooser_request_get_type"
           glib:type-struct="FileChooserRequestClass">
      <doc xml:whitespace="preserve">Whenever the user interacts with an &amp;lt;input type='file' /&amp;gt;
HTML element, WebKit will need to show a dialog to choose one or
more files to be uploaded to the server along with the rest of the
form data. For that to happen in a general way, instead of just
opening a #GtkFileChooserDialog (which might be not desirable in
some cases, such as when an embedding applications prefers to use
its own file chooser dialog), WebKit will fire the
#WebKitWebView::run-file-chooser signal with a
#WebKitFileChooserRequest object, which will allow the client
application to specify the files to be selected, to inspect the
details of the request (e.g. if multiple selection should be
allowed) and to cancel the request, in case nothing was selected.

In case the client application does not wish to handle this signal,
WebKit will provide a default handler which will asynchronously run
a regular #GtkFileChooserDialog for the user to interact with.</doc>
      <method name="get_mime_types"
              c:identifier="webkit_file_chooser_request_get_mime_types"
              version="1.10">
        <doc xml:whitespace="preserve">Get the list of MIME types the file chooser dialog should handle,
in the format specified in RFC 2046 for "media types". Its contents
depend on the value of the 'accept' attribute for HTML input
elements. This function should normally be called before presenting
the file chooser dialog to the user, to decide whether to allow the
user to select multiple files at once or only one.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a %NULL-terminated array of strings if a list of accepted MIME types is defined or %NULL otherwise, meaning that any MIME type should be accepted. This array and its contents are owned by WebKitGTK+ and should not be modified or freed.</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="request" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitFileChooserRequest</doc>
            <type name="FileChooserRequest"
                  c:type="WebKitFileChooserRequest*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_mime_types_filter"
              c:identifier="webkit_file_chooser_request_get_mime_types_filter"
              version="1.10">
        <doc xml:whitespace="preserve">Get the filter currently associated with the request, ready to be
used by #GtkFileChooser. This function should normally be called
before presenting the file chooser dialog to the user, to decide
whether to apply a filter so the user would not be allowed to
select files with other MIME types.

See webkit_file_chooser_request_get_mime_types() if you are
interested in getting the list of accepted MIME types.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GtkFileFilter if a list of accepted MIME types is defined or %NULL otherwise. The returned object is owned by WebKitGTK+ should not be modified or freed.</doc>
          <type name="Gtk.FileFilter" c:type="GtkFileFilter*"/>
        </return-value>
        <parameters>
          <instance-parameter name="request" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitFileChooserRequest</doc>
            <type name="FileChooserRequest"
                  c:type="WebKitFileChooserRequest*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_select_multiple"
              c:identifier="webkit_file_chooser_request_get_select_multiple"
              version="1.10">
        <doc xml:whitespace="preserve">Determine whether the file chooser associated to this
#WebKitFileChooserRequest should allow selecting multiple files,
which depends on the HTML input element having a 'multiple'
attribute defined.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the file chooser should allow selecting multiple files or %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="request" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitFileChooserRequest</doc>
            <type name="FileChooserRequest"
                  c:type="WebKitFileChooserRequest*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_selected_files"
              c:identifier="webkit_file_chooser_request_get_selected_files"
              version="1.10">
        <doc xml:whitespace="preserve">Get the list of selected files currently associated to the
request. Initially, the return value of this method contains any
files selected in previous file chooser requests for this HTML
input element. Once webkit_file_chooser_request_select_files, the
value will reflect whatever files are given.

This function should normally be called only before presenting the
file chooser dialog to the user, to decide whether to perform some
extra action, like pre-selecting the files from a previous request.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a %NULL-terminated array of strings if there are selected files associated with the request or %NULL otherwise. This array and its contents are owned by WebKitGTK+ and should not be modified or freed.</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="request" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitFileChooserRequest</doc>
            <type name="FileChooserRequest"
                  c:type="WebKitFileChooserRequest*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="select_files"
              c:identifier="webkit_file_chooser_request_select_files"
              version="1.10">
        <doc xml:whitespace="preserve">Ask WebKit to select local files for upload and complete the
request.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="request" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitFileChooserRequest</doc>
            <type name="FileChooserRequest"
                  c:type="WebKitFileChooserRequest*"/>
          </instance-parameter>
          <parameter name="files" transfer-ownership="none">
            <doc xml:whitespace="preserve">a %NULL-terminated array of strings, containing paths to local files.</doc>
            <array c:type="gchar**">
              <type name="utf8" c:type="gchar*"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <property name="filter" version="1.10" transfer-ownership="none">
        <doc xml:whitespace="preserve">The filter currently associated with the request. See
webkit_file_chooser_request_get_mime_types_filter() for more
details.</doc>
        <type name="Gtk.FileFilter"/>
      </property>
      <property name="mime-types" version="1.10" transfer-ownership="none">
        <doc xml:whitespace="preserve">A %NULL-terminated array of strings containing the list of MIME
types the file chooser dialog should handle. See
webkit_file_chooser_request_get_mime_types() for more details.</doc>
        <array>
          <type name="utf8"/>
        </array>
      </property>
      <property name="select-multiple"
                version="1.10"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">Whether the file chooser should allow selecting multiple
files. See
webkit_file_chooser_request_get_select_multiple() for
more details.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="selected-files" version="1.10" transfer-ownership="none">
        <doc xml:whitespace="preserve">A %NULL-terminated array of strings containing the list of
selected files associated to the current request. See
webkit_file_chooser_request_get_selected_files() for more details.</doc>
        <array>
          <type name="utf8"/>
        </array>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="FileChooserRequestPrivate"
              c:type="WebKitFileChooserRequestPrivate*"/>
      </field>
    </class>
    <record name="FileChooserRequestClass"
            c:type="WebKitFileChooserRequestClass"
            glib:is-gtype-struct-for="FileChooserRequest">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="FileChooserRequestPrivate"
            c:type="WebKitFileChooserRequestPrivate"
            disguised="1">
    </record>
    <class name="GeolocationPolicyDecision"
           c:symbol-prefix="geolocation_policy_decision"
           c:type="WebKitGeolocationPolicyDecision"
           parent="GObject.Object"
           glib:type-name="WebKitGeolocationPolicyDecision"
           glib:get-type="webkit_geolocation_policy_decision_get_type"
           glib:type-struct="GeolocationPolicyDecisionClass">
      <doc xml:whitespace="preserve">#WebKitGeolocationPolicyDecision objects are given to the application when
geolocation-policy-decision-requested signal is emitted. The application
uses it to tell the engine whether it wants to allow or deny geolocation for
a given frame.</doc>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="GeolocationPolicyDecisionPrivate"
              c:type="WebKitGeolocationPolicyDecisionPrivate*"/>
      </field>
    </class>
    <record name="GeolocationPolicyDecisionClass"
            c:type="WebKitGeolocationPolicyDecisionClass"
            glib:is-gtype-struct-for="GeolocationPolicyDecision">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="_webkit_reserved0" introspectable="0">
        <callback name="_webkit_reserved0">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_webkit_reserved1" introspectable="0">
        <callback name="_webkit_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_webkit_reserved2" introspectable="0">
        <callback name="_webkit_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_webkit_reserved3" introspectable="0">
        <callback name="_webkit_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <record name="GeolocationPolicyDecisionPrivate"
            c:type="WebKitGeolocationPolicyDecisionPrivate"
            disguised="1">
    </record>
    <class name="HitTestResult"
           c:symbol-prefix="hit_test_result"
           c:type="WebKitHitTestResult"
           parent="GObject.Object"
           glib:type-name="WebKitHitTestResult"
           glib:get-type="webkit_hit_test_result_get_type"
           glib:type-struct="HitTestResultClass">
      <doc xml:whitespace="preserve">This class holds context information about the coordinates
specified by a GDK event.</doc>
      <property name="context"
                version="1.1.15"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">Flags indicating the kind of target that received the event.</doc>
        <type name="HitTestResultContext"/>
      </property>
      <property name="image-uri"
                version="1.1.15"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The URI of the image that is part of the target that received the event, if any.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="inner-node"
                version="1.3.2"
                introspectable="0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The DOM node at the coordinates where the hit test
happened. Keep in mind that the node might not be
representative of the information given in the context
property, since WebKit uses a series of heuristics to figure
out that information. One common example is inner-node having
the text node inside the anchor (&amp;lt;a&amp;gt;) tag; WebKit knows the
whole context and will put WEBKIT_HIT_TEST_RESULT_CONTEXT_LINK
in the 'context' property, but the user might be confused by
the lack of any link tag in 'inner-node'.</doc>
        <type/>
      </property>
      <property name="link-uri"
                version="1.1.15"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The URI to which the target that received the event points, if any.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="media-uri"
                version="1.1.15"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The URI of the media that is part of the target that received the event, if any.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="x"
                version="1.10"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The x coordinate of the event relative to the view's window.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="y"
                version="1.10"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The x coordinate of the event relative to the view's window.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="HitTestResultPrivate"
              c:type="WebKitHitTestResultPrivate*"/>
      </field>
    </class>
    <record name="HitTestResultClass"
            c:type="WebKitHitTestResultClass"
            glib:is-gtype-struct-for="HitTestResult">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="_webkit_reserved0" introspectable="0">
        <callback name="_webkit_reserved0">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_webkit_reserved1" introspectable="0">
        <callback name="_webkit_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_webkit_reserved2" introspectable="0">
        <callback name="_webkit_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_webkit_reserved3" introspectable="0">
        <callback name="_webkit_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <bitfield name="HitTestResultContext"
              glib:type-name="WebKitHitTestResultContext"
              glib:get-type="webkit_hit_test_result_context_get_type"
              c:type="WebKitHitTestResultContext">
      <member name="document"
              value="2"
              c:identifier="WEBKIT_HIT_TEST_RESULT_CONTEXT_DOCUMENT"
              glib:nick="document">
        <doc xml:whitespace="preserve">anywhere in the document.</doc>
      </member>
      <member name="link"
              value="4"
              c:identifier="WEBKIT_HIT_TEST_RESULT_CONTEXT_LINK"
              glib:nick="link">
        <doc xml:whitespace="preserve">a hyperlink element.</doc>
      </member>
      <member name="image"
              value="8"
              c:identifier="WEBKIT_HIT_TEST_RESULT_CONTEXT_IMAGE"
              glib:nick="image">
        <doc xml:whitespace="preserve">an image element.</doc>
      </member>
      <member name="media"
              value="16"
              c:identifier="WEBKIT_HIT_TEST_RESULT_CONTEXT_MEDIA"
              glib:nick="media">
        <doc xml:whitespace="preserve">a video or audio element.</doc>
      </member>
      <member name="selection"
              value="32"
              c:identifier="WEBKIT_HIT_TEST_RESULT_CONTEXT_SELECTION"
              glib:nick="selection">
        <doc xml:whitespace="preserve">the area is selected by the user.</doc>
      </member>
      <member name="editable"
              value="64"
              c:identifier="WEBKIT_HIT_TEST_RESULT_CONTEXT_EDITABLE"
              glib:nick="editable">
        <doc xml:whitespace="preserve">the area is editable by the user.</doc>
      </member>
    </bitfield>
    <record name="HitTestResultPrivate"
            c:type="WebKitHitTestResultPrivate"
            disguised="1">
    </record>
    <class name="IconDatabase"
           c:symbol-prefix="icon_database"
           c:type="WebKitIconDatabase"
           parent="GObject.Object"
           glib:type-name="WebKitIconDatabase"
           glib:get-type="webkit_icon_database_get_type"
           glib:type-struct="IconDatabaseClass">
      <method name="clear"
              c:identifier="webkit_icon_database_clear"
              version="1.3.13"
              deprecated="Use webkit_favicon_database_clear() instead."
              deprecated-version="1.8">
        <doc xml:whitespace="preserve">Clears all icons from the database.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="database" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitIconDatabase</doc>
            <type name="IconDatabase" c:type="WebKitIconDatabase*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_icon_pixbuf"
              c:identifier="webkit_icon_database_get_icon_pixbuf"
              version="1.3.13"
              deprecated="Use webkit_favicon_database_try_get_favicon_pixbuf() instead."
              deprecated-version="1.8">
        <doc xml:whitespace="preserve">Obtains a #GdkPixbuf of the favicon for the given page URI, or
a default icon if there is no icon for the given page. Use
webkit_icon_database_get_icon_uri() if you need to distinguish these cases.
Usually you want to connect to WebKitIconDatabase::icon-loaded and call this
method in the callback.

The pixbuf will have the largest size provided by the server and should
be resized before it is displayed.
See also webkit_web_view_get_icon_pixbuf().</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a new reference to a #GdkPixbuf, or %NULL</doc>
          <type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*"/>
        </return-value>
        <parameters>
          <instance-parameter name="database" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitIconDatabase</doc>
            <type name="IconDatabase" c:type="WebKitIconDatabase*"/>
          </instance-parameter>
          <parameter name="page_uri" transfer-ownership="none">
            <doc xml:whitespace="preserve">URI of the page containing the icon</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_icon_uri"
              c:identifier="webkit_icon_database_get_icon_uri"
              version="1.3.13"
              deprecated="Use webkit_favicon_database_get_favicon_uri() instead."
              deprecated-version="1.8">
        <doc xml:whitespace="preserve">Obtains the URI for the favicon for the given page URI.
See also webkit_web_view_get_icon_uri().</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a newly allocated URI for the favicon, or %NULL</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="database" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitIconDatabase</doc>
            <type name="IconDatabase" c:type="WebKitIconDatabase*"/>
          </instance-parameter>
          <parameter name="page_uri" transfer-ownership="none">
            <doc xml:whitespace="preserve">URI of the page containing the icon</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_path"
              c:identifier="webkit_icon_database_get_path"
              version="1.3.13"
              deprecated="Use webkit_favicon_database_get_path() instead."
              deprecated-version="1.8">
        <doc xml:whitespace="preserve">Determines the absolute path to the database folder on disk.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the absolute path of the database folder, or %NULL</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="database" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitIconDatabase</doc>
            <type name="IconDatabase" c:type="WebKitIconDatabase*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_path"
              c:identifier="webkit_icon_database_set_path"
              version="1.3.13"
              deprecated="Use webkit_favicon_database_set_path() instead."
              deprecated-version="1.8">
        <doc xml:whitespace="preserve">Specifies the absolute path to the database folder on disk.

Passing %NULL or "" disables the icon database.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="database" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitIconDatabase</doc>
            <type name="IconDatabase" c:type="WebKitIconDatabase*"/>
          </instance-parameter>
          <parameter name="path" transfer-ownership="none">
            <doc xml:whitespace="preserve">an absolute path to the icon database folder</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="path"
                version="1.3.13"
                deprecated="Use WebKitFaviconDatabase::path instead."
                deprecated-version="1.8"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The absolute path of the icon database folder.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="IconDatabasePrivate" c:type="WebKitIconDatabasePrivate*"/>
      </field>
      <glib:signal name="icon-loaded"
                   when="last"
                   version="1.3.13"
                   deprecated="Use WebKitFaviconDatabase::icon-loaded instead."
                   deprecated-version="1.8">
        <doc xml:whitespace="preserve">This signal is emitted when a favicon is available for a page,
or a child frame.
See WebKitWebView::icon-loaded if you only need the favicon for
the main frame of a particular #WebKitWebView.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="frame" transfer-ownership="none">
            <doc xml:whitespace="preserve">the frame containing the icon</doc>
            <type name="WebFrame"/>
          </parameter>
          <parameter name="frame_uri" transfer-ownership="none">
            <doc xml:whitespace="preserve">the URI of the frame containing the icon</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="IconDatabaseClass"
            c:type="WebKitIconDatabaseClass"
            glib:is-gtype-struct-for="IconDatabase">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="_webkit_reserved1" introspectable="0">
        <callback name="_webkit_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_webkit_reserved2" introspectable="0">
        <callback name="_webkit_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_webkit_reserved3" introspectable="0">
        <callback name="_webkit_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_webkit_reserved4" introspectable="0">
        <callback name="_webkit_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <record name="IconDatabasePrivate"
            c:type="WebKitIconDatabasePrivate"
            disguised="1">
    </record>
    <enumeration name="InsertAction"
                 glib:type-name="WebKitInsertAction"
                 glib:get-type="webkit_insert_action_get_type"
                 c:type="WebKitInsertAction">
      <member name="typed"
              value="0"
              c:identifier="WEBKIT_INSERT_ACTION_TYPED"
              glib:nick="typed">
      </member>
      <member name="pasted"
              value="1"
              c:identifier="WEBKIT_INSERT_ACTION_PASTED"
              glib:nick="pasted">
      </member>
      <member name="dropped"
              value="2"
              c:identifier="WEBKIT_INSERT_ACTION_DROPPED"
              glib:nick="dropped">
      </member>
    </enumeration>
    <enumeration name="LoadStatus"
                 glib:type-name="WebKitLoadStatus"
                 glib:get-type="webkit_load_status_get_type"
                 c:type="WebKitLoadStatus">
      <member name="provisional"
              value="0"
              c:identifier="WEBKIT_LOAD_PROVISIONAL"
              glib:nick="provisional">
        <doc xml:whitespace="preserve">No data has been received yet, empty structures have been allocated to perform the load; the load may still fail for transport issues such as not being able to resolve a name, or connect to a port.</doc>
      </member>
      <member name="committed"
              value="1"
              c:identifier="WEBKIT_LOAD_COMMITTED"
              glib:nick="committed">
        <doc xml:whitespace="preserve">The first data chunk has arrived, meaning that the necessary transport requirements are stabilished, and the load is being performed.</doc>
      </member>
      <member name="finished"
              value="2"
              c:identifier="WEBKIT_LOAD_FINISHED"
              glib:nick="finished">
        <doc xml:whitespace="preserve">This state means that everything that was required to display the page has been loaded.</doc>
      </member>
      <member name="first_visually_non_empty_layout"
              value="3"
              c:identifier="WEBKIT_LOAD_FIRST_VISUALLY_NON_EMPTY_LAYOUT"
              glib:nick="first-visually-non-empty-layout">
        <doc xml:whitespace="preserve">The first layout with actual visible content happened; one or more layouts may have happened before that caused nothing to be visible on the screen, because the data available at the time was not significant enough.</doc>
      </member>
      <member name="failed"
              value="4"
              c:identifier="WEBKIT_LOAD_FAILED"
              glib:nick="failed">
        <doc xml:whitespace="preserve">This state means that some error occurred during the page load that prevented it from being completed. You can connect to the #WebKitWebView::load-error signal if you want to know precisely what kind of error occurred.</doc>
      </member>
    </enumeration>
    <constant name="MAJOR_VERSION" value="1" c:type="WEBKIT_MAJOR_VERSION">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="MICRO_VERSION" value="4" c:type="WEBKIT_MICRO_VERSION">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="MINOR_VERSION" value="11" c:type="WEBKIT_MINOR_VERSION">
      <type name="gint" c:type="gint"/>
    </constant>
    <enumeration name="NavigationResponse"
                 glib:type-name="WebKitNavigationResponse"
                 glib:get-type="webkit_navigation_response_get_type"
                 c:type="WebKitNavigationResponse">
      <doc xml:whitespace="preserve">Enum values used to denote the various responses to a navigation policy decision.</doc>
      <member name="accept"
              value="0"
              c:identifier="WEBKIT_NAVIGATION_RESPONSE_ACCEPT"
              glib:nick="accept">
        <doc xml:whitespace="preserve">Instruct WebKit to allow the navigation.</doc>
      </member>
      <member name="ignore"
              value="1"
              c:identifier="WEBKIT_NAVIGATION_RESPONSE_IGNORE"
              glib:nick="ignore">
        <doc xml:whitespace="preserve">Instruct WebKit to ignore the navigation.</doc>
      </member>
      <member name="download"
              value="2"
              c:identifier="WEBKIT_NAVIGATION_RESPONSE_DOWNLOAD"
              glib:nick="download">
        <doc xml:whitespace="preserve">Instruct WebKit to start a download of the destination instead.</doc>
      </member>
    </enumeration>
    <enumeration name="NetworkError"
                 glib:type-name="WebKitNetworkError"
                 glib:get-type="webkit_network_error_get_type"
                 c:type="WebKitNetworkError"
                 glib:error-domain="WebKitNetworkError">
      <doc xml:whitespace="preserve">Enum values used to denote the various network errors.</doc>
      <member name="failed"
              value="399"
              c:identifier="WEBKIT_NETWORK_ERROR_FAILED"
              glib:nick="failed">
        <doc xml:whitespace="preserve">Generic load failure</doc>
      </member>
      <member name="transport"
              value="300"
              c:identifier="WEBKIT_NETWORK_ERROR_TRANSPORT"
              glib:nick="transport">
        <doc xml:whitespace="preserve">Load failure due to transport error</doc>
      </member>
      <member name="unknown_protocol"
              value="301"
              c:identifier="WEBKIT_NETWORK_ERROR_UNKNOWN_PROTOCOL"
              glib:nick="unknown-protocol">
        <doc xml:whitespace="preserve">Load failure due to unknown protocol</doc>
      </member>
      <member name="cancelled"
              value="302"
              c:identifier="WEBKIT_NETWORK_ERROR_CANCELLED"
              glib:nick="cancelled">
        <doc xml:whitespace="preserve">Load failure due to cancellation</doc>
      </member>
      <member name="file_does_not_exist"
              value="303"
              c:identifier="WEBKIT_NETWORK_ERROR_FILE_DOES_NOT_EXIST"
              glib:nick="file-does-not-exist">
        <doc xml:whitespace="preserve">Load failure due to missing file</doc>
      </member>
      <function name="quark" c:identifier="webkit_network_error_quark">
        <return-value transfer-ownership="none">
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
    </enumeration>
    <class name="NetworkRequest"
           c:symbol-prefix="network_request"
           c:type="WebKitNetworkRequest"
           parent="GObject.Object"
           glib:type-name="WebKitNetworkRequest"
           glib:get-type="webkit_network_request_get_type"
           glib:type-struct="NetworkRequestClass">
      <doc xml:whitespace="preserve">This class represents the network related aspects of a navigation
request. It is used whenever WebKit wants to provide information
about a request that will be sent, or has been sent. Inside it you
can find the URI of the request, and, for valid URIs, a
#SoupMessage object, which provides access to further information
such as headers.</doc>
      <constructor name="new" c:identifier="webkit_network_request_new">
        <doc xml:whitespace="preserve">Creates a new #WebKitNetworkRequest initialized with an URI.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a new #WebKitNetworkRequest, or %NULL if the URI is invalid.</doc>
          <type name="NetworkRequest" c:type="WebKitNetworkRequest*"/>
        </return-value>
        <parameters>
          <parameter name="uri" transfer-ownership="none">
            <doc xml:whitespace="preserve">an URI</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_message"
              c:identifier="webkit_network_request_get_message"
              version="1.1.9">
        <doc xml:whitespace="preserve">Obtains the #SoupMessage held and used by the given request. Notice
that modification of the SoupMessage of a request by signal
handlers is only supported (as in, will only affect what is
actually sent to the server) where explicitly documented.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the #SoupMessage</doc>
          <type name="Soup.Message" c:type="SoupMessage*"/>
        </return-value>
        <parameters>
          <instance-parameter name="request" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitNetworkRequest</doc>
            <type name="NetworkRequest" c:type="WebKitNetworkRequest*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_uri"
              c:identifier="webkit_network_request_get_uri"
              version="1.0.0">
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the URI of the #WebKitNetworkRequest</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="request" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitNetworkRequest</doc>
            <type name="NetworkRequest" c:type="WebKitNetworkRequest*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_uri" c:identifier="webkit_network_request_set_uri">
        <doc xml:whitespace="preserve">Sets the URI held and used by the given request. When the request
has an associated #SoupMessage, its URI will also be set by this
call.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="request" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitNetworkRequest</doc>
            <type name="NetworkRequest" c:type="WebKitNetworkRequest*"/>
          </instance-parameter>
          <parameter name="uri" transfer-ownership="none">
            <doc xml:whitespace="preserve">an URI</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="message"
                version="1.1.10"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The #SoupMessage that backs the request.</doc>
        <type name="Soup.Message"/>
      </property>
      <property name="uri"
                version="1.1.10"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The URI to which the request will be made.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="NetworkRequestPrivate"
              c:type="WebKitNetworkRequestPrivate*"/>
      </field>
    </class>
    <record name="NetworkRequestClass"
            c:type="WebKitNetworkRequestClass"
            glib:is-gtype-struct-for="NetworkRequest">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="_webkit_reserved0" introspectable="0">
        <callback name="_webkit_reserved0">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_webkit_reserved1" introspectable="0">
        <callback name="_webkit_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_webkit_reserved2" introspectable="0">
        <callback name="_webkit_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_webkit_reserved3" introspectable="0">
        <callback name="_webkit_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <record name="NetworkRequestPrivate"
            c:type="WebKitNetworkRequestPrivate"
            disguised="1">
    </record>
    <class name="NetworkResponse"
           c:symbol-prefix="network_response"
           c:type="WebKitNetworkResponse"
           parent="GObject.Object"
           glib:type-name="WebKitNetworkResponse"
           glib:get-type="webkit_network_response_get_type"
           glib:type-struct="NetworkResponseClass">
      <doc xml:whitespace="preserve">This class represents the network related aspects of a navigation
response.</doc>
      <constructor name="new"
                   c:identifier="webkit_network_response_new"
                   version="1.1.14">
        <doc xml:whitespace="preserve">Creates a new #WebKitNetworkResponse initialized with an URI.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a new #WebKitNetworkResponse, or %NULL if the URI is invalid.</doc>
          <type name="NetworkResponse" c:type="WebKitNetworkResponse*"/>
        </return-value>
        <parameters>
          <parameter name="uri" transfer-ownership="none">
            <doc xml:whitespace="preserve">an URI</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_message"
              c:identifier="webkit_network_response_get_message"
              version="1.1.14">
        <doc xml:whitespace="preserve">Obtains the #SoupMessage that represents the given response. Notice
that only the response side of the HTTP conversation is
represented.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the #SoupMessage</doc>
          <type name="Soup.Message" c:type="SoupMessage*"/>
        </return-value>
        <parameters>
          <instance-parameter name="response" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitNetworkResponse</doc>
            <type name="NetworkResponse" c:type="WebKitNetworkResponse*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_suggested_filename"
              c:identifier="webkit_network_response_get_suggested_filename"
              version="1.10">
        <doc xml:whitespace="preserve">Obtains the suggested filename for the given network response. The
suggested filename is taken from the 'Content-Disposition' HTTP
header, but this is not always present, and this method will return
%NULL in such case.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the suggested filename or %NULL if not present</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="response" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitNetworkResponse</doc>
            <type name="NetworkResponse" c:type="WebKitNetworkResponse*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_uri"
              c:identifier="webkit_network_response_get_uri"
              version="1.1.14">
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the URI of the #WebKitNetworkResponse</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="response" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitNetworkResponse</doc>
            <type name="NetworkResponse" c:type="WebKitNetworkResponse*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_uri"
              c:identifier="webkit_network_response_set_uri"
              version="1.1.14">
        <doc xml:whitespace="preserve">Sets the URI held and used by the given response. When the response
has an associated #SoupMessage, its URI will also be set by this
call.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="response" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitNetworkResponse</doc>
            <type name="NetworkResponse" c:type="WebKitNetworkResponse*"/>
          </instance-parameter>
          <parameter name="uri" transfer-ownership="none">
            <doc xml:whitespace="preserve">an URI</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="message"
                version="1.1.14"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The #SoupMessage that backs the response.</doc>
        <type name="Soup.Message"/>
      </property>
      <property name="suggested-filename"
                version="1.10"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The suggested filename for the response.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="uri"
                version="1.1.14"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The URI to which the response will be made.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="NetworkResponsePrivate"
              c:type="WebKitNetworkResponsePrivate*"/>
      </field>
    </class>
    <record name="NetworkResponseClass"
            c:type="WebKitNetworkResponseClass"
            glib:is-gtype-struct-for="NetworkResponse">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="_webkit_reserved0" introspectable="0">
        <callback name="_webkit_reserved0">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_webkit_reserved1" introspectable="0">
        <callback name="_webkit_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_webkit_reserved2" introspectable="0">
        <callback name="_webkit_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_webkit_reserved3" introspectable="0">
        <callback name="_webkit_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <record name="NetworkResponsePrivate"
            c:type="WebKitNetworkResponsePrivate"
            disguised="1">
    </record>
    <enumeration name="PluginError"
                 glib:type-name="WebKitPluginError"
                 glib:get-type="webkit_plugin_error_get_type"
                 c:type="WebKitPluginError"
                 glib:error-domain="WebKitPluginError">
      <doc xml:whitespace="preserve">Enum values used to denote the various plugin errors.</doc>
      <member name="failed"
              value="299"
              c:identifier="WEBKIT_PLUGIN_ERROR_FAILED"
              glib:nick="failed">
        <doc xml:whitespace="preserve">Generic plugin load failure</doc>
      </member>
      <member name="cannot_find_plugin"
              value="200"
              c:identifier="WEBKIT_PLUGIN_ERROR_CANNOT_FIND_PLUGIN"
              glib:nick="cannot-find-plugin">
        <doc xml:whitespace="preserve">Load failure due to missing plugin</doc>
      </member>
      <member name="cannot_load_plugin"
              value="201"
              c:identifier="WEBKIT_PLUGIN_ERROR_CANNOT_LOAD_PLUGIN"
              glib:nick="cannot-load-plugin">
        <doc xml:whitespace="preserve">Load failure due to inability to load plugin</doc>
      </member>
      <member name="java_unavailable"
              value="202"
              c:identifier="WEBKIT_PLUGIN_ERROR_JAVA_UNAVAILABLE"
              glib:nick="java-unavailable">
        <doc xml:whitespace="preserve">Load failue due to missing Java support that is required to load plugin</doc>
      </member>
      <member name="connection_cancelled"
              value="203"
              c:identifier="WEBKIT_PLUGIN_ERROR_CONNECTION_CANCELLED"
              glib:nick="connection-cancelled">
        <doc xml:whitespace="preserve">Load failure due to connection cancellation</doc>
      </member>
      <member name="will_handle_load"
              value="204"
              c:identifier="WEBKIT_PLUGIN_ERROR_WILL_HANDLE_LOAD"
              glib:nick="will-handle-load">
        <doc xml:whitespace="preserve">Load failure since plugin handles the load</doc>
      </member>
      <function name="quark" c:identifier="webkit_plugin_error_quark">
        <return-value transfer-ownership="none">
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
    </enumeration>
    <enumeration name="PolicyError"
                 glib:type-name="WebKitPolicyError"
                 glib:get-type="webkit_policy_error_get_type"
                 c:type="WebKitPolicyError"
                 glib:error-domain="WebKitPolicyError">
      <doc xml:whitespace="preserve">Enum values used to denote the various policy errors.</doc>
      <member name="failed"
              value="199"
              c:identifier="WEBKIT_POLICY_ERROR_FAILED"
              glib:nick="failed">
        <doc xml:whitespace="preserve">Generic load failure due to policy error</doc>
      </member>
      <member name="cannot_show_mime_type"
              value="100"
              c:identifier="WEBKIT_POLICY_ERROR_CANNOT_SHOW_MIME_TYPE"
              glib:nick="cannot-show-mime-type">
        <doc xml:whitespace="preserve">Load failure due to unsupported mime type</doc>
      </member>
      <member name="cannot_show_url"
              value="101"
              c:identifier="WEBKIT_POLICY_ERROR_CANNOT_SHOW_URL"
              glib:nick="cannot-show-url">
        <doc xml:whitespace="preserve">Load failure due to URI that can not be shown</doc>
      </member>
      <member name="frame_load_interrupted_by_policy_change"
              value="102"
              c:identifier="WEBKIT_POLICY_ERROR_FRAME_LOAD_INTERRUPTED_BY_POLICY_CHANGE"
              glib:nick="frame-load-interrupted-by-policy-change">
        <doc xml:whitespace="preserve">Load failure due to frame load interruption by policy change</doc>
      </member>
      <member name="cannot_use_restricted_port"
              value="103"
              c:identifier="WEBKIT_POLICY_ERROR_CANNOT_USE_RESTRICTED_PORT"
              glib:nick="cannot-use-restricted-port">
        <doc xml:whitespace="preserve">Load failure due to port restriction</doc>
      </member>
      <function name="quark" c:identifier="webkit_policy_error_quark">
        <return-value transfer-ownership="none">
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
    </enumeration>
    <class name="SecurityOrigin"
           c:symbol-prefix="security_origin"
           c:type="WebKitSecurityOrigin"
           parent="GObject.Object"
           glib:type-name="WebKitSecurityOrigin"
           glib:get-type="webkit_security_origin_get_type"
           glib:type-struct="SecurityOriginClass">
      <doc xml:whitespace="preserve">#WebKitSecurityOrigin is a representation of a security domain defined
by web sites. An origin consists of a host name, a protocol, and a port
number. Web sites with the same security origin can access each other's
resources for client-side scripting or database access.

Use #webkit_web_frame_get_security_origin to get the security origin of a
#WebKitWebFrame.

Database quotas and usages are also defined per security origin. The
cumulative disk usage of an origin's databases may be retrieved with
#webkit_security_origin_get_web_database_usage. An origin's quota can be
adjusted with #webkit_security_origin_set_web_database_quota.</doc>
      <method name="get_all_web_databases"
              c:identifier="webkit_security_origin_get_all_web_databases"
              version="1.1.14">
        <doc xml:whitespace="preserve">Returns a list of all Web Databases in the security origin.</doc>
        <return-value transfer-ownership="container">
          <doc xml:whitespace="preserve">a #GList of databases in the security origin.</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="WebDatabase"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="securityOrigin" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitSecurityOrigin</doc>
            <type name="SecurityOrigin" c:type="WebKitSecurityOrigin*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_host"
              c:identifier="webkit_security_origin_get_host"
              version="1.1.14">
        <doc xml:whitespace="preserve">Returns the hostname for the security origin.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the hostname for the security origin</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="securityOrigin" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitSecurityOrigin</doc>
            <type name="SecurityOrigin" c:type="WebKitSecurityOrigin*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_port"
              c:identifier="webkit_security_origin_get_port"
              version="1.1.14">
        <doc xml:whitespace="preserve">Returns the port for the security origin.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the port for the security origin</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="securityOrigin" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitSecurityOrigin</doc>
            <type name="SecurityOrigin" c:type="WebKitSecurityOrigin*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_protocol"
              c:identifier="webkit_security_origin_get_protocol"
              version="1.1.14">
        <doc xml:whitespace="preserve">Returns the protocol for the security origin.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the protocol for the security origin</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="securityOrigin" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitSecurityOrigin</doc>
            <type name="SecurityOrigin" c:type="WebKitSecurityOrigin*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_web_database_quota"
              c:identifier="webkit_security_origin_get_web_database_quota"
              version="1.1.14">
        <doc xml:whitespace="preserve">Returns the quota for Web Database storage of the security origin
in bytes.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the Web Database quota</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="securityOrigin" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitSecurityOrigin</doc>
            <type name="SecurityOrigin" c:type="WebKitSecurityOrigin*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_web_database_usage"
              c:identifier="webkit_security_origin_get_web_database_usage"
              version="1.1.14">
        <doc xml:whitespace="preserve">Returns the cumulative size of all Web Database database's in the origin
in bytes.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the cumulative size of all databases</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="securityOrigin" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitSecurityOrigin</doc>
            <type name="SecurityOrigin" c:type="WebKitSecurityOrigin*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_web_database_quota"
              c:identifier="webkit_security_origin_set_web_database_quota"
              version="1.1.14">
        <doc xml:whitespace="preserve">Adjust the quota for Web Database storage of the security origin</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="securityOrigin" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitSecurityOrigin</doc>
            <type name="SecurityOrigin" c:type="WebKitSecurityOrigin*"/>
          </instance-parameter>
          <parameter name="quota" transfer-ownership="none">
            <doc xml:whitespace="preserve">a new Web Database quota in bytes</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
        </parameters>
      </method>
      <property name="host" version="1.1.14" transfer-ownership="none">
        <doc xml:whitespace="preserve">The host of the security origin.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="port" version="1.1.14" transfer-ownership="none">
        <doc xml:whitespace="preserve">The port of the security origin.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="protocol" version="1.1.14" transfer-ownership="none">
        <doc xml:whitespace="preserve">The protocol of the security origin.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="web-database-quota"
                version="1.1.14"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The web database qouta of the security origin in bytes.</doc>
        <type name="guint64" c:type="guint64"/>
      </property>
      <property name="web-database-usage"
                version="1.1.14"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The cumulative size of all web databases in the security origin in bytes.</doc>
        <type name="guint64" c:type="guint64"/>
      </property>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="SecurityOriginPrivate"
              c:type="WebKitSecurityOriginPrivate*"/>
      </field>
    </class>
    <record name="SecurityOriginClass"
            c:type="WebKitSecurityOriginClass"
            glib:is-gtype-struct-for="SecurityOrigin">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="_webkit_reserved1" introspectable="0">
        <callback name="_webkit_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_webkit_reserved2" introspectable="0">
        <callback name="_webkit_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_webkit_reserved3" introspectable="0">
        <callback name="_webkit_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_webkit_reserved4" introspectable="0">
        <callback name="_webkit_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <record name="SecurityOriginPrivate"
            c:type="WebKitSecurityOriginPrivate"
            disguised="1">
    </record>
    <bitfield name="SecurityPolicy"
              version="2.0"
              glib:type-name="WebKitSecurityPolicy"
              glib:get-type="webkit_security_policy_get_type"
              c:type="WebKitSecurityPolicy">
      <doc xml:whitespace="preserve">Flags used to represent the security policy of a URI scheme.</doc>
      <member name="local"
              value="2"
              c:identifier="WEBKIT_SECURITY_POLICY_LOCAL"
              glib:nick="local">
        <doc xml:whitespace="preserve">Local URI scheme, other non-local pages cannot link to or access URIs of this scheme.</doc>
      </member>
      <member name="no_access_to_other_scheme"
              value="4"
              c:identifier="WEBKIT_SECURITY_POLICY_NO_ACCESS_TO_OTHER_SCHEME"
              glib:nick="no-access-to-other-scheme">
        <doc xml:whitespace="preserve">Pages loaded with this URI scheme cannot access pages loaded with any other URI scheme.</doc>
      </member>
      <member name="display_isolated"
              value="8"
              c:identifier="WEBKIT_SECURITY_POLICY_DISPLAY_ISOLATED"
              glib:nick="display-isolated">
        <doc xml:whitespace="preserve">Pages cannot display these URIs unless they are from the same scheme.</doc>
      </member>
      <member name="secure"
              value="16"
              c:identifier="WEBKIT_SECURITY_POLICY_SECURE"
              glib:nick="secure">
        <doc xml:whitespace="preserve">Secure URI scheme, doesn't generate mixed content warnings when included by an HTTPS page.</doc>
      </member>
      <member name="cors_enabled"
              value="32"
              c:identifier="WEBKIT_SECURITY_POLICY_CORS_ENABLED"
              glib:nick="cors-enabled">
        <doc xml:whitespace="preserve">URI scheme that can be sent CORS (Cross-origin resource sharing) requests. See W3C CORS specification http://www.w3.org/TR/cors/.</doc>
      </member>
      <member name="empty_document"
              value="64"
              c:identifier="WEBKIT_SECURITY_POLICY_EMPTY_DOCUMENT"
              glib:nick="empty-document">
        <doc xml:whitespace="preserve">Strictly empty documents allowed to commit synchronously.</doc>
      </member>
    </bitfield>
    <enumeration name="SelectionAffinity"
                 glib:type-name="WebKitSelectionAffinity"
                 glib:get-type="webkit_selection_affinity_get_type"
                 c:type="WebKitSelectionAffinity">
      <member name="upstream"
              value="0"
              c:identifier="WEBKIT_SELECTION_AFFINITY_UPSTREAM"
              glib:nick="upstream">
      </member>
      <member name="downstream"
              value="1"
              c:identifier="WEBKIT_SELECTION_AFFINITY_DOWNSTREAM"
              glib:nick="downstream">
      </member>
    </enumeration>
    <class name="SoupAuthDialog"
           c:symbol-prefix="soup_auth_dialog"
           c:type="WebKitSoupAuthDialog"
           parent="GObject.Object"
           glib:type-name="WebKitSoupAuthDialog"
           glib:get-type="webkit_soup_auth_dialog_get_type"
           glib:type-struct="SoupAuthDialogClass">
      <doc xml:whitespace="preserve">#WebKitSoupAuthDialog is a #SoupSessionFeature that you can attach to your
#SoupSession to provide a simple authentication dialog while
handling HTTP basic auth.</doc>
      <implements name="Soup.SessionFeature"/>
      <virtual-method name="current_toplevel" introspectable="0">
        <return-value>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <instance-parameter name="authDialog" transfer-ownership="none">
            <type name="SoupAuthDialog" c:type="WebKitSoupAuthDialog*"/>
          </instance-parameter>
          <parameter name="message" transfer-ownership="none">
            <type name="Soup.Message" c:type="SoupMessage*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <glib:signal name="current-toplevel" when="last" version="1.1.1">
        <doc xml:whitespace="preserve">This signal is emitted by the @authDialog when it needs to know
the current toplevel widget in order to correctly set the
transiency for the authentication dialog.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the current toplevel #GtkWidget or %NULL if there's none</doc>
          <type name="Gtk.Widget"/>
        </return-value>
        <parameters>
          <parameter name="message" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #SoupMessage being used in the authentication process</doc>
            <type name="Soup.Message"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="SoupAuthDialogClass"
            c:type="WebKitSoupAuthDialogClass"
            glib:is-gtype-struct-for="SoupAuthDialog">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="current_toplevel" introspectable="0">
        <callback name="current_toplevel" introspectable="0">
          <return-value>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </return-value>
          <parameters>
            <parameter name="authDialog" transfer-ownership="none">
              <type name="SoupAuthDialog" c:type="WebKitSoupAuthDialog*"/>
            </parameter>
            <parameter name="message" transfer-ownership="none">
              <type name="Soup.Message" c:type="SoupMessage*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <interface name="SpellChecker"
               c:symbol-prefix="spell_checker"
               c:type="WebKitSpellChecker"
               glib:type-name="WebKitSpellChecker"
               glib:get-type="webkit_spell_checker_get_type"
               glib:type-struct="SpellCheckerInterface">
      <doc xml:whitespace="preserve">#WebKitSpellChecker provides APIs for the spell checking
functionality used internally by WebKit to perform spell checking
in editable areas. This can be used, for example, by browsers to
implement custom spell checking context menus or sophisticated
auto-correct features.</doc>
      <virtual-method name="check_spelling_of_string"
                      invoker="check_spelling_of_string"
                      version="1.5.1">
        <doc xml:whitespace="preserve">Checks @string for misspellings using @checker, storing the
location and length of the first misspelling in
@misspelling_location and @misspelling_length respectively.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="checker" transfer-ownership="none">
            <type name="SpellChecker" c:type="WebKitSpellChecker*"/>
          </instance-parameter>
          <parameter name="word" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="misspelling_location"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     allow-none="1">
            <doc xml:whitespace="preserve">a pointer to an integer to store the location of the first misspelling</doc>
            <type name="gint" c:type="int*"/>
          </parameter>
          <parameter name="misspelling_length"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     allow-none="1">
            <doc xml:whitespace="preserve">a pointer to an integer to store the length of the first misspelling</doc>
            <type name="gint" c:type="int*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_autocorrect_suggestions_for_misspelled_word"
                      invoker="get_autocorrect_suggestions_for_misspelled_word"
                      version="1.5.1">
        <doc xml:whitespace="preserve">Returns a suggestion for a word to use in an "autocorrect" feature.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">the suggestion for the autocorrection of @word</doc>
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="checker" transfer-ownership="none">
            <type name="SpellChecker" c:type="WebKitSpellChecker*"/>
          </instance-parameter>
          <parameter name="word" transfer-ownership="none">
            <doc xml:whitespace="preserve">a misspelled word</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_guesses_for_word"
                      invoker="get_guesses_for_word"
                      version="1.5.1">
        <doc xml:whitespace="preserve">Returns a %NULL-terminated array of guesses for corrections of the
misspelled word @word.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a newly allocated %NULL-terminated array of suggested corrections for a misspelled word @word. Free it with %g_strfreev when done with it.</doc>
          <array c:type="char**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="checker" transfer-ownership="none">
            <type name="SpellChecker" c:type="WebKitSpellChecker*"/>
          </instance-parameter>
          <parameter name="word" transfer-ownership="none">
            <doc xml:whitespace="preserve">the misspelled word</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="context" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">the surrounding context of the misspelled word</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="ignore_word" invoker="ignore_word" version="1.5.1">
        <doc xml:whitespace="preserve">Instructs the @checker to ignore @word as a misspelling for this
session.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="checker" transfer-ownership="none">
            <type name="SpellChecker" c:type="WebKitSpellChecker*"/>
          </instance-parameter>
          <parameter name="word" transfer-ownership="none">
            <doc xml:whitespace="preserve">the word to ignore</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="learn_word" invoker="learn_word" version="1.5.1">
        <doc xml:whitespace="preserve">Instructs the @checker to add @word to its dictionary as a properly
spelled word. The word will be learned permanently in the user's
personal dictionary.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="checker" transfer-ownership="none">
            <type name="SpellChecker" c:type="WebKitSpellChecker*"/>
          </instance-parameter>
          <parameter name="word" transfer-ownership="none">
            <doc xml:whitespace="preserve">the word to learn</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="update_spell_checking_languages"
                      invoker="update_spell_checking_languages"
                      version="1.5.1">
        <doc xml:whitespace="preserve">Sets @languages as the list of languages to use by @checker. The
accepted format is a list of comma (',') separated language codes
of the form 'en_US', ie, language_VARIANT.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="checker" transfer-ownership="none">
            <type name="SpellChecker" c:type="WebKitSpellChecker*"/>
          </instance-parameter>
          <parameter name="languages" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">a string of languages to use for @checker</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="check_spelling_of_string"
              c:identifier="webkit_spell_checker_check_spelling_of_string"
              version="1.5.1">
        <doc xml:whitespace="preserve">Checks @string for misspellings using @checker, storing the
location and length of the first misspelling in
@misspelling_location and @misspelling_length respectively.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="checker" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitSpellChecker</doc>
            <type name="SpellChecker" c:type="WebKitSpellChecker*"/>
          </instance-parameter>
          <parameter name="string" transfer-ownership="none">
            <doc xml:whitespace="preserve">the string to check for misspellings</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="misspelling_location"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     allow-none="1">
            <doc xml:whitespace="preserve">a pointer to an integer to store the location of the first misspelling</doc>
            <type name="gint" c:type="int*"/>
          </parameter>
          <parameter name="misspelling_length"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     allow-none="1">
            <doc xml:whitespace="preserve">a pointer to an integer to store the length of the first misspelling</doc>
            <type name="gint" c:type="int*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_autocorrect_suggestions_for_misspelled_word"
              c:identifier="webkit_spell_checker_get_autocorrect_suggestions_for_misspelled_word"
              version="1.5.1">
        <doc xml:whitespace="preserve">Returns a suggestion for a word to use in an "autocorrect" feature.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">the suggestion for the autocorrection of @word</doc>
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="checker" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitSpellChecker</doc>
            <type name="SpellChecker" c:type="WebKitSpellChecker*"/>
          </instance-parameter>
          <parameter name="word" transfer-ownership="none">
            <doc xml:whitespace="preserve">a misspelled word</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_guesses_for_word"
              c:identifier="webkit_spell_checker_get_guesses_for_word"
              version="1.5.1">
        <doc xml:whitespace="preserve">Returns a %NULL-terminated array of guesses for corrections of the
misspelled word @word.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a newly allocated %NULL-terminated array of suggested corrections for a misspelled word @word. Free it with %g_strfreev when done with it.</doc>
          <array c:type="char**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="checker" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitSpellChecker</doc>
            <type name="SpellChecker" c:type="WebKitSpellChecker*"/>
          </instance-parameter>
          <parameter name="word" transfer-ownership="none">
            <doc xml:whitespace="preserve">the misspelled word</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="context" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">the surrounding context of the misspelled word</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="ignore_word"
              c:identifier="webkit_spell_checker_ignore_word"
              version="1.5.1">
        <doc xml:whitespace="preserve">Instructs the @checker to ignore @word as a misspelling for this
session.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="checker" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitSpellChecker</doc>
            <type name="SpellChecker" c:type="WebKitSpellChecker*"/>
          </instance-parameter>
          <parameter name="word" transfer-ownership="none">
            <doc xml:whitespace="preserve">the word to ignore</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="learn_word"
              c:identifier="webkit_spell_checker_learn_word"
              version="1.5.1">
        <doc xml:whitespace="preserve">Instructs the @checker to add @word to its dictionary as a properly
spelled word. The word will be learned permanently in the user's
personal dictionary.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="checker" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitSpellChecker</doc>
            <type name="SpellChecker" c:type="WebKitSpellChecker*"/>
          </instance-parameter>
          <parameter name="word" transfer-ownership="none">
            <doc xml:whitespace="preserve">the word to learn</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="update_spell_checking_languages"
              c:identifier="webkit_spell_checker_update_spell_checking_languages"
              version="1.5.1">
        <doc xml:whitespace="preserve">Sets @languages as the list of languages to use by @checker. The
accepted format is a list of comma (',') separated language codes
of the form 'en_US', ie, language_VARIANT.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="checker" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitSpellChecker</doc>
            <type name="SpellChecker" c:type="WebKitSpellChecker*"/>
          </instance-parameter>
          <parameter name="languages" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">a string of languages to use for @checker</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
    </interface>
    <record name="SpellCheckerInterface"
            c:type="WebKitSpellCheckerInterface"
            glib:is-gtype-struct-for="SpellChecker">
      <field name="g_iface">
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="check_spelling_of_string">
        <callback name="check_spelling_of_string">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="checker" transfer-ownership="none">
              <type name="SpellChecker" c:type="WebKitSpellChecker*"/>
            </parameter>
            <parameter name="word" transfer-ownership="none">
              <type name="utf8" c:type="const char*"/>
            </parameter>
            <parameter name="misspelling_location"
                       direction="out"
                       caller-allocates="0"
                       transfer-ownership="full"
                       allow-none="1">
              <doc xml:whitespace="preserve">a pointer to an integer to store the location of the first misspelling</doc>
              <type name="gint" c:type="int*"/>
            </parameter>
            <parameter name="misspelling_length"
                       direction="out"
                       caller-allocates="0"
                       transfer-ownership="full"
                       allow-none="1">
              <doc xml:whitespace="preserve">a pointer to an integer to store the length of the first misspelling</doc>
              <type name="gint" c:type="int*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_guesses_for_word">
        <callback name="get_guesses_for_word">
          <return-value transfer-ownership="full">
            <doc xml:whitespace="preserve">a newly allocated %NULL-terminated array of suggested corrections for a misspelled word @word. Free it with %g_strfreev when done with it.</doc>
            <array c:type="char**">
              <type name="utf8"/>
            </array>
          </return-value>
          <parameters>
            <parameter name="checker" transfer-ownership="none">
              <type name="SpellChecker" c:type="WebKitSpellChecker*"/>
            </parameter>
            <parameter name="word" transfer-ownership="none">
              <doc xml:whitespace="preserve">the misspelled word</doc>
              <type name="utf8" c:type="const char*"/>
            </parameter>
            <parameter name="context" transfer-ownership="none" allow-none="1">
              <doc xml:whitespace="preserve">the surrounding context of the misspelled word</doc>
              <type name="utf8" c:type="const char*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="update_spell_checking_languages">
        <callback name="update_spell_checking_languages">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="checker" transfer-ownership="none">
              <type name="SpellChecker" c:type="WebKitSpellChecker*"/>
            </parameter>
            <parameter name="languages"
                       transfer-ownership="none"
                       allow-none="1">
              <doc xml:whitespace="preserve">a string of languages to use for @checker</doc>
              <type name="utf8" c:type="const char*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_autocorrect_suggestions_for_misspelled_word">
        <callback name="get_autocorrect_suggestions_for_misspelled_word">
          <return-value transfer-ownership="full">
            <doc xml:whitespace="preserve">the suggestion for the autocorrection of @word</doc>
            <type name="utf8" c:type="char*"/>
          </return-value>
          <parameters>
            <parameter name="checker" transfer-ownership="none">
              <type name="SpellChecker" c:type="WebKitSpellChecker*"/>
            </parameter>
            <parameter name="word" transfer-ownership="none">
              <doc xml:whitespace="preserve">a misspelled word</doc>
              <type name="utf8" c:type="const char*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="learn_word">
        <callback name="learn_word">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="checker" transfer-ownership="none">
              <type name="SpellChecker" c:type="WebKitSpellChecker*"/>
            </parameter>
            <parameter name="word" transfer-ownership="none">
              <doc xml:whitespace="preserve">the word to learn</doc>
              <type name="utf8" c:type="const char*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="ignore_word">
        <callback name="ignore_word">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="checker" transfer-ownership="none">
              <type name="SpellChecker" c:type="WebKitSpellChecker*"/>
            </parameter>
            <parameter name="word" transfer-ownership="none">
              <doc xml:whitespace="preserve">the word to ignore</doc>
              <type name="utf8" c:type="const char*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <constant name="USER_AGENT_MAJOR_VERSION"
              value="537"
              c:type="WEBKIT_USER_AGENT_MAJOR_VERSION">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="USER_AGENT_MINOR_VERSION"
              value="26"
              c:type="WEBKIT_USER_AGENT_MINOR_VERSION">
      <type name="gint" c:type="gint"/>
    </constant>
    <class name="ViewportAttributes"
           c:symbol-prefix="viewport_attributes"
           c:type="WebKitViewportAttributes"
           parent="GObject.Object"
           glib:type-name="WebKitViewportAttributes"
           glib:get-type="webkit_viewport_attributes_get_type"
           glib:type-struct="ViewportAttributesClass">
      <doc xml:whitespace="preserve">#WebKitViewportAttributes offers the viewport properties to user agents to
control the viewport layout. It contains the viewport size, initial scale with limits,
and information about whether a user is able to scale the contents in the viewport.
This makes a web page fit the device screen.

The #WebKitWebView::viewport-attributes-changed signal will be emitted with #WebKitViewportAttributes
when the viewport attributes are updated in the case of loading web pages contain
the viewport properties and calling webkit_viewport_attributes_recompute.

If the device size, available size, desktop width, or device DPI needs to be changed due to 
a consequence of an explicit browser request (caused by screen rotation, resizing, or similar reasons),
You should call #webkit_viewport_attributes_recompute to recompute the viewport properties and 
override those values in the handler of #WebKitWebView::viewport-attributes-recompute-requested signal.

For more information on the viewport properties, refer to the Safari reference library at
http://developer.apple.com/safari/library/documentation/appleapplications/reference/safarihtmlref/articles/metatags.html

&lt;informalexample&gt;&lt;programlisting&gt;
/&lt;!-- --&gt;* Connect to the viewport-attributes-changes signal *&lt;!-- --&gt;/
WebKitViewportAttributes* attributes = webkit_web_view_get_viewport_attributes (web_view);
g_signal_connect (web_view, "viewport-attributes-recompute-requested", G_CALLBACK (viewport_recompute_cb), window);
g_signal_connect (web_view, "viewport-attributes-changed", G_CALLBACK (viewport_changed_cb), window);
g_signal_connect (attributes, "notify::valid", G_CALLBACK (viewport_valid_changed_cb), web_view);

/&lt;!-- --&gt;* Handle the viewport-attributes-recompute-requested signal to override the device width *&lt;!-- --&gt;/
static void
viewport_recompute_cb (WebKitWebView* web_view, WebKitViewportAttributes* attributes, GtkWidget* window)
{
    int override_available_width = 480;
    g_object_set (G_OBJECT(attributes), "available-width", override_available_width, NULL);
}

/&lt;!-- --&gt;* Handle the viewport-attributes-changed signal to recompute the initial scale factor *&lt;!-- --&gt;/
static void 
viewport_changed_cb (WebKitWebView* web_view, WebKitViewportAttributes* attributes, gpointer data)
{
    gfloat initialScale;
    g_object_get (G_OBJECT (atributes), "initial-scale-factor", &amp;initialScale, NULL);
    webkit_web_view_set_zoom_level (web_view, initialScale);
}

/&lt;!-- --&gt;* Handle the notify::valid signal to initialize the zoom level *&lt;!-- --&gt;/
static void
viewport_valid_changed_cb (WebKitViewportAttributes* attributes, GParamSpec* pspec, WebKitWebView* web_view)
{
    gboolean is_valid;
    g_object_get (attributes, "valid", &amp;is_valid, NULL);
    if (!is_valid) 
        webkit_web_view_set_zoom_level (web_view, 1.0);
}
&lt;/programlisting&gt;&lt;/informalexample&gt;</doc>
      <method name="recompute"
              c:identifier="webkit_viewport_attributes_recompute"
              version="1.3.8">
        <doc xml:whitespace="preserve">Recompute the optimal viewport attributes and emit the viewport-attribute-changed signal. 
The viewport-attributes-recompute-requested signal also will be handled to override 
the device size, available size, desktop width, or device DPI.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="viewportAttributes"
                              transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitViewportAttributes</doc>
            <type name="ViewportAttributes"
                  c:type="WebKitViewportAttributes*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="available-height" writable="1" transfer-ownership="none">
        <type name="gint" c:type="gint"/>
      </property>
      <property name="available-width" writable="1" transfer-ownership="none">
        <type name="gint" c:type="gint"/>
      </property>
      <property name="desktop-width" writable="1" transfer-ownership="none">
        <type name="gint" c:type="gint"/>
      </property>
      <property name="device-dpi" writable="1" transfer-ownership="none">
        <type name="gint" c:type="gint"/>
      </property>
      <property name="device-height" writable="1" transfer-ownership="none">
        <type name="gint" c:type="gint"/>
      </property>
      <property name="device-pixel-ratio" transfer-ownership="none">
        <type name="gfloat" c:type="gfloat"/>
      </property>
      <property name="device-width" writable="1" transfer-ownership="none">
        <type name="gint" c:type="gint"/>
      </property>
      <property name="height" transfer-ownership="none">
        <type name="gint" c:type="gint"/>
      </property>
      <property name="initial-scale-factor" transfer-ownership="none">
        <type name="gfloat" c:type="gfloat"/>
      </property>
      <property name="maximum-scale-factor" transfer-ownership="none">
        <type name="gfloat" c:type="gfloat"/>
      </property>
      <property name="minimum-scale-factor" transfer-ownership="none">
        <type name="gfloat" c:type="gfloat"/>
      </property>
      <property name="user-scalable" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="valid" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="width" transfer-ownership="none">
        <type name="gint" c:type="gint"/>
      </property>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="ViewportAttributesPrivate"
              c:type="WebKitViewportAttributesPrivate*"/>
      </field>
    </class>
    <record name="ViewportAttributesClass"
            c:type="WebKitViewportAttributesClass"
            glib:is-gtype-struct-for="ViewportAttributes">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="_webkit_reserved0" introspectable="0">
        <callback name="_webkit_reserved0">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_webkit_reserved1" introspectable="0">
        <callback name="_webkit_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_webkit_reserved2" introspectable="0">
        <callback name="_webkit_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_webkit_reserved3" introspectable="0">
        <callback name="_webkit_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <record name="ViewportAttributesPrivate"
            c:type="WebKitViewportAttributesPrivate"
            disguised="1">
    </record>
    <class name="WebBackForwardList"
           c:symbol-prefix="web_back_forward_list"
           c:type="WebKitWebBackForwardList"
           parent="GObject.Object"
           glib:type-name="WebKitWebBackForwardList"
           glib:get-type="webkit_web_back_forward_list_get_type"
           glib:type-struct="WebBackForwardListClass">
      <doc xml:whitespace="preserve">&lt;informalexample&gt;&lt;programlisting&gt;
/&lt;!-- --&gt;* Get the WebKitWebBackForwardList from the WebKitWebView *&lt;!-- --&gt;/
WebKitWebBackForwardList *back_forward_list = webkit_web_view_get_back_forward_list (my_web_view);
WebKitWebHistoryItem *item = webkit_web_back_forward_list_get_current_item (back_forward_list);

/&lt;!-- --&gt;* Do something with a WebKitWebHistoryItem *&lt;!-- --&gt;/
g_print("%p", item);

/&lt;!-- --&gt;* Control some parameters *&lt;!-- --&gt;/
WebKitWebBackForwardList *back_forward_list = webkit_web_view_get_back_forward_list (my_web_view);
webkit_web_back_forward_list_set_limit (back_forward_list, 30);
&lt;/programlisting&gt;&lt;/informalexample&gt;</doc>
      <constructor name="new_with_web_view"
                   c:identifier="webkit_web_back_forward_list_new_with_web_view"
                   introspectable="0"
                   deprecated="Instances of #WebKitWebBackForwardList are created and owned by #WebKitWebView instances only."
                   deprecated-version="1.3.4">
        <doc xml:whitespace="preserve">Creates an instance of the back forward list with a controlling #WebKitWebView</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a #WebKitWebBackForwardList</doc>
          <type name="WebBackForwardList" c:type="WebKitWebBackForwardList*"/>
        </return-value>
        <parameters>
          <parameter name="web_view" transfer-ownership="none">
            <doc xml:whitespace="preserve">the back forward list's #WebKitWebView</doc>
            <type name="WebView" c:type="WebKitWebView*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="add_item"
              c:identifier="webkit_web_back_forward_list_add_item"
              version="1.1.1">
        <doc xml:whitespace="preserve">Adds the item to the #WebKitWebBackForwardList.

The @webBackForwardList will add a reference to the @webHistoryItem, so you
don't need to keep a reference once you've added it to the list.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="web_back_forward_list"
                              transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitWebBackForwardList</doc>
            <type name="WebBackForwardList"
                  c:type="WebKitWebBackForwardList*"/>
          </instance-parameter>
          <parameter name="history_item" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #WebKitWebHistoryItem to add</doc>
            <type name="WebHistoryItem" c:type="WebKitWebHistoryItem*"/>
          </parameter>
        </parameters>
      </method>
      <method name="clear"
              c:identifier="webkit_web_back_forward_list_clear"
              version="1.3.1">
        <doc xml:whitespace="preserve">Clears the @webBackForwardList by removing all its elements. Note that not even
the current page is kept in list when cleared so you would have to add it later.
This method also clears the list of visited links which means that all links will
appear unvisited.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="web_back_forward_list"
                              transfer-ownership="none">
            <doc xml:whitespace="preserve">the #WebKitWebBackForwardList to be cleared</doc>
            <type name="WebBackForwardList"
                  c:type="WebKitWebBackForwardList*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="contains_item"
              c:identifier="webkit_web_back_forward_list_contains_item">
        <doc xml:whitespace="preserve">Checks if @web_history_item is in the back forward list</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if @web_history_item is in the back forward list, %FALSE if it doesn't</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="web_back_forward_list"
                              transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitWebBackForwardList</doc>
            <type name="WebBackForwardList"
                  c:type="WebKitWebBackForwardList*"/>
          </instance-parameter>
          <parameter name="history_item" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #WebKitWebHistoryItem to check</doc>
            <type name="WebHistoryItem" c:type="WebKitWebHistoryItem*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_back_item"
              c:identifier="webkit_web_back_forward_list_get_back_item">
        <doc xml:whitespace="preserve">Returns the item that precedes the current item</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the #WebKitWebHistoryItem preceding the current item</doc>
          <type name="WebHistoryItem" c:type="WebKitWebHistoryItem*"/>
        </return-value>
        <parameters>
          <instance-parameter name="web_back_forward_list"
                              transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitWebBackForwardList</doc>
            <type name="WebBackForwardList"
                  c:type="WebKitWebBackForwardList*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_back_length"
              c:identifier="webkit_web_back_forward_list_get_back_length">
        <doc xml:whitespace="preserve">Returns the number of items that preced the current item.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a #gint corresponding to the number of items preceding the current item</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="web_back_forward_list"
                              transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitWebBackForwardList</doc>
            <type name="WebBackForwardList"
                  c:type="WebKitWebBackForwardList*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_back_list_with_limit"
              c:identifier="webkit_web_back_forward_list_get_back_list_with_limit">
        <doc xml:whitespace="preserve">Returns a list of items that precede the current item, limited by @limit</doc>
        <return-value transfer-ownership="container">
          <doc xml:whitespace="preserve">a #GList of items preceding the current item, limited by @limit</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="WebHistoryItem"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="web_back_forward_list"
                              transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitWebBackForwardList</doc>
            <type name="WebBackForwardList"
                  c:type="WebKitWebBackForwardList*"/>
          </instance-parameter>
          <parameter name="limit" transfer-ownership="none">
            <doc xml:whitespace="preserve">the number of items to retrieve</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_current_item"
              c:identifier="webkit_web_back_forward_list_get_current_item">
        <doc xml:whitespace="preserve">Returns the current item.

Returns a NULL value if the back forward list is empty</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a #WebKitWebHistoryItem</doc>
          <type name="WebHistoryItem" c:type="WebKitWebHistoryItem*"/>
        </return-value>
        <parameters>
          <instance-parameter name="web_back_forward_list"
                              transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitWebBackForwardList</doc>
            <type name="WebBackForwardList"
                  c:type="WebKitWebBackForwardList*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_forward_item"
              c:identifier="webkit_web_back_forward_list_get_forward_item">
        <doc xml:whitespace="preserve">Returns the item that succeeds the current item.

Returns a NULL value if there nothing that succeeds the current item</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a #WebKitWebHistoryItem</doc>
          <type name="WebHistoryItem" c:type="WebKitWebHistoryItem*"/>
        </return-value>
        <parameters>
          <instance-parameter name="web_back_forward_list"
                              transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitWebBackForwardList</doc>
            <type name="WebBackForwardList"
                  c:type="WebKitWebBackForwardList*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_forward_length"
              c:identifier="webkit_web_back_forward_list_get_forward_length">
        <doc xml:whitespace="preserve">Returns the number of items that succeed the current item.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a #gint corresponding to the nuber of items succeeding the current item</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="web_back_forward_list"
                              transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitWebBackForwardList</doc>
            <type name="WebBackForwardList"
                  c:type="WebKitWebBackForwardList*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_forward_list_with_limit"
              c:identifier="webkit_web_back_forward_list_get_forward_list_with_limit">
        <doc xml:whitespace="preserve">Returns a list of items that succeed the current item, limited by @limit</doc>
        <return-value transfer-ownership="container">
          <doc xml:whitespace="preserve">a #GList of items succeeding the current item, limited by @limit</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="WebHistoryItem"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="web_back_forward_list"
                              transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitWebBackForwardList</doc>
            <type name="WebBackForwardList"
                  c:type="WebKitWebBackForwardList*"/>
          </instance-parameter>
          <parameter name="limit" transfer-ownership="none">
            <doc xml:whitespace="preserve">the number of items to retrieve</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_limit"
              c:identifier="webkit_web_back_forward_list_get_limit">
        <doc xml:whitespace="preserve">Returns the maximum limit of the back forward list.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a #gint indicating the number of #WebKitWebHistoryItem the back forward list can hold</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="web_back_forward_list"
                              transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitWebBackForwardList</doc>
            <type name="WebBackForwardList"
                  c:type="WebKitWebBackForwardList*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_nth_item"
              c:identifier="webkit_web_back_forward_list_get_nth_item">
        <doc xml:whitespace="preserve">Returns the item at a given index relative to the current item.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the #WebKitWebHistoryItem located at the specified index relative to the current item</doc>
          <type name="WebHistoryItem" c:type="WebKitWebHistoryItem*"/>
        </return-value>
        <parameters>
          <instance-parameter name="web_back_forward_list"
                              transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitWebBackForwardList</doc>
            <type name="WebBackForwardList"
                  c:type="WebKitWebBackForwardList*"/>
          </instance-parameter>
          <parameter name="index" transfer-ownership="none">
            <doc xml:whitespace="preserve">the index of the item</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="go_back"
              c:identifier="webkit_web_back_forward_list_go_back">
        <doc xml:whitespace="preserve">Steps backward in the back forward list</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="web_back_forward_list"
                              transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitWebBackForwardList</doc>
            <type name="WebBackForwardList"
                  c:type="WebKitWebBackForwardList*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="go_forward"
              c:identifier="webkit_web_back_forward_list_go_forward">
        <doc xml:whitespace="preserve">Steps forward in the back forward list</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="web_back_forward_list"
                              transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitWebBackForwardList</doc>
            <type name="WebBackForwardList"
                  c:type="WebKitWebBackForwardList*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="go_to_item"
              c:identifier="webkit_web_back_forward_list_go_to_item">
        <doc xml:whitespace="preserve">Go to the specified @web_history_item in the back forward list</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="web_back_forward_list"
                              transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitWebBackForwardList</doc>
            <type name="WebBackForwardList"
                  c:type="WebKitWebBackForwardList*"/>
          </instance-parameter>
          <parameter name="history_item" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #WebKitWebHistoryItem to go to</doc>
            <type name="WebHistoryItem" c:type="WebKitWebHistoryItem*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_limit"
              c:identifier="webkit_web_back_forward_list_set_limit">
        <doc xml:whitespace="preserve">Sets the maximum limit of the back forward list. If the back forward list
exceeds its capacity, items will be removed everytime a new item has been
added.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="web_back_forward_list"
                              transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitWebBackForwardList</doc>
            <type name="WebBackForwardList"
                  c:type="WebKitWebBackForwardList*"/>
          </instance-parameter>
          <parameter name="limit" transfer-ownership="none">
            <doc xml:whitespace="preserve">the limit to set the back forward list to</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="WebBackForwardListPrivate"
              c:type="WebKitWebBackForwardListPrivate*"/>
      </field>
    </class>
    <record name="WebBackForwardListClass"
            c:type="WebKitWebBackForwardListClass"
            glib:is-gtype-struct-for="WebBackForwardList">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="_webkit_reserved0" introspectable="0">
        <callback name="_webkit_reserved0">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_webkit_reserved1" introspectable="0">
        <callback name="_webkit_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_webkit_reserved2" introspectable="0">
        <callback name="_webkit_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_webkit_reserved3" introspectable="0">
        <callback name="_webkit_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <record name="WebBackForwardListPrivate"
            c:type="WebKitWebBackForwardListPrivate"
            disguised="1">
    </record>
    <class name="WebDataSource"
           c:symbol-prefix="web_data_source"
           c:type="WebKitWebDataSource"
           parent="GObject.Object"
           glib:type-name="WebKitWebDataSource"
           glib:get-type="webkit_web_data_source_get_type"
           glib:type-struct="WebDataSourceClass">
      <doc xml:whitespace="preserve">Data source encapsulates the content of a #WebKitWebFrame. A
#WebKitWebFrame has a main resource and subresources and the data source
provides access to these resources. When a request gets loaded initially,
it is set to a provisional state. The application can request for the
request that initiated the load by asking for the provisional data source
and invoking the webkit_web_data_source_get_initial_request method of
#WebKitWebDataSource. This data source may not have enough data and some
methods may return empty values. To get a "full" data source with the data
and resources loaded, you need to get the non-provisional data source
through #WebKitWebFrame's webkit_web_frame_get_data_source method. This
data source will have the data after everything was loaded. Make sure that
the data source was finished loading before using any of its methods. You
can do this via webkit_web_data_source_is_loading.</doc>
      <constructor name="new"
                   c:identifier="webkit_web_data_source_new"
                   version="1.1.14">
        <doc xml:whitespace="preserve">Creates a new #WebKitWebDataSource instance. The URL of the
#WebKitWebDataSource will be set to "about:blank".</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a new #WebKitWebDataSource.</doc>
          <type name="WebDataSource" c:type="WebKitWebDataSource*"/>
        </return-value>
      </constructor>
      <constructor name="new_with_request"
                   c:identifier="webkit_web_data_source_new_with_request"
                   version="1.1.14">
        <doc xml:whitespace="preserve">Creates a new #WebKitWebDataSource from a #WebKitNetworkRequest. Normally,
#WebKitWebFrame objects create their data sources so you will almost never
want to invoke this method directly.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a new #WebKitWebDataSource</doc>
          <type name="WebDataSource" c:type="WebKitWebDataSource*"/>
        </return-value>
        <parameters>
          <parameter name="request" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #WebKitNetworkRequest to use to create this data source</doc>
            <type name="NetworkRequest" c:type="WebKitNetworkRequest*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_data"
              c:identifier="webkit_web_data_source_get_data"
              version="1.1.14">
        <doc xml:whitespace="preserve">Returns the raw data that represents the the frame's content.The data will
be incomplete until the data has finished loading. Returns %NULL if the web
frame hasn't loaded any data. Use webkit_web_data_source_is_loading to test
if data source is in the process of loading.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GString which contains the raw data that represents the @data_source or %NULL if the @data_source hasn't loaded any data.</doc>
          <type name="GLib.String" c:type="GString*"/>
        </return-value>
        <parameters>
          <instance-parameter name="data_source" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitWebDataSource</doc>
            <type name="WebDataSource" c:type="WebKitWebDataSource*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_encoding"
              c:identifier="webkit_web_data_source_get_encoding"
              version="1.1.14">
        <doc xml:whitespace="preserve">Returns the text encoding name as set in the #WebKitWebView, or if not, the
text encoding of the response.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the encoding name of the #WebKitWebView or of the response.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="data_source" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitWebDataSource</doc>
            <type name="WebDataSource" c:type="WebKitWebDataSource*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_initial_request"
              c:identifier="webkit_web_data_source_get_initial_request"
              version="1.1.14">
        <doc xml:whitespace="preserve">Returns a reference to the original request that was used to load the web
content. The #WebKitNetworkRequest returned by this method is the request
prior to the "committed" load state. See webkit_web_data_source_get_request
for getting the "committed" request.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the original #WebKitNetworkRequest</doc>
          <type name="NetworkRequest" c:type="WebKitNetworkRequest*"/>
        </return-value>
        <parameters>
          <instance-parameter name="data_source" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitWebDataSource</doc>
            <type name="WebDataSource" c:type="WebKitWebDataSource*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_main_resource"
              c:identifier="webkit_web_data_source_get_main_resource"
              version="1.1.14">
        <doc xml:whitespace="preserve">Returns the main resource of the @data_source</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a new #WebKitWebResource representing the main resource of the @data_source.</doc>
          <type name="WebResource" c:type="WebKitWebResource*"/>
        </return-value>
        <parameters>
          <instance-parameter name="data_source" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitWebDataSource</doc>
            <type name="WebDataSource" c:type="WebKitWebDataSource*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_request"
              c:identifier="webkit_web_data_source_get_request"
              version="1.1.14">
        <doc xml:whitespace="preserve">Returns a #WebKitNetworkRequest that was used to create this
#WebKitWebDataSource. The #WebKitNetworkRequest returned by this method is
the request that was "committed", and hence, different from the request you
get from the webkit_web_data_source_get_initial_request method.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the #WebKitNetworkRequest that created the @data_source or %NULL if the @data_source is not attached to the frame or the frame hasn't been loaded.</doc>
          <type name="NetworkRequest" c:type="WebKitNetworkRequest*"/>
        </return-value>
        <parameters>
          <instance-parameter name="data_source" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitWebDataSource</doc>
            <type name="WebDataSource" c:type="WebKitWebDataSource*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_subresources"
              c:identifier="webkit_web_data_source_get_subresources"
              version="1.1.15">
        <doc xml:whitespace="preserve">Gives you a #GList of #WebKitWebResource objects that compose the
#WebKitWebView to which this #WebKitWebDataSource is attached.</doc>
        <return-value transfer-ownership="container">
          <doc xml:whitespace="preserve">a #GList of #WebKitWebResource objects; the objects are owned by WebKit, but the GList must be freed.</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="WebResource"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="data_source" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitWebDataSource</doc>
            <type name="WebDataSource" c:type="WebKitWebDataSource*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_unreachable_uri"
              c:identifier="webkit_web_data_source_get_unreachable_uri"
              version="1.1.14">
        <doc xml:whitespace="preserve">Return the unreachable URI of @data_source. The @data_source will have an
unreachable URL if it was created using #WebKitWebFrame's
webkit_web_frame_load_alternate_html_string method.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the unreachable URL of @data_source or %NULL if there is no unreachable URL.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="data_source" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitWebDataSource</doc>
            <type name="WebDataSource" c:type="WebKitWebDataSource*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_web_frame"
              c:identifier="webkit_web_data_source_get_web_frame"
              version="1.1.14">
        <doc xml:whitespace="preserve">Returns the #WebKitWebFrame that represents this data source</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the #WebKitWebFrame that represents the @data_source. The #WebKitWebFrame is owned by WebKit and should not be freed or destroyed.  This will return %NULL if the @data_source is not attached to a frame.</doc>
          <type name="WebFrame" c:type="WebKitWebFrame*"/>
        </return-value>
        <parameters>
          <instance-parameter name="data_source" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitWebDataSource</doc>
            <type name="WebDataSource" c:type="WebKitWebDataSource*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_loading"
              c:identifier="webkit_web_data_source_is_loading"
              version="1.1.14">
        <doc xml:whitespace="preserve">Determines whether the data source is in the process of loading its content.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the @data_source is still loading, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="data_source" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitWebDataSource</doc>
            <type name="WebDataSource" c:type="WebKitWebDataSource*"/>
          </instance-parameter>
        </parameters>
      </method>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="WebDataSourcePrivate"
              c:type="WebKitWebDataSourcePrivate*"/>
      </field>
    </class>
    <record name="WebDataSourceClass"
            c:type="WebKitWebDataSourceClass"
            glib:is-gtype-struct-for="WebDataSource">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="_webkit_reserved0" introspectable="0">
        <callback name="_webkit_reserved0">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_webkit_reserved1" introspectable="0">
        <callback name="_webkit_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_webkit_reserved2" introspectable="0">
        <callback name="_webkit_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_webkit_reserved3" introspectable="0">
        <callback name="_webkit_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <record name="WebDataSourcePrivate"
            c:type="WebKitWebDataSourcePrivate"
            disguised="1">
    </record>
    <class name="WebDatabase"
           c:symbol-prefix="web_database"
           c:type="WebKitWebDatabase"
           parent="GObject.Object"
           glib:type-name="WebKitWebDatabase"
           glib:get-type="webkit_web_database_get_type"
           glib:type-struct="WebDatabaseClass">
      <doc xml:whitespace="preserve">#WebKitWebDatabase is a representation of a Web Database database. The
proposed Web Database standard introduces support for SQL databases that web
sites can create and access on a local computer through JavaScript.

To get access to all databases defined by a security origin, use
#webkit_security_origin_get_databases. Each database has a canonical
name, as well as a user-friendly display name.

WebKit uses SQLite to create and access the local SQL databases. The location
of a #WebKitWebDatabase can be accessed wth #webkit_web_database_get_filename.
You can configure the location of all databases with
#webkit_set_database_directory_path.

For each database the web site can define an estimated size which can be
accessed with #webkit_web_database_get_expected_size. The current size of the
database in bytes is returned by #webkit_web_database_get_size.

For more information refer to the Web Database specification proposal at
http://dev.w3.org/html5/webdatabase</doc>
      <method name="get_display_name"
              c:identifier="webkit_web_database_get_display_name"
              version="1.1.14">
        <doc xml:whitespace="preserve">Returns the name of the #WebKitWebDatabase as seen by the user.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the name of the database as seen by the user.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="webDatabase" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitWebDatabase</doc>
            <type name="WebDatabase" c:type="WebKitWebDatabase*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_expected_size"
              c:identifier="webkit_web_database_get_expected_size"
              version="1.1.14">
        <doc xml:whitespace="preserve">Returns the expected size of the #WebKitWebDatabase in bytes as defined by the
web author. The Web Database standard allows web authors to specify an expected
size of the database to optimize the user experience.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the expected size of the database in bytes</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="webDatabase" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitWebDatabase</doc>
            <type name="WebDatabase" c:type="WebKitWebDatabase*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_filename"
              c:identifier="webkit_web_database_get_filename"
              version="1.1.14">
        <doc xml:whitespace="preserve">Returns the absolute filename to the #WebKitWebDatabase file on disk.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the absolute filename of the database</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="webDatabase" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitWebDatabase</doc>
            <type name="WebDatabase" c:type="WebKitWebDatabase*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_name"
              c:identifier="webkit_web_database_get_name"
              version="1.1.14">
        <doc xml:whitespace="preserve">Returns the canonical name of the #WebKitWebDatabase.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the name of the database</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="webDatabase" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitWebDatabase</doc>
            <type name="WebDatabase" c:type="WebKitWebDatabase*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_security_origin"
              c:identifier="webkit_web_database_get_security_origin"
              version="1.1.14">
        <doc xml:whitespace="preserve">Returns the security origin of the #WebKitWebDatabase.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the security origin of the database</doc>
          <type name="SecurityOrigin" c:type="WebKitSecurityOrigin*"/>
        </return-value>
        <parameters>
          <instance-parameter name="webDatabase" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitWebDatabase</doc>
            <type name="WebDatabase" c:type="WebKitWebDatabase*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_size"
              c:identifier="webkit_web_database_get_size"
              version="1.1.14">
        <doc xml:whitespace="preserve">Returns the actual size of the #WebKitWebDatabase space on disk in bytes.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the actual size of the database in bytes</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="webDatabase" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitWebDatabase</doc>
            <type name="WebDatabase" c:type="WebKitWebDatabase*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="remove"
              c:identifier="webkit_web_database_remove"
              version="1.1.14">
        <doc xml:whitespace="preserve">Removes the #WebKitWebDatabase from its security origin and destroys all data
stored in the database.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="webDatabase" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitWebDatabase</doc>
            <type name="WebDatabase" c:type="WebKitWebDatabase*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="display-name" version="1.1.14" transfer-ownership="none">
        <doc xml:whitespace="preserve">The display name of the Web Database database.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="expected-size"
                version="1.1.14"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The expected size of the database in bytes as defined by the web author.</doc>
        <type name="guint64" c:type="guint64"/>
      </property>
      <property name="filename" version="1.1.14" transfer-ownership="none">
        <doc xml:whitespace="preserve">The absolute filename of the Web Database database.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="name"
                version="1.1.14"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The name of the Web Database database.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="security-origin"
                version="1.1.14"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The security origin of the database.</doc>
        <type name="SecurityOrigin"/>
      </property>
      <property name="size" version="1.1.14" transfer-ownership="none">
        <doc xml:whitespace="preserve">The current size of the database in bytes.</doc>
        <type name="guint64" c:type="guint64"/>
      </property>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="WebDatabasePrivate" c:type="WebKitWebDatabasePrivate*"/>
      </field>
    </class>
    <record name="WebDatabaseClass"
            c:type="WebKitWebDatabaseClass"
            glib:is-gtype-struct-for="WebDatabase">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="_webkit_reserved1" introspectable="0">
        <callback name="_webkit_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_webkit_reserved2" introspectable="0">
        <callback name="_webkit_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_webkit_reserved3" introspectable="0">
        <callback name="_webkit_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_webkit_reserved4" introspectable="0">
        <callback name="_webkit_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <record name="WebDatabasePrivate"
            c:type="WebKitWebDatabasePrivate"
            disguised="1">
    </record>
    <class name="WebFrame"
           c:symbol-prefix="web_frame"
           c:type="WebKitWebFrame"
           parent="GObject.Object"
           glib:type-name="WebKitWebFrame"
           glib:get-type="webkit_web_frame_get_type"
           glib:type-struct="WebFrameClass">
      <doc xml:whitespace="preserve">A #WebKitWebView contains a main #WebKitWebFrame. A #WebKitWebFrame
contains the content of one URI. The URI and name of the frame can
be retrieved, the load status and progress can be observed using the
signals and can be controlled using the methods of the #WebKitWebFrame.
A #WebKitWebFrame can have any number of children and one child can
be found by using #webkit_web_frame_find_frame.

&lt;informalexample&gt;&lt;programlisting&gt;
/&lt;!-- --&gt;* Get the frame from the #WebKitWebView *&lt;!-- --&gt;/
WebKitWebFrame *frame = webkit_web_view_get_main_frame (WEBKIT_WEB_VIEW(my_view));
g_print ("The URI of this frame is '%s'", webkit_web_frame_get_uri (frame));
&lt;/programlisting&gt;&lt;/informalexample&gt;</doc>
      <constructor name="new"
                   c:identifier="webkit_web_frame_new"
                   deprecated="#WebKitWebFrame can only be used to inspect existing frames."
                   deprecated-version="1.0.2">
        <doc xml:whitespace="preserve">Creates a new #WebKitWebFrame initialized with a controlling #WebKitWebView.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a new #WebKitWebFrame</doc>
          <type name="WebFrame" c:type="WebKitWebFrame*"/>
        </return-value>
        <parameters>
          <parameter name="web_view" transfer-ownership="none">
            <doc xml:whitespace="preserve">the controlling #WebKitWebView</doc>
            <type name="WebView" c:type="WebKitWebView*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="find_frame" c:identifier="webkit_web_frame_find_frame">
        <doc xml:whitespace="preserve">For pre-defined names, returns @frame if @name is "_self" or "_current",
returns @frame's parent frame if @name is "_parent", and returns the main
frame if @name is "_top". Also returns @frame if it is the main frame and
@name is either "_parent" or "_top". For other names, this function returns
the first frame that matches @name. This function searches @frame and its
descendents first, then @frame's parent and its children moving up the
hierarchy until a match is found. If no match is found in @frame's
hierarchy, this function will search for a matching frame in other main
frame hierarchies. Returns %NULL if no match is found.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the found #WebKitWebFrame or %NULL in case none is found</doc>
          <type name="WebFrame" c:type="WebKitWebFrame*"/>
        </return-value>
        <parameters>
          <instance-parameter name="frame" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitWebFrame</doc>
            <type name="WebFrame" c:type="WebKitWebFrame*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:whitespace="preserve">the name of the frame to be found</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_data_source"
              c:identifier="webkit_web_frame_get_data_source"
              version="1.1.14">
        <doc xml:whitespace="preserve">Returns the committed data source.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the committed #WebKitWebDataSource.</doc>
          <type name="WebDataSource" c:type="WebKitWebDataSource*"/>
        </return-value>
        <parameters>
          <instance-parameter name="frame" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitWebFrame</doc>
            <type name="WebFrame" c:type="WebKitWebFrame*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_dom_document"
              c:identifier="webkit_web_frame_get_dom_document"
              version="1.10"
              introspectable="0">
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the #WebKitDOMDocument currently loaded in the @frame or %NULL if no document is loaded</doc>
          <type c:type="WebKitDOMDocument*"/>
        </return-value>
        <parameters>
          <instance-parameter name="frame" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitWebFrame</doc>
            <type name="WebFrame" c:type="WebKitWebFrame*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_global_context"
              c:identifier="webkit_web_frame_get_global_context"
              introspectable="0">
        <doc xml:whitespace="preserve">Gets the global JavaScript execution context. Use this function to bridge
between the WebKit and JavaScriptCore APIs.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the global JavaScript context</doc>
          <type c:type="JSGlobalContextRef"/>
        </return-value>
        <parameters>
          <instance-parameter name="frame" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitWebFrame</doc>
            <type name="WebFrame" c:type="WebKitWebFrame*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_horizontal_scrollbar_policy"
              c:identifier="webkit_web_frame_get_horizontal_scrollbar_policy">
        <return-value transfer-ownership="none">
          <type name="Gtk.PolicyType" c:type="GtkPolicyType"/>
        </return-value>
        <parameters>
          <instance-parameter name="frame" transfer-ownership="none">
            <type name="WebFrame" c:type="WebKitWebFrame*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_load_status"
              c:identifier="webkit_web_frame_get_load_status"
              version="1.1.7">
        <doc xml:whitespace="preserve">Determines the current status of the load.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">The #WebKitLoadStatus specifying the status of the current load.</doc>
          <type name="LoadStatus" c:type="WebKitLoadStatus"/>
        </return-value>
        <parameters>
          <instance-parameter name="frame" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitWebView</doc>
            <type name="WebFrame" c:type="WebKitWebFrame*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_name" c:identifier="webkit_web_frame_get_name">
        <doc xml:whitespace="preserve">Returns the @frame's name</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the name of @frame. This method will return NULL if the #WebKitWebFrame is invalid or an empty string if it is not backed by a live WebCore frame.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="frame" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitWebFrame</doc>
            <type name="WebFrame" c:type="WebKitWebFrame*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_network_response"
              c:identifier="webkit_web_frame_get_network_response"
              version="1.1.18">
        <doc xml:whitespace="preserve">Returns a #WebKitNetworkResponse object representing the response
that was given to the request for the given frame, or NULL if the
frame was not created by a load. You must unref the object when you
are done with it.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a #WebKitNetworkResponse object</doc>
          <type name="NetworkResponse" c:type="WebKitNetworkResponse*"/>
        </return-value>
        <parameters>
          <instance-parameter name="frame" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitWebFrame</doc>
            <type name="WebFrame" c:type="WebKitWebFrame*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_parent" c:identifier="webkit_web_frame_get_parent">
        <doc xml:whitespace="preserve">Returns the @frame's parent frame, or %NULL if it has none.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the parent #WebKitWebFrame or %NULL in case there is none</doc>
          <type name="WebFrame" c:type="WebKitWebFrame*"/>
        </return-value>
        <parameters>
          <instance-parameter name="frame" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitWebFrame</doc>
            <type name="WebFrame" c:type="WebKitWebFrame*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_provisional_data_source"
              c:identifier="webkit_web_frame_get_provisional_data_source"
              version="1.1.14">
        <doc xml:whitespace="preserve">You use the webkit_web_frame_load_request method to initiate a request that
creates a provisional data source. The provisional data source will
transition to a committed data source once any data has been received. Use
webkit_web_frame_get_data_source to get the committed data source.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the provisional #WebKitWebDataSource or %NULL if a load request is not in progress.</doc>
          <type name="WebDataSource" c:type="WebKitWebDataSource*"/>
        </return-value>
        <parameters>
          <instance-parameter name="frame" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitWebFrame</doc>
            <type name="WebFrame" c:type="WebKitWebFrame*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_range_for_word_around_caret"
              c:identifier="webkit_web_frame_get_range_for_word_around_caret"
              version="1.5.1."
              introspectable="0">
        <doc xml:whitespace="preserve">Returns a #WebKitDOMRange for the word where the caret is currently
positioned.</doc>
        <return-value>
          <doc xml:whitespace="preserve">a #WebKitDOMRange spanning the word where the caret currently is positioned. If there is no caret %NULL will be returned.</doc>
          <type c:type="WebKitDOMRange*"/>
        </return-value>
        <parameters>
          <instance-parameter name="frame" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitWebFrame</doc>
            <type name="WebFrame" c:type="WebKitWebFrame*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_security_origin"
              c:identifier="webkit_web_frame_get_security_origin"
              version="1.1.14">
        <doc xml:whitespace="preserve">Returns the @frame's security origin.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the security origin of @frame</doc>
          <type name="SecurityOrigin" c:type="WebKitSecurityOrigin*"/>
        </return-value>
        <parameters>
          <instance-parameter name="frame" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitWebFrame</doc>
            <type name="WebFrame" c:type="WebKitWebFrame*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_title" c:identifier="webkit_web_frame_get_title">
        <doc xml:whitespace="preserve">Returns the @frame's document title</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the title of @frame</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="frame" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitWebFrame</doc>
            <type name="WebFrame" c:type="WebKitWebFrame*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_uri" c:identifier="webkit_web_frame_get_uri">
        <doc xml:whitespace="preserve">Returns the current URI of the contents displayed by the @frame</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the URI of @frame</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="frame" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitWebFrame</doc>
            <type name="WebFrame" c:type="WebKitWebFrame*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_vertical_scrollbar_policy"
              c:identifier="webkit_web_frame_get_vertical_scrollbar_policy">
        <return-value transfer-ownership="none">
          <type name="Gtk.PolicyType" c:type="GtkPolicyType"/>
        </return-value>
        <parameters>
          <instance-parameter name="frame" transfer-ownership="none">
            <type name="WebFrame" c:type="WebKitWebFrame*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_web_view" c:identifier="webkit_web_frame_get_web_view">
        <doc xml:whitespace="preserve">Returns the #WebKitWebView that manages this #WebKitWebFrame.

The #WebKitWebView returned manages the entire hierarchy of #WebKitWebFrame
objects that contains @frame.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the #WebKitWebView that manages @frame</doc>
          <type name="WebView" c:type="WebKitWebView*"/>
        </return-value>
        <parameters>
          <instance-parameter name="frame" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitWebFrame</doc>
            <type name="WebFrame" c:type="WebKitWebFrame*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="load_alternate_string"
              c:identifier="webkit_web_frame_load_alternate_string"
              version="1.1.6">
        <doc xml:whitespace="preserve">Request loading of an alternate content for a URL that is unreachable.
Using this method will preserve the back-forward list. The URI passed in
@base_url has to be an absolute URI.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="frame" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitWebFrame</doc>
            <type name="WebFrame" c:type="WebKitWebFrame*"/>
          </instance-parameter>
          <parameter name="content" transfer-ownership="none">
            <doc xml:whitespace="preserve">the alternate content to display as the main page of the @frame</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="base_url" transfer-ownership="none">
            <doc xml:whitespace="preserve">the base URI for relative locations</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="unreachable_url" transfer-ownership="none">
            <doc xml:whitespace="preserve">the URL for the alternate page content</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="load_request" c:identifier="webkit_web_frame_load_request">
        <doc xml:whitespace="preserve">Connects to a given URI by initiating an asynchronous client request.

Creates a provisional data source that will transition to a committed data
source once any data has been received. Use webkit_web_frame_stop_loading() to
stop the load. This function is typically invoked on the main frame.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="frame" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitWebFrame</doc>
            <type name="WebFrame" c:type="WebKitWebFrame*"/>
          </instance-parameter>
          <parameter name="request" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitNetworkRequest</doc>
            <type name="NetworkRequest" c:type="WebKitNetworkRequest*"/>
          </parameter>
        </parameters>
      </method>
      <method name="load_string"
              c:identifier="webkit_web_frame_load_string"
              version="1.1.1">
        <doc xml:whitespace="preserve">Requests loading of the given @content with the specified @mime_type,
@encoding and @base_uri.

If @mime_type is %NULL, "text/html" is assumed.

If @encoding is %NULL, "UTF-8" is assumed.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="frame" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitWebFrame</doc>
            <type name="WebFrame" c:type="WebKitWebFrame*"/>
          </instance-parameter>
          <parameter name="content" transfer-ownership="none">
            <doc xml:whitespace="preserve">an URI string</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="mime_type" transfer-ownership="none">
            <doc xml:whitespace="preserve">the MIME type, or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="encoding" transfer-ownership="none">
            <doc xml:whitespace="preserve">the encoding, or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="base_uri" transfer-ownership="none">
            <doc xml:whitespace="preserve">the base URI for relative locations</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="load_uri"
              c:identifier="webkit_web_frame_load_uri"
              version="1.1.1">
        <doc xml:whitespace="preserve">Requests loading of the specified URI string.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="frame" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitWebFrame</doc>
            <type name="WebFrame" c:type="WebKitWebFrame*"/>
          </instance-parameter>
          <parameter name="uri" transfer-ownership="none">
            <doc xml:whitespace="preserve">an URI string</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="print"
              c:identifier="webkit_web_frame_print"
              version="1.1.5">
        <doc xml:whitespace="preserve">Prints the given #WebKitWebFrame, by presenting a print dialog to the
user. If you need more control over the printing process, see
webkit_web_frame_print_full().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="frame" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitWebFrame</doc>
            <type name="WebFrame" c:type="WebKitWebFrame*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="print_full"
              c:identifier="webkit_web_frame_print_full"
              version="1.1.5"
              throws="1">
        <doc xml:whitespace="preserve">Prints the given #WebKitWebFrame, using the given #GtkPrintOperation
and #GtkPrintOperationAction. This function wraps a call to
gtk_print_operation_run() for printing the contents of the
#WebKitWebFrame.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">The #GtkPrintOperationResult specifying the result of this operation.</doc>
          <type name="Gtk.PrintOperationResult"
                c:type="GtkPrintOperationResult"/>
        </return-value>
        <parameters>
          <instance-parameter name="frame" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitWebFrame to be printed</doc>
            <type name="WebFrame" c:type="WebKitWebFrame*"/>
          </instance-parameter>
          <parameter name="operation" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #GtkPrintOperation to be carried</doc>
            <type name="Gtk.PrintOperation" c:type="GtkPrintOperation*"/>
          </parameter>
          <parameter name="action" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #GtkPrintOperationAction to be performed</doc>
            <type name="Gtk.PrintOperationAction"
                  c:type="GtkPrintOperationAction"/>
          </parameter>
        </parameters>
      </method>
      <method name="reload" c:identifier="webkit_web_frame_reload">
        <doc xml:whitespace="preserve">Reloads the initial request.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="frame" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitWebFrame</doc>
            <type name="WebFrame" c:type="WebKitWebFrame*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="replace_selection"
              c:identifier="webkit_web_frame_replace_selection"
              version="1.5.1">
        <doc xml:whitespace="preserve">Replaces the current selection in @frame, if any, with @text.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="frame" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitWeFrame</doc>
            <type name="WebFrame" c:type="WebKitWebFrame*"/>
          </instance-parameter>
          <parameter name="text" transfer-ownership="none">
            <doc xml:whitespace="preserve">the text to insert in place of the current selection</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="stop_loading" c:identifier="webkit_web_frame_stop_loading">
        <doc xml:whitespace="preserve">Stops any pending loads on @frame's data source, and those of its children.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="frame" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitWebFrame</doc>
            <type name="WebFrame" c:type="WebKitWebFrame*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="horizontal-scrollbar-policy"
                version="1.1.14"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">Determines the current policy for the horizontal scrollbar of
the frame. For the main frame, make sure to set the same policy
on the scrollable widget containing the #WebKitWebView, unless
you know what you are doing.</doc>
        <type name="Gtk.PolicyType"/>
      </property>
      <property name="load-status" version="1.1.7" transfer-ownership="none">
        <doc xml:whitespace="preserve">Determines the current status of the load.</doc>
        <type name="LoadStatus"/>
      </property>
      <property name="name" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="title" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="uri" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="vertical-scrollbar-policy"
                version="1.1.14"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">Determines the current policy for the vertical scrollbar of
the frame. For the main frame, make sure to set the same policy
on the scrollable widget containing the #WebKitWebView, unless
you know what you are doing.</doc>
        <type name="Gtk.PolicyType"/>
      </property>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="WebFramePrivate" c:type="WebKitWebFramePrivate*"/>
      </field>
      <glib:signal name="cleared" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="hovering-over-link" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="insecure-content-run" when="last" version="1.10.0">
        <doc xml:whitespace="preserve">Invoked when insecure content is run from a secure page. This happens
when a page loaded via HTTPS loads a stylesheet, script, image or
iframe from an unencrypted HTTP URL.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="security_origin" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #WebKitSecurityOrigin.</doc>
            <type name="SecurityOrigin"/>
          </parameter>
          <parameter name="url" transfer-ownership="none">
            <doc xml:whitespace="preserve">the url of the insecure content.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="load-committed"
                   when="last"
                   deprecated="Use the &quot;load-status&quot; property instead.">
        <doc xml:whitespace="preserve">Emitted when frame loading is done.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="resource-content-length-received"
                   when="last"
                   version="1.7.5">
        <doc xml:whitespace="preserve">Emitted when new resource data has been received. The
@length_received variable stores the amount of bytes received
since the last time this signal was emitted. This is useful to
provide progress information about the resource load operation.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="web_resource" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #WebKitWebResource that was loaded</doc>
            <type name="WebResource"/>
          </parameter>
          <parameter name="length_received" transfer-ownership="none">
            <doc xml:whitespace="preserve">the amount of data received since the last signal emission</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="resource-load-failed" when="last" version="1.7.5">
        <doc xml:whitespace="preserve">Invoked when a resource failed to load.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="web_resource" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #WebKitWebResource that was loaded</doc>
            <type name="WebResource"/>
          </parameter>
          <parameter name="error" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #GError that was triggered</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="resource-load-finished" when="last" version="1.7.5">
        <doc xml:whitespace="preserve">Emitted when all the data for the resource was loaded.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="web_resource" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #WebKitWebResource being loaded</doc>
            <type name="WebResource"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="resource-request-starting"
                   when="last"
                   version="1.7.5">
        <doc xml:whitespace="preserve">Emitted when a request is about to be sent. You can modify the
request while handling this signal. You can set the URI in the
#WebKitNetworkRequest object itself, and add/remove/replace
headers using the #SoupMessage object it carries, if it is
present. See webkit_network_request_get_message(). Setting the
request URI to "about:blank" will effectively cause the request
to load nothing, and can be used to disable the loading of
specific resources.

Notice that information about an eventual redirect is available
in @response's #SoupMessage, not in the #SoupMessage carried by
the @request. If @response is %NULL, then this is not a
redirected request.

The #WebKitWebResource object will be the same throughout all
the lifetime of the resource, but the contents may change
between signal emissions.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="web_resource" transfer-ownership="none">
            <doc xml:whitespace="preserve">an empty #WebKitWebResource object</doc>
            <type name="WebResource"/>
          </parameter>
          <parameter name="request" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #WebKitNetworkRequest that will be dispatched</doc>
            <type name="NetworkRequest"/>
          </parameter>
          <parameter name="response" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #WebKitNetworkResponse representing the redirect response, if any</doc>
            <type name="NetworkResponse"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="resource-response-received"
                   when="last"
                   version="1.7.5">
        <doc xml:whitespace="preserve">Emitted when the response is received from the server.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="web_resource" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #WebKitWebResource being loaded</doc>
            <type name="WebResource"/>
          </parameter>
          <parameter name="response" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #WebKitNetworkResponse that was received.</doc>
            <type name="NetworkResponse"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="scrollbars-policy-changed"
                   when="last"
                   action="1"
                   version="1.1.14">
        <doc xml:whitespace="preserve">Signal emitted when policy for one or both of the scrollbars of
the view has changed. The default handler will apply the new
policy to the container that holds the #WebKitWebFrame if it is
a #GtkScrolledWindow and the frame is the main frame. If you do
not want this to be handled automatically, you need to handle
this signal.

The exception to this rule is that policies to disable the
scrollbars are applied as %GTK_POLICY_AUTOMATIC instead, since
the size request of the widget would force browser windows to
not be resizable.

You can obtain the new policies from the
WebKitWebFrame:horizontal-scrollbar-policy and
WebKitWebFrame:vertical-scrollbar-policy properties.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE to stop other handlers from being invoked for the event. %FALSE to propagate the event further.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </glib:signal>
      <glib:signal name="title-changed"
                   when="last"
                   deprecated="Use &quot;notify::title&quot; instead."
                   deprecated-version="1.1.18">
        <doc xml:whitespace="preserve">When a #WebKitWebFrame changes the document title this signal is emitted.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="title" transfer-ownership="none">
            <doc xml:whitespace="preserve">the new title</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="WebFrameClass"
            c:type="WebKitWebFrameClass"
            glib:is-gtype-struct-for="WebFrame">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="_webkit_reserved1" introspectable="0">
        <callback name="_webkit_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_webkit_reserved2" introspectable="0">
        <callback name="_webkit_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_webkit_reserved3" introspectable="0">
        <callback name="_webkit_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_webkit_reserved4" introspectable="0">
        <callback name="_webkit_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_webkit_reserved5" introspectable="0">
        <callback name="_webkit_reserved5">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_webkit_reserved6" introspectable="0">
        <callback name="_webkit_reserved6">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <record name="WebFramePrivate"
            c:type="WebKitWebFramePrivate"
            disguised="1">
    </record>
    <class name="WebHistoryItem"
           c:symbol-prefix="web_history_item"
           c:type="WebKitWebHistoryItem"
           parent="GObject.Object"
           glib:type-name="WebKitWebHistoryItem"
           glib:get-type="webkit_web_history_item_get_type"
           glib:type-struct="WebHistoryItemClass">
      <doc xml:whitespace="preserve">A history item consists out of a title and a uri. It can be part of the
#WebKitWebBackForwardList and the global history. The global history is used
for coloring the links of visited sites.  #WebKitWebHistoryItem's constructed with
#webkit_web_history_item_new and #webkit_web_history_item_new_with_data are
automatically added to the global history.

&lt;informalexample&gt;&lt;programlisting&gt;
/&lt;!-- --&gt;* Inject a visited page into the global history *&lt;!-- --&gt;/
webkit_web_history_item_new_with_data("http://www.gnome.org/", "GNOME: The Free Software Desktop Project");
webkit_web_history_item_new_with_data("http://www.webkit.org/", "The WebKit Open Source Project");
&lt;/programlisting&gt;&lt;/informalexample&gt;</doc>
      <constructor name="new" c:identifier="webkit_web_history_item_new">
        <doc xml:whitespace="preserve">Creates a new #WebKitWebHistoryItem instance</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">the new #WebKitWebHistoryItem</doc>
          <type name="WebHistoryItem" c:type="WebKitWebHistoryItem*"/>
        </return-value>
      </constructor>
      <constructor name="new_with_data"
                   c:identifier="webkit_web_history_item_new_with_data">
        <doc xml:whitespace="preserve">Creates a new #WebKitWebHistoryItem with the given URI and title</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">the new #WebKitWebHistoryItem</doc>
          <type name="WebHistoryItem" c:type="WebKitWebHistoryItem*"/>
        </return-value>
        <parameters>
          <parameter name="uri" transfer-ownership="none">
            <doc xml:whitespace="preserve">the URI of the page</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="title" transfer-ownership="none">
            <doc xml:whitespace="preserve">the title of the page</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="copy"
              c:identifier="webkit_web_history_item_copy"
              version="1.1.18">
        <doc xml:whitespace="preserve">Makes a copy of the item for use with other WebView objects.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">the new #WebKitWebHistoryItem.</doc>
          <type name="WebHistoryItem" c:type="WebKitWebHistoryItem*"/>
        </return-value>
        <parameters>
          <instance-parameter name="web_history_item"
                              transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitWebHistoryItem</doc>
            <type name="WebHistoryItem" c:type="WebKitWebHistoryItem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_alternate_title"
              c:identifier="webkit_web_history_item_get_alternate_title">
        <doc xml:whitespace="preserve">Returns the alternate title of @web_history_item</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the alternate title of @web_history_item</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="web_history_item"
                              transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitWebHistoryItem</doc>
            <type name="WebHistoryItem" c:type="WebKitWebHistoryItem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_last_visited_time"
              c:identifier="webkit_web_history_item_get_last_visited_time">
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="web_history_item"
                              transfer-ownership="none">
            <type name="WebHistoryItem" c:type="WebKitWebHistoryItem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_original_uri"
              c:identifier="webkit_web_history_item_get_original_uri">
        <doc xml:whitespace="preserve">Returns the original URI of @web_history_item.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the original URI of @web_history_item</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="web_history_item"
                              transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitWebHistoryItem</doc>
            <type name="WebHistoryItem" c:type="WebKitWebHistoryItem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_title"
              c:identifier="webkit_web_history_item_get_title">
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the page title of @web_history_item</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="web_history_item"
                              transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitWebHistoryItem</doc>
            <type name="WebHistoryItem" c:type="WebKitWebHistoryItem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_uri" c:identifier="webkit_web_history_item_get_uri">
        <doc xml:whitespace="preserve">Returns the URI of @this</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the URI of @web_history_item</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="web_history_item"
                              transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitWebHistoryItem</doc>
            <type name="WebHistoryItem" c:type="WebKitWebHistoryItem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_alternate_title"
              c:identifier="webkit_web_history_item_set_alternate_title">
        <doc xml:whitespace="preserve">Sets an alternate title for @web_history_item</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="web_history_item"
                              transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitWebHistoryItem</doc>
            <type name="WebHistoryItem" c:type="WebKitWebHistoryItem*"/>
          </instance-parameter>
          <parameter name="title" transfer-ownership="none">
            <doc xml:whitespace="preserve">the alternate title for @this history item</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="alternate-title"
                version="1.0.2"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The alternate title of the history item.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="last-visited-time"
                version="1.0.2"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The time at which the history item was last visited.</doc>
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="original-uri" version="1.0.2" transfer-ownership="none">
        <doc xml:whitespace="preserve">The original URI of the history item.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="title" version="1.0.2" transfer-ownership="none">
        <doc xml:whitespace="preserve">The title of the history item.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="uri" version="1.0.2" transfer-ownership="none">
        <doc xml:whitespace="preserve">The URI of the history item.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="WebHistoryItemPrivate"
              c:type="WebKitWebHistoryItemPrivate*"/>
      </field>
    </class>
    <record name="WebHistoryItemClass"
            c:type="WebKitWebHistoryItemClass"
            glib:is-gtype-struct-for="WebHistoryItem">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="_webkit_reserved0" introspectable="0">
        <callback name="_webkit_reserved0">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_webkit_reserved1" introspectable="0">
        <callback name="_webkit_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_webkit_reserved2" introspectable="0">
        <callback name="_webkit_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_webkit_reserved3" introspectable="0">
        <callback name="_webkit_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <record name="WebHistoryItemPrivate"
            c:type="WebKitWebHistoryItemPrivate"
            disguised="1">
    </record>
    <class name="WebInspector"
           c:symbol-prefix="web_inspector"
           c:type="WebKitWebInspector"
           parent="GObject.Object"
           glib:type-name="WebKitWebInspector"
           glib:get-type="webkit_web_inspector_get_type"
           glib:type-struct="WebInspectorClass">
      <doc xml:whitespace="preserve">The WebKit Inspector is a graphical tool to inspect and change
the content of a #WebKitWebView. It also includes an interactive
JavaScriptDebugger. Using this class one can get a GtkWidget which
can be embedded into an application to show the inspector.

The inspector is available when the #WebKitWebSettings of the
#WebKitWebView has set the #WebKitWebSettings:enable-developer-extras
to true otherwise no inspector is available.

&lt;informalexample&gt;&lt;programlisting&gt;
/&lt;!-- --&gt;* Enable the developer extras *&lt;!-- --&gt;/
WebKitWebSettings *setting = webkit_web_view_get_settings (WEBKIT_WEB_VIEW(my_webview));
g_object_set (G_OBJECT(settings), "enable-developer-extras", TRUE, NULL);

/&lt;!-- --&gt;* load some data or reload to be able to inspect the page*&lt;!-- --&gt;/
webkit_web_view_open (WEBKIT_WEB_VIEW(my_webview), "http://www.gnome.org");

/&lt;!-- --&gt;* Embed the inspector somewhere *&lt;!-- --&gt;/
WebKitWebInspector *inspector = webkit_web_view_get_inspector (WEBKIT_WEB_VIEW(my_webview));
g_signal_connect (G_OBJECT (inspector), "inspect-web-view", G_CALLBACK(create_gtk_window_around_it), NULL);
g_signal_connect (G_OBJECT (inspector), "show-window", G_CALLBACK(show_inpector_window), NULL));
g_signal_connect (G_OBJECT (inspector), "notify::inspected-uri", G_CALLBACK(inspected_uri_changed_do_stuff), NULL);
&lt;/programlisting&gt;&lt;/informalexample&gt;</doc>
      <method name="close"
              c:identifier="webkit_web_inspector_close"
              version="1.1.17">
        <doc xml:whitespace="preserve">Causes the Web Inspector to be closed.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="web_inspector" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #WebKitWebInspector that will be closed</doc>
            <type name="WebInspector" c:type="WebKitWebInspector*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_inspected_uri"
              c:identifier="webkit_web_inspector_get_inspected_uri"
              version="1.0.3">
        <doc xml:whitespace="preserve">Obtains the URI that is currently being inspected.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a pointer to the URI as an internally allocated string; it should not be freed, modified or stored.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="web_inspector" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitWebInspector</doc>
            <type name="WebInspector" c:type="WebKitWebInspector*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_web_view"
              c:identifier="webkit_web_inspector_get_web_view"
              version="1.0.3">
        <doc xml:whitespace="preserve">Obtains the #WebKitWebView that is used to render the
inspector. The #WebKitWebView instance is created by the
application, by handling the #WebKitWebInspector::inspect-web-view signal. This means
that this method may return %NULL if the user hasn't inspected
anything.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the #WebKitWebView instance that is used to render the inspector or %NULL if it is not yet created.</doc>
          <type name="WebView" c:type="WebKitWebView*"/>
        </return-value>
        <parameters>
          <instance-parameter name="web_inspector" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitWebInspector</doc>
            <type name="WebInspector" c:type="WebKitWebInspector*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="inspect_coordinates"
              c:identifier="webkit_web_inspector_inspect_coordinates"
              version="1.1.17">
        <doc xml:whitespace="preserve">Causes the Web Inspector to inspect the node that is located at the
given coordinates of the widget. The coordinates should be relative
to the #WebKitWebView widget, not to the scrollable content, and
may be obtained from a #GdkEvent directly.

This means @x, and @y being zero doesn't guarantee you will hit the
left-most top corner of the content, since the contents may have
been scrolled.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="web_inspector" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #WebKitWebInspector that will do the inspection</doc>
            <type name="WebInspector" c:type="WebKitWebInspector*"/>
          </instance-parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:whitespace="preserve">the X coordinate of the node to be inspected</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:whitespace="preserve">the Y coordinate of the node to be inspected</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="inspect_node"
              c:identifier="webkit_web_inspector_inspect_node"
              version="1.3.7"
              introspectable="0">
        <doc xml:whitespace="preserve">Causes the Web Inspector to inspect the given node.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="web_inspector" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #WebKitWebInspector that will do the inspection</doc>
            <type name="WebInspector" c:type="WebKitWebInspector*"/>
          </instance-parameter>
          <parameter name="node" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #WebKitDOMNode to inspect</doc>
            <type c:type="WebKitDOMNode*"/>
          </parameter>
        </parameters>
      </method>
      <method name="show"
              c:identifier="webkit_web_inspector_show"
              version="1.1.17">
        <doc xml:whitespace="preserve">Causes the Web Inspector to be shown.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="web_inspector" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #WebKitWebInspector that will be shown</doc>
            <type name="WebInspector" c:type="WebKitWebInspector*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="inspected-uri" version="1.0.3" transfer-ownership="none">
        <doc xml:whitespace="preserve">The URI that is currently being inspected.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="javascript-profiling-enabled"
                version="1.1.1"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">This is enabling JavaScript profiling in the Inspector. This means
that Console.profiles will return the profiles.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="timeline-profiling-enabled"
                version="1.1.17"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">This is enabling Timeline profiling in the Inspector.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="web-view" version="1.0.3" transfer-ownership="none">
        <doc xml:whitespace="preserve">The Web View that renders the Web Inspector itself.</doc>
        <type name="WebView"/>
      </property>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="WebInspectorPrivate" c:type="WebKitWebInspectorPrivate*"/>
      </field>
      <glib:signal name="attach-window" when="last" version="1.0.3">
        <doc xml:whitespace="preserve">Emitted when the inspector should appear at the same window as
the #WebKitWebView being inspected.</doc>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </glib:signal>
      <glib:signal name="close-window" when="last" version="1.0.3">
        <doc xml:whitespace="preserve">Emitted when the inspector window should be closed. You can
destroy the window or hide it so that it can be displayed again
by handling #WebKitWebInspector::show-window later on.

Notice that the inspected #WebKitWebView may no longer exist
when this signal is emitted.

Notice, too, that if you decide to destroy the window,
#WebKitWebInspector::inspect-web-view will be emmited again, when the user
inspects an element.</doc>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </glib:signal>
      <glib:signal name="detach-window" when="last" version="1.0.3">
        <doc xml:whitespace="preserve">Emitted when the inspector should appear in a separate window.</doc>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </glib:signal>
      <glib:signal name="finished" when="last" version="1.0.3">
        <doc xml:whitespace="preserve">Emitted when the inspection is done. You should release your
references on the inspector at this time. The inspected
#WebKitWebView may no longer exist when this signal is emitted.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="inspect-web-view" when="last" version="1.0.3">
        <doc xml:whitespace="preserve">Emitted when the user activates the 'inspect' context menu item
to inspect a web view. The application which is interested in
the inspector should create a window, or otherwise add the
#WebKitWebView it creates to an existing window.

You don't need to handle the reference count of the
#WebKitWebView instance you create; the widget to which you add
it will do that.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a newly allocated #WebKitWebView or %NULL</doc>
          <type name="WebView"/>
        </return-value>
        <parameters>
          <parameter name="web_view" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #WebKitWebView which will be inspected</doc>
            <type name="WebView"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="show-window" when="last" version="1.0.3">
        <doc xml:whitespace="preserve">Emitted when the inspector window should be displayed. Notice
that the window must have been created already by handling
#WebKitWebInspector::inspect-web-view.</doc>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="WebInspectorClass"
            c:type="WebKitWebInspectorClass"
            glib:is-gtype-struct-for="WebInspector">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="_webkit_reserved1" introspectable="0">
        <callback name="_webkit_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_webkit_reserved2" introspectable="0">
        <callback name="_webkit_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_webkit_reserved3" introspectable="0">
        <callback name="_webkit_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_webkit_reserved4" introspectable="0">
        <callback name="_webkit_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <record name="WebInspectorPrivate"
            c:type="WebKitWebInspectorPrivate"
            disguised="1">
    </record>
    <class name="WebNavigationAction"
           c:symbol-prefix="web_navigation_action"
           c:type="WebKitWebNavigationAction"
           parent="GObject.Object"
           glib:type-name="WebKitWebNavigationAction"
           glib:get-type="webkit_web_navigation_action_get_type"
           glib:type-struct="WebNavigationActionClass">
      <doc xml:whitespace="preserve">#WebKitWebNavigationAction is used in signals to provide details about
what led the navigation to happen. This includes, for instance, if the user
clicked a link to start that navigation, and what mouse button was used.</doc>
      <method name="get_button"
              c:identifier="webkit_web_navigation_action_get_button"
              version="1.0.3">
        <doc xml:whitespace="preserve">The GTK+ identifier for the mouse button used to click. Notice that GTK+ button values
are 1, 2 and 3 for left, middle and right buttons, so they are DOM button values +1. If the action was not
initiated by a mouse click the value will be -1.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the mouse button used to click</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="navigationAction"
                              transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitWebNavigationAction</doc>
            <type name="WebNavigationAction"
                  c:type="WebKitWebNavigationAction*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_modifier_state"
              c:identifier="webkit_web_navigation_action_get_modifier_state"
              version="1.0.3">
        <doc xml:whitespace="preserve">Returns a bitmask with the the state of the modifier keys.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a bitmask with the state of the modifier keys</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="navigationAction"
                              transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitWebNavigationAction</doc>
            <type name="WebNavigationAction"
                  c:type="WebKitWebNavigationAction*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_original_uri"
              c:identifier="webkit_web_navigation_action_get_original_uri"
              version="1.0.3">
        <doc xml:whitespace="preserve">Returns the URI that was originally requested. This may differ from the
navigation target, for instance because of a redirect.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the originally requested URI</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="navigationAction"
                              transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitWebNavigationAction</doc>
            <type name="WebNavigationAction"
                  c:type="WebKitWebNavigationAction*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_reason"
              c:identifier="webkit_web_navigation_action_get_reason"
              version="1.0.3">
        <doc xml:whitespace="preserve">Returns the reason why WebKit is requesting a navigation.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a #WebKitWebNavigationReason</doc>
          <type name="WebNavigationReason" c:type="WebKitWebNavigationReason"/>
        </return-value>
        <parameters>
          <instance-parameter name="navigationAction"
                              transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitWebNavigationAction</doc>
            <type name="WebNavigationAction"
                  c:type="WebKitWebNavigationAction*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_target_frame"
              c:identifier="webkit_web_navigation_action_get_target_frame"
              version="1.1.13">
        <doc xml:whitespace="preserve">Returns the target frame of the action.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the target frame of the action or NULL if there is no target.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="navigationAction"
                              transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitWebNavigationAction</doc>
            <type name="WebNavigationAction"
                  c:type="WebKitWebNavigationAction*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_original_uri"
              c:identifier="webkit_web_navigation_action_set_original_uri"
              version="1.0.3">
        <doc xml:whitespace="preserve">Sets the URI that was originally requested. This may differ from the
navigation target, for instance because of a redirect.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="navigationAction"
                              transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitWebNavigationAction</doc>
            <type name="WebNavigationAction"
                  c:type="WebKitWebNavigationAction*"/>
          </instance-parameter>
          <parameter name="originalUri" transfer-ownership="none">
            <doc xml:whitespace="preserve">a URI</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_reason"
              c:identifier="webkit_web_navigation_action_set_reason"
              version="1.0.3">
        <doc xml:whitespace="preserve">Sets the reason why WebKit is requesting a navigation.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="navigationAction"
                              transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitWebNavigationAction</doc>
            <type name="WebNavigationAction"
                  c:type="WebKitWebNavigationAction*"/>
          </instance-parameter>
          <parameter name="reason" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitWebNavigationReason</doc>
            <type name="WebNavigationReason"
                  c:type="WebKitWebNavigationReason"/>
          </parameter>
        </parameters>
      </method>
      <property name="button"
                version="1.0.3"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The GTK+ identifier for the mouse button used to click. Notice that GTK+ button values
are 1, 2 and 3 for left, middle and right buttons, so they are DOM button values +1. If the action was not
initiated by a mouse click the value will be -1.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="modifier-state"
                version="1.0.3"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The state of the modifier keys when the action was requested.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="original-uri"
                version="1.0.3"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The URI that was requested as the target for the navigation.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="reason"
                version="1.0.3"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The reason why this navigation is occuring.</doc>
        <type name="WebNavigationReason"/>
      </property>
      <property name="target-frame"
                version="1.1.13"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The target frame for the navigation.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="WebNavigationActionPrivate"
              c:type="WebKitWebNavigationActionPrivate*"/>
      </field>
    </class>
    <record name="WebNavigationActionClass"
            c:type="WebKitWebNavigationActionClass"
            glib:is-gtype-struct-for="WebNavigationAction">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="_webkit_reserved0" introspectable="0">
        <callback name="_webkit_reserved0">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_webkit_reserved1" introspectable="0">
        <callback name="_webkit_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_webkit_reserved2" introspectable="0">
        <callback name="_webkit_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_webkit_reserved3" introspectable="0">
        <callback name="_webkit_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <record name="WebNavigationActionPrivate"
            c:type="WebKitWebNavigationActionPrivate"
            disguised="1">
    </record>
    <enumeration name="WebNavigationReason"
                 glib:type-name="WebKitWebNavigationReason"
                 glib:get-type="webkit_web_navigation_reason_get_type"
                 c:type="WebKitWebNavigationReason">
      <doc xml:whitespace="preserve">Enum values used to denote the various navigation reasons.</doc>
      <member name="link_clicked"
              value="0"
              c:identifier="WEBKIT_WEB_NAVIGATION_REASON_LINK_CLICKED"
              glib:nick="link-clicked">
        <doc xml:whitespace="preserve">The navigation was triggered by clicking a link.</doc>
      </member>
      <member name="form_submitted"
              value="1"
              c:identifier="WEBKIT_WEB_NAVIGATION_REASON_FORM_SUBMITTED"
              glib:nick="form-submitted">
        <doc xml:whitespace="preserve">The navigation was triggered by submitting a form.</doc>
      </member>
      <member name="back_forward"
              value="2"
              c:identifier="WEBKIT_WEB_NAVIGATION_REASON_BACK_FORWARD"
              glib:nick="back-forward">
        <doc xml:whitespace="preserve">The navigation was triggered by navigating forward or backward.</doc>
      </member>
      <member name="reload"
              value="3"
              c:identifier="WEBKIT_WEB_NAVIGATION_REASON_RELOAD"
              glib:nick="reload">
        <doc xml:whitespace="preserve">The navigation was triggered by reloading.</doc>
      </member>
      <member name="form_resubmitted"
              value="4"
              c:identifier="WEBKIT_WEB_NAVIGATION_REASON_FORM_RESUBMITTED"
              glib:nick="form-resubmitted">
        <doc xml:whitespace="preserve">The navigation was triggered by resubmitting a form.</doc>
      </member>
      <member name="other"
              value="5"
              c:identifier="WEBKIT_WEB_NAVIGATION_REASON_OTHER"
              glib:nick="other">
        <doc xml:whitespace="preserve">The navigation was triggered by some other action.</doc>
      </member>
    </enumeration>
    <class name="WebPlugin"
           c:symbol-prefix="web_plugin"
           c:type="WebKitWebPlugin"
           parent="GObject.Object"
           glib:type-name="WebKitWebPlugin"
           glib:get-type="webkit_web_plugin_get_type"
           glib:type-struct="WebPluginClass">
      <doc xml:whitespace="preserve">This object represents a single plugin, found by WebKitGTK+ while
scanning the various usual directories. This object can be used to
get more information about a plugin, and enable/disable it,
allowing fine-grained control of plugins. The list of available
plugins can be obtained from the #WebKitWebPluginDatabase object.</doc>
      <method name="get_description"
              c:identifier="webkit_web_plugin_get_description"
              version="1.3.8">
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the description string for @plugin.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="plugin" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitWebPlugin</doc>
            <type name="WebPlugin" c:type="WebKitWebPlugin*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_enabled"
              c:identifier="webkit_web_plugin_get_enabled"
              version="1.3.8">
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the plugin is enabled, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="plugin" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitWebPlugin</doc>
            <type name="WebPlugin" c:type="WebKitWebPlugin*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_mimetypes"
              c:identifier="webkit_web_plugin_get_mimetypes"
              version="1.3.8"
              introspectable="0">
        <doc xml:whitespace="preserve">Returns all the #WebKitWebPluginMIMEType that @plugin is handling
at the moment.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GSList of #WebKitWebPluginMIMEType</doc>
          <type name="GLib.SList" c:type="GSList*">
            <type/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="plugin" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitWebPlugin</doc>
            <type name="WebPlugin" c:type="WebKitWebPlugin*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_name"
              c:identifier="webkit_web_plugin_get_name"
              version="1.3.8">
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the name string for @plugin.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="plugin" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitWebPlugin</doc>
            <type name="WebPlugin" c:type="WebKitWebPlugin*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_path"
              c:identifier="webkit_web_plugin_get_path"
              version="1.4.0">
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the absolute path to @plugin in system filename encoding or %NULL on failure to convert the filename from UTF-8.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="plugin" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitWebPlugin</doc>
            <type name="WebPlugin" c:type="WebKitWebPlugin*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_enabled"
              c:identifier="webkit_web_plugin_set_enabled"
              version="1.3.8">
        <doc xml:whitespace="preserve">Sets the enabled status of the @plugin.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="plugin" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitWebPlugin</doc>
            <type name="WebPlugin" c:type="WebKitWebPlugin*"/>
          </instance-parameter>
          <parameter name="enabled" transfer-ownership="none">
            <doc xml:whitespace="preserve">whether to enable the plugin</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <property name="enabled" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <field name="parentInstance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="WebPluginPrivate" c:type="WebKitWebPluginPrivate*"/>
      </field>
    </class>
    <record name="WebPluginClass"
            c:type="WebKitWebPluginClass"
            glib:is-gtype-struct-for="WebPlugin">
      <field name="parentClass">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="WebPluginDatabase"
           c:symbol-prefix="web_plugin_database"
           c:type="WebKitWebPluginDatabase"
           parent="GObject.Object"
           glib:type-name="WebKitWebPluginDatabase"
           glib:get-type="webkit_web_plugin_database_get_type"
           glib:type-struct="WebPluginDatabaseClass">
      <doc xml:whitespace="preserve">This object allows you to query information about the plugins found
by the engine while scanning the usual directories. You can then
use the #WebKitWebPlugin objects to get more information or
enable/disable individual plugins.</doc>
      <function name="plugins_list_free"
                c:identifier="webkit_web_plugin_database_plugins_list_free"
                introspectable="0">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="list" transfer-ownership="none">
            <type name="GLib.SList" c:type="GSList*">
              <type name="gpointer" c:type="gpointer"/>
            </type>
          </parameter>
        </parameters>
      </function>
      <method name="get_plugin_for_mimetype"
              c:identifier="webkit_web_plugin_database_get_plugin_for_mimetype"
              version="1.3.8">
        <doc xml:whitespace="preserve">Returns the #WebKitWebPlugin that is handling @mimeType in the
@database, or %NULL if there's none doing so.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a #WebKitWebPlugin</doc>
          <type name="WebPlugin" c:type="WebKitWebPlugin*"/>
        </return-value>
        <parameters>
          <instance-parameter name="database" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitWebPluginDatabase</doc>
            <type name="WebPluginDatabase" c:type="WebKitWebPluginDatabase*"/>
          </instance-parameter>
          <parameter name="mime_type" transfer-ownership="none">
            <doc xml:whitespace="preserve">a mime type</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_plugins"
              c:identifier="webkit_web_plugin_database_get_plugins"
              version="1.3.8">
        <doc xml:whitespace="preserve">Returns all #WebKitWebPlugin available in @database.
The returned list must be freed with webkit_web_plugin_database_plugins_list_free()</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a #GSList of #WebKitWebPlugin</doc>
          <type name="GLib.SList" c:type="GSList*">
            <type name="WebPlugin"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="database" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitWebPluginDatabase</doc>
            <type name="WebPluginDatabase" c:type="WebKitWebPluginDatabase*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="refresh"
              c:identifier="webkit_web_plugin_database_refresh"
              version="1.3.8">
        <doc xml:whitespace="preserve">Refreshes @database adding new plugins that are now in use and
removing those that have been disabled or are otherwise no longer
available.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="database" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitWebPluginDatabase</doc>
            <type name="WebPluginDatabase" c:type="WebKitWebPluginDatabase*"/>
          </instance-parameter>
        </parameters>
      </method>
      <field name="parentInstance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="WebPluginDatabasePrivate"
              c:type="WebKitWebPluginDatabasePrivate*"/>
      </field>
    </class>
    <record name="WebPluginDatabaseClass"
            c:type="WebKitWebPluginDatabaseClass"
            glib:is-gtype-struct-for="WebPluginDatabase">
      <field name="parentClass">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="WebPluginDatabasePrivate"
            c:type="WebKitWebPluginDatabasePrivate"
            disguised="1">
    </record>
    <record name="WebPluginPrivate"
            c:type="WebKitWebPluginPrivate"
            disguised="1">
    </record>
    <class name="WebPolicyDecision"
           c:symbol-prefix="web_policy_decision"
           c:type="WebKitWebPolicyDecision"
           parent="GObject.Object"
           glib:type-name="WebKitWebPolicyDecision"
           glib:get-type="webkit_web_policy_decision_get_type"
           glib:type-struct="WebPolicyDecisionClass">
      <doc xml:whitespace="preserve">#WebKitWebPolicyDecision objects are given to the application on
signal emissions that deal with policy decisions, such as if a new
window should be opened, or if a given navigation should be
allowed. The application uses it to tell the engine what to do.</doc>
      <method name="download"
              c:identifier="webkit_web_policy_decision_download"
              version="1.0.3">
        <doc xml:whitespace="preserve">Will send the DOWNLOAD decision to the policy implementer.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="decision" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitWebPolicyDecision</doc>
            <type name="WebPolicyDecision" c:type="WebKitWebPolicyDecision*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="ignore"
              c:identifier="webkit_web_policy_decision_ignore"
              version="1.0.3">
        <doc xml:whitespace="preserve">Will send the IGNORE decision to the policy implementer.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="decision" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitWebPolicyDecision</doc>
            <type name="WebPolicyDecision" c:type="WebKitWebPolicyDecision*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="use"
              c:identifier="webkit_web_policy_decision_use"
              version="1.0.3">
        <doc xml:whitespace="preserve">Will send the USE decision to the policy implementer.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="decision" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitWebPolicyDecision</doc>
            <type name="WebPolicyDecision" c:type="WebKitWebPolicyDecision*"/>
          </instance-parameter>
        </parameters>
      </method>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="WebPolicyDecisionPrivate"
              c:type="WebKitWebPolicyDecisionPrivate*"/>
      </field>
    </class>
    <record name="WebPolicyDecisionClass"
            c:type="WebKitWebPolicyDecisionClass"
            glib:is-gtype-struct-for="WebPolicyDecision">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="_webkit_reserved0" introspectable="0">
        <callback name="_webkit_reserved0">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_webkit_reserved1" introspectable="0">
        <callback name="_webkit_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_webkit_reserved2" introspectable="0">
        <callback name="_webkit_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_webkit_reserved3" introspectable="0">
        <callback name="_webkit_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <record name="WebPolicyDecisionPrivate"
            c:type="WebKitWebPolicyDecisionPrivate"
            disguised="1">
    </record>
    <class name="WebResource"
           c:symbol-prefix="web_resource"
           c:type="WebKitWebResource"
           parent="GObject.Object"
           glib:type-name="WebKitWebResource"
           glib:get-type="webkit_web_resource_get_type"
           glib:type-struct="WebResourceClass">
      <doc xml:whitespace="preserve">A web resource encapsulates the data of the download as well as the URI,
MIME type and frame name of the resource.</doc>
      <constructor name="new"
                   c:identifier="webkit_web_resource_new"
                   version="1.1.14">
        <doc xml:whitespace="preserve">Returns a new #WebKitWebResource. The @encoding can be %NULL. The
@frame_name argument can be used if the resource represents contents of an
entire HTML frame, otherwise pass %NULL.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a new #WebKitWebResource</doc>
          <type name="WebResource" c:type="WebKitWebResource*"/>
        </return-value>
        <parameters>
          <parameter name="data" transfer-ownership="none">
            <doc xml:whitespace="preserve">the data to initialize the #WebKitWebResource</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="size" transfer-ownership="none">
            <doc xml:whitespace="preserve">the length of @data</doc>
            <type name="gssize" c:type="gssize"/>
          </parameter>
          <parameter name="uri" transfer-ownership="none">
            <doc xml:whitespace="preserve">the URI of the #WebKitWebResource</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="mime_type" transfer-ownership="none">
            <doc xml:whitespace="preserve">the MIME type of the #WebKitWebResource</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="encoding" transfer-ownership="none">
            <doc xml:whitespace="preserve">the text encoding name of the #WebKitWebResource</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="frame_name" transfer-ownership="none">
            <doc xml:whitespace="preserve">the frame name of the #WebKitWebResource</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_data"
              c:identifier="webkit_web_resource_get_data"
              version="1.1.14">
        <doc xml:whitespace="preserve">Returns the data of the @webResource.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GString containing the character data of the @webResource.  The string is owned by WebKit and should not be freed or destroyed.</doc>
          <type name="GLib.String" c:type="GString*"/>
        </return-value>
        <parameters>
          <instance-parameter name="web_resource" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitWebResource</doc>
            <type name="WebResource" c:type="WebKitWebResource*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_encoding"
              c:identifier="webkit_web_resource_get_encoding"
              version="1.1.14">
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the encoding name of the resource</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="web_resource" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitWebResource</doc>
            <type name="WebResource" c:type="WebKitWebResource*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_frame_name"
              c:identifier="webkit_web_resource_get_frame_name"
              version="1.1.14">
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the frame name of the resource.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="web_resource" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitWebResource</doc>
            <type name="WebResource" c:type="WebKitWebResource*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_mime_type"
              c:identifier="webkit_web_resource_get_mime_type"
              version="1.1.14">
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the MIME type of the resource</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="web_resource" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitWebResource</doc>
            <type name="WebResource" c:type="WebKitWebResource*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_uri"
              c:identifier="webkit_web_resource_get_uri"
              version="1.1.14">
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the URI of the resource</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="web_resource" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitWebResource</doc>
            <type name="WebResource" c:type="WebKitWebResource*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="encoding" version="1.1.14" transfer-ownership="none">
        <doc xml:whitespace="preserve">The encoding name to which the web resource was encoded in.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="frame-name" version="1.1.14" transfer-ownership="none">
        <doc xml:whitespace="preserve">The frame name for the web resource.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="mime-type" version="1.1.14" transfer-ownership="none">
        <doc xml:whitespace="preserve">The MIME type of the web resource.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="uri"
                version="1.1.14"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The URI of the web resource</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="WebResourcePrivate" c:type="WebKitWebResourcePrivate*"/>
      </field>
      <glib:signal name="content-length-received" when="last" version="1.7.5">
        <doc xml:whitespace="preserve">Emitted when new resource data has been received. The
@length_received variable stores the amount of bytes received
since the last time this signal was emitted. This is useful to
provide progress information about the resource load operation.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="length_received" transfer-ownership="none">
            <doc xml:whitespace="preserve">the amount of data received since the last signal emission</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="load-failed" when="last" version="1.7.5">
        <doc xml:whitespace="preserve">Invoked when the @web_resource failed to load</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="error" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #GError that was triggered</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="load-finished" when="last" version="1.7.5">
        <doc xml:whitespace="preserve">Emitted when all the data for the resource was loaded</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="response-received" when="last" version="1.7.5">
        <doc xml:whitespace="preserve">Emitted when the response is received from the server.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="response" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #WebKitNetworkResponse that was received</doc>
            <type name="NetworkResponse"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="WebResourceClass"
            c:type="WebKitWebResourceClass"
            glib:is-gtype-struct-for="WebResource">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="_webkit_reserved0" introspectable="0">
        <callback name="_webkit_reserved0">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_webkit_reserved1" introspectable="0">
        <callback name="_webkit_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_webkit_reserved2" introspectable="0">
        <callback name="_webkit_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_webkit_reserved3" introspectable="0">
        <callback name="_webkit_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <record name="WebResourcePrivate"
            c:type="WebKitWebResourcePrivate"
            disguised="1">
    </record>
    <class name="WebSettings"
           c:symbol-prefix="web_settings"
           c:type="WebKitWebSettings"
           parent="GObject.Object"
           glib:type-name="WebKitWebSettings"
           glib:get-type="webkit_web_settings_get_type"
           glib:type-struct="WebSettingsClass">
      <doc xml:whitespace="preserve">#WebKitWebSettings can be applied to a #WebKitWebView to control text encoding, 
color, font sizes, printing mode, script support, loading of images and various other things. 
After creation, a #WebKitWebSettings object contains default settings. 

&lt;informalexample&gt;&lt;programlisting&gt;
/&lt;!-- --&gt;* Create a new websettings and disable java script *&lt;!-- --&gt;/
WebKitWebSettings *settings = webkit_web_settings_new ();
g_object_set (G_OBJECT(settings), "enable-scripts", FALSE, NULL);

/&lt;!-- --&gt;* Apply the result *&lt;!-- --&gt;/
webkit_web_view_set_settings (WEBKIT_WEB_VIEW(my_webview), settings);
&lt;/programlisting&gt;&lt;/informalexample&gt;</doc>
      <constructor name="new" c:identifier="webkit_web_settings_new">
        <doc xml:whitespace="preserve">Creates a new #WebKitWebSettings instance with default values. It must
be manually attached to a WebView.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a new #WebKitWebSettings instance</doc>
          <type name="WebSettings" c:type="WebKitWebSettings*"/>
        </return-value>
      </constructor>
      <method name="copy" c:identifier="webkit_web_settings_copy">
        <doc xml:whitespace="preserve">Copies an existing #WebKitWebSettings instance.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a new #WebKitWebSettings instance</doc>
          <type name="WebSettings" c:type="WebKitWebSettings*"/>
        </return-value>
        <parameters>
          <instance-parameter name="web_settings" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitWebSettings to copy.</doc>
            <type name="WebSettings" c:type="WebKitWebSettings*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_user_agent"
              c:identifier="webkit_web_settings_get_user_agent"
              version="1.1.11">
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the User-Agent string currently used by the web view(s) associated with the @web_settings.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="web_settings" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitWebSettings</doc>
            <type name="WebSettings" c:type="WebKitWebSettings*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="auto-load-images"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="auto-resize-window"
                version="1.1.22"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">Web pages can request to modify the size and position of the
window containing the #WebKitWebView through various DOM methods
(resizeTo, moveTo, resizeBy, moveBy). By default WebKit will not
honor this requests, but you can set this property to %TRUE if
you'd like it to do so. If you wish to handle this manually, you
can connect to the notify signal for the
#WebKitWebWindowFeatures of your #WebKitWebView.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="auto-shrink-images"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="cursive-font-family"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="default-encoding"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="default-font-family"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="default-font-size"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gint" c:type="gint"/>
      </property>
      <property name="default-monospace-font-size"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gint" c:type="gint"/>
      </property>
      <property name="editing-behavior"
                version="1.1.13"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">This setting controls various editing behaviors that differ
between platforms and that have been combined in two groups,
'Mac' and 'Windows'. Some examples:

 1) Clicking below the last line of an editable area puts the
caret at the end of the last line on Mac, but in the middle of
the last line on Windows.

 2) Pushing down the arrow key on the last line puts the caret
 at the end of the last line on Mac, but does nothing on
 Windows. A similar case exists on the top line.</doc>
        <type name="EditingBehavior"/>
      </property>
      <property name="enable-accelerated-compositing"
                version="1.7.5"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">Enable or disable support for accelerated compositing on pages. Accelerated
compositing uses the GPU to render animations on pages smoothly and also allows
proper rendering of 3D CSS transforms.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="enable-caret-browsing"
                version="1.1.6"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">Whether to enable caret browsing mode.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="enable-css-shaders"
                version="2.0"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">Enable or disable support for css shaders (css custom filters).
Accelerated compositing needs to be enabled at compile time, but needs
not be enabled at runtime.

See also https://dvcs.w3.org/hg/FXTF/raw-file/tip/custom/index.html</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="enable-default-context-menu"
                version="1.1.18"
                deprecated="Use #WebKitWebView::context-menu signal instead."
                deprecated-version="1.10"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">Whether right-clicks should be handled automatically to create,
and display the context menu. Turning this off will make
WebKitGTK+ not emit the populate-popup signal. Notice that the
default button press event handler may still handle right
clicks for other reasons, such as in-page context menus, or
right-clicks that are handled by the page itself.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="enable-developer-extras"
                version="1.0.3"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">Whether developer extensions should be enabled. This enables,
for now, the Web Inspector, which can be controlled using the
#WebKitWebInspector instance held by the #WebKitWebView this
setting is enabled for.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="enable-display-of-insecure-content"
                version="2.0"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">Whether pages loaded via HTTPS should load subresources such as
images and frames from non-HTTPS URLs.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="enable-dns-prefetching"
                version="1.3.13."
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">Whether webkit prefetches domain names.  This is a separate knob from private browsing.
Whether private browsing should set this or not is up for debate, for now it doesn't.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="enable-dom-paste"
                version="1.1.16"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">Whether to enable DOM paste. If set to %TRUE, document.execCommand("Paste")
will correctly execute and paste content of the clipboard.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="enable-file-access-from-file-uris"
                version="1.1.22"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">Boolean property to control file access for file:// URIs. If this
option is enabled every file:// will have its own security unique domain.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="enable-frame-flattening"
                version="1.3.5"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">Whether to enable the Frame Flattening. With this setting each subframe is expanded
to its contents, which will flatten all the frames to become one scrollable page.
On touch devices, it is desired to not have any scrollable sub parts of the page as
it results in a confusing user experience, with scrolling sometimes scrolling sub parts
and at other times scrolling the page itself. For this reason iframes and framesets are
barely usable on touch devices.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="enable-fullscreen"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="enable-html5-database"
                version="1.1.8"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">Whether to enable HTML5 client-side SQL database support. Client-side
SQL database allows web pages to store structured data and be able to
use SQL to manipulate that data asynchronously.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="enable-html5-local-storage"
                version="1.1.8"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">Whether to enable HTML5 localStorage support. localStorage provides
simple synchronous storage access.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="enable-hyperlink-auditing"
                version="1.2.5"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">Enable or disable support for &amp;lt;a ping&amp;gt;.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="enable-java-applet"
                version="1.1.22"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">Enable or disable support for the Java &amp;lt;applet&amp;gt; tag. Keep in
mind that Java content can be still shown in the page through
&amp;lt;object&amp;gt; or &amp;lt;embed&amp;gt;, which are the preferred tags for this task.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="enable-media-stream"
                version="1.10.0"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">Enable or disable support for Media Stream on pages. Media Stream is
an experimental proposal for allowing web pages to access local video and
audio input devices.  The standard is currently a work-in-progress as part
of the Web Applications 1.0 specification from WHATWG.

See also http://www.w3.org/TR/mediacapture-streams/</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="enable-offline-web-application-cache"
                version="1.1.13"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">Whether to enable HTML5 offline web application cache support. Offline
Web Application Cache ensures web applications are available even when
the user is not connected to the network.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="enable-page-cache"
                version="1.1.18"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">Enable or disable the page cache. Disabling the page cache is
generally only useful for special circumstances like low-memory
scenarios or special purpose applications like static HTML
viewers. This setting only controls the Page Cache, this cache
is different than the disk-based or memory-based traditional
resource caches, its point is to make going back and forth
between pages much faster. For details about the different types
of caches and their purposes see:
http://webkit.org/blog/427/webkit-page-cache-i-the-basics/</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="enable-plugins"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="enable-private-browsing"
                version="1.1.2"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">Whether to enable private browsing mode. Private browsing mode prevents
WebKit from updating the global history and storing any session
information e.g., on-disk cache, as well as suppressing any messages
from being printed into the (javascript) console.

This is currently experimental for WebKitGtk.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="enable-running-of-insecure-content"
                version="2.0"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">Whether pages loaded via HTTPS should run subresources such as
CSS, scripts, and plugins from non-HTTPS URLs.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="enable-scripts"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="enable-site-specific-quirks"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="enable-smooth-scrolling"
                version="1.9.0"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">Enable or disable support for smooth scrolling. The current implementation relies upon
CPU work to produce a smooth scrolling experience.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="enable-spatial-navigation"
                version="1.1.23"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">Whether to enable the Spatial Navigation. This feature consists in the ability
to navigate between focusable elements in a Web page, such as hyperlinks and
form controls, by using Left, Right, Up and Down arrow keys. For example, if
an user presses the Right key, heuristics determine whether there is an element
he might be trying to reach towards the right, and if there are multiple elements,
which element he probably wants.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="enable-spell-checking"
                version="1.1.6"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">Whether to enable spell checking while typing.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="enable-universal-access-from-file-uris"
                version="1.1.13"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">Whether to allow files loaded through file:// URIs universal access to
all pages.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="enable-webaudio"
                version="TODO"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">Enable or disable support for WebAudio on pages. WebAudio is an
experimental proposal for allowing web pages to generate Audio
WAVE data from JavaScript. The standard is currently a
work-in-progress by the W3C Audio Working Group.

See also https://dvcs.w3.org/hg/audio/raw-file/tip/webaudio/specification.html</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="enable-webgl"
                version="1.3.14"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">Enable or disable support for WebGL on pages. WebGL is an experimental
proposal for allowing web pages to use OpenGL ES-like calls directly. The
standard is currently a work-in-progress by the Khronos Group.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="enable-xss-auditor"
                version="1.1.11"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">Whether to enable the XSS Auditor. This feature filters some kinds of
reflective XSS attacks on vulnerable web sites.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="enforce-96-dpi"
                version="1.0.3"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">Enforce a resolution of 96 DPI. This is meant for compatibility
with web pages which cope badly with different screen resolutions
and for automated testing.
Web browsers and applications that typically display arbitrary
content from the web should provide a preference for this.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="fantasy-font-family"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="html5-local-storage-database-path"
                version="1.5.2"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">Path to store persistent HTML5 localStorage databases, which are enabled by
"enable-html5-local-storage". The default path is $XDG_DATA_HOME/webkit/databases/.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="javascript-can-access-clipboard"
                version="1.3.0"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">Whether JavaScript can access Clipboard.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="javascript-can-open-windows-automatically"
                version="1.1.11"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">Whether JavaScript can open popup windows automatically without user
intervention.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="media-playback-allows-inline"
                version="1.10.0"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">Whether media playback is full-screen only or inline playback is allowed.
This is true by default, so media playback can be inline. Setting it to
false allows specifying that media playback should be always fullscreen.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="media-playback-requires-user-gesture"
                version="1.10.0"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">Whether a user gesture (such as clicking the play button) would
be required to start media playback or load media. This is off
by default, so media playback could start automatically. Setting
it on requires a gesture by the user to start playback, or to load
the media.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="minimum-font-size"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gint" c:type="gint"/>
      </property>
      <property name="minimum-logical-font-size"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gint" c:type="gint"/>
      </property>
      <property name="monospace-font-family"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="print-backgrounds"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="resizable-text-areas"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="sans-serif-font-family"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="serif-font-family"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="spell-checking-languages"
                version="1.1.6"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The languages to be used for spell checking, separated by commas.

The locale string typically is in the form lang_COUNTRY, where lang
is an ISO-639 language code, and COUNTRY is an ISO-3166 country code.
For instance, sv_FI for Swedish as written in Finland or pt_BR
for Portuguese as written in Brazil.

If no value is specified then the value returned by
gtk_get_default_language will be used.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="tab-key-cycles-through-elements"
                version="1.1.17"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">Whether the tab key cycles through elements on the page.

If @flag is %TRUE, pressing the tab key will focus the next element in
the @web_view. If @flag is %FALSE, the @web_view will interpret tab
key presses as normal key presses. If the selected element is editable, the
tab key will cause the insertion of a tab character.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="user-agent"
                version="1.1.11"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The User-Agent string used by WebKitGtk.

This will return a default User-Agent string if a custom string wasn't
provided by the application. Setting this property to a NULL value or
an empty string will result in the User-Agent string being reset to the
default value.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="user-stylesheet-uri"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="zoom-step"
                version="1.0.1"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The value by which the zoom level is changed when zooming in or out.</doc>
        <type name="gfloat" c:type="gfloat"/>
      </property>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="WebSettingsPrivate" c:type="WebKitWebSettingsPrivate*"/>
      </field>
    </class>
    <record name="WebSettingsClass"
            c:type="WebKitWebSettingsClass"
            glib:is-gtype-struct-for="WebSettings">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="_webkit_reserved1" introspectable="0">
        <callback name="_webkit_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_webkit_reserved2" introspectable="0">
        <callback name="_webkit_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_webkit_reserved3" introspectable="0">
        <callback name="_webkit_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_webkit_reserved4" introspectable="0">
        <callback name="_webkit_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <record name="WebSettingsPrivate"
            c:type="WebKitWebSettingsPrivate"
            disguised="1">
    </record>
    <class name="WebView"
           c:symbol-prefix="web_view"
           c:type="WebKitWebView"
           parent="Gtk.Container"
           glib:type-name="WebKitWebView"
           glib:get-type="webkit_web_view_get_type"
           glib:type-struct="WebViewClass">
      <doc xml:whitespace="preserve">#WebKitWebView is the central class of the WebKitGTK+ API. It is a
#GtkWidget implementing the scrolling interface which means you can
embed in a #GtkScrolledWindow. It is responsible for managing the
drawing of the content, forwarding of events. You can load any URI
into the #WebKitWebView or any kind of data string. With #WebKitWebSettings
you can control various aspects of the rendering and loading of the content.
Each #WebKitWebView has exactly one #WebKitWebFrame as main frame. A
#WebKitWebFrame can have n children.

&lt;programlisting&gt;
/&lt;!-- --&gt;* Create the widgets *&lt;!-- --&gt;/
GtkWidget *main_window = gtk_window_new (GTK_WINDOW_TOPLEVEL);
GtkWidget *scrolled_window = gtk_scrolled_window_new (NULL, NULL);
GtkWidget *web_view = webkit_web_view_new ();

/&lt;!-- --&gt;* Place the WebKitWebView in the GtkScrolledWindow *&lt;!-- --&gt;/
gtk_container_add (GTK_CONTAINER (scrolled_window), web_view);
gtk_container_add (GTK_CONTAINER (main_window), scrolled_window);

/&lt;!-- --&gt;* Open a webpage *&lt;!-- --&gt;/
webkit_web_view_load_uri (WEBKIT_WEB_VIEW (web_view), "http://www.gnome.org");

/&lt;!-- --&gt;* Show the result *&lt;!-- --&gt;/
gtk_window_set_default_size (GTK_WINDOW (main_window), 800, 600);
gtk_widget_show_all (main_window);
&lt;/programlisting&gt;</doc>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.Scrollable"/>
      <constructor name="new" c:identifier="webkit_web_view_new">
        <return-value transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <virtual-method name="choose_file">
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="web_view" transfer-ownership="none">
            <type name="WebView" c:type="WebKitWebView*"/>
          </instance-parameter>
          <parameter name="frame" transfer-ownership="none">
            <type name="WebFrame" c:type="WebKitWebFrame*"/>
          </parameter>
          <parameter name="old_file" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="close_web_view">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="web_view" transfer-ownership="none">
            <type name="WebView" c:type="WebKitWebView*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="console_message">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="web_view" transfer-ownership="none">
            <type name="WebView" c:type="WebKitWebView*"/>
          </instance-parameter>
          <parameter name="message" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="line_number" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="source_id" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="copy_clipboard" invoker="copy_clipboard">
        <doc xml:whitespace="preserve">Copies the current selection inside the @web_view to the clipboard.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="web_view" transfer-ownership="none">
            <type name="WebView" c:type="WebKitWebView*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="create_web_view" introspectable="0">
        <return-value>
          <type name="WebView" c:type="WebKitWebView*"/>
        </return-value>
        <parameters>
          <instance-parameter name="web_view" transfer-ownership="none">
            <type name="WebView" c:type="WebKitWebView*"/>
          </instance-parameter>
          <parameter name="web_frame" transfer-ownership="none">
            <type name="WebFrame" c:type="WebKitWebFrame*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="cut_clipboard" invoker="cut_clipboard">
        <doc xml:whitespace="preserve">Cuts the current selection inside the @web_view to the clipboard.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="web_view" transfer-ownership="none">
            <type name="WebView" c:type="WebKitWebView*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="entering_fullscreen">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="web_view" transfer-ownership="none">
            <type name="WebView" c:type="WebKitWebView*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="leaving_fullscreen">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="web_view" transfer-ownership="none">
            <type name="WebView" c:type="WebKitWebView*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="move_cursor">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="web_view" transfer-ownership="none">
            <type name="WebView" c:type="WebKitWebView*"/>
          </instance-parameter>
          <parameter name="step" transfer-ownership="none">
            <type name="Gtk.MovementStep" c:type="GtkMovementStep"/>
          </parameter>
          <parameter name="count" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="navigation_requested">
        <return-value transfer-ownership="none">
          <type name="NavigationResponse" c:type="WebKitNavigationResponse"/>
        </return-value>
        <parameters>
          <instance-parameter name="web_view" transfer-ownership="none">
            <type name="WebView" c:type="WebKitWebView*"/>
          </instance-parameter>
          <parameter name="frame" transfer-ownership="none">
            <type name="WebFrame" c:type="WebKitWebFrame*"/>
          </parameter>
          <parameter name="request" transfer-ownership="none">
            <type name="NetworkRequest" c:type="WebKitNetworkRequest*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="paste_clipboard" invoker="paste_clipboard">
        <doc xml:whitespace="preserve">Pastes the current contents of the clipboard to the @web_view.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="web_view" transfer-ownership="none">
            <type name="WebView" c:type="WebKitWebView*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="redo" invoker="redo" version="1.1.14">
        <doc xml:whitespace="preserve">Redoes the last editing command in the view, if possible.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="web_view" transfer-ownership="none">
            <type name="WebView" c:type="WebKitWebView*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="run_file_chooser">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="web_view" transfer-ownership="none">
            <type name="WebView" c:type="WebKitWebView*"/>
          </instance-parameter>
          <parameter name="request" transfer-ownership="none">
            <type name="FileChooserRequest"
                  c:type="WebKitFileChooserRequest*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="script_alert">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="web_view" transfer-ownership="none">
            <type name="WebView" c:type="WebKitWebView*"/>
          </instance-parameter>
          <parameter name="frame" transfer-ownership="none">
            <type name="WebFrame" c:type="WebKitWebFrame*"/>
          </parameter>
          <parameter name="alert_message" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="script_confirm">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="web_view" transfer-ownership="none">
            <type name="WebView" c:type="WebKitWebView*"/>
          </instance-parameter>
          <parameter name="frame" transfer-ownership="none">
            <type name="WebFrame" c:type="WebKitWebFrame*"/>
          </parameter>
          <parameter name="confirm_message" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="did_confirm" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="script_prompt">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="web_view" transfer-ownership="none">
            <type name="WebView" c:type="WebKitWebView*"/>
          </instance-parameter>
          <parameter name="frame" transfer-ownership="none">
            <type name="WebFrame" c:type="WebKitWebFrame*"/>
          </parameter>
          <parameter name="message" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="default_value" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <type name="utf8" c:type="gchar**"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="select_all" invoker="select_all">
        <doc xml:whitespace="preserve">Attempts to select everything inside the @web_view.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="web_view" transfer-ownership="none">
            <type name="WebView" c:type="WebKitWebView*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="set_scroll_adjustments">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="web_view" transfer-ownership="none">
            <type name="WebView" c:type="WebKitWebView*"/>
          </instance-parameter>
          <parameter name="hadjustment" transfer-ownership="none">
            <type name="Gtk.Adjustment" c:type="GtkAdjustment*"/>
          </parameter>
          <parameter name="vadjustment" transfer-ownership="none">
            <type name="Gtk.Adjustment" c:type="GtkAdjustment*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="should_allow_editing_action">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="web_view" transfer-ownership="none">
            <type name="WebView" c:type="WebKitWebView*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="undo" invoker="undo" version="1.1.14">
        <doc xml:whitespace="preserve">Undoes the last editing command in the view, if possible.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="web_view" transfer-ownership="none">
            <type name="WebView" c:type="WebKitWebView*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="web_view_ready">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="web_view" transfer-ownership="none">
            <type name="WebView" c:type="WebKitWebView*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="window_object_cleared" introspectable="0">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="web_view" transfer-ownership="none">
            <type name="WebView" c:type="WebKitWebView*"/>
          </instance-parameter>
          <parameter name="frame" transfer-ownership="none">
            <type name="WebFrame" c:type="WebKitWebFrame*"/>
          </parameter>
          <parameter name="context" transfer-ownership="none">
            <type c:type="JSGlobalContextRef"/>
          </parameter>
          <parameter name="window_object" transfer-ownership="none">
            <type c:type="JSObjectRef"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="can_copy_clipboard"
              c:identifier="webkit_web_view_can_copy_clipboard">
        <doc xml:whitespace="preserve">Determines whether or not it is currently possible to copy to the clipboard.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if a selection can be copied, %FALSE if not</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="web_view" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitWebView</doc>
            <type name="WebView" c:type="WebKitWebView*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="can_cut_clipboard"
              c:identifier="webkit_web_view_can_cut_clipboard">
        <doc xml:whitespace="preserve">Determines whether or not it is currently possible to cut to the clipboard.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if a selection can be cut, %FALSE if not</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="web_view" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitWebView</doc>
            <type name="WebView" c:type="WebKitWebView*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="can_go_back" c:identifier="webkit_web_view_can_go_back">
        <doc xml:whitespace="preserve">Determines whether #web_view has a previous history item.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if able to move back, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="web_view" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitWebView</doc>
            <type name="WebView" c:type="WebKitWebView*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="can_go_back_or_forward"
              c:identifier="webkit_web_view_can_go_back_or_forward">
        <doc xml:whitespace="preserve">Determines whether #web_view has a history item of @steps. Negative values
represent steps backward while positive values represent steps forward.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if able to move back or forward the given number of steps, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="web_view" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitWebView</doc>
            <type name="WebView" c:type="WebKitWebView*"/>
          </instance-parameter>
          <parameter name="steps" transfer-ownership="none">
            <doc xml:whitespace="preserve">the number of steps</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="can_go_forward"
              c:identifier="webkit_web_view_can_go_forward">
        <doc xml:whitespace="preserve">Determines whether #web_view has a next history item.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if able to move forward, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="web_view" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitWebView</doc>
            <type name="WebView" c:type="WebKitWebView*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="can_paste_clipboard"
              c:identifier="webkit_web_view_can_paste_clipboard">
        <doc xml:whitespace="preserve">Determines whether or not it is currently possible to paste from the clipboard.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if a selection can be pasted, %FALSE if not</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="web_view" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitWebView</doc>
            <type name="WebView" c:type="WebKitWebView*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="can_redo"
              c:identifier="webkit_web_view_can_redo"
              version="1.1.14">
        <doc xml:whitespace="preserve">Determines whether or not it is currently possible to redo the last
editing command in the view.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if a redo can be done, %FALSE if not</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="web_view" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitWebView</doc>
            <type name="WebView" c:type="WebKitWebView*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="can_show_mime_type"
              c:identifier="webkit_web_view_can_show_mime_type"
              version="1.0.3">
        <doc xml:whitespace="preserve">This functions returns whether or not a MIME type can be displayed using this view.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a #gboolean indicating if the MIME type can be displayed</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="web_view" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitWebView</doc>
            <type name="WebView" c:type="WebKitWebView*"/>
          </instance-parameter>
          <parameter name="mime_type" transfer-ownership="none">
            <doc xml:whitespace="preserve">a MIME type</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="can_undo"
              c:identifier="webkit_web_view_can_undo"
              version="1.1.14">
        <doc xml:whitespace="preserve">Determines whether or not it is currently possible to undo the last
editing command in the view.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if a undo can be done, %FALSE if not</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="web_view" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitWebView</doc>
            <type name="WebView" c:type="WebKitWebView*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="copy_clipboard"
              c:identifier="webkit_web_view_copy_clipboard">
        <doc xml:whitespace="preserve">Copies the current selection inside the @web_view to the clipboard.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="web_view" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitWebView</doc>
            <type name="WebView" c:type="WebKitWebView*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="cut_clipboard"
              c:identifier="webkit_web_view_cut_clipboard">
        <doc xml:whitespace="preserve">Cuts the current selection inside the @web_view to the clipboard.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="web_view" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitWebView</doc>
            <type name="WebView" c:type="WebKitWebView*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="delete_selection"
              c:identifier="webkit_web_view_delete_selection">
        <doc xml:whitespace="preserve">Deletes the current selection inside the @web_view.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="web_view" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitWebView</doc>
            <type name="WebView" c:type="WebKitWebView*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="execute_script"
              c:identifier="webkit_web_view_execute_script">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="web_view" transfer-ownership="none">
            <type name="WebView" c:type="WebKitWebView*"/>
          </instance-parameter>
          <parameter name="script" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_back_forward_list"
              c:identifier="webkit_web_view_get_back_forward_list">
        <doc xml:whitespace="preserve">Obtains the #WebKitWebBackForwardList associated with the given #WebKitWebView. The
#WebKitWebBackForwardList is owned by the #WebKitWebView.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the #WebKitWebBackForwardList</doc>
          <type name="WebBackForwardList" c:type="WebKitWebBackForwardList*"/>
        </return-value>
        <parameters>
          <instance-parameter name="web_view" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitWebView</doc>
            <type name="WebView" c:type="WebKitWebView*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_copy_target_list"
              c:identifier="webkit_web_view_get_copy_target_list">
        <doc xml:whitespace="preserve">This function returns the list of targets this #WebKitWebView can
provide for clipboard copying and as DND source. The targets in the list are
added with values from the #WebKitWebViewTargetInfo enum,
using gtk_target_list_add() and
gtk_target_list_add_text_targets().</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">the #GtkTargetList</doc>
          <type name="Gtk.TargetList" c:type="GtkTargetList*"/>
        </return-value>
        <parameters>
          <instance-parameter name="web_view" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitWebView</doc>
            <type name="WebView" c:type="WebKitWebView*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_custom_encoding"
              c:identifier="webkit_web_view_get_custom_encoding"
              version="1.1.1">
        <doc xml:whitespace="preserve">Returns the current encoding of the #WebKitWebView, not the default-encoding
of WebKitWebSettings.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a string containing the current custom encoding for @web_view, or %NULL if there's none set.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="web_view" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitWebView</doc>
            <type name="WebView" c:type="WebKitWebView*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_dom_document"
              c:identifier="webkit_web_view_get_dom_document"
              version="1.3.1"
              introspectable="0">
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the #WebKitDOMDocument currently loaded in the main frame of the @web_view or %NULL if no document is loaded</doc>
          <type c:type="WebKitDOMDocument*"/>
        </return-value>
        <parameters>
          <instance-parameter name="web_view" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitWebView</doc>
            <type name="WebView" c:type="WebKitWebView*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_editable" c:identifier="webkit_web_view_get_editable">
        <doc xml:whitespace="preserve">Returns whether the user is allowed to edit the document.

Returns %TRUE if @web_view allows the user to edit the HTML document, %FALSE if
it doesn't. You can change @web_view's document programmatically regardless of
this setting.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a #gboolean indicating the editable state</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="web_view" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitWebView</doc>
            <type name="WebView" c:type="WebKitWebView*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_encoding"
              c:identifier="webkit_web_view_get_encoding"
              version="1.1.1">
        <doc xml:whitespace="preserve">Returns the default encoding of the #WebKitWebView.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the default encoding</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="web_view" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitWebView</doc>
            <type name="WebView" c:type="WebKitWebView*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_focused_frame"
              c:identifier="webkit_web_view_get_focused_frame">
        <doc xml:whitespace="preserve">Returns the frame that has focus or an active text selection.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">The focused #WebKitWebFrame or %NULL if no frame is focused</doc>
          <type name="WebFrame" c:type="WebKitWebFrame*"/>
        </return-value>
        <parameters>
          <instance-parameter name="web_view" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitWebView</doc>
            <type name="WebView" c:type="WebKitWebView*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_full_content_zoom"
              c:identifier="webkit_web_view_get_full_content_zoom"
              version="1.0.1">
        <doc xml:whitespace="preserve">Returns whether the zoom level affects only text or all elements.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%FALSE if only text should be scaled (the default), %TRUE if the full content of the view should be scaled.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="web_view" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitWebView</doc>
            <type name="WebView" c:type="WebKitWebView*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_hit_test_result"
              c:identifier="webkit_web_view_get_hit_test_result"
              version="1.1.15">
        <doc xml:whitespace="preserve">Does a 'hit test' in the coordinates specified by @event to figure
out context information about that position in the @web_view.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a newly created #WebKitHitTestResult with the context of the specified position.</doc>
          <type name="HitTestResult" c:type="WebKitHitTestResult*"/>
        </return-value>
        <parameters>
          <instance-parameter name="web_view" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitWebView</doc>
            <type name="WebView" c:type="WebKitWebView*"/>
          </instance-parameter>
          <parameter name="event" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GdkEventButton</doc>
            <type name="Gdk.EventButton" c:type="GdkEventButton*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_icon_pixbuf"
              c:identifier="webkit_web_view_get_icon_pixbuf"
              version="1.3.13"
              deprecated="Use webkit_web_view_try_get_favicon_pixbuf() instead."
              deprecated-version="1.8">
        <doc xml:whitespace="preserve">Obtains a #GdkPixbuf of the favicon for the given #WebKitWebView, or
a default icon if there is no icon for the given page. Use
webkit_web_view_get_icon_uri() if you need to distinguish these cases.
Usually you want to connect to WebKitWebView::icon-loaded and call this
method in the callback.

The pixbuf will have the largest size provided by the server and should
be resized before it is displayed.
See also webkit_icon_database_get_icon_pixbuf().</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a new reference to a #GdkPixbuf, or %NULL</doc>
          <type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*"/>
        </return-value>
        <parameters>
          <instance-parameter name="web_view" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #WebKitWebView object</doc>
            <type name="WebView" c:type="WebKitWebView*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_icon_uri"
              c:identifier="webkit_web_view_get_icon_uri"
              version="1.1.18">
        <doc xml:whitespace="preserve">Obtains the URI for the favicon for the given #WebKitWebView, or
%NULL if there is none.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the URI for the favicon, or %NULL</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="web_view" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #WebKitWebView object</doc>
            <type name="WebView" c:type="WebKitWebView*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_inspector"
              c:identifier="webkit_web_view_get_inspector"
              version="1.0.3">
        <doc xml:whitespace="preserve">Obtains the #WebKitWebInspector associated with the
#WebKitWebView. Every #WebKitWebView object has a
#WebKitWebInspector object attached to it as soon as it is created,
so this function will only return NULL if the argument is not a
valid #WebKitWebView.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the #WebKitWebInspector instance.</doc>
          <type name="WebInspector" c:type="WebKitWebInspector*"/>
        </return-value>
        <parameters>
          <instance-parameter name="web_view" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitWebView</doc>
            <type name="WebView" c:type="WebKitWebView*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_load_status"
              c:identifier="webkit_web_view_get_load_status"
              version="1.1.7">
        <doc xml:whitespace="preserve">Determines the current status of the load.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a #WebKitLoadStatus specifying the status of the current load</doc>
          <type name="LoadStatus" c:type="WebKitLoadStatus"/>
        </return-value>
        <parameters>
          <instance-parameter name="web_view" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitWebView</doc>
            <type name="WebView" c:type="WebKitWebView*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_main_frame"
              c:identifier="webkit_web_view_get_main_frame">
        <doc xml:whitespace="preserve">Returns the main frame for the @web_view.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the main #WebKitWebFrame for @web_view</doc>
          <type name="WebFrame" c:type="WebKitWebFrame*"/>
        </return-value>
        <parameters>
          <instance-parameter name="web_view" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitWebView</doc>
            <type name="WebView" c:type="WebKitWebView*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_paste_target_list"
              c:identifier="webkit_web_view_get_paste_target_list">
        <doc xml:whitespace="preserve">This function returns the list of targets this #WebKitWebView can
provide for clipboard pasting and as DND destination. The targets in the list are
added with values from the #WebKitWebViewTargetInfo enum,
using gtk_target_list_add() and
gtk_target_list_add_text_targets().</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">the #GtkTargetList</doc>
          <type name="Gtk.TargetList" c:type="GtkTargetList*"/>
        </return-value>
        <parameters>
          <instance-parameter name="web_view" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitWebView</doc>
            <type name="WebView" c:type="WebKitWebView*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_progress"
              c:identifier="webkit_web_view_get_progress"
              version="1.1.7">
        <doc xml:whitespace="preserve">Determines the current progress of the load.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a gdouble representing the status of the current load. This value will be in the range [0, 1].</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="web_view" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitWebView</doc>
            <type name="WebView" c:type="WebKitWebView*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_settings" c:identifier="webkit_web_view_get_settings">
        <doc xml:whitespace="preserve">Obtains the #WebKitWebSettings associated with the
#WebKitWebView. The #WebKitWebView always has an associated
instance of #WebKitWebSettings. The reference that is returned by
this call is owned by the #WebKitWebView. You may need to increase
its reference count if you intend to keep it alive for longer than
the #WebKitWebView.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the #WebKitWebSettings instance</doc>
          <type name="WebSettings" c:type="WebKitWebSettings*"/>
        </return-value>
        <parameters>
          <instance-parameter name="web_view" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitWebView</doc>
            <type name="WebView" c:type="WebKitWebView*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_snapshot"
              c:identifier="webkit_web_view_get_snapshot"
              version="1.10">
        <doc xml:whitespace="preserve">Retrieves a snapshot with the visible contents of @webview.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a @cairo_surface_t</doc>
          <type name="cairo.Surface" c:type="cairo_surface_t*"/>
        </return-value>
        <parameters>
          <instance-parameter name="web_view" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitWebView</doc>
            <type name="WebView" c:type="WebKitWebView*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_title"
              c:identifier="webkit_web_view_get_title"
              version="1.1.4">
        <doc xml:whitespace="preserve">Returns the @web_view's document title</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the title of @web_view</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="web_view" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitWebView</doc>
            <type name="WebView" c:type="WebKitWebView*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_transparent"
              c:identifier="webkit_web_view_get_transparent">
        <doc xml:whitespace="preserve">Returns whether the #WebKitWebView has a transparent background.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%FALSE when the #WebKitWebView draws a solid background (the default), otherwise %TRUE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="web_view" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitWebView</doc>
            <type name="WebView" c:type="WebKitWebView*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_uri"
              c:identifier="webkit_web_view_get_uri"
              version="1.1.4">
        <doc xml:whitespace="preserve">Returns the current URI of the contents displayed by the @web_view</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the URI of @web_view</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="web_view" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitWebView</doc>
            <type name="WebView" c:type="WebKitWebView*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_view_mode"
              c:identifier="webkit_web_view_get_view_mode"
              version="1.3.4">
        <doc xml:whitespace="preserve">Gets the value of the view-mode property of the
#WebKitWebView. Check the property's documentation for more
information.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the %WebKitWebViewViewMode currently set for the #WebKitWebView.</doc>
          <type name="WebViewViewMode" c:type="WebKitWebViewViewMode"/>
        </return-value>
        <parameters>
          <instance-parameter name="web_view" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #WebKitWebView to obtain the view mode from</doc>
            <type name="WebView" c:type="WebKitWebView*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_view_source_mode"
              c:identifier="webkit_web_view_get_view_source_mode"
              version="1.1.14">
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if @web_view is in view source mode, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="web_view" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitWebView</doc>
            <type name="WebView" c:type="WebKitWebView*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_viewport_attributes"
              c:identifier="webkit_web_view_get_viewport_attributes"
              version="1.3.8">
        <doc xml:whitespace="preserve">Obtains the #WebKitViewportAttributes associated with the
#WebKitWebView. Every #WebKitWebView object has a
#WebKitViewportAttributes object attached to it as soon as it is
created, so this function will only return NULL if the argument is
not a valid #WebKitWebView. Do note however that the viewport
attributes object only contains valid information when the current
page has a viewport meta tag. You can check whether the data should
be used by checking the #WebKitViewportAttributes:valid property.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the #WebKitViewportAttributes instance.</doc>
          <type name="ViewportAttributes" c:type="WebKitViewportAttributes*"/>
        </return-value>
        <parameters>
          <instance-parameter name="web_view" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitWebView</doc>
            <type name="WebView" c:type="WebKitWebView*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_window_features"
              c:identifier="webkit_web_view_get_window_features"
              version="1.0.3">
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the instance of #WebKitWebWindowFeatures held by the given #WebKitWebView.</doc>
          <type name="WebWindowFeatures" c:type="WebKitWebWindowFeatures*"/>
        </return-value>
        <parameters>
          <instance-parameter name="web_view" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitWebView</doc>
            <type name="WebView" c:type="WebKitWebView*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_zoom_level"
              c:identifier="webkit_web_view_get_zoom_level"
              version="1.0.1">
        <doc xml:whitespace="preserve">Returns the zoom level of @web_view, i.e. the factor by which elements in
the page are scaled with respect to their original size.
If the "full-content-zoom" property is set to %FALSE (the default)
the zoom level changes the text size, or if %TRUE, scales all
elements in the page.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the zoom level of @web_view</doc>
          <type name="gfloat" c:type="gfloat"/>
        </return-value>
        <parameters>
          <instance-parameter name="web_view" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitWebView</doc>
            <type name="WebView" c:type="WebKitWebView*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="go_back" c:identifier="webkit_web_view_go_back">
        <doc xml:whitespace="preserve">Loads the previous history item.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="web_view" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitWebView</doc>
            <type name="WebView" c:type="WebKitWebView*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="go_back_or_forward"
              c:identifier="webkit_web_view_go_back_or_forward">
        <doc xml:whitespace="preserve">Loads the history item that is the number of @steps away from the current
item. Negative values represent steps backward while positive values
represent steps forward.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="web_view" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitWebView</doc>
            <type name="WebView" c:type="WebKitWebView*"/>
          </instance-parameter>
          <parameter name="steps" transfer-ownership="none">
            <doc xml:whitespace="preserve">the number of steps</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="go_forward" c:identifier="webkit_web_view_go_forward">
        <doc xml:whitespace="preserve">Loads the next history item.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="web_view" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitWebView</doc>
            <type name="WebView" c:type="WebKitWebView*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="go_to_back_forward_item"
              c:identifier="webkit_web_view_go_to_back_forward_item">
        <doc xml:whitespace="preserve">Go to the specified #WebKitWebHistoryItem</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if loading of item is successful, %FALSE if not</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="web_view" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitWebView</doc>
            <type name="WebView" c:type="WebKitWebView*"/>
          </instance-parameter>
          <parameter name="item" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitWebHistoryItem*</doc>
            <type name="WebHistoryItem" c:type="WebKitWebHistoryItem*"/>
          </parameter>
        </parameters>
      </method>
      <method name="has_selection"
              c:identifier="webkit_web_view_has_selection">
        <doc xml:whitespace="preserve">Determines whether text was selected.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if there is selected text, %FALSE if not</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="web_view" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitWebView</doc>
            <type name="WebView" c:type="WebKitWebView*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="load_html_string"
              c:identifier="webkit_web_view_load_html_string"
              deprecated="Use webkit_web_view_load_string() instead."
              deprecated-version="1.1.1">
        <doc xml:whitespace="preserve">Requests loading of the given @content with the specified @base_uri.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="web_view" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitWebView</doc>
            <type name="WebView" c:type="WebKitWebView*"/>
          </instance-parameter>
          <parameter name="content" transfer-ownership="none">
            <doc xml:whitespace="preserve">an URI string</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="base_uri" transfer-ownership="none">
            <doc xml:whitespace="preserve">the base URI for relative locations</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="load_request"
              c:identifier="webkit_web_view_load_request"
              version="1.1.1">
        <doc xml:whitespace="preserve">Requests loading of the specified asynchronous client request.

Creates a provisional data source that will transition to a committed data
source once any data has been received. Use webkit_web_view_stop_loading() to
stop the load.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="web_view" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitWebView</doc>
            <type name="WebView" c:type="WebKitWebView*"/>
          </instance-parameter>
          <parameter name="request" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitNetworkRequest</doc>
            <type name="NetworkRequest" c:type="WebKitNetworkRequest*"/>
          </parameter>
        </parameters>
      </method>
      <method name="load_string" c:identifier="webkit_web_view_load_string">
        <doc xml:whitespace="preserve">Requests loading of the given @content with the specified @mime_type,
@encoding and @base_uri.

If @mime_type is %NULL, "text/html" is assumed.

If @encoding is %NULL, "UTF-8" is assumed.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="web_view" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitWebView</doc>
            <type name="WebView" c:type="WebKitWebView*"/>
          </instance-parameter>
          <parameter name="content" transfer-ownership="none">
            <doc xml:whitespace="preserve">an URI string</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="mime_type" transfer-ownership="none">
            <doc xml:whitespace="preserve">the MIME type, or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="encoding" transfer-ownership="none">
            <doc xml:whitespace="preserve">the encoding, or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="base_uri" transfer-ownership="none">
            <doc xml:whitespace="preserve">the base URI for relative locations</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="load_uri"
              c:identifier="webkit_web_view_load_uri"
              version="1.1.1">
        <doc xml:whitespace="preserve">Requests loading of the specified URI string.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="web_view" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitWebView</doc>
            <type name="WebView" c:type="WebKitWebView*"/>
          </instance-parameter>
          <parameter name="uri" transfer-ownership="none">
            <doc xml:whitespace="preserve">an URI string</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="mark_text_matches"
              c:identifier="webkit_web_view_mark_text_matches">
        <doc xml:whitespace="preserve">Attempts to highlight all occurances of #string inside #web_view.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the number of strings highlighted</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="web_view" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitWebView</doc>
            <type name="WebView" c:type="WebKitWebView*"/>
          </instance-parameter>
          <parameter name="string" transfer-ownership="none">
            <doc xml:whitespace="preserve">a string to look for</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="case_sensitive" transfer-ownership="none">
            <doc xml:whitespace="preserve">whether to respect the case of text</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="limit" transfer-ownership="none">
            <doc xml:whitespace="preserve">the maximum number of strings to look for or 0 for all</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="move_cursor"
              c:identifier="webkit_web_view_move_cursor"
              version="1.1.4">
        <doc xml:whitespace="preserve">Move the cursor in @view as described by @step and @count.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="web_view" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitWebView</doc>
            <type name="WebView" c:type="WebKitWebView*"/>
          </instance-parameter>
          <parameter name="step" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GtkMovementStep</doc>
            <type name="Gtk.MovementStep" c:type="GtkMovementStep"/>
          </parameter>
          <parameter name="count" transfer-ownership="none">
            <doc xml:whitespace="preserve">integer describing the direction of the movement. 1 for forward, -1 for backwards.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="open"
              c:identifier="webkit_web_view_open"
              deprecated="Use webkit_web_view_load_uri() instead."
              deprecated-version="1.1.1">
        <doc xml:whitespace="preserve">Requests loading of the specified URI string.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="web_view" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitWebView</doc>
            <type name="WebView" c:type="WebKitWebView*"/>
          </instance-parameter>
          <parameter name="uri" transfer-ownership="none">
            <doc xml:whitespace="preserve">an URI</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="paste_clipboard"
              c:identifier="webkit_web_view_paste_clipboard">
        <doc xml:whitespace="preserve">Pastes the current contents of the clipboard to the @web_view.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="web_view" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitWebView</doc>
            <type name="WebView" c:type="WebKitWebView*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="redo" c:identifier="webkit_web_view_redo" version="1.1.14">
        <doc xml:whitespace="preserve">Redoes the last editing command in the view, if possible.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="web_view" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitWebView</doc>
            <type name="WebView" c:type="WebKitWebView*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="reload" c:identifier="webkit_web_view_reload">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="web_view" transfer-ownership="none">
            <type name="WebView" c:type="WebKitWebView*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="reload_bypass_cache"
              c:identifier="webkit_web_view_reload_bypass_cache"
              version="1.0.3">
        <doc xml:whitespace="preserve">Reloads the @web_view without using any cached data.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="web_view" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitWebView</doc>
            <type name="WebView" c:type="WebKitWebView*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="search_text" c:identifier="webkit_web_view_search_text">
        <doc xml:whitespace="preserve">Looks for a specified string inside #web_view.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE on success or %FALSE on failure</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="web_view" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitWebView</doc>
            <type name="WebView" c:type="WebKitWebView*"/>
          </instance-parameter>
          <parameter name="text" transfer-ownership="none">
            <doc xml:whitespace="preserve">a string to look for</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="case_sensitive" transfer-ownership="none">
            <doc xml:whitespace="preserve">whether to respect the case of text</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="forward" transfer-ownership="none">
            <doc xml:whitespace="preserve">whether to find forward or not</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="wrap" transfer-ownership="none">
            <doc xml:whitespace="preserve">whether to continue looking at the beginning after reaching the end</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="select_all" c:identifier="webkit_web_view_select_all">
        <doc xml:whitespace="preserve">Attempts to select everything inside the @web_view.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="web_view" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitWebView</doc>
            <type name="WebView" c:type="WebKitWebView*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_custom_encoding"
              c:identifier="webkit_web_view_set_custom_encoding"
              version="1.1.1">
        <doc xml:whitespace="preserve">Sets the current #WebKitWebView encoding, without modifying the default one,
and reloads the page.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="web_view" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitWebView</doc>
            <type name="WebView" c:type="WebKitWebView*"/>
          </instance-parameter>
          <parameter name="encoding" transfer-ownership="none">
            <doc xml:whitespace="preserve">the new encoding, or %NULL to restore the default encoding</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_editable" c:identifier="webkit_web_view_set_editable">
        <doc xml:whitespace="preserve">Sets whether @web_view allows the user to edit its HTML document.

If @flag is %TRUE, @web_view allows the user to edit the document. If @flag is
%FALSE, an element in @web_view's document can only be edited if the
CONTENTEDITABLE attribute has been set on the element or one of its parent
elements. You can change @web_view's document programmatically regardless of
this setting. By default a #WebKitWebView is not editable.

Normally, an HTML document is not editable unless the elements within the
document are editable. This function provides a low-level way to make the
contents of a #WebKitWebView editable without altering the document or DOM
structure.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="web_view" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitWebView</doc>
            <type name="WebView" c:type="WebKitWebView*"/>
          </instance-parameter>
          <parameter name="flag" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #gboolean indicating the editable state</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_full_content_zoom"
              c:identifier="webkit_web_view_set_full_content_zoom"
              version="1.0.1">
        <doc xml:whitespace="preserve">Sets whether the zoom level affects only text or all elements.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="web_view" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitWebView</doc>
            <type name="WebView" c:type="WebKitWebView*"/>
          </instance-parameter>
          <parameter name="full_content_zoom" transfer-ownership="none">
            <doc xml:whitespace="preserve">%FALSE if only text should be scaled (the default), %TRUE if the full content of the view should be scaled.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_highlight_text_matches"
              c:identifier="webkit_web_view_set_highlight_text_matches">
        <doc xml:whitespace="preserve">Highlights text matches previously marked by webkit_web_view_mark_text_matches.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="web_view" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitWebView</doc>
            <type name="WebView" c:type="WebKitWebView*"/>
          </instance-parameter>
          <parameter name="highlight" transfer-ownership="none">
            <doc xml:whitespace="preserve">whether to highlight text matches</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_maintains_back_forward_list"
              c:identifier="webkit_web_view_set_maintains_back_forward_list">
        <doc xml:whitespace="preserve">Set the view to maintain a back or forward list of history items.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="web_view" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitWebView</doc>
            <type name="WebView" c:type="WebKitWebView*"/>
          </instance-parameter>
          <parameter name="flag" transfer-ownership="none">
            <doc xml:whitespace="preserve">to tell the view to maintain a back or forward list</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_settings" c:identifier="webkit_web_view_set_settings">
        <doc xml:whitespace="preserve">Replaces the #WebKitWebSettings instance that is currently attached
to @web_view with @settings. The reference held by the @web_view on
the old #WebKitWebSettings instance is dropped, and the reference
count of @settings is inscreased.

The settings are automatically applied to @web_view.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="web_view" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitWebView</doc>
            <type name="WebView" c:type="WebKitWebView*"/>
          </instance-parameter>
          <parameter name="settings" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #WebKitWebSettings to be set</doc>
            <type name="WebSettings" c:type="WebKitWebSettings*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_transparent"
              c:identifier="webkit_web_view_set_transparent">
        <doc xml:whitespace="preserve">Sets whether the #WebKitWebView has a transparent background.

Pass %FALSE to have the #WebKitWebView draw a solid background
(the default), otherwise %TRUE.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="web_view" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitWebView</doc>
            <type name="WebView" c:type="WebKitWebView*"/>
          </instance-parameter>
          <parameter name="flag" transfer-ownership="none">
            <doc xml:whitespace="preserve">whether or not @web_view should be transparent</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_view_mode"
              c:identifier="webkit_web_view_set_view_mode"
              version="1.3.4">
        <doc xml:whitespace="preserve">Sets the view-mode property of the #WebKitWebView. Check the
property's documentation for more information.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="web_view" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #WebKitWebView that will have its view mode set</doc>
            <type name="WebView" c:type="WebKitWebView*"/>
          </instance-parameter>
          <parameter name="mode" transfer-ownership="none">
            <doc xml:whitespace="preserve">the %WebKitWebViewViewMode to be set</doc>
            <type name="WebViewViewMode" c:type="WebKitWebViewViewMode"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_view_source_mode"
              c:identifier="webkit_web_view_set_view_source_mode"
              version="1.1.14">
        <doc xml:whitespace="preserve">Set whether the view should be in view source mode. Setting this mode to
%TRUE before loading a URI will display the source of the web page in a
nice and readable format.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="web_view" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitWebView</doc>
            <type name="WebView" c:type="WebKitWebView*"/>
          </instance-parameter>
          <parameter name="view_source_mode" transfer-ownership="none">
            <doc xml:whitespace="preserve">the mode to turn on or off view source mode</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_zoom_level"
              c:identifier="webkit_web_view_set_zoom_level"
              version="1.0.1">
        <doc xml:whitespace="preserve">Sets the zoom level of @web_view, i.e. the factor by which elements in
the page are scaled with respect to their original size.
If the "full-content-zoom" property is set to %FALSE (the default)
the zoom level changes the text size, or if %TRUE, scales all
elements in the page.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="web_view" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitWebView</doc>
            <type name="WebView" c:type="WebKitWebView*"/>
          </instance-parameter>
          <parameter name="zoom_level" transfer-ownership="none">
            <doc xml:whitespace="preserve">the new zoom level</doc>
            <type name="gfloat" c:type="gfloat"/>
          </parameter>
        </parameters>
      </method>
      <method name="stop_loading" c:identifier="webkit_web_view_stop_loading">
        <doc xml:whitespace="preserve">Stops any ongoing load in the @web_view.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="web_view" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitWebView</doc>
            <type name="WebView" c:type="WebKitWebView*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="try_get_favicon_pixbuf"
              c:identifier="webkit_web_view_try_get_favicon_pixbuf"
              version="1.8">
        <doc xml:whitespace="preserve">Obtains a #GdkPixbuf of the favicon for the given
#WebKitWebView. This will return %NULL is there is no icon for the
current #WebKitWebView or if the icon is in the database but not
available at the moment of this call. Use
webkit_web_view_get_icon_uri() if you need to distinguish these
cases.  Usually you want to connect to WebKitWebView::icon-loaded
and call this method in the callback.

See also webkit_favicon_database_try_get_favicon_pixbuf(). Contrary
to this function the icon database one returns the URL of the page
containing the icon.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a new reference to a #GdkPixbuf, or %NULL</doc>
          <type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*"/>
        </return-value>
        <parameters>
          <instance-parameter name="web_view" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #WebKitWebView object</doc>
            <type name="WebView" c:type="WebKitWebView*"/>
          </instance-parameter>
          <parameter name="width" transfer-ownership="none">
            <doc xml:whitespace="preserve">the desired width for the icon</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <doc xml:whitespace="preserve">the desired height for the icon</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="undo" c:identifier="webkit_web_view_undo" version="1.1.14">
        <doc xml:whitespace="preserve">Undoes the last editing command in the view, if possible.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="web_view" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitWebView</doc>
            <type name="WebView" c:type="WebKitWebView*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="unmark_text_matches"
              c:identifier="webkit_web_view_unmark_text_matches">
        <doc xml:whitespace="preserve">Removes highlighting previously set by webkit_web_view_mark_text_matches.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="web_view" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitWebView</doc>
            <type name="WebView" c:type="WebKitWebView*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="zoom_in"
              c:identifier="webkit_web_view_zoom_in"
              version="1.0.1">
        <doc xml:whitespace="preserve">Increases the zoom level of @web_view. The current zoom
level is incremented by the value of the "zoom-step"
property of the #WebKitWebSettings associated with @web_view.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="web_view" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitWebView</doc>
            <type name="WebView" c:type="WebKitWebView*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="zoom_out"
              c:identifier="webkit_web_view_zoom_out"
              version="1.0.1">
        <doc xml:whitespace="preserve">Decreases the zoom level of @web_view. The current zoom
level is decremented by the value of the "zoom-step"
property of the #WebKitWebSettings associated with @web_view.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="web_view" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitWebView</doc>
            <type name="WebView" c:type="WebKitWebView*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="copy-target-list"
                version="1.0.2"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The list of targets this web view supports for clipboard copying.</doc>
        <type name="Gtk.TargetList"/>
      </property>
      <property name="custom-encoding"
                version="1.1.2"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The custom encoding of the web view.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="editable" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="encoding" version="1.1.2" transfer-ownership="none">
        <doc xml:whitespace="preserve">The default encoding of the web view.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="full-content-zoom"
                version="1.0.1"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">Whether the full content is scaled when zooming.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="icon-uri" version="1.1.18" transfer-ownership="none">
        <doc xml:whitespace="preserve">The URI for the favicon for the #WebKitWebView.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="im-context" version="1.1.20" transfer-ownership="none">
        <doc xml:whitespace="preserve">The GtkIMMulticontext for the #WebKitWebView.

This is the input method context used for all text entry widgets inside
the #WebKitWebView. It can be used to generate context menu items for
controlling the active input method.</doc>
        <type name="Gtk.IMContext"/>
      </property>
      <property name="load-status" version="1.1.7" transfer-ownership="none">
        <doc xml:whitespace="preserve">Determines the current status of the load.

Connect to "notify::load-status" to monitor loading.

Some versions of WebKitGTK+ emitted this signal for the default
error page, while loading it. This behavior was considered bad,
because it was essentially exposing an implementation
detail. From 1.1.19 onwards this signal is no longer emitted for
the default error pages, but keep in mind that if you override
the error pages by using webkit_web_frame_load_alternate_string()
the signals will be emitted.</doc>
        <type name="LoadStatus"/>
      </property>
      <property name="paste-target-list"
                version="1.0.2"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The list of targets this web view supports for clipboard pasting.</doc>
        <type name="Gtk.TargetList"/>
      </property>
      <property name="progress" version="1.1.7" transfer-ownership="none">
        <doc xml:whitespace="preserve">Determines the current progress of the load.</doc>
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="self-scrolling"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="settings" writable="1" transfer-ownership="none">
        <type name="WebSettings"/>
      </property>
      <property name="title" version="1.1.4" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="transparent" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="uri" version="1.1.4" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="view-mode"
                version="1.3.4"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The "view-mode" media feature for the #WebKitWebView.

The "view-mode" media feature is additional information for web
applications about how the application is running, when it comes
to user experience. Whether the application is running inside a
regular browser window, in a dedicated window, fullscreen, for
instance.

This property stores a %WebKitWebViewViewMode value that matches
the "view-mode" media feature the web application will see.

See http://www.w3.org/TR/view-mode/ for more information.</doc>
        <type name="WebViewViewMode"/>
      </property>
      <property name="viewport-attributes"
                version="1.3.8"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The associated #WebKitViewportAttributes instance.</doc>
        <type name="ViewportAttributes"/>
      </property>
      <property name="web-inspector" version="1.0.3" transfer-ownership="none">
        <doc xml:whitespace="preserve">The associated WebKitWebInspector instance.</doc>
        <type name="WebInspector"/>
      </property>
      <property name="window-features"
                version="1.0.3"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">An associated WebKitWebWindowFeatures instance.</doc>
        <type name="WebWindowFeatures"/>
      </property>
      <property name="zoom-level"
                version="1.0.1"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The level of zoom of the content.</doc>
        <type name="gfloat" c:type="gfloat"/>
      </property>
      <field name="parent_instance">
        <type name="Gtk.Container" c:type="GtkContainer"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="WebViewPrivate" c:type="WebKitWebViewPrivate*"/>
      </field>
      <glib:signal name="close-web-view" when="last" version="1.1.11">
        <doc xml:whitespace="preserve">Emitted when closing a #WebKitWebView is requested. This occurs when a
call is made from JavaScript's window.close function. The default
signal handler does not do anything. It is the owner's responsibility
to hide or delete the web view, if necessary.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE to stop handlers from being invoked for the event or %FALSE to propagate the event furter</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </glib:signal>
      <glib:signal name="console-message" when="last">
        <doc xml:whitespace="preserve">A JavaScript console message was created.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE to stop other handlers from being invoked for the event. %FALSE to propagate the event further.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="message" transfer-ownership="none">
            <doc xml:whitespace="preserve">the message text</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="line" transfer-ownership="none">
            <doc xml:whitespace="preserve">the line where the error occured</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="source_id" transfer-ownership="none">
            <doc xml:whitespace="preserve">the source id</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="context-menu" when="last" version="1.10">
        <doc xml:whitespace="preserve">Emmited when a context menu is about to be displayed to give the application
a chance to create and handle its own context menu. If you only want to add custom
options to the default context menu you can simply modify the given @default_menu.

When @triggered_with_keyboard is %TRUE the coordinates of the given @hit_test_result should be
used to position the popup menu. When the context menu has been triggered by a
mouse event you could either use the @hit_test_result coordinates or pass %NULL
to the #GtkMenuPositionFunc parameter of gtk_menu_popup() function.
Note that coordinates of @hit_test_result are relative to @web_view window.

If your application will create and display its own popup menu, %TRUE should be returned.
Note that when the context menu is handled by the application, the #WebKitWebSettings:enable-default-context-menu
setting will be ignored and the #WebKitWebView::populate-popup signal won't be emitted.
If you don't want any context menu to be shown, you can simply connect to this signal
and return %TRUE without doing anything else.</doc>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="default_menu" transfer-ownership="none">
            <doc xml:whitespace="preserve">the default context menu</doc>
            <type name="Gtk.Widget"/>
          </parameter>
          <parameter name="hit_test_result" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitHitTestResult with the context of the current position.</doc>
            <type name="HitTestResult"/>
          </parameter>
          <parameter name="triggered_with_keyboard" transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE if the context menu was triggered using the keyboard</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="copy-clipboard" when="last" action="1">
        <doc xml:whitespace="preserve">The #WebKitWebView::copy-clipboard signal is a keybinding signal which gets emitted to
copy the selection to the clipboard.

The default bindings for this signal are Ctrl-c and Ctrl-Insert.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="create-plugin-widget"
                   when="last"
                   action="1"
                   version="1.1.8">
        <doc xml:whitespace="preserve">The #WebKitWebView::create-plugin-widget signal will be emitted to
create a plugin widget for embed or object HTML tags. This
allows to embed a GtkWidget as a plugin into HTML content. In
case of a textual selection of the GtkWidget WebCore will attempt
to set the property value of "webkit-widget-is-selected". This can
be used to draw a visual indicator of the selection.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a new #GtkWidget, or %NULL</doc>
          <type name="Gtk.Widget"/>
        </return-value>
        <parameters>
          <parameter name="mime_type" transfer-ownership="none">
            <doc xml:whitespace="preserve">the mimetype of the requested object</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="uri" transfer-ownership="none">
            <doc xml:whitespace="preserve">the URI to load</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="param" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GHashTable with additional attributes (strings)</doc>
            <type name="GLib.HashTable">
              <type name="gpointer" c:type="gpointer"/>
              <type name="gpointer" c:type="gpointer"/>
            </type>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="create-web-view" when="last" version="1.0.3">
        <doc xml:whitespace="preserve">Emitted when the creation of a new window is requested.
If this signal is handled the signal handler should return the
newly created #WebKitWebView.

The new #WebKitWebView should not be displayed to the user
until the #WebKitWebView::web-view-ready signal is emitted.

The signal handlers should not try to deal with the reference count for
the new #WebKitWebView. The widget to which the widget is added will
handle that.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a newly allocated #WebKitWebView, or %NULL</doc>
          <type name="WebView"/>
        </return-value>
        <parameters>
          <parameter name="frame" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #WebKitWebFrame</doc>
            <type name="WebFrame"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="cut-clipboard" when="last" action="1">
        <doc xml:whitespace="preserve">The #WebKitWebView::cut-clipboard signal is a keybinding signal which gets emitted to
cut the selection to the clipboard.

The default bindings for this signal are Ctrl-x and Shift-Delete.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="database-quota-exceeded"
                   when="last"
                   action="1"
                   version="1.1.14">
        <doc xml:whitespace="preserve">The #WebKitWebView::database-quota-exceeded signal will be emitted when
a Web Database exceeds the quota of its security origin. This signal
may be used to increase the size of the quota before the originating
operation fails.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="frame" transfer-ownership="none">
            <doc xml:whitespace="preserve">the relevant frame</doc>
            <type name="GObject.Object"/>
          </parameter>
          <parameter name="database" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #WebKitWebDatabase which exceeded the quota of its #WebKitSecurityOrigin</doc>
            <type name="GObject.Object"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="document-load-finished" when="last" action="1">
        <doc xml:whitespace="preserve">Emitted when the DOM document object load is finished for the
given frame.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="web_frame" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #WebKitWebFrame whose load dispatched this request</doc>
            <type name="WebFrame"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="download-requested" when="last" version="1.1.2">
        <doc xml:whitespace="preserve">A new Download is being requested. By default, if the signal is
not handled, the download is cancelled. If you handle the download
and call webkit_download_set_destination_uri(), it will be
started for you. If you need to set the destination asynchronously
you are responsible for starting or cancelling it yourself.

If you intend to handle downloads yourself rather than using
the #WebKitDownload helper object you must handle this signal,
and return %FALSE.

Also, keep in mind that the default policy for WebKitGTK+ is to
ignore files with a MIME type that it does not know how to
handle, which means this signal won't be emitted in the default
setup. One way to trigger downloads is to connect to
WebKitWebView::mime-type-policy-decision-requested and call
webkit_web_policy_decision_download() on the
#WebKitWebPolicyDecision in the parameter list for the kind of
files you want your application to download (a common solution
is to download anything that WebKit can't handle, which you can
figure out by using webkit_web_view_can_show_mime_type()).</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">TRUE if the download should be performed, %FALSE to cancel it</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="download" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitDownload object that lets you control the download process</doc>
            <type name="GObject.Object"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="editing-began" when="last" action="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="editing-ended" when="last" action="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="entering-fullscreen"
                   when="last"
                   version="1.9.0"
                   introspectable="0">
        <doc xml:whitespace="preserve">Emitted when JavaScript code calls
&lt;function&gt;element.webkitRequestFullScreen&lt;/function&gt;. If the
signal is not handled the WebView will proceed to full screen
its top level window. This signal can be used by client code to
request permission to the user prior doing the full screen
transition and eventually prepare the top-level window
(e.g. hide some widgets that would otherwise be part of the
full screen window).</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE to stop other handlers from being invoked for the event. %FALSE to continue emission of the event.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="element" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #WebKitDOMHTMLElement which has requested full screen display.</doc>
            <type/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="frame-created" when="last" action="1" version="1.3.4">
        <doc xml:whitespace="preserve">Emitted when a WebKitWebView has created a new frame. This signal will
be emitted for all sub-frames created during page load. It will not be
emitted for the main frame, which originates in the WebKitWebView constructor
and may be accessed at any time using webkit_web_view_get_main_frame.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="web_frame" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #WebKitWebFrame which was just created.</doc>
            <type name="WebFrame"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="geolocation-policy-decision-cancelled"
                   when="last"
                   version="1.1.23">
        <doc xml:whitespace="preserve">When a @frame wants to cancel geolocation permission it had requested
before.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="frame" transfer-ownership="none">
            <doc xml:whitespace="preserve">the frame that cancels geolocation request.</doc>
            <type name="WebFrame"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="geolocation-policy-decision-requested"
                   when="last"
                   version="1.1.23">
        <doc xml:whitespace="preserve">This signal is emitted when a @frame wants to obtain the user's
location. The decision can be made asynchronously, but you must
call g_object_ref() the @policy_decision, and return %TRUE if
you are going to handle the request. To actually make the
decision you need to call webkit_geolocation_policy_allow() or
webkit_geolocation_policy_deny() on @policy_decision.</doc>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="frame" transfer-ownership="none">
            <doc xml:whitespace="preserve">the frame that requests permission</doc>
            <type name="WebFrame"/>
          </parameter>
          <parameter name="policy_decision" transfer-ownership="none">
            <doc xml:whitespace="preserve">a WebKitGeolocationPolicyDecision</doc>
            <type name="GeolocationPolicyDecision"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="hovering-over-link" when="last">
        <doc xml:whitespace="preserve">When the cursor is over a link, this signal is emitted.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="title" transfer-ownership="none">
            <doc xml:whitespace="preserve">the link's title</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="uri" transfer-ownership="none">
            <doc xml:whitespace="preserve">the URI the link points to</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="icon-loaded" when="last" version="1.1.18">
        <doc xml:whitespace="preserve">This signal is emitted when the main frame has got a favicon.
See WebKitIconDatabase::icon-loaded if you want to keep track of
icons for child frames.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="icon_uri" transfer-ownership="none">
            <doc xml:whitespace="preserve">the URI for the icon</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="leaving-fullscreen"
                   when="last"
                   version="1.9.0"
                   introspectable="0">
        <doc xml:whitespace="preserve">Emitted when the WebView is about to restore its top level
window out of its full screen state. This signal can be used by
client code to restore widgets hidden during the
entering-fullscreen stage for instance.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE to stop other handlers from being invoked for the event. %FALSE to continue emission of the event.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="element" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #WebKitDOMHTMLElement which is currently displayed full screen.</doc>
            <type/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="load-committed"
                   when="last"
                   deprecated="Use the &quot;load-status&quot; property instead.">
        <doc xml:whitespace="preserve">When a #WebKitWebFrame loaded the first data this signal is emitted.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="frame" transfer-ownership="none">
            <doc xml:whitespace="preserve">the main frame that received the first data</doc>
            <type name="WebFrame"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="load-error" when="last" version="1.1.6">
        <doc xml:whitespace="preserve">An error occurred while loading. By default, if the signal is not
handled, the @web_view will display a stock error page. You need to
handle the signal if you want to provide your own error page.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE to stop other handlers from being invoked for the event. %FALSE to propagate the event further.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="web_frame" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #WebKitWebFrame</doc>
            <type name="WebFrame"/>
          </parameter>
          <parameter name="uri" transfer-ownership="none">
            <doc xml:whitespace="preserve">the URI that triggered the error</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="web_error" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #GError that was triggered</doc>
            <type name="GLib.Error"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="load-finished"
                   when="last"
                   deprecated="Use the &quot;load-status&quot; property instead.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="frame" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #WebKitWebFrame</doc>
            <type name="WebFrame"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="load-progress-changed"
                   when="last"
                   deprecated="Use the &quot;progress&quot; property instead.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="progress" transfer-ownership="none">
            <doc xml:whitespace="preserve">the global progress</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="load-started"
                   when="last"
                   deprecated="Use the &quot;load-status&quot; property instead.">
        <doc xml:whitespace="preserve">When a #WebKitWebFrame begins to load this signal is emitted.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="frame" transfer-ownership="none">
            <doc xml:whitespace="preserve">the frame going to do the load</doc>
            <type name="WebFrame"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="mime-type-policy-decision-requested"
                   when="last"
                   version="1.0.3">
        <doc xml:whitespace="preserve">Decide whether or not to display the given MIME type.  If this
signal is not handled, the default behavior is to show the
content of the requested URI if WebKit can show this MIME
type and the content disposition is not a download; if WebKit
is not able to show the MIME type nothing happens.

Notice that if you return TRUE, meaning that you handled the
signal, you are expected to be aware of the "Content-Disposition"
header. A value of "attachment" usually indicates a download
regardless of the MIME type, see also
soup_message_headers_get_content_disposition(). And you must call
webkit_web_policy_decision_ignore(),
webkit_web_policy_decision_use(), or
webkit_web_policy_decision_download() on the @policy_decision
object.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if a decision was made, %FALSE to have the default behavior apply</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="frame" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #WebKitWebFrame that required the policy decision</doc>
            <type name="WebFrame"/>
          </parameter>
          <parameter name="request" transfer-ownership="none">
            <doc xml:whitespace="preserve">a WebKitNetworkRequest</doc>
            <type name="NetworkRequest"/>
          </parameter>
          <parameter name="mimetype" transfer-ownership="none">
            <doc xml:whitespace="preserve">the MIME type attempted to load</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="policy_decision" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitWebPolicyDecision</doc>
            <type name="WebPolicyDecision"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="move-cursor" when="last" action="1" version="1.1.4">
        <doc xml:whitespace="preserve">The #WebKitWebView::move-cursor will be emitted to apply the
cursor movement described by its parameters to the @view.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE or %FALSE</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="step" transfer-ownership="none">
            <doc xml:whitespace="preserve">the type of movement, one of #GtkMovementStep</doc>
            <type name="Gtk.MovementStep"/>
          </parameter>
          <parameter name="count" transfer-ownership="none">
            <doc xml:whitespace="preserve">an integer indicating the subtype of movement. Currently the permitted values are '1' = forward, '-1' = backwards.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="navigation-policy-decision-requested"
                   when="last"
                   version="1.0.3">
        <doc xml:whitespace="preserve">Emitted when @frame requests a navigation to another page.
If this signal is not handled, the default behavior is to allow the
navigation.

Notice that if you return TRUE, meaning that you handled the
signal, you are expected to have decided what to do, by calling
webkit_web_policy_decision_ignore(),
webkit_web_policy_decision_use(), or
webkit_web_policy_decision_download() on the @policy_decision
object.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if a decision was made, %FALSE to have the default behavior apply</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="frame" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #WebKitWebFrame that required the navigation</doc>
            <type name="WebFrame"/>
          </parameter>
          <parameter name="request" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitNetworkRequest</doc>
            <type name="NetworkRequest"/>
          </parameter>
          <parameter name="navigation_action" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitWebNavigationAction</doc>
            <type name="WebNavigationAction"/>
          </parameter>
          <parameter name="policy_decision" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitWebPolicyDecision</doc>
            <type name="WebPolicyDecision"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="navigation-requested"
                   when="last"
                   deprecated="Use WebKitWebView::navigation-policy-decision-requested instead">
        <doc xml:whitespace="preserve">Emitted when @frame requests a navigation to another page.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a #WebKitNavigationResponse</doc>
          <type name="NavigationResponse"/>
        </return-value>
        <parameters>
          <parameter name="frame" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #WebKitWebFrame that required the navigation</doc>
            <type name="WebFrame"/>
          </parameter>
          <parameter name="request" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitNetworkRequest</doc>
            <type name="NetworkRequest"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="new-window-policy-decision-requested"
                   when="last"
                   version="1.1.4">
        <doc xml:whitespace="preserve">Emitted when @frame requests opening a new window. With this
signal the browser can use the context of the request to decide
about the new window. If the request is not handled the default
behavior is to allow opening the new window to load the URI,
which will cause a create-web-view signal emission where the
browser handles the new window action but without information
of the context that caused the navigation. The following
navigation-policy-decision-requested emissions will load the
page after the creation of the new window just with the
information of this new navigation context, without any
information about the action that made this new window to be
opened.

Notice that if you return TRUE, meaning that you handled the
signal, you are expected to have decided what to do, by calling
webkit_web_policy_decision_ignore(),
webkit_web_policy_decision_use(), or
webkit_web_policy_decision_download() on the @policy_decision
object.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if a decision was made, %FALSE to have the default behavior apply</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="frame" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #WebKitWebFrame that required the navigation</doc>
            <type name="WebFrame"/>
          </parameter>
          <parameter name="request" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitNetworkRequest</doc>
            <type name="NetworkRequest"/>
          </parameter>
          <parameter name="navigation_action" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitWebNavigationAction</doc>
            <type name="WebNavigationAction"/>
          </parameter>
          <parameter name="policy_decision" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitWebPolicyDecision</doc>
            <type name="WebPolicyDecision"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="onload-event" when="last">
        <doc xml:whitespace="preserve">When a #WebKitWebFrame receives an onload event this signal is emitted.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="frame" transfer-ownership="none">
            <doc xml:whitespace="preserve">the frame</doc>
            <type name="WebFrame"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="paste-clipboard" when="last" action="1">
        <doc xml:whitespace="preserve">The #WebKitWebView::paste-clipboard signal is a keybinding signal which gets emitted to
paste the contents of the clipboard into the Web view.

The default bindings for this signal are Ctrl-v and Shift-Insert.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="populate-popup"
                   when="last"
                   deprecated="Use #WebKitWebView::context-menu signal instead."
                   deprecated-version="1.10">
        <doc xml:whitespace="preserve">When a context menu is about to be displayed this signal is emitted.

Add menu items to #menu to extend the context menu.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="menu" transfer-ownership="none">
            <doc xml:whitespace="preserve">the context menu</doc>
            <type name="Gtk.Menu"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="print-requested" when="last" version="1.1.5">
        <doc xml:whitespace="preserve">Emitted when printing is requested by the frame, usually
because of a javascript call. When handling this signal you
should call webkit_web_frame_print_full() or
webkit_web_frame_print() to do the actual printing.

The default handler will present a print dialog and carry a
print operation. Notice that this means that if you intend to
ignore a print request you must connect to this signal, and
return %TRUE.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the print request has been handled, %FALSE if the default handler should run</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="web_frame" transfer-ownership="none">
            <doc xml:whitespace="preserve">the frame that is requesting to be printed</doc>
            <type name="WebFrame"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="redo" when="last" action="1" version="1.1.14">
        <doc xml:whitespace="preserve">The #WebKitWebView::redo signal is a keybinding signal which gets emitted to
redo the last editing command.

The default binding for this signal is Ctrl-Shift-z</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="resource-content-length-received"
                   when="last"
                   version="1.7.5">
        <doc xml:whitespace="preserve">Emitted when new resource data has been received. The
@length_received variable stores the amount of bytes received
since the last time this signal was emitted. This is useful to
provide progress information about the resource load operation.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="web_frame" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #WebKitWebFrame the response was received for</doc>
            <type name="WebFrame"/>
          </parameter>
          <parameter name="web_resource" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #WebKitWebResource that was loaded</doc>
            <type name="WebResource"/>
          </parameter>
          <parameter name="length_received" transfer-ownership="none">
            <doc xml:whitespace="preserve">the amount of data received since the last signal emission</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="resource-load-failed" when="last" version="1.7.5">
        <doc xml:whitespace="preserve">Invoked when a resource failed to load</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="web_frame" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #WebKitWebFrame the response was received for</doc>
            <type name="WebFrame"/>
          </parameter>
          <parameter name="web_resource" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #WebKitWebResource that was loaded</doc>
            <type name="WebResource"/>
          </parameter>
          <parameter name="error" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #GError that was triggered</doc>
            <type name="GLib.Error"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="resource-load-finished" when="last" version="1.7.5">
        <doc xml:whitespace="preserve">Emitted when all the data for the resource was loaded</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="web_frame" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #WebKitWebFrame the response was received for</doc>
            <type name="WebFrame"/>
          </parameter>
          <parameter name="web_resource" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #WebKitWebResource that was loaded</doc>
            <type name="WebResource"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="resource-request-starting"
                   when="last"
                   action="1"
                   version="1.1.14">
        <doc xml:whitespace="preserve">Emitted when a request is about to be sent. You can modify the
request while handling this signal. You can set the URI in the
#WebKitNetworkRequest object itself, and add/remove/replace
headers using the #SoupMessage object it carries, if it is
present. See webkit_network_request_get_message(). Setting the
request URI to "about:blank" will effectively cause the request
to load nothing, and can be used to disable the loading of
specific resources.

Notice that information about an eventual redirect is available
in @response's #SoupMessage, not in the #SoupMessage carried by
the @request. If @response is %NULL, then this is not a
redirected request.

The #WebKitWebResource object will be the same throughout all
the lifetime of the resource, but the contents may change from
inbetween signal emissions.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="web_frame" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #WebKitWebFrame whose load dispatched this request</doc>
            <type name="WebFrame"/>
          </parameter>
          <parameter name="web_resource" transfer-ownership="none">
            <doc xml:whitespace="preserve">an empty #WebKitWebResource object</doc>
            <type name="WebResource"/>
          </parameter>
          <parameter name="request" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #WebKitNetworkRequest that will be dispatched</doc>
            <type name="NetworkRequest"/>
          </parameter>
          <parameter name="response" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #WebKitNetworkResponse representing the redirect response, if any</doc>
            <type name="NetworkResponse"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="resource-response-received"
                   when="last"
                   version="1.7.5">
        <doc xml:whitespace="preserve">Emitted when the first byte of data arrives</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="web_frame" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #WebKitWebFrame the response was received for</doc>
            <type name="WebFrame"/>
          </parameter>
          <parameter name="web_resource" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #WebKitWebResource being loaded</doc>
            <type name="WebResource"/>
          </parameter>
          <parameter name="response" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #WebKitNetworkResponse that was received</doc>
            <type name="NetworkResponse"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="run-file-chooser" when="last">
        <doc xml:whitespace="preserve">This signal is emitted when the user interacts with a &amp;lt;input
type='file' /&amp;gt; HTML element, requesting from WebKit to show
a dialog to select one or more files to be uploaded. To let the
application know the details of the file chooser, as well as to
allow the client application to either cancel the request or
perform an actual selection of files, the signal will pass an
instance of the #WebKitFileChooserRequest in the @request
argument.

The default signal handler will asynchronously run a regular
#GtkFileChooserDialog for the user to interact with.

If this signal is to be handled asynchronously, you must
call g_object_ref() on the @request, and return %TRUE to indicate
that the request is being handled. When you are ready to complete the
request, call webkit_file_chooser_request_select_files().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE to stop other handlers from being invoked for the event. %FALSE to propagate the event further.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="request" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitFileChooserRequest</doc>
            <type name="FileChooserRequest"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="script-alert" when="last">
        <doc xml:whitespace="preserve">A JavaScript alert dialog was created.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE to stop other handlers from being invoked for the event. %FALSE to propagate the event further.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="frame" transfer-ownership="none">
            <doc xml:whitespace="preserve">the relevant frame</doc>
            <type name="WebFrame"/>
          </parameter>
          <parameter name="message" transfer-ownership="none">
            <doc xml:whitespace="preserve">the message text</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="script-confirm" when="last">
        <doc xml:whitespace="preserve">A JavaScript confirm dialog was created, providing Yes and No buttons.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE to stop other handlers from being invoked for the event. %FALSE to propagate the event further.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="frame" transfer-ownership="none">
            <doc xml:whitespace="preserve">the relevant frame</doc>
            <type name="WebFrame"/>
          </parameter>
          <parameter name="message" transfer-ownership="none">
            <doc xml:whitespace="preserve">the message text</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="confirmed" transfer-ownership="none">
            <doc xml:whitespace="preserve">whether the dialog has been confirmed</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="script-prompt" when="last">
        <doc xml:whitespace="preserve">A JavaScript prompt dialog was created, providing an entry to input text.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE to stop other handlers from being invoked for the event. %FALSE to propagate the event further.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="frame" transfer-ownership="none">
            <doc xml:whitespace="preserve">the relevant frame</doc>
            <type name="WebFrame"/>
          </parameter>
          <parameter name="message" transfer-ownership="none">
            <doc xml:whitespace="preserve">the message text</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="default" transfer-ownership="none">
            <doc xml:whitespace="preserve">the default value</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="text" transfer-ownership="none">
            <doc xml:whitespace="preserve">To be filled with the return value or NULL if the dialog was cancelled.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="select-all" when="last" action="1">
        <doc xml:whitespace="preserve">The #WebKitWebView::select-all signal is a keybinding signal which gets emitted to
select the complete contents of the text view.

The default bindings for this signal is Ctrl-a.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="selection-changed" when="last" action="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="should-apply-style"
                   when="last"
                   action="1"
                   introspectable="0">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <type/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="should-begin-editing"
                   when="last"
                   action="1"
                   introspectable="0">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="should-change-selected-range"
                   when="last"
                   action="1"
                   introspectable="0">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <type/>
          </parameter>
          <parameter name="p1" transfer-ownership="none">
            <type name="SelectionAffinity"/>
          </parameter>
          <parameter name="p2" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="should-delete-range"
                   when="last"
                   action="1"
                   introspectable="0">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="should-end-editing"
                   when="last"
                   action="1"
                   introspectable="0">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="should-insert-node"
                   when="last"
                   action="1"
                   introspectable="0">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <type/>
          </parameter>
          <parameter name="p1" transfer-ownership="none">
            <type name="InsertAction"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="should-insert-text"
                   when="last"
                   action="1"
                   introspectable="0">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <type/>
          </parameter>
          <parameter name="p1" transfer-ownership="none">
            <type name="InsertAction"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="should-show-delete-interface-for-element"
                   when="last"
                   action="1"
                   introspectable="0">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="status-bar-text-changed" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="title-changed"
                   when="last"
                   deprecated="Use &quot;notify::title&quot; instead."
                   deprecated-version="1.1.4">
        <doc xml:whitespace="preserve">When a #WebKitWebFrame changes the document title this signal is emitted.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="frame" transfer-ownership="none">
            <doc xml:whitespace="preserve">the main frame</doc>
            <type name="WebFrame"/>
          </parameter>
          <parameter name="title" transfer-ownership="none">
            <doc xml:whitespace="preserve">the new title</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="undo" when="last" action="1" version="1.1.14">
        <doc xml:whitespace="preserve">The #WebKitWebView::undo signal is a keybinding signal which gets emitted to
undo the last editing command.

The default binding for this signal is Ctrl-z</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="user-changed-contents" when="last" action="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="viewport-attributes-changed" when="last" action="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="ViewportAttributes"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="viewport-attributes-recompute-requested"
                   when="last"
                   action="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="ViewportAttributes"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="web-view-ready" when="last" version="1.0.3">
        <doc xml:whitespace="preserve">Emitted after #WebKitWebView::create-web-view when the new #WebKitWebView
should be displayed to the user. When this signal is emitted
all the information about how the window should look, including
size, position, whether the location, status and scroll bars
should be displayed, is already set on the
#WebKitWebWindowFeatures object contained by the #WebKitWebView.

Notice that some of that information may change during the life
time of the window, so you may want to connect to the ::notify
signal of the #WebKitWebWindowFeatures object to handle those.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE to stop handlers from being invoked for the event or %FALSE to propagate the event furter</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </glib:signal>
      <glib:signal name="window-object-cleared" when="last">
        <doc xml:whitespace="preserve">Emitted when the JavaScript window object in a #WebKitWebFrame has been
cleared in preparation for a new load. This is the preferred place to
set custom properties on the window object using the JavaScriptCore API.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="frame" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #WebKitWebFrame to which @window_object belongs</doc>
            <type name="WebFrame"/>
          </parameter>
          <parameter name="context" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #JSGlobalContextRef holding the global object and other execution state; equivalent to the return value of webkit_web_frame_get_global_context(@frame)</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="window_object" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #JSObjectRef representing the frame's JavaScript window object</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="WebViewClass"
            c:type="WebKitWebViewClass"
            glib:is-gtype-struct-for="WebView">
      <field name="parent_class">
        <type name="Gtk.ContainerClass" c:type="GtkContainerClass"/>
      </field>
      <field name="create_web_view" introspectable="0">
        <callback name="create_web_view" introspectable="0">
          <return-value>
            <type name="WebView" c:type="WebKitWebView*"/>
          </return-value>
          <parameters>
            <parameter name="web_view" transfer-ownership="none">
              <type name="WebView" c:type="WebKitWebView*"/>
            </parameter>
            <parameter name="web_frame" transfer-ownership="none">
              <type name="WebFrame" c:type="WebKitWebFrame*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="web_view_ready">
        <callback name="web_view_ready">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="web_view" transfer-ownership="none">
              <type name="WebView" c:type="WebKitWebView*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="close_web_view">
        <callback name="close_web_view">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="web_view" transfer-ownership="none">
              <type name="WebView" c:type="WebKitWebView*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="navigation_requested">
        <callback name="navigation_requested">
          <return-value transfer-ownership="none">
            <type name="NavigationResponse" c:type="WebKitNavigationResponse"/>
          </return-value>
          <parameters>
            <parameter name="web_view" transfer-ownership="none">
              <type name="WebView" c:type="WebKitWebView*"/>
            </parameter>
            <parameter name="frame" transfer-ownership="none">
              <type name="WebFrame" c:type="WebKitWebFrame*"/>
            </parameter>
            <parameter name="request" transfer-ownership="none">
              <type name="NetworkRequest" c:type="WebKitNetworkRequest*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="window_object_cleared" introspectable="0">
        <callback name="window_object_cleared" introspectable="0">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="web_view" transfer-ownership="none">
              <type name="WebView" c:type="WebKitWebView*"/>
            </parameter>
            <parameter name="frame" transfer-ownership="none">
              <type name="WebFrame" c:type="WebKitWebFrame*"/>
            </parameter>
            <parameter name="context" transfer-ownership="none">
              <type c:type="JSGlobalContextRef"/>
            </parameter>
            <parameter name="window_object" transfer-ownership="none">
              <type c:type="JSObjectRef"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="choose_file">
        <callback name="choose_file">
          <return-value transfer-ownership="full">
            <type name="utf8" c:type="gchar*"/>
          </return-value>
          <parameters>
            <parameter name="web_view" transfer-ownership="none">
              <type name="WebView" c:type="WebKitWebView*"/>
            </parameter>
            <parameter name="frame" transfer-ownership="none">
              <type name="WebFrame" c:type="WebKitWebFrame*"/>
            </parameter>
            <parameter name="old_file" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="script_alert">
        <callback name="script_alert">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="web_view" transfer-ownership="none">
              <type name="WebView" c:type="WebKitWebView*"/>
            </parameter>
            <parameter name="frame" transfer-ownership="none">
              <type name="WebFrame" c:type="WebKitWebFrame*"/>
            </parameter>
            <parameter name="alert_message" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="script_confirm">
        <callback name="script_confirm">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="web_view" transfer-ownership="none">
              <type name="WebView" c:type="WebKitWebView*"/>
            </parameter>
            <parameter name="frame" transfer-ownership="none">
              <type name="WebFrame" c:type="WebKitWebFrame*"/>
            </parameter>
            <parameter name="confirm_message" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="did_confirm" transfer-ownership="none">
              <type name="gboolean" c:type="gboolean*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="script_prompt">
        <callback name="script_prompt">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="web_view" transfer-ownership="none">
              <type name="WebView" c:type="WebKitWebView*"/>
            </parameter>
            <parameter name="frame" transfer-ownership="none">
              <type name="WebFrame" c:type="WebKitWebFrame*"/>
            </parameter>
            <parameter name="message" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="default_value" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="value" transfer-ownership="none">
              <type name="utf8" c:type="gchar**"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="console_message">
        <callback name="console_message">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="web_view" transfer-ownership="none">
              <type name="WebView" c:type="WebKitWebView*"/>
            </parameter>
            <parameter name="message" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="line_number" transfer-ownership="none">
              <type name="guint" c:type="guint"/>
            </parameter>
            <parameter name="source_id" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="select_all">
        <callback name="select_all">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="web_view" transfer-ownership="none">
              <type name="WebView" c:type="WebKitWebView*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="cut_clipboard">
        <callback name="cut_clipboard">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="web_view" transfer-ownership="none">
              <type name="WebView" c:type="WebKitWebView*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="copy_clipboard">
        <callback name="copy_clipboard">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="web_view" transfer-ownership="none">
              <type name="WebView" c:type="WebKitWebView*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="paste_clipboard">
        <callback name="paste_clipboard">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="web_view" transfer-ownership="none">
              <type name="WebView" c:type="WebKitWebView*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="move_cursor">
        <callback name="move_cursor">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="web_view" transfer-ownership="none">
              <type name="WebView" c:type="WebKitWebView*"/>
            </parameter>
            <parameter name="step" transfer-ownership="none">
              <type name="Gtk.MovementStep" c:type="GtkMovementStep"/>
            </parameter>
            <parameter name="count" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="set_scroll_adjustments">
        <callback name="set_scroll_adjustments">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="web_view" transfer-ownership="none">
              <type name="WebView" c:type="WebKitWebView*"/>
            </parameter>
            <parameter name="hadjustment" transfer-ownership="none">
              <type name="Gtk.Adjustment" c:type="GtkAdjustment*"/>
            </parameter>
            <parameter name="vadjustment" transfer-ownership="none">
              <type name="Gtk.Adjustment" c:type="GtkAdjustment*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="undo">
        <callback name="undo">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="web_view" transfer-ownership="none">
              <type name="WebView" c:type="WebKitWebView*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="redo">
        <callback name="redo">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="web_view" transfer-ownership="none">
              <type name="WebView" c:type="WebKitWebView*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="should_allow_editing_action">
        <callback name="should_allow_editing_action">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="web_view" transfer-ownership="none">
              <type name="WebView" c:type="WebKitWebView*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="entering_fullscreen">
        <callback name="entering_fullscreen">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="web_view" transfer-ownership="none">
              <type name="WebView" c:type="WebKitWebView*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="leaving_fullscreen">
        <callback name="leaving_fullscreen">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="web_view" transfer-ownership="none">
              <type name="WebView" c:type="WebKitWebView*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="run_file_chooser">
        <callback name="run_file_chooser">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="web_view" transfer-ownership="none">
              <type name="WebView" c:type="WebKitWebView*"/>
            </parameter>
            <parameter name="request" transfer-ownership="none">
              <type name="FileChooserRequest"
                    c:type="WebKitFileChooserRequest*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <record name="WebViewPrivate" c:type="WebKitWebViewPrivate" disguised="1">
    </record>
    <enumeration name="WebViewTargetInfo"
                 glib:type-name="WebKitWebViewTargetInfo"
                 glib:get-type="webkit_web_view_target_info_get_type"
                 c:type="WebKitWebViewTargetInfo">
      <doc xml:whitespace="preserve">Enum values used to denote the info value of various selection types. These can be used
to interpret the data WebKitGTK+ publishes via GtkClipboard and drag-and-drop.</doc>
      <member name="html"
              value="0"
              c:identifier="WEBKIT_WEB_VIEW_TARGET_INFO_HTML"
              glib:nick="html">
        <doc xml:whitespace="preserve">Rich markup data</doc>
      </member>
      <member name="text"
              value="1"
              c:identifier="WEBKIT_WEB_VIEW_TARGET_INFO_TEXT"
              glib:nick="text">
        <doc xml:whitespace="preserve">Text data</doc>
      </member>
      <member name="image"
              value="2"
              c:identifier="WEBKIT_WEB_VIEW_TARGET_INFO_IMAGE"
              glib:nick="image">
        <doc xml:whitespace="preserve">Image data</doc>
      </member>
      <member name="uri_list"
              value="3"
              c:identifier="WEBKIT_WEB_VIEW_TARGET_INFO_URI_LIST"
              glib:nick="uri-list">
        <doc xml:whitespace="preserve">URI list data</doc>
      </member>
      <member name="netscape_url"
              value="4"
              c:identifier="WEBKIT_WEB_VIEW_TARGET_INFO_NETSCAPE_URL"
              glib:nick="netscape-url">
        <doc xml:whitespace="preserve">A single URL in the Netscape protocol</doc>
      </member>
    </enumeration>
    <enumeration name="WebViewViewMode"
                 glib:type-name="WebKitWebViewViewMode"
                 glib:get-type="webkit_web_view_view_mode_get_type"
                 c:type="WebKitWebViewViewMode">
      <doc xml:whitespace="preserve">Enum values used to denote the various types of view modes. See the
#WebKitWebView:view-mode property.</doc>
      <member name="windowed"
              value="0"
              c:identifier="WEBKIT_WEB_VIEW_VIEW_MODE_WINDOWED"
              glib:nick="windowed">
        <doc xml:whitespace="preserve">Windowed view mode</doc>
      </member>
      <member name="floating"
              value="1"
              c:identifier="WEBKIT_WEB_VIEW_VIEW_MODE_FLOATING"
              glib:nick="floating">
        <doc xml:whitespace="preserve">Floating view mode</doc>
      </member>
      <member name="fullscreen"
              value="2"
              c:identifier="WEBKIT_WEB_VIEW_VIEW_MODE_FULLSCREEN"
              glib:nick="fullscreen">
        <doc xml:whitespace="preserve">Fullscreen view mode</doc>
      </member>
      <member name="maximized"
              value="3"
              c:identifier="WEBKIT_WEB_VIEW_VIEW_MODE_MAXIMIZED"
              glib:nick="maximized">
        <doc xml:whitespace="preserve">Maximized view mode</doc>
      </member>
      <member name="minimized"
              value="4"
              c:identifier="WEBKIT_WEB_VIEW_VIEW_MODE_MINIMIZED"
              glib:nick="minimized">
        <doc xml:whitespace="preserve">Minimized view mode</doc>
      </member>
    </enumeration>
    <class name="WebWindowFeatures"
           c:symbol-prefix="web_window_features"
           c:type="WebKitWebWindowFeatures"
           parent="GObject.Object"
           glib:type-name="WebKitWebWindowFeatures"
           glib:get-type="webkit_web_window_features_get_type"
           glib:type-struct="WebWindowFeaturesClass">
      <doc xml:whitespace="preserve">The content of a #WebKitWebView can request to change certain
properties of a #WebKitWebView. This can include the x, y position
of the window, the width and height but also if a toolbar,
scrollbar, statusbar, locationbar should be visible to the user,
the request to show the #WebKitWebView fullscreen.

In the normal case one will use #webkit_web_view_get_window_features
to get the #WebKitWebWindowFeatures and then monitor the property
changes. Be aware that the #WebKitWebWindowFeatures might change
before #WebKitWebView::web-view-ready signal is emitted.
To be safe listen to the notify::window-features signal of the #WebKitWebView
and reconnect the signals whenever the #WebKitWebWindowFeatures of
a #WebKitWebView changes.

&lt;informalexample&gt;&lt;programlisting&gt;
/&lt;!-- --&gt;* Get the current WebKitWebWindowFeatures *&lt;!-- --&gt;/
WebKitWebWindowFeatures *features = webkit_web_view_get_window_features (my_webview);

/&lt;!-- --&gt;* Connect to the property changes *&lt;!-- --&gt;/
g_signal_connect (G_OBJECT(features), "notify::menubar-visible", G_CALLBACK(make_menu_bar_visible), NULL);
g_signal_connect (G_OBJECT(features), "notify::statusbar-visible", G_CALLBACK(make_status_bar_visible), NULL);

&lt;/programlisting&gt;&lt;/informalexample&gt;</doc>
      <constructor name="new"
                   c:identifier="webkit_web_window_features_new"
                   version="1.0.3">
        <doc xml:whitespace="preserve">Creates a new #WebKitWebWindowFeatures instance with default values. It must
be manually attached to a WebView.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a new #WebKitWebWindowFeatures instance</doc>
          <type name="WebWindowFeatures" c:type="WebKitWebWindowFeatures*"/>
        </return-value>
      </constructor>
      <method name="equal"
              c:identifier="webkit_web_window_features_equal"
              version="1.0.3">
        <doc xml:whitespace="preserve">Decides if a #WebKitWebWindowFeatures instance equals another, as
in has the same values.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the instances have the same values, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="features1" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitWebWindowFeatures instance</doc>
            <type name="WebWindowFeatures" c:type="WebKitWebWindowFeatures*"/>
          </instance-parameter>
          <parameter name="features2" transfer-ownership="none">
            <doc xml:whitespace="preserve">another #WebKitWebWindowFeatures instance</doc>
            <type name="WebWindowFeatures" c:type="WebKitWebWindowFeatures*"/>
          </parameter>
        </parameters>
      </method>
      <property name="fullscreen"
                version="1.0.3"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">Controls whether window will be displayed fullscreen.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="height"
                version="1.0.3"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The height of the window on the screen.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="locationbar-visible"
                version="1.0.3"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">Controls whether the locationbar should be visible for the window.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="menubar-visible"
                version="1.0.3"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">Controls whether the menubar should be visible for the window.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="scrollbar-visible"
                version="1.0.3"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">Controls whether the scrollbars should be visible for the window.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="statusbar-visible"
                version="1.0.3"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">Controls whether the statusbar should be visible for the window.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="toolbar-visible"
                version="1.0.3"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">Controls whether the toolbar should be visible for the window.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="width"
                version="1.0.3"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The width of the window on the screen.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="x"
                version="1.0.3"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The starting x position of the window on the screen.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="y"
                version="1.0.3"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The starting y position of the window on the screen.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="WebWindowFeaturesPrivate"
              c:type="WebKitWebWindowFeaturesPrivate*"/>
      </field>
    </class>
    <record name="WebWindowFeaturesClass"
            c:type="WebKitWebWindowFeaturesClass"
            glib:is-gtype-struct-for="WebWindowFeatures">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="_webkit_reserved1" introspectable="0">
        <callback name="_webkit_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_webkit_reserved2" introspectable="0">
        <callback name="_webkit_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_webkit_reserved3" introspectable="0">
        <callback name="_webkit_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_webkit_reserved4" introspectable="0">
        <callback name="_webkit_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <record name="WebWindowFeaturesPrivate"
            c:type="WebKitWebWindowFeaturesPrivate"
            disguised="1">
    </record>
    <record name="_WebPluginMIMEType" c:type="_WebKitWebPluginMIMEType">
      <field name="name" writable="1">
        <type name="utf8" c:type="char*"/>
      </field>
      <field name="description" writable="1">
        <type name="utf8" c:type="char*"/>
      </field>
      <field name="extensions" writable="1">
        <type name="utf8" c:type="char**"/>
      </field>
    </record>
    <function name="application_cache_get_database_directory_path"
              c:identifier="webkit_application_cache_get_database_directory_path"
              version="1.3.13">
      <doc xml:whitespace="preserve">Returns the path to the directory WebKit will write web application
cache databases to. By default this path is set to
$XDG_CACHE_HOME/webkitgtk/applications and cannot be modified.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">the application cache database directory path</doc>
        <type name="utf8" c:type="const gchar*"/>
      </return-value>
    </function>
    <function name="application_cache_get_maximum_size"
              c:identifier="webkit_application_cache_get_maximum_size"
              version="1.3.13"
              introspectable="0">
      <doc xml:whitespace="preserve">Returns the maximum size of the cache storage.
By default it is set to UINT_MAX i.e. no quota.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">the current application cache maximum storage size</doc>
        <type name="unsigned long long" c:type="unsigned long long"/>
      </return-value>
    </function>
    <function name="application_cache_set_maximum_size"
              c:identifier="webkit_application_cache_set_maximum_size"
              version="1.3.13"
              introspectable="0">
      <doc xml:whitespace="preserve">Sets new application cache maximum storage size.
Changing the application cache storage size will clear the cache
and rebuild cache storage.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="size" transfer-ownership="none">
          <doc xml:whitespace="preserve">the new web application cache maximum storage size</doc>
          <type name="unsigned long long" c:type="unsigned long long"/>
        </parameter>
      </parameters>
    </function>
    <function name="check_version" c:identifier="webkit_check_version">
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="major" transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="minor" transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="micro" transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="context_menu_item_get_action"
              c:identifier="webkit_context_menu_item_get_action"
              version="1.10">
      <doc xml:whitespace="preserve">Returns the #WebKitContextMenuAction of the given @item. This function
can be used to determine the items present in the default context menu.
In order to inspect the default context menu, you should connect to
#WebKitWebView::context-menu signal.

&lt;example&gt;
&lt;title&gt;Inspecting the default context menu&lt;/title&gt;
&lt;programlisting&gt;
static gboolean context_menu_cb (WebKitWebView       *webView,
                                 GtkWidget           *default_menu,
                                 WebKitHitTestResult *hit_test_result,
                                 gboolean             triggered_with_keyboard,
                                 gpointer             user_data)
{
    GList *items = gtk_container_get_children (GTK_CONTAINER (default_menu));
    GList *l;
    GtkAction *action;
    GtkWidget *sub_menu;

    for (l = items; l; l = g_list_next (l)) {
        GtkMenuItem *item = (GtkMenuItem *)l-&gt;data;

        if (GTK_IS_SEPARATOR_MENU_ITEM (item)) {
            /&amp;ast; It's  separator, do nothing &amp;ast;/
            continue;
        }

        switch (webkit_context_menu_item_get_action (item)) {
        case WEBKIT_CONTEXT_MENU_ACTION_NO_ACTION:
            /&amp;ast; No action for this item &amp;ast;/
            break;
        /&amp;ast; Don't allow to ope links from context menu &amp;ast;/
        case WEBKIT_CONTEXT_MENU_ACTION_OPEN_LINK:
        case WEBKIT_CONTEXT_MENU_ACTION_OPEN_LINK_IN_NEW_WINDOW:
            action = gtk_activatable_get_related_action (GTK_ACTIVATABLE (item));
            gtk_action_set_sensitive (action, FALSE);
            break;
        default:
            break;
        }

        sub_menu = gtk_menu_item_get_submenu (item);
        if (sub_menu) {
            GtkWidget *menu_item;

            /&amp;ast; Add custom action to submenu &amp;ast;/
            action = gtk_action_new ("CustomItemName", "Custom Action", NULL, NULL);
            g_signal_connect (action, "activate", G_CALLBACK (custom_menu_item_activated), NULL);

            menu_item = gtk_action_create_menu_item (action);
            g_object_unref (action);
            gtk_menu_shell_append (GTK_MENU_SHELL (sub_menu), menu_item);
            gtk_widget_show (menu_item);
        }
    }

    g_list_free(items);
}
&lt;/programlisting&gt;
&lt;/example&gt;

Note that you can get the #GtkAction of any item in the default context menu with
gtk_activatable_get_related_action().</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">the #WebKitContextMenuAction of the given @item</doc>
        <type name="ContextMenuAction" c:type="WebKitContextMenuAction"/>
      </return-value>
      <parameters>
        <parameter name="item" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GtkMenuItem of the default context menu</doc>
          <type name="Gtk.MenuItem" c:type="GtkMenuItem*"/>
        </parameter>
      </parameters>
    </function>
    <function name="geolocation_policy_allow"
              c:identifier="webkit_geolocation_policy_allow"
              version="1.1.23">
      <doc xml:whitespace="preserve">Will send the allow decision to the policy implementer.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="decision" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #WebKitGeolocationPolicyDecision</doc>
          <type name="GeolocationPolicyDecision"
                c:type="WebKitGeolocationPolicyDecision*"/>
        </parameter>
      </parameters>
    </function>
    <function name="geolocation_policy_deny"
              c:identifier="webkit_geolocation_policy_deny"
              version="1.1.23">
      <doc xml:whitespace="preserve">Will send the deny decision to the policy implementer.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="decision" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #WebKitGeolocationPolicyDecision</doc>
          <type name="GeolocationPolicyDecision"
                c:type="WebKitGeolocationPolicyDecision*"/>
        </parameter>
      </parameters>
    </function>
    <function name="get_cache_model"
              c:identifier="webkit_get_cache_model"
              version="1.1.18">
      <doc xml:whitespace="preserve">Returns the current cache model. For more information about this
value check the documentation of the function
webkit_set_cache_model().</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">the current #WebKitCacheModel</doc>
        <type name="CacheModel" c:type="WebKitCacheModel"/>
      </return-value>
    </function>
    <function name="get_default_session"
              c:identifier="webkit_get_default_session"
              version="1.1.1">
      <doc xml:whitespace="preserve">Retrieves the default #SoupSession used by all web views.
Note that the session features are added by WebKit on demand,
so if you insert your own #SoupCookieJar before any network
traffic occurs, WebKit will use it instead of the default.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">the default #SoupSession</doc>
        <type name="Soup.Session" c:type="SoupSession*"/>
      </return-value>
    </function>
    <function name="get_default_web_database_quota"
              c:identifier="webkit_get_default_web_database_quota"
              version="1.1.14">
      <doc xml:whitespace="preserve">Returns the default quota for Web Database databases. By default
this value is 5MB.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">the current default database quota in bytes</doc>
        <type name="guint64" c:type="guint64"/>
      </return-value>
    </function>
    <function name="get_favicon_database"
              c:identifier="webkit_get_favicon_database"
              version="1.8">
      <doc xml:whitespace="preserve">Returns the #WebKitFaviconDatabase providing access to website
icons.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">the current #WebKitFaviconDatabase</doc>
        <type name="FaviconDatabase" c:type="WebKitFaviconDatabase*"/>
      </return-value>
    </function>
    <function name="get_icon_database"
              c:identifier="webkit_get_icon_database"
              version="1.3.13"
              deprecated="Use webkit_get_favicon_database() instead"
              deprecated-version="1.8">
      <doc xml:whitespace="preserve">Returns the #WebKitIconDatabase providing access to website icons.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">the current #WebKitIconDatabase</doc>
        <type name="IconDatabase" c:type="WebKitIconDatabase*"/>
      </return-value>
    </function>
    <function name="get_security_policy_for_uri_scheme"
              c:identifier="webkit_get_security_policy_for_uri_scheme"
              version="2.0">
      <doc xml:whitespace="preserve">Get the security policy for the given URI scheme.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">a #WebKitSecurityPolicy</doc>
        <type name="SecurityPolicy" c:type="WebKitSecurityPolicy"/>
      </return-value>
      <parameters>
        <parameter name="scheme" transfer-ownership="none">
          <doc xml:whitespace="preserve">a URI scheme</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="get_text_checker"
              c:identifier="webkit_get_text_checker"
              version="1.5.1"
              introspectable="0">
      <return-value>
        <doc xml:whitespace="preserve">the #WebKitSpellChecker used by WebKit, or %NULL if spell checking is not enabled</doc>
        <type name="GObject.Object" c:type="GObject*"/>
      </return-value>
    </function>
    <function name="get_web_database_directory_path"
              c:identifier="webkit_get_web_database_directory_path"
              version="1.1.14">
      <doc xml:whitespace="preserve">Returns the current path to the directory WebKit will write Web 
Database databases. By default this path will be in the user data
directory.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">the current database directory path</doc>
        <type name="utf8" c:type="const gchar*"/>
      </return-value>
    </function>
    <function name="get_web_plugin_database"
              c:identifier="webkit_get_web_plugin_database"
              version="1.3.8">
      <doc xml:whitespace="preserve">Returns the current #WebKitWebPluginDatabase with information about
all the plugins WebKit knows about in this instance.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">the current #WebKitWebPluginDatabase</doc>
        <type name="WebPluginDatabase" c:type="WebKitWebPluginDatabase*"/>
      </return-value>
    </function>
    <function name="major_version"
              c:identifier="webkit_major_version"
              version="1.0.1">
      <doc xml:whitespace="preserve">The major version number of the WebKit that is linked against.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">The major version</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
    </function>
    <function name="micro_version"
              c:identifier="webkit_micro_version"
              version="1.0.1">
      <doc xml:whitespace="preserve">The micro version number of the WebKit that is linked against.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">The micro version</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
    </function>
    <function name="minor_version"
              c:identifier="webkit_minor_version"
              version="1.0.1">
      <doc xml:whitespace="preserve">The minor version number of the WebKit that is linked against.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">The minor version</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
    </function>
    <function name="network_error_quark"
              c:identifier="webkit_network_error_quark"
              moved-to="NetworkError.quark">
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="plugin_error_quark"
              c:identifier="webkit_plugin_error_quark"
              moved-to="PluginError.quark">
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="policy_error_quark"
              c:identifier="webkit_policy_error_quark"
              moved-to="PolicyError.quark">
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="remove_all_web_databases"
              c:identifier="webkit_remove_all_web_databases"
              version="1.1.14">
      <doc xml:whitespace="preserve">Removes all web databases from the current database directory path.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
    </function>
    <function name="set_cache_model"
              c:identifier="webkit_set_cache_model"
              version="1.1.18">
      <doc xml:whitespace="preserve">Specifies a usage model for WebViews, which WebKit will use to
determine its caching behavior. All web views follow the cache
model. This cache model determines the RAM and disk space to use
for caching previously viewed content .

Research indicates that users tend to browse within clusters of
documents that hold resources in common, and to revisit previously
visited documents. WebKit and the frameworks below it include
built-in caches that take advantage of these patterns,
substantially improving document load speed in browsing
situations. The WebKit cache model controls the behaviors of all of
these caches, including various WebCore caches.

Browsers can improve document load speed substantially by
specifying WEBKIT_CACHE_MODEL_WEB_BROWSER. Applications without a
browsing interface can reduce memory usage substantially by
specifying WEBKIT_CACHE_MODEL_DOCUMENT_VIEWER. Default value is
WEBKIT_CACHE_MODEL_WEB_BROWSER.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="cache_model" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #WebKitCacheModel</doc>
          <type name="CacheModel" c:type="WebKitCacheModel"/>
        </parameter>
      </parameters>
    </function>
    <function name="set_default_web_database_quota"
              c:identifier="webkit_set_default_web_database_quota"
              version="1.1.14">
      <doc xml:whitespace="preserve">Sets the default quota for Web Database databases.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="defaultQuota" transfer-ownership="none">
          <doc xml:whitespace="preserve">the new default database quota</doc>
          <type name="guint64" c:type="guint64"/>
        </parameter>
      </parameters>
    </function>
    <function name="set_security_policy_for_uri_scheme"
              c:identifier="webkit_set_security_policy_for_uri_scheme"
              version="2.0">
      <doc xml:whitespace="preserve">Set the security policy for the given URI scheme.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="scheme" transfer-ownership="none">
          <doc xml:whitespace="preserve">a URI scheme</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="policy" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #WebKitSecurityPolicy</doc>
          <type name="SecurityPolicy" c:type="WebKitSecurityPolicy"/>
        </parameter>
      </parameters>
    </function>
    <function name="set_text_checker"
              c:identifier="webkit_set_text_checker"
              version="1.5.1">
      <doc xml:whitespace="preserve">Sets @checker as the spell checker to be used by WebKit. The API
accepts GObject since in the future we might accept objects
implementing multiple interfaces (for example, spell checking and
grammar checking).</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="checker" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #WebKitSpellChecker or %NULL</doc>
          <type name="GObject.Object" c:type="GObject*"/>
        </parameter>
      </parameters>
    </function>
    <function name="set_web_database_directory_path"
              c:identifier="webkit_set_web_database_directory_path"
              version="1.1.14">
      <doc xml:whitespace="preserve">Sets the current path to the directory WebKit will write Web 
Database databases.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="path" transfer-ownership="none">
          <doc xml:whitespace="preserve">the new database directory path</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
  </namespace>
</repository>
