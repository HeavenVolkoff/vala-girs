/* libvirt-gconfig-1.0.vapi generated by vapigen, do not modify. */

[CCode (cprefix = "GVirConfig", gir_namespace = "LibvirtGConfig", gir_version = "1.0", lower_case_cprefix = "gvir_config_")]
namespace GVirConfig {
	[CCode (cheader_filename = "libvirt-gconfig/libvirt-gconfig.h", type_id = "gvir_config_capabilities_get_type ()")]
	public class Capabilities : GVirConfig.Object {
		[CCode (has_construct_function = false)]
		public Capabilities ();
		[CCode (has_construct_function = false)]
		public Capabilities.from_xml (string xml) throws GLib.Error;
		public GLib.List<GVirConfig.CapabilitiesGuest> get_guests ();
		public GVirConfig.CapabilitiesHost get_host ();
	}
	[CCode (cheader_filename = "libvirt-gconfig/libvirt-gconfig.h", type_id = "gvir_config_capabilities_cpu_get_type ()")]
	public class CapabilitiesCpu : GVirConfig.Object {
		[CCode (has_construct_function = false)]
		protected CapabilitiesCpu ();
		public void add_feature (GVirConfig.CapabilitiesCpuFeature feature);
		public unowned string get_arch ();
		public virtual GLib.List<GVirConfig.CapabilitiesCpuFeature> get_features ();
		public GVirConfig.CapabilitiesCpuTopology get_topology ();
		public void set_topology (GVirConfig.CapabilitiesCpuTopology topology);
	}
	[CCode (cheader_filename = "libvirt-gconfig/libvirt-gconfig.h", type_id = "gvir_config_capabilities_cpu_feature_get_type ()")]
	public class CapabilitiesCpuFeature : GVirConfig.Object {
		[CCode (has_construct_function = false)]
		protected CapabilitiesCpuFeature ();
		public unowned string get_name ();
		public void set_name (string name);
	}
	[CCode (cheader_filename = "libvirt-gconfig/libvirt-gconfig.h", type_id = "gvir_config_capabilities_cpu_topology_get_type ()")]
	public class CapabilitiesCpuTopology : GVirConfig.Object {
		[CCode (has_construct_function = false)]
		public CapabilitiesCpuTopology ();
		[CCode (has_construct_function = false)]
		public CapabilitiesCpuTopology.from_xml (string xml) throws GLib.Error;
		public uint64 get_cores ();
		public uint64 get_sockets ();
		public uint64 get_threads ();
		public void set_cores (uint64 cores);
		public void set_sockets (uint64 sockets);
		public void set_threads (uint64 threads);
	}
	[CCode (cheader_filename = "libvirt-gconfig/libvirt-gconfig.h", type_id = "gvir_config_capabilities_guest_get_type ()")]
	public class CapabilitiesGuest : GVirConfig.Object {
		[CCode (has_construct_function = false)]
		protected CapabilitiesGuest ();
		public GVirConfig.CapabilitiesGuestArch get_arch ();
		public GLib.List<GVirConfig.CapabilitiesGuestFeature> get_features ();
		public GVirConfig.DomainOsType get_os_type ();
	}
	[CCode (cheader_filename = "libvirt-gconfig/libvirt-gconfig.h", type_id = "gvir_config_capabilities_guest_arch_get_type ()")]
	public class CapabilitiesGuestArch : GVirConfig.Object {
		[CCode (has_construct_function = false)]
		protected CapabilitiesGuestArch ();
		public GLib.List<GVirConfig.CapabilitiesGuestDomain> get_domains ();
		public unowned string get_emulator ();
		public unowned string get_name ();
	}
	[CCode (cheader_filename = "libvirt-gconfig/libvirt-gconfig.h", type_id = "gvir_config_capabilities_guest_domain_get_type ()")]
	public class CapabilitiesGuestDomain : GVirConfig.Object {
		[CCode (has_construct_function = false)]
		protected CapabilitiesGuestDomain ();
		public unowned string get_emulator ();
		public GVirConfig.DomainVirtType get_virt_type ();
	}
	[CCode (cheader_filename = "libvirt-gconfig/libvirt-gconfig.h", type_id = "gvir_config_capabilities_guest_feature_get_type ()")]
	public class CapabilitiesGuestFeature : GVirConfig.Object {
		[CCode (has_construct_function = false)]
		protected CapabilitiesGuestFeature ();
		public unowned string get_name ();
	}
	[CCode (cheader_filename = "libvirt-gconfig/libvirt-gconfig.h", type_id = "gvir_config_capabilities_host_get_type ()")]
	public class CapabilitiesHost : GVirConfig.Object {
		[CCode (has_construct_function = false)]
		protected CapabilitiesHost ();
		public GVirConfig.CapabilitiesCpu get_cpu ();
		public unowned string get_uuid ();
	}
	[CCode (cheader_filename = "libvirt-gconfig/libvirt-gconfig.h", type_id = "gvir_config_domain_get_type ()")]
	public class Domain : GVirConfig.Object {
		[CCode (has_construct_function = false)]
		public Domain ();
		public void add_device (GVirConfig.DomainDevice device);
		[CCode (has_construct_function = false)]
		public Domain.from_xml (string xml) throws GLib.Error;
		public GVirConfig.DomainCpu get_cpu ();
		public string get_custom_xml (string ns_uri);
		public unowned string get_description ();
		public GLib.List<GVirConfig.DomainDevice> get_devices ();
		[CCode (array_length = false, array_null_terminated = true)]
		public string[] get_features ();
		public uint64 get_memory ();
		public unowned string get_name ();
		public GVirConfig.DomainOs get_os ();
		public unowned string get_title ();
		public uint64 get_vcpus ();
		public GVirConfig.DomainVirtType get_virt_type ();
		public void set_clock (GVirConfig.DomainClock? klock);
		public void set_cpu (GVirConfig.DomainCpu? cpu);
		public bool set_custom_xml (string xml, string ns, string ns_uri) throws GLib.Error;
		public void set_description (string? description);
		public void set_devices (GLib.List<GVirConfig.DomainDevice> devices);
		public void set_features ([CCode (array_length = false, array_null_terminated = true)] string[] features);
		public void set_lifecycle (GVirConfig.DomainLifecycleEvent event, GVirConfig.DomainLifecycleAction action);
		public void set_memory (uint64 memory);
		public void set_name (string? name);
		public void set_os (GVirConfig.DomainOs? os);
		public void set_seclabel (GVirConfig.DomainSeclabel? seclabel);
		public void set_title (string? title);
		public void set_vcpus (uint64 vcpu_count);
		public void set_virt_type (GVirConfig.DomainVirtType type);
		public static void source_pty_set_path (GVirConfig.DomainChardevSourcePty pty, string path);
		public string description { get; set; }
		[CCode (array_length = false, array_null_terminated = true)]
		public string[] features { owned get; set; }
		public uint64 memory { get; set; }
		public string name { get; set; }
		public string title { get; set; }
		[NoAccessorMethod]
		public uint64 vcpu { get; set; }
	}
	[CCode (cheader_filename = "libvirt-gconfig/libvirt-gconfig.h", type_id = "gvir_config_domain_address_get_type ()")]
	public abstract class DomainAddress : GVirConfig.Object {
		[CCode (has_construct_function = false)]
		protected DomainAddress ();
	}
	[CCode (cheader_filename = "libvirt-gconfig/libvirt-gconfig.h", type_id = "gvir_config_domain_address_pci_get_type ()")]
	public class DomainAddressPci : GVirConfig.DomainAddress {
		[CCode (has_construct_function = false)]
		public DomainAddressPci ();
		[CCode (has_construct_function = false)]
		public DomainAddressPci.from_xml (string xml) throws GLib.Error;
		public void set_bus (uint8 bus);
		public void set_domain (uint16 pci_domain);
		public void set_function (uint8 function);
		public void set_multifunction (bool multifunction);
		public void set_slot (uint8 slot);
	}
	[CCode (cheader_filename = "libvirt-gconfig/libvirt-gconfig.h", type_id = "gvir_config_domain_address_usb_get_type ()")]
	public class DomainAddressUsb : GVirConfig.DomainAddress {
		[CCode (has_construct_function = false)]
		public DomainAddressUsb ();
		[CCode (has_construct_function = false)]
		public DomainAddressUsb.from_xml (string xml) throws GLib.Error;
		public void set_bus (uint16 bus);
		public void set_port (string port);
	}
	[CCode (cheader_filename = "libvirt-gconfig/libvirt-gconfig.h", type_id = "gvir_config_domain_channel_get_type ()")]
	public class DomainChannel : GVirConfig.DomainChardev {
		[CCode (has_construct_function = false)]
		public DomainChannel ();
		[CCode (has_construct_function = false)]
		public DomainChannel.from_xml (string xml) throws GLib.Error;
		public void set_target_name (string name);
		public void set_target_type (GVirConfig.DomainChannelTargetType type);
	}
	[CCode (cheader_filename = "libvirt-gconfig/libvirt-gconfig.h", type_id = "gvir_config_domain_chardev_get_type ()")]
	public abstract class DomainChardev : GVirConfig.DomainDevice {
		[CCode (has_construct_function = false)]
		protected DomainChardev ();
		public void set_source (GVirConfig.DomainChardevSource source);
	}
	[CCode (cheader_filename = "libvirt-gconfig/libvirt-gconfig.h", type_id = "gvir_config_domain_chardev_source_get_type ()")]
	public abstract class DomainChardevSource : GVirConfig.Object {
		[CCode (has_construct_function = false)]
		protected DomainChardevSource ();
	}
	[CCode (cheader_filename = "libvirt-gconfig/libvirt-gconfig.h", type_id = "gvir_config_domain_chardev_source_pty_get_type ()")]
	public class DomainChardevSourcePty : GVirConfig.DomainChardevSource {
		[CCode (has_construct_function = false)]
		public DomainChardevSourcePty ();
		[CCode (has_construct_function = false)]
		public DomainChardevSourcePty.from_xml (string xml) throws GLib.Error;
	}
	[CCode (cheader_filename = "libvirt-gconfig/libvirt-gconfig.h", lower_case_csuffix = "domain_chardev_source_spicevmc", type_id = "gvir_config_domain_chardev_source_spicevmc_get_type ()")]
	public class DomainChardevSourceSpiceVmc : GVirConfig.DomainChardevSource {
		[CCode (has_construct_function = false)]
		public DomainChardevSourceSpiceVmc ();
		[CCode (has_construct_function = false)]
		public DomainChardevSourceSpiceVmc.from_xml (string xml) throws GLib.Error;
	}
	[CCode (cheader_filename = "libvirt-gconfig/libvirt-gconfig.h", type_id = "gvir_config_domain_clock_get_type ()")]
	public class DomainClock : GVirConfig.Object {
		[CCode (has_construct_function = false)]
		public DomainClock ();
		public void add_timer (GVirConfig.DomainTimer timer);
		[CCode (has_construct_function = false)]
		public DomainClock.from_xml (string xml) throws GLib.Error;
		public void set_offset (GVirConfig.DomainClockOffset offset);
		public void set_timezone (string tz);
		public void set_variable_offset (int seconds);
	}
	[CCode (cheader_filename = "libvirt-gconfig/libvirt-gconfig.h", type_id = "gvir_config_domain_console_get_type ()")]
	public class DomainConsole : GVirConfig.DomainChardev {
		[CCode (has_construct_function = false)]
		public DomainConsole ();
		[CCode (has_construct_function = false)]
		public DomainConsole.from_xml (string xml) throws GLib.Error;
		public void set_target_type (GVirConfig.DomainConsoleTargetType type);
	}
	[CCode (cheader_filename = "libvirt-gconfig/libvirt-gconfig.h", type_id = "gvir_config_domain_controller_get_type ()")]
	public abstract class DomainController : GVirConfig.DomainDevice {
		[CCode (has_construct_function = false)]
		protected DomainController ();
		public uint get_index ();
		public void set_address (GVirConfig.DomainAddress? address);
		public void set_index (uint index);
	}
	[CCode (cheader_filename = "libvirt-gconfig/libvirt-gconfig.h", type_id = "gvir_config_domain_controller_usb_get_type ()")]
	public class DomainControllerUsb : GVirConfig.DomainController {
		[CCode (has_construct_function = false)]
		public DomainControllerUsb ();
		[CCode (has_construct_function = false)]
		public DomainControllerUsb.from_xml (string xml) throws GLib.Error;
		public void set_master (GVirConfig.DomainControllerUsb master, uint startport);
		public void set_model (GVirConfig.DomainControllerUsbModel model);
	}
	[CCode (cheader_filename = "libvirt-gconfig/libvirt-gconfig.h", type_id = "gvir_config_domain_cpu_get_type ()")]
	public class DomainCpu : GVirConfig.CapabilitiesCpu {
		[CCode (has_construct_function = false)]
		public DomainCpu ();
		[CCode (has_construct_function = false)]
		public DomainCpu.from_xml (string xml) throws GLib.Error;
		public GVirConfig.DomainCpuMatchPolicy get_match_policy ();
		public GVirConfig.DomainCpuMode get_mode ();
		public void set_match_policy (GVirConfig.DomainCpuMatchPolicy policy);
		public void set_mode (GVirConfig.DomainCpuMode mode);
	}
	[CCode (cheader_filename = "libvirt-gconfig/libvirt-gconfig.h", type_id = "gvir_config_domain_cpu_feature_get_type ()")]
	public class DomainCpuFeature : GVirConfig.CapabilitiesCpuFeature {
		[CCode (has_construct_function = false)]
		public DomainCpuFeature ();
		[CCode (has_construct_function = false)]
		public DomainCpuFeature.from_xml (string xml) throws GLib.Error;
		public GVirConfig.DomainCpuFeaturePolicy get_policy ();
		public void set_policy (GVirConfig.DomainCpuFeaturePolicy policy);
	}
	[CCode (cheader_filename = "libvirt-gconfig/libvirt-gconfig.h", type_id = "gvir_config_domain_device_get_type ()")]
	public abstract class DomainDevice : GVirConfig.Object {
		[CCode (has_construct_function = false)]
		protected DomainDevice ();
	}
	[CCode (cheader_filename = "libvirt-gconfig/libvirt-gconfig.h", type_id = "gvir_config_domain_disk_get_type ()")]
	public class DomainDisk : GVirConfig.DomainDevice {
		[CCode (has_construct_function = false)]
		public DomainDisk ();
		[CCode (has_construct_function = false)]
		public DomainDisk.from_xml (string xml) throws GLib.Error;
		public GVirConfig.DomainDiskType get_disk_type ();
		public GVirConfig.DomainDiskCacheType get_driver_cache ();
		public unowned string get_driver_name ();
		public unowned string get_driver_type ();
		public GVirConfig.DomainDiskGuestDeviceType get_guest_device_type ();
		public GVirConfig.DomainDiskSnapshotType get_snapshot_type ();
		public unowned string get_source ();
		public GVirConfig.DomainDiskStartupPolicy get_startup_policy ();
		public GVirConfig.DomainDiskBus get_target_bus ();
		public unowned string get_target_dev ();
		public void set_driver_cache (GVirConfig.DomainDiskCacheType cache_type);
		public void set_driver_name (string driver_name);
		public void set_driver_type (string driver_type);
		public void set_guest_device_type (GVirConfig.DomainDiskGuestDeviceType type);
		public void set_readonly (bool readonly);
		public void set_snapshot_type (GVirConfig.DomainDiskSnapshotType type);
		public void set_source (string source);
		public void set_startup_policy (GVirConfig.DomainDiskStartupPolicy policy);
		public void set_target_bus (GVirConfig.DomainDiskBus bus);
		public void set_target_dev (string dev);
		public void set_type (GVirConfig.DomainDiskType type);
	}
	[CCode (cheader_filename = "libvirt-gconfig/libvirt-gconfig.h", type_id = "gvir_config_domain_filesys_get_type ()")]
	public class DomainFilesys : GVirConfig.DomainDevice {
		[CCode (has_construct_function = false)]
		public DomainFilesys ();
		[CCode (has_construct_function = false)]
		public DomainFilesys.from_xml (string xml) throws GLib.Error;
		public void set_access_type (GVirConfig.DomainFilesysAccessType type);
		public void set_driver_type (GVirConfig.DomainFilesysDriverType type);
		public void set_ram_usage (uint64 bytes);
		public void set_readonly (bool readonly);
		public void set_source (string source);
		public void set_target (string target);
		public void set_type (GVirConfig.DomainFilesysType type);
	}
	[CCode (cheader_filename = "libvirt-gconfig/libvirt-gconfig.h", type_id = "gvir_config_domain_graphics_get_type ()")]
	public abstract class DomainGraphics : GVirConfig.DomainDevice {
		[CCode (has_construct_function = false)]
		protected DomainGraphics ();
	}
	[CCode (cheader_filename = "libvirt-gconfig/libvirt-gconfig.h", type_id = "gvir_config_domain_graphics_sdl_get_type ()")]
	public class DomainGraphicsSdl : GVirConfig.DomainGraphics {
		[CCode (has_construct_function = false)]
		public DomainGraphicsSdl ();
		[CCode (has_construct_function = false)]
		public DomainGraphicsSdl.from_xml (string xml) throws GLib.Error;
		public void set_display (string disp);
		public void set_xauthority (string path);
	}
	[CCode (cheader_filename = "libvirt-gconfig/libvirt-gconfig.h", type_id = "gvir_config_domain_graphics_spice_get_type ()")]
	public class DomainGraphicsSpice : GVirConfig.DomainGraphics {
		[CCode (has_construct_function = false)]
		public DomainGraphicsSpice ();
		[CCode (has_construct_function = false)]
		public DomainGraphicsSpice.from_xml (string xml) throws GLib.Error;
		public void set_autoport (bool autoport);
		public void set_password (string password);
		public void set_port (int port);
		public void set_tls_port (int port);
	}
	[CCode (cheader_filename = "libvirt-gconfig/libvirt-gconfig.h", type_id = "gvir_config_domain_graphics_vnc_get_type ()")]
	public class DomainGraphicsVnc : GVirConfig.DomainGraphics {
		[CCode (has_construct_function = false)]
		public DomainGraphicsVnc ();
		[CCode (has_construct_function = false)]
		public DomainGraphicsVnc.from_xml (string xml) throws GLib.Error;
		public void set_autoport (bool autoport);
		public void set_password (string password);
		public void set_port (int port);
	}
	[CCode (cheader_filename = "libvirt-gconfig/libvirt-gconfig.h", type_id = "gvir_config_domain_input_get_type ()")]
	public class DomainInput : GVirConfig.DomainDevice {
		[CCode (has_construct_function = false)]
		public DomainInput ();
		[CCode (has_construct_function = false)]
		public DomainInput.from_xml (string xml) throws GLib.Error;
		public void set_bus (GVirConfig.DomainInputBus bus);
		public void set_device_type (GVirConfig.DomainInputDeviceType type);
	}
	[CCode (cheader_filename = "libvirt-gconfig/libvirt-gconfig.h", type_id = "gvir_config_domain_interface_get_type ()")]
	public abstract class DomainInterface : GVirConfig.DomainDevice {
		[CCode (has_construct_function = false)]
		protected DomainInterface ();
		public unowned string get_ifname ();
		public GVirConfig.DomainInterfaceLinkState get_link_state ();
		public unowned string get_mac ();
		public unowned string get_model ();
		public void set_ifname (string ifname);
		public void set_link_state (GVirConfig.DomainInterfaceLinkState state);
		public void set_mac (string mac_address);
		public void set_model (string model);
	}
	[CCode (cheader_filename = "libvirt-gconfig/libvirt-gconfig.h", type_id = "gvir_config_domain_interface_bridge_get_type ()")]
	public class DomainInterfaceBridge : GVirConfig.DomainInterface {
		[CCode (has_construct_function = false)]
		public DomainInterfaceBridge ();
		[CCode (has_construct_function = false)]
		public DomainInterfaceBridge.from_xml (string xml) throws GLib.Error;
		public void set_source (string brname);
	}
	[CCode (cheader_filename = "libvirt-gconfig/libvirt-gconfig.h", type_id = "gvir_config_domain_interface_network_get_type ()")]
	public class DomainInterfaceNetwork : GVirConfig.DomainInterface {
		[CCode (has_construct_function = false)]
		public DomainInterfaceNetwork ();
		[CCode (has_construct_function = false)]
		public DomainInterfaceNetwork.from_xml (string xml) throws GLib.Error;
		public void set_source (string source);
	}
	[CCode (cheader_filename = "libvirt-gconfig/libvirt-gconfig.h", type_id = "gvir_config_domain_interface_user_get_type ()")]
	public class DomainInterfaceUser : GVirConfig.DomainInterface {
		[CCode (has_construct_function = false)]
		public DomainInterfaceUser ();
		[CCode (has_construct_function = false)]
		public DomainInterfaceUser.from_xml (string xml) throws GLib.Error;
	}
	[CCode (cheader_filename = "libvirt-gconfig/libvirt-gconfig.h", type_id = "gvir_config_domain_memballoon_get_type ()")]
	public class DomainMemballoon : GVirConfig.DomainDevice {
		[CCode (has_construct_function = false)]
		public DomainMemballoon ();
		[CCode (has_construct_function = false)]
		public DomainMemballoon.from_xml (string xml) throws GLib.Error;
		public void set_model (GVirConfig.DomainMemballoonModel model);
	}
	[CCode (cheader_filename = "libvirt-gconfig/libvirt-gconfig.h", type_id = "gvir_config_domain_os_get_type ()")]
	public class DomainOs : GVirConfig.Object {
		[CCode (has_construct_function = false)]
		public DomainOs ();
		public void bios_enable_serial (bool enable);
		public void enable_boot_menu (bool enable);
		[CCode (has_construct_function = false)]
		public DomainOs.from_xml (string xml) throws GLib.Error;
		public unowned string get_arch ();
		public GLib.List<GVirConfig.DomainOsBootDevice> get_boot_devices ();
		public GVirConfig.DomainOsType get_os_type ();
		public void set_arch (string arch);
		public void set_boot_devices (GLib.List<GVirConfig.DomainOsBootDevice> boot_devices);
		public void set_cmdline (string? cmdline);
		public void set_init (string? init);
		public void set_kernel (string? kernel);
		public void set_loader (string? loader);
		public void set_machine (string machine);
		public void set_os_type (GVirConfig.DomainOsType type);
		public void set_ramdisk (string? ramdisk);
		public void set_smbios_mode (GVirConfig.DomainOsSmBiosMode mode);
	}
	[CCode (cheader_filename = "libvirt-gconfig/libvirt-gconfig.h", type_id = "gvir_config_domain_parallel_get_type ()")]
	public class DomainParallel : GVirConfig.DomainChardev {
		[CCode (has_construct_function = false)]
		public DomainParallel ();
		[CCode (has_construct_function = false)]
		public DomainParallel.from_xml (string xml) throws GLib.Error;
	}
	[CCode (cheader_filename = "libvirt-gconfig/libvirt-gconfig.h", type_id = "gvir_config_domain_redirdev_get_type ()")]
	public class DomainRedirdev : GVirConfig.DomainChardev {
		[CCode (has_construct_function = false)]
		public DomainRedirdev ();
		[CCode (has_construct_function = false)]
		public DomainRedirdev.from_xml (string xml) throws GLib.Error;
		public void set_address (GVirConfig.DomainAddress? address);
		public void set_bus (GVirConfig.DomainRedirdevBus bus);
	}
	[CCode (cheader_filename = "libvirt-gconfig/libvirt-gconfig.h", type_id = "gvir_config_domain_seclabel_get_type ()")]
	public class DomainSeclabel : GVirConfig.Object {
		[CCode (has_construct_function = false)]
		public DomainSeclabel ();
		[CCode (has_construct_function = false)]
		public DomainSeclabel.from_xml (string xml) throws GLib.Error;
		public void set_baselabel (string? label);
		public void set_label (string? label);
		public void set_model (string model);
		public void set_type (GVirConfig.DomainSeclabelType type);
	}
	[CCode (cheader_filename = "libvirt-gconfig/libvirt-gconfig.h", type_id = "gvir_config_domain_serial_get_type ()")]
	public class DomainSerial : GVirConfig.DomainChardev {
		[CCode (has_construct_function = false)]
		public DomainSerial ();
		[CCode (has_construct_function = false)]
		public DomainSerial.from_xml (string xml) throws GLib.Error;
	}
	[CCode (cheader_filename = "libvirt-gconfig/libvirt-gconfig.h", type_id = "gvir_config_domain_snapshot_get_type ()")]
	public class DomainSnapshot : GVirConfig.Object {
		[CCode (has_construct_function = false)]
		public DomainSnapshot ();
		[CCode (has_construct_function = false)]
		public DomainSnapshot.from_xml (string xml) throws GLib.Error;
	}
	[CCode (cheader_filename = "libvirt-gconfig/libvirt-gconfig.h", type_id = "gvir_config_domain_sound_get_type ()")]
	public class DomainSound : GVirConfig.DomainDevice {
		[CCode (has_construct_function = false)]
		public DomainSound ();
		[CCode (has_construct_function = false)]
		public DomainSound.from_xml (string xml) throws GLib.Error;
		public void set_model (GVirConfig.DomainSoundModel model);
	}
	[CCode (cheader_filename = "libvirt-gconfig/libvirt-gconfig.h", type_id = "gvir_config_domain_timer_get_type ()")]
	public abstract class DomainTimer : GVirConfig.Object {
		[CCode (has_construct_function = false)]
		protected DomainTimer ();
		public GVirConfig.DomainTimerTickPolicy get_tick_policy ();
		public void set_tick_policy (GVirConfig.DomainTimerTickPolicy policy);
	}
	[CCode (cheader_filename = "libvirt-gconfig/libvirt-gconfig.h", type_id = "gvir_config_domain_timer_pit_get_type ()")]
	public class DomainTimerPit : GVirConfig.DomainTimer {
		[CCode (has_construct_function = false)]
		public DomainTimerPit ();
		[CCode (has_construct_function = false)]
		public DomainTimerPit.from_xml (string xml) throws GLib.Error;
	}
	[CCode (cheader_filename = "libvirt-gconfig/libvirt-gconfig.h", type_id = "gvir_config_domain_timer_rtc_get_type ()")]
	public class DomainTimerRtc : GVirConfig.DomainTimer {
		[CCode (has_construct_function = false)]
		public DomainTimerRtc ();
		[CCode (has_construct_function = false)]
		public DomainTimerRtc.from_xml (string xml) throws GLib.Error;
	}
	[CCode (cheader_filename = "libvirt-gconfig/libvirt-gconfig.h", type_id = "gvir_config_domain_video_get_type ()")]
	public class DomainVideo : GVirConfig.DomainDevice {
		[CCode (has_construct_function = false)]
		public DomainVideo ();
		[CCode (has_construct_function = false)]
		public DomainVideo.from_xml (string xml) throws GLib.Error;
		public void set_heads (uint head_count);
		public void set_model (GVirConfig.DomainVideoModel model);
		public void set_vram (uint kbytes);
	}
	[CCode (cheader_filename = "libvirt-gconfig/libvirt-gconfig.h", type_id = "gvir_config_interface_get_type ()")]
	public class Interface : GVirConfig.Object {
		[CCode (has_construct_function = false)]
		public Interface ();
		[CCode (has_construct_function = false)]
		public Interface.from_xml (string xml) throws GLib.Error;
	}
	[CCode (cheader_filename = "libvirt-gconfig/libvirt-gconfig.h", type_id = "gvir_config_network_get_type ()")]
	public class Network : GVirConfig.Object {
		[CCode (has_construct_function = false)]
		public Network ();
		[CCode (has_construct_function = false)]
		public Network.from_xml (string xml) throws GLib.Error;
	}
	[CCode (cheader_filename = "libvirt-gconfig/libvirt-gconfig.h", type_id = "gvir_config_network_filter_get_type ()")]
	public class NetworkFilter : GVirConfig.Object {
		[CCode (has_construct_function = false)]
		public NetworkFilter ();
		[CCode (has_construct_function = false)]
		public NetworkFilter.from_xml (string xml) throws GLib.Error;
	}
	[CCode (cheader_filename = "libvirt-gconfig/libvirt-gconfig.h", type_id = "gvir_config_node_device_get_type ()")]
	public class NodeDevice : GVirConfig.Object {
		[CCode (has_construct_function = false)]
		public NodeDevice ();
		[CCode (has_construct_function = false)]
		public NodeDevice.from_xml (string xml) throws GLib.Error;
	}
	[CCode (cheader_filename = "libvirt-gconfig/libvirt-gconfig.h", type_id = "gvir_config_object_get_type ()")]
	public class Object : GLib.Object {
		[CCode (has_construct_function = false)]
		public Object (GLib.Type type, string root_name, string schema);
		public static GLib.Quark error_quark ();
		[CCode (has_construct_function = false)]
		public Object.from_xml (GLib.Type type, string root_name, string schema, string xml) throws GLib.Error;
		public unowned string get_schema ();
		public string to_xml ();
		public void validate () throws GLib.Error;
		[NoAccessorMethod]
		public void* node { get; construct; }
		public string schema { get; construct; }
	}
	[CCode (cheader_filename = "libvirt-gconfig/libvirt-gconfig.h", type_id = "gvir_config_secret_get_type ()")]
	public class Secret : GVirConfig.Object {
		[CCode (has_construct_function = false)]
		public Secret ();
		[CCode (has_construct_function = false)]
		public Secret.from_xml (string xml) throws GLib.Error;
	}
	[CCode (cheader_filename = "libvirt-gconfig/libvirt-gconfig.h", type_id = "gvir_config_storage_permissions_get_type ()")]
	public class StoragePermissions : GVirConfig.Object {
		[CCode (has_construct_function = false)]
		public StoragePermissions ();
		[CCode (has_construct_function = false)]
		public StoragePermissions.from_xml (string xml) throws GLib.Error;
		public void set_group (uint group);
		public void set_label (string? label);
		public void set_mode (uint mode);
		public void set_owner (uint owner);
	}
	[CCode (cheader_filename = "libvirt-gconfig/libvirt-gconfig.h", type_id = "gvir_config_storage_pool_get_type ()")]
	public class StoragePool : GVirConfig.Object {
		[CCode (has_construct_function = false)]
		public StoragePool ();
		[CCode (has_construct_function = false)]
		public StoragePool.from_xml (string xml) throws GLib.Error;
		public void set_allocation (uint64 allocation);
		public void set_available (uint64 available);
		public void set_capacity (uint64 capacity);
		public void set_name (string? name);
		public void set_pool_type (GVirConfig.StoragePoolType type);
		public void set_source (GVirConfig.StoragePoolSource? source);
		public void set_target (GVirConfig.StoragePoolTarget? target);
		public void set_uuid (string? uuid);
	}
	[CCode (cheader_filename = "libvirt-gconfig/libvirt-gconfig.h", type_id = "gvir_config_storage_pool_source_get_type ()")]
	public class StoragePoolSource : GVirConfig.Object {
		[CCode (has_construct_function = false)]
		public StoragePoolSource ();
		[CCode (has_construct_function = false)]
		public StoragePoolSource.from_xml (string xml) throws GLib.Error;
		public void set_adapter (string adapter);
		public void set_device_path (string device_path);
		public void set_directory (string directory);
		public void set_format (string format);
		public void set_host (string host);
		public void set_name (string? name);
		public void set_product (string product);
		public void set_vendor (string vendor);
	}
	[CCode (cheader_filename = "libvirt-gconfig/libvirt-gconfig.h", type_id = "gvir_config_storage_pool_target_get_type ()")]
	public class StoragePoolTarget : GVirConfig.Object {
		[CCode (has_construct_function = false)]
		public StoragePoolTarget ();
		[CCode (has_construct_function = false)]
		public StoragePoolTarget.from_xml (string xml) throws GLib.Error;
		public void set_path (string? path);
		public void set_permissions (GVirConfig.StoragePermissions perms);
	}
	[CCode (cheader_filename = "libvirt-gconfig/libvirt-gconfig.h", type_id = "gvir_config_storage_vol_get_type ()")]
	public class StorageVol : GVirConfig.Object {
		[CCode (has_construct_function = false)]
		public StorageVol ();
		[CCode (has_construct_function = false)]
		public StorageVol.from_xml (string xml) throws GLib.Error;
		public void set_allocation (uint64 allocation);
		public void set_backing_store (GVirConfig.StorageVolBackingStore? backing_store);
		public void set_capacity (uint64 capacity);
		public void set_name (string? name);
		public void set_target (GVirConfig.StorageVolTarget? target);
	}
	[CCode (cheader_filename = "libvirt-gconfig/libvirt-gconfig.h", type_id = "gvir_config_storage_vol_backing_store_get_type ()")]
	public class StorageVolBackingStore : GVirConfig.Object {
		[CCode (has_construct_function = false)]
		public StorageVolBackingStore ();
		[CCode (has_construct_function = false)]
		public StorageVolBackingStore.from_xml (string xml) throws GLib.Error;
		public void set_format (string format);
		public void set_path (string? path);
	}
	[CCode (cheader_filename = "libvirt-gconfig/libvirt-gconfig.h", type_id = "gvir_config_storage_vol_target_get_type ()")]
	public class StorageVolTarget : GVirConfig.Object {
		[CCode (has_construct_function = false)]
		public StorageVolTarget ();
		[CCode (has_construct_function = false)]
		public StorageVolTarget.from_xml (string xml) throws GLib.Error;
		public void set_format (string format);
		public void set_permissions (GVirConfig.StoragePermissions? perms);
	}
	[CCode (cheader_filename = "libvirt-gconfig/libvirt-gconfig.h", cprefix = "GVIR_CONFIG_DOMAIN_CHANNEL_TARGET_")]
	public enum DomainChannelTargetType {
		GUESTFWD,
		VIRTIO
	}
	[CCode (cheader_filename = "libvirt-gconfig/libvirt-gconfig.h", cprefix = "GVIR_CONFIG_DOMAIN_CLOCK_")]
	public enum DomainClockOffset {
		UTC,
		LOCALTIME,
		TIMEZONE,
		VARIABLE
	}
	[CCode (cheader_filename = "libvirt-gconfig/libvirt-gconfig.h", cprefix = "GVIR_CONFIG_DOMAIN_CONSOLE_TARGET_")]
	public enum DomainConsoleTargetType {
		XEN,
		SERIAL,
		UML,
		VIRTIO,
		LXC,
		OPENVZ
	}
	[CCode (cheader_filename = "libvirt-gconfig/libvirt-gconfig.h", cprefix = "GVIR_CONFIG_DOMAIN_CONTROLLER_USB_MODEL_")]
	public enum DomainControllerUsbModel {
		PIIX3_UHCI,
		PIIX4_UHCI,
		EHCI,
		ICH9_EHCI1,
		ICH9_UHCI1,
		ICH9_UHCI2,
		ICH9_UHCI3,
		VT82C686B_UHCI,
		PCI_OHCI
	}
	[CCode (cheader_filename = "libvirt-gconfig/libvirt-gconfig.h", cprefix = "GVIR_CONFIG_DOMAIN_CPU_FEATURE_POLICY_")]
	public enum DomainCpuFeaturePolicy {
		FORCE,
		REQUIRE,
		OPTIONAL,
		DISABLE,
		FORBID
	}
	[CCode (cheader_filename = "libvirt-gconfig/libvirt-gconfig.h", cprefix = "GVIR_CONFIG_DOMAIN_CPU_MATCH_POLICY_")]
	public enum DomainCpuMatchPolicy {
		MINIMUM,
		EXACT,
		STRICT
	}
	[CCode (cheader_filename = "libvirt-gconfig/libvirt-gconfig.h", cprefix = "GVIR_CONFIG_DOMAIN_CPU_MODE_")]
	public enum DomainCpuMode {
		CUSTOM,
		HOST_MODEL,
		HOST_PASSTHROUGH
	}
	[CCode (cheader_filename = "libvirt-gconfig/libvirt-gconfig.h", cprefix = "GVIR_CONFIG_DOMAIN_DISK_BUS_")]
	public enum DomainDiskBus {
		IDE,
		FDC,
		SCSI,
		VIRTIO,
		XEN,
		USB,
		UML,
		SATA
	}
	[CCode (cheader_filename = "libvirt-gconfig/libvirt-gconfig.h", cprefix = "GVIR_CONFIG_DOMAIN_DISK_CACHE_")]
	public enum DomainDiskCacheType {
		DEFAULT,
		NONE,
		WRITETHROUGH,
		WRITEBACK,
		DIRECTSYNC,
		UNSAFE
	}
	[CCode (cheader_filename = "libvirt-gconfig/libvirt-gconfig.h", cprefix = "GVIR_CONFIG_DOMAIN_DISK_GUEST_DEVICE_")]
	public enum DomainDiskGuestDeviceType {
		DISK,
		FLOPPY,
		CDROM
	}
	[CCode (cheader_filename = "libvirt-gconfig/libvirt-gconfig.h", cprefix = "GVIR_CONFIG_DOMAIN_DISK_SNAPSHOT_")]
	public enum DomainDiskSnapshotType {
		NO,
		INTERNAL,
		EXTERNAL
	}
	[CCode (cheader_filename = "libvirt-gconfig/libvirt-gconfig.h", cprefix = "GVIR_CONFIG_DOMAIN_DISK_STARTUP_POLICY_")]
	public enum DomainDiskStartupPolicy {
		MANDATORY,
		REQUISITE,
		OPTIONAL
	}
	[CCode (cheader_filename = "libvirt-gconfig/libvirt-gconfig.h", cprefix = "GVIR_CONFIG_DOMAIN_DISK_")]
	public enum DomainDiskType {
		FILE,
		BLOCK,
		DIR,
		NETWORK
	}
	[CCode (cheader_filename = "libvirt-gconfig/libvirt-gconfig.h", cprefix = "GVIR_CONFIG_DOMAIN_FILESYS_ACCESS_")]
	public enum DomainFilesysAccessType {
		PASSTHROUGH,
		MAPPED,
		SQUASH
	}
	[CCode (cheader_filename = "libvirt-gconfig/libvirt-gconfig.h", cprefix = "GVIR_CONFIG_DOMAIN_FILESYS_DRIVER_")]
	public enum DomainFilesysDriverType {
		DEFAULT,
		PATH,
		HANDLE
	}
	[CCode (cheader_filename = "libvirt-gconfig/libvirt-gconfig.h", cprefix = "GVIR_CONFIG_DOMAIN_FILESYS_")]
	public enum DomainFilesysType {
		MOUNT,
		BLOCK,
		FILE,
		TEMPLATE,
		RAM,
		BIND
	}
	[CCode (cheader_filename = "libvirt-gconfig/libvirt-gconfig.h", cprefix = "GVIR_CONFIG_DOMAIN_INPUT_BUS_")]
	public enum DomainInputBus {
		PS2,
		USB,
		XEN
	}
	[CCode (cheader_filename = "libvirt-gconfig/libvirt-gconfig.h", cprefix = "GVIR_CONFIG_DOMAIN_INPUT_DEVICE_")]
	public enum DomainInputDeviceType {
		MOUSE,
		TABLET
	}
	[CCode (cheader_filename = "libvirt-gconfig/libvirt-gconfig.h", cprefix = "GVIR_CONFIG_DOMAIN_INTERFACE_LINK_STATE_")]
	public enum DomainInterfaceLinkState {
		DEFAULT,
		UP,
		DOWN
	}
	[CCode (cheader_filename = "libvirt-gconfig/libvirt-gconfig.h", cprefix = "GVIR_CONFIG_DOMAIN_LIFECYCLE_")]
	public enum DomainLifecycleAction {
		DESTROY,
		RESTART,
		PRESERVE,
		RENAME_RESTART,
		COREDUMP_DESTROY,
		COREDUMP_RESTART
	}
	[CCode (cheader_filename = "libvirt-gconfig/libvirt-gconfig.h", cprefix = "GVIR_CONFIG_DOMAIN_LIFECYCLE_ON_")]
	public enum DomainLifecycleEvent {
		[CCode (cname = "GVIR_CONFIG_DOMAIN_LIFECYCLE_ON_POWEROFF")]
		ON_POWEROFF,
		[CCode (cname = "GVIR_CONFIG_DOMAIN_LIFECYCLE_ON_REBOOT")]
		ON_REBOOT,
		[CCode (cname = "GVIR_CONFIG_DOMAIN_LIFECYCLE_ON_CRASH")]
		ON_CRASH
	}
	[CCode (cheader_filename = "libvirt-gconfig/libvirt-gconfig.h", cprefix = "GVIR_CONFIG_DOMAIN_MEMBALLOON_MODEL_")]
	public enum DomainMemballoonModel {
		NONE,
		VIRTIO
	}
	[CCode (cheader_filename = "libvirt-gconfig/libvirt-gconfig.h", cprefix = "GVIR_CONFIG_DOMAIN_OS_BOOT_DEVICE_")]
	public enum DomainOsBootDevice {
		FD,
		HD,
		CDROM,
		NETWORK
	}
	[CCode (cheader_filename = "libvirt-gconfig/libvirt-gconfig.h", cprefix = "GVIR_CONFIG_DOMAIN_OS_SMBIOS_MODE_")]
	public enum DomainOsSmBiosMode {
		EMULATE,
		HOST,
		SYSINFO
	}
	[CCode (cheader_filename = "libvirt-gconfig/libvirt-gconfig.h", cprefix = "GVIR_CONFIG_DOMAIN_OS_TYPE_")]
	public enum DomainOsType {
		HVM,
		LINUX,
		EXE,
		XEN,
		UML
	}
	[CCode (cheader_filename = "libvirt-gconfig/libvirt-gconfig.h", cprefix = "GVIR_CONFIG_DOMAIN_REDIRDEV_BUS_")]
	public enum DomainRedirdevBus {
		USB
	}
	[CCode (cheader_filename = "libvirt-gconfig/libvirt-gconfig.h", cprefix = "GVIR_CONFIG_DOMAIN_SECLABEL_")]
	public enum DomainSeclabelType {
		DYNAMIC,
		STATIC
	}
	[CCode (cheader_filename = "libvirt-gconfig/libvirt-gconfig.h", cprefix = "GVIR_CONFIG_DOMAIN_SOUND_MODEL_")]
	public enum DomainSoundModel {
		SB16,
		ES1370,
		PCSPK,
		AC97,
		ICH6
	}
	[CCode (cheader_filename = "libvirt-gconfig/libvirt-gconfig.h", cprefix = "GVIR_CONFIG_DOMAIN_TIMER_TICK_POLICY_")]
	public enum DomainTimerTickPolicy {
		DELAY,
		CATCHUP,
		MERGE,
		DISCARD
	}
	[CCode (cheader_filename = "libvirt-gconfig/libvirt-gconfig.h", cprefix = "GVIR_CONFIG_DOMAIN_VIDEO_MODEL_")]
	public enum DomainVideoModel {
		VGA,
		CIRRUS,
		VMVGA,
		XEN,
		VBOX,
		QXL
	}
	[CCode (cheader_filename = "libvirt-gconfig/libvirt-gconfig.h", cprefix = "GVIR_CONFIG_DOMAIN_VIRT_")]
	public enum DomainVirtType {
		QEMU,
		KQEMU,
		KVM,
		XEN,
		LXC,
		UML,
		OPENVZ,
		VSERVER,
		LDOM,
		TEST,
		VMWARE,
		HYPERV,
		VBOX,
		ONE,
		PHYP
	}
	[CCode (cheader_filename = "libvirt-gconfig/libvirt-gconfig.h", cprefix = "GVIR_CONFIG_STORAGE_POOL_TYPE_")]
	public enum StoragePoolType {
		DIR,
		FS,
		NETFS,
		LOGICAL,
		DISK,
		ISCSI,
		SCSI,
		MPATH
	}
	[CCode (cheader_filename = "libvirt-gconfig/libvirt-gconfig.h")]
	public static void init (int argc, string argv);
	[CCode (cheader_filename = "libvirt-gconfig/libvirt-gconfig.h")]
	public static bool init_check ([CCode (array_length_cname = "argc", array_length_pos = 0.5)] ref string[]? argv) throws GLib.Error;
}
