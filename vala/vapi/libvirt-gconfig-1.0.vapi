/* libvirt-gconfig-1.0.vapi generated by vapigen, do not modify. */

[CCode (cprefix = "GVirConfig", gir_namespace = "LibvirtGConfig", gir_version = "1.0", lower_case_cprefix = "gvir_config_")]
namespace GVirConfig {
	[CCode (cheader_filename = "libvirt-gconfig/libvirt-gconfig.h", type_id = "gvir_config_capabilities_get_type ()")]
	public class Capabilities : GVirConfig.Object {
		[CCode (has_construct_function = false)]
		public Capabilities ();
		[CCode (has_construct_function = false)]
		public Capabilities.from_xml (string xml) throws GLib.Error;
	}
	[CCode (cheader_filename = "libvirt-gconfig/libvirt-gconfig.h", type_id = "gvir_config_domain_get_type ()")]
	public class Domain : GVirConfig.Object {
		[CCode (has_construct_function = false)]
		public Domain ();
		public void add_device (GVirConfig.DomainDevice device);
		[CCode (has_construct_function = false)]
		public Domain.from_xml (string xml) throws GLib.Error;
		public string get_description ();
		public GLib.List<GVirConfig.DomainDevice> get_devices ();
		[CCode (array_length = false, array_null_terminated = true)]
		public string[] get_features ();
		public uint64 get_memory ();
		public string get_name ();
		public uint64 get_vcpus ();
		public void set_clock (GVirConfig.DomainClock klock);
		public void set_description (string description);
		public void set_devices (GLib.List<GVirConfig.DomainDevice> devices);
		public void set_features ([CCode (array_length = false, array_null_terminated = true)] string[] features);
		public void set_lifecycle (GVirConfig.DomainLifecycleEvent event, GVirConfig.DomainLifecycleAction action);
		public void set_memory (uint64 memory);
		public void set_name (string name);
		public void set_os (GVirConfig.DomainOs os);
		public void set_seclabel (GVirConfig.DomainSeclabel seclabel);
		public void set_vcpus (uint64 vcpu_count);
		public void set_virt_type (GVirConfig.DomainVirtType type);
		public static void source_pty_set_path (GVirConfig.DomainChardevSourcePty pty, string path);
		public string description { owned get; set; }
		[CCode (array_length = false, array_null_terminated = true)]
		public string[] features { owned get; set; }
		public uint64 memory { get; set; }
		public string name { owned get; set; }
		[NoAccessorMethod]
		public uint64 vcpu { get; set; }
	}
	[CCode (cheader_filename = "libvirt-gconfig/libvirt-gconfig.h", type_id = "gvir_config_domain_channel_get_type ()")]
	public class DomainChannel : GVirConfig.DomainChardev {
		[CCode (has_construct_function = false)]
		public DomainChannel ();
		[CCode (has_construct_function = false)]
		public DomainChannel.from_xml (string xml) throws GLib.Error;
		public void set_target_name (string name);
		public void set_target_type (GVirConfig.DomainChannelTargetType type);
	}
	[CCode (cheader_filename = "libvirt-gconfig/libvirt-gconfig.h", type_id = "gvir_config_domain_chardev_get_type ()")]
	public abstract class DomainChardev : GVirConfig.DomainDevice {
		[CCode (has_construct_function = false)]
		protected DomainChardev ();
		public void set_source (GVirConfig.DomainChardevSource source);
	}
	[CCode (cheader_filename = "libvirt-gconfig/libvirt-gconfig.h", type_id = "gvir_config_domain_chardev_source_get_type ()")]
	public abstract class DomainChardevSource : GVirConfig.Object {
		[CCode (has_construct_function = false)]
		protected DomainChardevSource ();
	}
	[CCode (cheader_filename = "libvirt-gconfig/libvirt-gconfig.h", type_id = "gvir_config_domain_chardev_source_pty_get_type ()")]
	public class DomainChardevSourcePty : GVirConfig.DomainChardevSource {
		[CCode (has_construct_function = false)]
		public DomainChardevSourcePty ();
		[CCode (has_construct_function = false)]
		public DomainChardevSourcePty.from_xml (string xml) throws GLib.Error;
	}
	[CCode (cheader_filename = "libvirt-gconfig/libvirt-gconfig.h", type_id = "gvir_config_domain_clock_get_type ()")]
	public class DomainClock : GVirConfig.Object {
		[CCode (has_construct_function = false)]
		public DomainClock ();
		[CCode (has_construct_function = false)]
		public DomainClock.from_xml (string xml) throws GLib.Error;
		public void set_offset (GVirConfig.DomainClockOffset offset);
		public void set_timezone (string tz);
		public void set_variable_offset (int seconds);
	}
	[CCode (cheader_filename = "libvirt-gconfig/libvirt-gconfig.h", type_id = "gvir_config_domain_console_get_type ()")]
	public class DomainConsole : GVirConfig.DomainChardev {
		[CCode (has_construct_function = false)]
		public DomainConsole ();
		[CCode (has_construct_function = false)]
		public DomainConsole.from_xml (string xml) throws GLib.Error;
		public void set_target_type (GVirConfig.DomainConsoleTargetType type);
	}
	[CCode (cheader_filename = "libvirt-gconfig/libvirt-gconfig.h", type_id = "gvir_config_domain_device_get_type ()")]
	public abstract class DomainDevice : GVirConfig.Object {
		[CCode (has_construct_function = false)]
		protected DomainDevice ();
	}
	[CCode (cheader_filename = "libvirt-gconfig/libvirt-gconfig.h", type_id = "gvir_config_domain_disk_get_type ()")]
	public class DomainDisk : GVirConfig.DomainDevice {
		[CCode (has_construct_function = false)]
		public DomainDisk ();
		[CCode (has_construct_function = false)]
		public DomainDisk.from_xml (string xml) throws GLib.Error;
		public GVirConfig.DomainDiskType get_disk_type ();
		public string get_driver_name ();
		public string get_driver_type ();
		public GVirConfig.DomainDiskGuestDeviceType get_guest_device_type ();
		public GVirConfig.DomainDiskSnapshotType get_snapshot_type ();
		public string get_source ();
		public GVirConfig.DomainDiskBus get_target_bus ();
		public string get_target_dev ();
		public void set_driver_name (string driver_name);
		public void set_driver_type (string driver_type);
		public void set_guest_device_type (GVirConfig.DomainDiskGuestDeviceType type);
		public void set_readonly (bool readonly);
		public void set_snapshot_type (GVirConfig.DomainDiskSnapshotType type);
		public void set_source (string source);
		public void set_target_bus (GVirConfig.DomainDiskBus bus);
		public void set_target_dev (string dev);
		public void set_type (GVirConfig.DomainDiskType type);
	}
	[CCode (cheader_filename = "libvirt-gconfig/libvirt-gconfig.h", type_id = "gvir_config_domain_filesys_get_type ()")]
	public class DomainFilesys : GVirConfig.DomainDevice {
		[CCode (has_construct_function = false)]
		public DomainFilesys ();
		[CCode (has_construct_function = false)]
		public DomainFilesys.from_xml (string xml) throws GLib.Error;
		public void set_access_type (GVirConfig.DomainFilesysAccessType type);
		public void set_driver_type (GVirConfig.DomainFilesysDriverType type);
		public void set_readonly (bool readonly);
		public void set_source (string source);
		public void set_target (string target);
		public void set_type (GVirConfig.DomainFilesysType type);
	}
	[CCode (cheader_filename = "libvirt-gconfig/libvirt-gconfig.h", type_id = "gvir_config_domain_graphics_get_type ()")]
	public abstract class DomainGraphics : GVirConfig.DomainDevice {
		[CCode (has_construct_function = false)]
		protected DomainGraphics ();
	}
	[CCode (cheader_filename = "libvirt-gconfig/libvirt-gconfig.h", type_id = "gvir_config_domain_graphics_sdl_get_type ()")]
	public class DomainGraphicsSdl : GVirConfig.DomainGraphics {
		[CCode (has_construct_function = false)]
		public DomainGraphicsSdl ();
		[CCode (has_construct_function = false)]
		public DomainGraphicsSdl.from_xml (string xml) throws GLib.Error;
		public void set_display (string disp);
		public void set_xauthority (string path);
	}
	[CCode (cheader_filename = "libvirt-gconfig/libvirt-gconfig.h", type_id = "gvir_config_domain_graphics_spice_get_type ()")]
	public class DomainGraphicsSpice : GVirConfig.DomainGraphics {
		[CCode (has_construct_function = false)]
		public DomainGraphicsSpice ();
		[CCode (has_construct_function = false)]
		public DomainGraphicsSpice.from_xml (string xml) throws GLib.Error;
		public void set_autoport (bool autoport);
		public void set_password (string password);
		public void set_port (int port);
		public void set_tls_port (int port);
	}
	[CCode (cheader_filename = "libvirt-gconfig/libvirt-gconfig.h", type_id = "gvir_config_domain_graphics_vnc_get_type ()")]
	public class DomainGraphicsVnc : GVirConfig.DomainGraphics {
		[CCode (has_construct_function = false)]
		public DomainGraphicsVnc ();
		[CCode (has_construct_function = false)]
		public DomainGraphicsVnc.from_xml (string xml) throws GLib.Error;
		public void set_autoport (bool autoport);
		public void set_password (string password);
		public void set_port (int port);
	}
	[CCode (cheader_filename = "libvirt-gconfig/libvirt-gconfig.h", type_id = "gvir_config_domain_input_get_type ()")]
	public class DomainInput : GVirConfig.DomainDevice {
		[CCode (has_construct_function = false)]
		public DomainInput ();
		[CCode (has_construct_function = false)]
		public DomainInput.from_xml (string xml) throws GLib.Error;
		public void set_bus (GVirConfig.DomainInputBus bus);
		public void set_device_type (GVirConfig.DomainInputDeviceType type);
	}
	[CCode (cheader_filename = "libvirt-gconfig/libvirt-gconfig.h", type_id = "gvir_config_domain_interface_get_type ()")]
	public abstract class DomainInterface : GVirConfig.DomainDevice {
		[CCode (has_construct_function = false)]
		protected DomainInterface ();
		public void set_ifname (string ifname);
		public void set_link_state (GVirConfig.DomainInterfaceLinkState state);
		public void set_mac (string mac_address);
		public void set_model (string model);
	}
	[CCode (cheader_filename = "libvirt-gconfig/libvirt-gconfig.h", type_id = "gvir_config_domain_interface_bridge_get_type ()")]
	public class DomainInterfaceBridge : GVirConfig.DomainInterface {
		[CCode (has_construct_function = false)]
		public DomainInterfaceBridge ();
		[CCode (has_construct_function = false)]
		public DomainInterfaceBridge.from_xml (string xml) throws GLib.Error;
		public void set_source (string brname);
	}
	[CCode (cheader_filename = "libvirt-gconfig/libvirt-gconfig.h", type_id = "gvir_config_domain_interface_network_get_type ()")]
	public class DomainInterfaceNetwork : GVirConfig.DomainInterface {
		[CCode (has_construct_function = false)]
		public DomainInterfaceNetwork ();
		[CCode (has_construct_function = false)]
		public DomainInterfaceNetwork.from_xml (string xml) throws GLib.Error;
		public void set_source (string source);
	}
	[CCode (cheader_filename = "libvirt-gconfig/libvirt-gconfig.h", type_id = "gvir_config_domain_interface_user_get_type ()")]
	public class DomainInterfaceUser : GVirConfig.DomainInterface {
		[CCode (has_construct_function = false)]
		public DomainInterfaceUser ();
		[CCode (has_construct_function = false)]
		public DomainInterfaceUser.from_xml (string xml) throws GLib.Error;
	}
	[CCode (cheader_filename = "libvirt-gconfig/libvirt-gconfig.h", type_id = "gvir_config_domain_memballoon_get_type ()")]
	public class DomainMemballoon : GVirConfig.DomainDevice {
		[CCode (has_construct_function = false)]
		public DomainMemballoon ();
		[CCode (has_construct_function = false)]
		public DomainMemballoon.from_xml (string xml) throws GLib.Error;
		public void set_model (GVirConfig.DomainMemballoonModel model);
	}
	[CCode (cheader_filename = "libvirt-gconfig/libvirt-gconfig.h", type_id = "gvir_config_domain_os_get_type ()")]
	public class DomainOs : GVirConfig.Object {
		[CCode (has_construct_function = false)]
		public DomainOs ();
		public void bios_enable_serial (bool enable);
		public void enable_boot_menu (bool enable);
		[CCode (has_construct_function = false)]
		public DomainOs.from_xml (string xml) throws GLib.Error;
		public void set_arch (string arch);
		public void set_boot_devices (GLib.List<GVirConfig.DomainOsBootDevice> boot_devices);
		public void set_cmdline (string cmdline);
		public void set_init (string init);
		public void set_kernel (string kernel);
		public void set_loader (string loader);
		public void set_machine (string machine);
		public void set_os_type (GVirConfig.DomainOsType type);
		public void set_ramdisk (string ramdisk);
		public void set_smbios_mode (GVirConfig.DomainOsSmBiosMode mode);
	}
	[CCode (cheader_filename = "libvirt-gconfig/libvirt-gconfig.h", type_id = "gvir_config_domain_parallel_get_type ()")]
	public class DomainParallel : GVirConfig.DomainChardev {
		[CCode (has_construct_function = false)]
		public DomainParallel ();
		[CCode (has_construct_function = false)]
		public DomainParallel.from_xml (string xml) throws GLib.Error;
	}
	[CCode (cheader_filename = "libvirt-gconfig/libvirt-gconfig.h", type_id = "gvir_config_domain_seclabel_get_type ()")]
	public class DomainSeclabel : GVirConfig.Object {
		[CCode (has_construct_function = false)]
		public DomainSeclabel ();
		[CCode (has_construct_function = false)]
		public DomainSeclabel.from_xml (string xml) throws GLib.Error;
		public void set_baselabel (string label);
		public void set_label (string label);
		public void set_model (string model);
		public void set_type (GVirConfig.DomainSeclabelType type);
	}
	[CCode (cheader_filename = "libvirt-gconfig/libvirt-gconfig.h", type_id = "gvir_config_domain_serial_get_type ()")]
	public class DomainSerial : GVirConfig.DomainChardev {
		[CCode (has_construct_function = false)]
		public DomainSerial ();
		[CCode (has_construct_function = false)]
		public DomainSerial.from_xml (string xml) throws GLib.Error;
	}
	[CCode (cheader_filename = "libvirt-gconfig/libvirt-gconfig.h", type_id = "gvir_config_domain_snapshot_get_type ()")]
	public class DomainSnapshot : GVirConfig.Object {
		[CCode (has_construct_function = false)]
		public DomainSnapshot ();
		[CCode (has_construct_function = false)]
		public DomainSnapshot.from_xml (string xml) throws GLib.Error;
	}
	[CCode (cheader_filename = "libvirt-gconfig/libvirt-gconfig.h", type_id = "gvir_config_domain_sound_get_type ()")]
	public class DomainSound : GVirConfig.DomainDevice {
		[CCode (has_construct_function = false)]
		public DomainSound ();
		[CCode (has_construct_function = false)]
		public DomainSound.from_xml (string xml) throws GLib.Error;
		public void set_model (GVirConfig.DomainSoundModel model);
	}
	[CCode (cheader_filename = "libvirt-gconfig/libvirt-gconfig.h", type_id = "gvir_config_domain_timer_get_type ()")]
	public class DomainTimer : GVirConfig.Object {
		[CCode (has_construct_function = false)]
		public DomainTimer ();
		[CCode (has_construct_function = false)]
		public DomainTimer.from_xml (string xml) throws GLib.Error;
	}
	[CCode (cheader_filename = "libvirt-gconfig/libvirt-gconfig.h", type_id = "gvir_config_domain_video_get_type ()")]
	public class DomainVideo : GVirConfig.DomainDevice {
		[CCode (has_construct_function = false)]
		public DomainVideo ();
		[CCode (has_construct_function = false)]
		public DomainVideo.from_xml (string xml) throws GLib.Error;
		public void set_heads (uint head_count);
		public void set_model (GVirConfig.DomainVideoModel model);
		public void set_vram (uint kbytes);
	}
	[CCode (cheader_filename = "libvirt-gconfig/libvirt-gconfig.h", type_id = "gvir_config_interface_get_type ()")]
	public class Interface : GVirConfig.Object {
		[CCode (has_construct_function = false)]
		public Interface ();
		[CCode (has_construct_function = false)]
		public Interface.from_xml (string xml) throws GLib.Error;
	}
	[CCode (cheader_filename = "libvirt-gconfig/libvirt-gconfig.h", type_id = "gvir_config_network_get_type ()")]
	public class Network : GVirConfig.Object {
		[CCode (has_construct_function = false)]
		public Network ();
		[CCode (has_construct_function = false)]
		public Network.from_xml (string xml) throws GLib.Error;
	}
	[CCode (cheader_filename = "libvirt-gconfig/libvirt-gconfig.h", type_id = "gvir_config_network_filter_get_type ()")]
	public class NetworkFilter : GVirConfig.Object {
		[CCode (has_construct_function = false)]
		public NetworkFilter ();
		[CCode (has_construct_function = false)]
		public NetworkFilter.from_xml (string xml) throws GLib.Error;
	}
	[CCode (cheader_filename = "libvirt-gconfig/libvirt-gconfig.h", type_id = "gvir_config_node_device_get_type ()")]
	public class NodeDevice : GVirConfig.Object {
		[CCode (has_construct_function = false)]
		public NodeDevice ();
		[CCode (has_construct_function = false)]
		public NodeDevice.from_xml (string xml) throws GLib.Error;
	}
	[CCode (cheader_filename = "libvirt-gconfig/libvirt-gconfig.h", type_id = "gvir_config_object_get_type ()")]
	public class Object : GLib.Object {
		[CCode (has_construct_function = false)]
		public Object (GLib.Type type, string root_name, string schema);
		public static GLib.Quark error_quark ();
		[CCode (has_construct_function = false)]
		public Object.from_xml (GLib.Type type, string root_name, string schema, string xml) throws GLib.Error;
		public unowned string get_schema ();
		public string to_xml ();
		public void validate () throws GLib.Error;
		[NoAccessorMethod]
		public void* node { get; construct; }
		public string schema { get; construct; }
	}
	[CCode (cheader_filename = "libvirt-gconfig/libvirt-gconfig.h", type_id = "gvir_config_secret_get_type ()")]
	public class Secret : GVirConfig.Object {
		[CCode (has_construct_function = false)]
		public Secret ();
		[CCode (has_construct_function = false)]
		public Secret.from_xml (string xml) throws GLib.Error;
	}
	[CCode (cheader_filename = "libvirt-gconfig/libvirt-gconfig.h", type_id = "gvir_config_storage_permissions_get_type ()")]
	public class StoragePermissions : GVirConfig.Object {
		[CCode (has_construct_function = false)]
		public StoragePermissions ();
		[CCode (has_construct_function = false)]
		public StoragePermissions.from_xml (string xml) throws GLib.Error;
		public void set_group (uint group);
		public void set_label (string label);
		public void set_mode (uint mode);
		public void set_owner (uint owner);
	}
	[CCode (cheader_filename = "libvirt-gconfig/libvirt-gconfig.h", type_id = "gvir_config_storage_pool_get_type ()")]
	public class StoragePool : GVirConfig.Object {
		[CCode (has_construct_function = false)]
		public StoragePool ();
		[CCode (has_construct_function = false)]
		public StoragePool.from_xml (string xml) throws GLib.Error;
		public void set_allocation (uint64 allocation);
		public void set_available (uint64 available);
		public void set_capacity (uint64 capacity);
		public void set_name (string name);
		public void set_pool_type (GVirConfig.StoragePoolType type);
		public void set_source (GVirConfig.StoragePoolSource source);
		public void set_target (GVirConfig.StoragePoolTarget target);
		public void set_uuid (string uuid);
	}
	[CCode (cheader_filename = "libvirt-gconfig/libvirt-gconfig.h", type_id = "gvir_config_storage_pool_source_get_type ()")]
	public class StoragePoolSource : GVirConfig.Object {
		[CCode (has_construct_function = false)]
		public StoragePoolSource ();
		[CCode (has_construct_function = false)]
		public StoragePoolSource.from_xml (string xml) throws GLib.Error;
		public void set_adapter (string adapter);
		public void set_device_path (string device_path);
		public void set_directory (string directory);
		public void set_format (string format);
		public void set_host (string host);
		public void set_name (string name);
		public void set_product (string product);
		public void set_vendor (string vendor);
	}
	[CCode (cheader_filename = "libvirt-gconfig/libvirt-gconfig.h", type_id = "gvir_config_storage_pool_target_get_type ()")]
	public class StoragePoolTarget : GVirConfig.Object {
		[CCode (has_construct_function = false)]
		public StoragePoolTarget ();
		[CCode (has_construct_function = false)]
		public StoragePoolTarget.from_xml (string xml) throws GLib.Error;
		public void set_path (string path);
		public void set_permissions (GVirConfig.StoragePermissions perms);
	}
	[CCode (cheader_filename = "libvirt-gconfig/libvirt-gconfig.h", type_id = "gvir_config_storage_vol_get_type ()")]
	public class StorageVol : GVirConfig.Object {
		[CCode (has_construct_function = false)]
		public StorageVol ();
		[CCode (has_construct_function = false)]
		public StorageVol.from_xml (string xml) throws GLib.Error;
		public void set_allocation (uint64 allocation);
		public void set_backing_store (GVirConfig.StorageVolBackingStore backing_store);
		public void set_capacity (uint64 capacity);
		public void set_name (string name);
		public void set_target (GVirConfig.StorageVolTarget target);
	}
	[CCode (cheader_filename = "libvirt-gconfig/libvirt-gconfig.h", type_id = "gvir_config_storage_vol_backing_store_get_type ()")]
	public class StorageVolBackingStore : GVirConfig.Object {
		[CCode (has_construct_function = false)]
		public StorageVolBackingStore ();
		[CCode (has_construct_function = false)]
		public StorageVolBackingStore.from_xml (string xml) throws GLib.Error;
		public void set_format (string format);
		public void set_path (string path);
	}
	[CCode (cheader_filename = "libvirt-gconfig/libvirt-gconfig.h", type_id = "gvir_config_storage_vol_target_get_type ()")]
	public class StorageVolTarget : GVirConfig.Object {
		[CCode (has_construct_function = false)]
		public StorageVolTarget ();
		[CCode (has_construct_function = false)]
		public StorageVolTarget.from_xml (string xml) throws GLib.Error;
		public void set_format (string format);
		public void set_permissions (GVirConfig.StoragePermissions perms);
	}
	[CCode (cheader_filename = "libvirt-gconfig/libvirt-gconfig.h")]
	public enum DomainChannelTargetType {
		[CCode (cname = "GVIR_CONFIG_DOMAIN_CONSOLE_TARGET_GUESTFWD")]
		CONSOLE_TARGET_GUESTFWD,
		[CCode (cname = "GVIR_CONFIG_DOMAIN_CHANNEL_TARGET_VIRTIO")]
		CHANNEL_TARGET_VIRTIO
	}
	[CCode (cheader_filename = "libvirt-gconfig/libvirt-gconfig.h")]
	public enum DomainClockOffset {
		[CCode (cname = "GVIR_CONFIG_DOMAIN_CLOCK_UTC")]
		UTC,
		[CCode (cname = "GVIR_CONFIG_DOMAIN_CLOCK_LOCALTIME")]
		LOCALTIME,
		[CCode (cname = "GVIR_CONFIG_DOMAIN_CLOCK_TIMEZONE")]
		TIMEZONE,
		[CCode (cname = "GVIR_CONFIG_DOMAIN_CLOCK_VARIABLE")]
		VARIABLE
	}
	[CCode (cheader_filename = "libvirt-gconfig/libvirt-gconfig.h")]
	public enum DomainConsoleTargetType {
		[CCode (cname = "GVIR_CONFIG_DOMAIN_CONSOLE_TARGET_XEN")]
		XEN,
		[CCode (cname = "GVIR_CONFIG_DOMAIN_CONSOLE_TARGET_SERIAL")]
		SERIAL,
		[CCode (cname = "GVIR_CONFIG_DOMAIN_CONSOLE_TARGET_UML")]
		UML,
		[CCode (cname = "GVIR_CONFIG_DOMAIN_CONSOLE_TARGET_VIRTIO")]
		VIRTIO,
		[CCode (cname = "GVIR_CONFIG_DOMAIN_CONSOLE_TARGET_LXC")]
		LXC,
		[CCode (cname = "GVIR_CONFIG_DOMAIN_CONSOLE_TARGET_OPENVZ")]
		OPENVZ
	}
	[CCode (cheader_filename = "libvirt-gconfig/libvirt-gconfig.h")]
	public enum DomainDiskBus {
		[CCode (cname = "GVIR_CONFIG_DOMAIN_DISK_BUS_IDE")]
		IDE,
		[CCode (cname = "GVIR_CONFIG_DOMAIN_DISK_BUS_FDC")]
		FDC,
		[CCode (cname = "GVIR_CONFIG_DOMAIN_DISK_BUS_SCSI")]
		SCSI,
		[CCode (cname = "GVIR_CONFIG_DOMAIN_DISK_BUS_VIRTIO")]
		VIRTIO,
		[CCode (cname = "GVIR_CONFIG_DOMAIN_DISK_BUS_XEN")]
		XEN,
		[CCode (cname = "GVIR_CONFIG_DOMAIN_DISK_BUS_USB")]
		USB,
		[CCode (cname = "GVIR_CONFIG_DOMAIN_DISK_BUS_UML")]
		UML,
		[CCode (cname = "GVIR_CONFIG_DOMAIN_DISK_BUS_SATA")]
		SATA
	}
	[CCode (cheader_filename = "libvirt-gconfig/libvirt-gconfig.h")]
	public enum DomainDiskGuestDeviceType {
		[CCode (cname = "GVIR_CONFIG_DOMAIN_DISK_GUEST_DEVICE_DISK")]
		DISK,
		[CCode (cname = "GVIR_CONFIG_DOMAIN_DISK_GUEST_DEVICE_FLOPPY")]
		FLOPPY,
		[CCode (cname = "GVIR_CONFIG_DOMAIN_DISK_GUEST_DEVICE_CDROM")]
		CDROM
	}
	[CCode (cheader_filename = "libvirt-gconfig/libvirt-gconfig.h")]
	public enum DomainDiskSnapshotType {
		[CCode (cname = "GVIR_CONFIG_DOMAIN_DISK_SNAPSHOT_NO")]
		NO,
		[CCode (cname = "GVIR_CONFIG_DOMAIN_DISK_SNAPSHOT_INTERNAL")]
		INTERNAL,
		[CCode (cname = "GVIR_CONFIG_DOMAIN_DISK_SNAPSHOT_EXTERNAL")]
		EXTERNAL
	}
	[CCode (cheader_filename = "libvirt-gconfig/libvirt-gconfig.h")]
	public enum DomainDiskType {
		[CCode (cname = "GVIR_CONFIG_DOMAIN_DISK_FILE")]
		FILE,
		[CCode (cname = "GVIR_CONFIG_DOMAIN_DISK_BLOCK")]
		BLOCK,
		[CCode (cname = "GVIR_CONFIG_DOMAIN_DISK_DIR")]
		DIR,
		[CCode (cname = "GVIR_CONFIG_DOMAIN_DISK_NETWORK")]
		NETWORK
	}
	[CCode (cheader_filename = "libvirt-gconfig/libvirt-gconfig.h")]
	public enum DomainFilesysAccessType {
		[CCode (cname = "GVIR_CONFIG_DOMAIN_FILESYS_ACCESS_PASSTHROUGH")]
		PASSTHROUGH,
		[CCode (cname = "GVIR_CONFIG_DOMAIN_FILESYS_ACCESS_MAPPED")]
		MAPPED,
		[CCode (cname = "GVIR_CONFIG_DOMAIN_FILESYS_ACCESS_SQUASHED")]
		SQUASHED
	}
	[CCode (cheader_filename = "libvirt-gconfig/libvirt-gconfig.h")]
	public enum DomainFilesysDriverType {
		[CCode (cname = "GVIR_CONFIG_DOMAIN_FILESYS_DRIVER_DEFAULT")]
		DEFAULT,
		[CCode (cname = "GVIR_CONFIG_DOMAIN_FILESYS_DRIVER_PATH")]
		PATH,
		[CCode (cname = "GVIR_CONFIG_DOMAIN_FILESYS_DRIVER_HANDLE")]
		HANDLE
	}
	[CCode (cheader_filename = "libvirt-gconfig/libvirt-gconfig.h")]
	public enum DomainFilesysType {
		[CCode (cname = "GVIR_CONFIG_DOMAIN_FILESYS_MOUNT")]
		MOUNT,
		[CCode (cname = "GVIR_CONFIG_DOMAIN_FILESYS_BLOCK")]
		BLOCK,
		[CCode (cname = "GVIR_CONFIG_DOMAIN_FILESYS_FILE")]
		FILE,
		[CCode (cname = "GVIR_CONFIG_DOMAIN_FILESYS_TEMPLATE")]
		TEMPLATE
	}
	[CCode (cheader_filename = "libvirt-gconfig/libvirt-gconfig.h")]
	public enum DomainInputBus {
		[CCode (cname = "GVIR_CONFIG_DOMAIN_INPUT_BUS_PS2")]
		PS2,
		[CCode (cname = "GVIR_CONFIG_DOMAIN_INPUT_BUS_USB")]
		USB,
		[CCode (cname = "GVIR_CONFIG_DOMAIN_INPUT_BUS_XEN")]
		XEN
	}
	[CCode (cheader_filename = "libvirt-gconfig/libvirt-gconfig.h")]
	public enum DomainInputDeviceType {
		[CCode (cname = "GVIR_CONFIG_DOMAIN_INPUT_DEVICE_MOUSE")]
		MOUSE,
		[CCode (cname = "GVIR_CONFIG_DOMAIN_INPUT_DEVICE_TABLET")]
		TABLET
	}
	[CCode (cheader_filename = "libvirt-gconfig/libvirt-gconfig.h")]
	public enum DomainInterfaceLinkState {
		[CCode (cname = "GVIR_CONFIG_DOMAIN_INTERFACE_LINK_STATE_DEFAULT")]
		DEFAULT,
		[CCode (cname = "GVIR_CONFIG_DOMAIN_INTERFACE_LINK_STATE_UP")]
		UP,
		[CCode (cname = "GVIR_CONFIG_DOMAIN_INTERFACE_LINK_STATE_DOWN")]
		DOWN
	}
	[CCode (cheader_filename = "libvirt-gconfig/libvirt-gconfig.h")]
	public enum DomainLifecycleAction {
		[CCode (cname = "GVIR_CONFIG_DOMAIN_LIFECYCLE_DESTROY")]
		DESTROY,
		[CCode (cname = "GVIR_CONFIG_DOMAIN_LIFECYCLE_RESTART")]
		RESTART,
		[CCode (cname = "GVIR_CONFIG_DOMAIN_LIFECYCLE_PRESERVE")]
		PRESERVE,
		[CCode (cname = "GVIR_CONFIG_DOMAIN_LIFECYCLE_RENAME_RESTART")]
		RENAME_RESTART,
		[CCode (cname = "GVIR_CONFIG_DOMAIN_LIFECYCLE_COREDUMP_DESTROY")]
		COREDUMP_DESTROY,
		[CCode (cname = "GVIR_CONFIG_DOMAIN_LIFECYCLE_COREDUMP_RESTART")]
		COREDUMP_RESTART
	}
	[CCode (cheader_filename = "libvirt-gconfig/libvirt-gconfig.h")]
	public enum DomainLifecycleEvent {
		[CCode (cname = "GVIR_CONFIG_DOMAIN_LIFECYCLE_ON_POWEROFF")]
		ON_POWEROFF,
		[CCode (cname = "GVIR_CONFIG_DOMAIN_LIFECYCLE_ON_REBOOT")]
		ON_REBOOT,
		[CCode (cname = "GVIR_CONFIG_DOMAIN_LIFECYCLE_ON_CRASH")]
		ON_CRASH
	}
	[CCode (cheader_filename = "libvirt-gconfig/libvirt-gconfig.h")]
	public enum DomainMemballoonModel {
		[CCode (cname = "GVIR_CONFIG_DOMAIN_MEMBALLOON_MODEL_NONE")]
		NONE,
		[CCode (cname = "GVIR_CONFIG_DOMAIN_MEMBALLOON_MODEL_VIRTIO")]
		VIRTIO
	}
	[CCode (cheader_filename = "libvirt-gconfig/libvirt-gconfig.h")]
	public enum DomainOsBootDevice {
		[CCode (cname = "GVIR_CONFIG_DOMAIN_OS_BOOT_DEVICE_FD")]
		FD,
		[CCode (cname = "GVIR_CONFIG_DOMAIN_OS_BOOT_DEVICE_HD")]
		HD,
		[CCode (cname = "GVIR_CONFIG_DOMAIN_OS_BOOT_DEVICE_CDROM")]
		CDROM,
		[CCode (cname = "GVIR_CONFIG_DOMAIN_OS_BOOT_DEVICE_NETWORK")]
		NETWORK
	}
	[CCode (cheader_filename = "libvirt-gconfig/libvirt-gconfig.h")]
	public enum DomainOsSmBiosMode {
		[CCode (cname = "GVIR_CONFIG_DOMAIN_OS_SMBIOS_MODE_EMULATE")]
		EMULATE,
		[CCode (cname = "GVIR_CONFIG_DOMAIN_OS_SMBIOS_MODE_HOST")]
		HOST,
		[CCode (cname = "GVIR_CONFIG_DOMAIN_OS_SMBIOS_MODE_SYSINFO")]
		SYSINFO
	}
	[CCode (cheader_filename = "libvirt-gconfig/libvirt-gconfig.h")]
	public enum DomainOsType {
		[CCode (cname = "GVIR_CONFIG_DOMAIN_OS_TYPE_HVM")]
		HVM,
		[CCode (cname = "GVIR_CONFIG_DOMAIN_OS_TYPE_LINUX")]
		LINUX,
		[CCode (cname = "GVIR_CONFIG_DOMAIN_OS_TYPE_EXE")]
		EXE
	}
	[CCode (cheader_filename = "libvirt-gconfig/libvirt-gconfig.h")]
	public enum DomainSeclabelType {
		[CCode (cname = "GVIR_CONFIG_DOMAIN_SECLABEL_DYNAMIC")]
		DYNAMIC,
		[CCode (cname = "GVIR_CONFIG_DOMAIN_SECLABEL_STATIC")]
		STATIC
	}
	[CCode (cheader_filename = "libvirt-gconfig/libvirt-gconfig.h")]
	public enum DomainSoundModel {
		[CCode (cname = "GVIR_CONFIG_DOMAIN_SOUND_MODEL_SB16")]
		SB16,
		[CCode (cname = "GVIR_CONFIG_DOMAIN_SOUND_MODEL_ES1370")]
		ES1370,
		[CCode (cname = "GVIR_CONFIG_DOMAIN_SOUND_MODEL_PCSPK")]
		PCSPK,
		[CCode (cname = "GVIR_CONFIG_DOMAIN_SOUND_MODEL_AC97")]
		AC97,
		[CCode (cname = "GVIR_CONFIG_DOMAIN_SOUND_MODEL_ICH6")]
		ICH6
	}
	[CCode (cheader_filename = "libvirt-gconfig/libvirt-gconfig.h")]
	public enum DomainVideoModel {
		[CCode (cname = "GVIR_CONFIG_DOMAIN_VIDEO_MODEL_VGA")]
		VGA,
		[CCode (cname = "GVIR_CONFIG_DOMAIN_VIDEO_MODEL_CIRRUS")]
		CIRRUS,
		[CCode (cname = "GVIR_CONFIG_DOMAIN_VIDEO_MODEL_VMVGA")]
		VMVGA,
		[CCode (cname = "GVIR_CONFIG_DOMAIN_VIDEO_MODEL_XEN")]
		XEN,
		[CCode (cname = "GVIR_CONFIG_DOMAIN_VIDEO_MODEL_VBOX")]
		VBOX,
		[CCode (cname = "GVIR_CONFIG_DOMAIN_VIDEO_MODEL_QXL")]
		QXL
	}
	[CCode (cheader_filename = "libvirt-gconfig/libvirt-gconfig.h")]
	public enum DomainVirtType {
		[CCode (cname = "GVIR_CONFIG_DOMAIN_VIRT_QEMU")]
		QEMU,
		[CCode (cname = "GVIR_CONFIG_DOMAIN_VIRT_KQEMU")]
		KQEMU,
		[CCode (cname = "GVIR_CONFIG_DOMAIN_VIRT_KVM")]
		KVM,
		[CCode (cname = "GVIR_CONFIG_DOMAIN_VIRT_XEN")]
		XEN,
		[CCode (cname = "GVIR_CONFIG_DOMAIN_VIRT_LXC")]
		LXC,
		[CCode (cname = "GVIR_CONFIG_DOMAIN_VIRT_UML")]
		UML,
		[CCode (cname = "GVIR_CONFIG_DOMAIN_VIRT_OPENVZ")]
		OPENVZ,
		[CCode (cname = "GVIR_CONFIG_DOMAIN_VIRT_VSERVER")]
		VSERVER,
		[CCode (cname = "GVIR_CONFIG_DOMAIN_VIRT_LDOM")]
		LDOM,
		[CCode (cname = "GVIR_CONFIG_DOMAIN_VIRT_TEST")]
		TEST,
		[CCode (cname = "GVIR_CONFIG_DOMAIN_VIRT_VMWARE")]
		VMWARE,
		[CCode (cname = "GVIR_CONFIG_DOMAIN_VIRT_HYPERV")]
		HYPERV,
		[CCode (cname = "GVIR_CONFIG_DOMAIN_VIRT_VBOX")]
		VBOX,
		[CCode (cname = "GVIR_CONFIG_DOMAIN_VIRT_ONE")]
		ONE,
		[CCode (cname = "GVIR_CONFIG_DOMAIN_VIRT_PHYP")]
		PHYP
	}
	[CCode (cheader_filename = "libvirt-gconfig/libvirt-gconfig.h")]
	public enum StoragePoolType {
		[CCode (cname = "GVIR_CONFIG_STORAGE_POOL_TYPE_DIR")]
		DIR,
		[CCode (cname = "GVIR_CONFIG_STORAGE_POOL_TYPE_FS")]
		FS,
		[CCode (cname = "GVIR_CONFIG_STORAGE_POOL_TYPE_NETFS")]
		NETFS,
		[CCode (cname = "GVIR_CONFIG_STORAGE_POOL_TYPE_LOGICAL")]
		LOGICAL,
		[CCode (cname = "GVIR_CONFIG_STORAGE_POOL_TYPE_DISK")]
		DISK,
		[CCode (cname = "GVIR_CONFIG_STORAGE_POOL_TYPE_ISCSI")]
		ISCSI,
		[CCode (cname = "GVIR_CONFIG_STORAGE_POOL_TYPE_SCSI")]
		SCSI,
		[CCode (cname = "GVIR_CONFIG_STORAGE_POOL_TYPE_MPATH")]
		MPATH
	}
	[CCode (cheader_filename = "libvirt-gconfig/libvirt-gconfig.h")]
	public static void init (int argc, string argv);
	[CCode (cheader_filename = "libvirt-gconfig/libvirt-gconfig.h")]
	public static bool init_check ([CCode (array_length_cname = "argc", array_length_pos = 0.5)] ref string[]? argv) throws GLib.Error;
}
