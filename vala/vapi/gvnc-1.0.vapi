/* gvnc-1.0.vapi generated by vapigen, do not modify. */

[CCode (cprefix = "Vnc", gir_namespace = "GVnc", gir_version = "1.0", lower_case_cprefix = "vnc_")]
namespace Vnc {
	[CCode (cheader_filename = "gvnc.h", type_id = "vnc_base_framebuffer_get_type ()")]
	public class BaseFramebuffer : GLib.Object, Vnc.Framebuffer {
		[CCode (has_construct_function = false)]
		public BaseFramebuffer (uint8 buffer, uint16 width, uint16 height, int rowstride, Vnc.PixelFormat localFormat, Vnc.PixelFormat remoteFormat);
		[NoAccessorMethod]
		public void* buffer { get; construct; }
		[NoAccessorMethod]
		public Vnc.ColorMap color_map { owned get; set; }
		[NoAccessorMethod]
		public int height { get; construct; }
		[NoAccessorMethod]
		public Vnc.PixelFormat local_format { owned get; construct; }
		[NoAccessorMethod]
		public Vnc.PixelFormat remote_format { owned get; construct; }
		[NoAccessorMethod]
		public int rowstride { get; construct; }
		[NoAccessorMethod]
		public int width { get; construct; }
	}
	[CCode (cheader_filename = "gvnc.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "vnc_color_map_get_type ()")]
	[Compact]
	public class ColorMap {
		public Vnc.ColorMapEntry colors;
		public uint16 offset;
		public uint16 size;
		[CCode (has_construct_function = false)]
		public ColorMap (uint16 offset, uint16 nentries);
		public Vnc.ColorMap copy ();
		public void free ();
		public bool lookup (uint16 idx, uint16 red, uint16 green, uint16 blue);
		public bool @set (uint16 idx, uint16 red, uint16 green, uint16 blue);
	}
	[CCode (cheader_filename = "gvnc.h", type_id = "vnc_connection_get_type ()")]
	public class Connection : GLib.Object {
		[CCode (has_construct_function = false)]
		public Connection ();
		public bool client_cut_text (void* data, ulong length);
		public bool framebuffer_update_request (bool incremental, uint16 x, uint16 y, uint16 width, uint16 height);
		public bool get_abs_pointer ();
		public bool get_ext_key_event ();
		public int get_height ();
		public unowned string get_name ();
		public unowned Vnc.PixelFormat get_pixel_format ();
		public bool get_shared ();
		public int get_width ();
		public bool has_error ();
		public bool is_initialized ();
		public bool is_open ();
		public bool key_event (bool down_flag, uint32 key, uint16 scancode);
		public bool open_fd (int fd);
		public bool open_host (string host, string port);
		public bool pointer_event (uint8 button_mask, uint16 x, uint16 y);
		public bool set_auth_subtype (uint type);
		public bool set_auth_type (uint type);
		public bool set_credential (int type, string data);
		public bool set_encodings (int n_encoding, int32 encoding);
		public bool set_framebuffer (Vnc.Framebuffer fb);
		public bool set_pixel_format (Vnc.PixelFormat fmt);
		public bool set_shared (bool sharedFlag);
		public void shutdown ();
		[NoAccessorMethod]
		public Vnc.Framebuffer framebuffer { owned get; set; }
		public virtual signal void vnc_auth_choose_subtype (uint type, GLib.ValueArray subtypes);
		public virtual signal void vnc_auth_choose_type (GLib.ValueArray types);
		public virtual signal void vnc_auth_credential (GLib.ValueArray creds);
		public virtual signal void vnc_auth_failure (string reason);
		public virtual signal void vnc_auth_unsupported (uint authType);
		public virtual signal void vnc_bell ();
		public virtual signal void vnc_connected ();
		public virtual signal void vnc_cursor_changed (Vnc.Cursor cursor);
		public virtual signal void vnc_desktop_resize (int width, int height);
		public virtual signal void vnc_disconnected ();
		public virtual signal void vnc_framebuffer_update (int x, int y, int width, int height);
		public virtual signal void vnc_initialized ();
		public virtual signal void vnc_pixel_format_changed (void* format);
		public virtual signal void vnc_pointer_mode_changed (bool absPointer);
		public virtual signal void vnc_server_cut_text (string text);
	}
	[CCode (cheader_filename = "gvnc.h", type_id = "vnc_cursor_get_type ()")]
	public class Cursor : GLib.Object {
		[CCode (has_construct_function = false)]
		public Cursor (uint8 rgba24data, uint16 hotx, uint16 hoty, uint16 width, uint16 height);
		public uint8 get_data ();
		public uint16 get_height ();
		public uint16 get_hotx ();
		public uint16 get_hoty ();
		public uint16 get_width ();
		[NoAccessorMethod]
		public void* data { get; set construct; }
		[NoAccessorMethod]
		public int height { get; set construct; }
		[NoAccessorMethod]
		public int hotx { get; set construct; }
		[NoAccessorMethod]
		public int hoty { get; set construct; }
		[NoAccessorMethod]
		public int width { get; set construct; }
	}
	[CCode (cheader_filename = "gvnc.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "vnc_pixel_format_get_type ()")]
	[Compact]
	public class PixelFormat {
		public uint8 bits_per_pixel;
		public uint16 blue_max;
		public uint8 blue_shift;
		public uint16 byte_order;
		public uint8 depth;
		public uint16 green_max;
		public uint8 green_shift;
		public uint16 red_max;
		public uint8 red_shift;
		public uint8 true_color_flag;
		[CCode (has_construct_function = false)]
		public PixelFormat ();
		public Vnc.PixelFormat copy ();
		public void free ();
	}
	[CCode (cheader_filename = "gvnc.h", type_cname = "VncFramebufferInterface", type_id = "vnc_framebuffer_get_type ()")]
	public interface Framebuffer : GLib.Object {
		public abstract void blt (uint8 src, int rowstride, uint16 x, uint16 y, uint16 width, uint16 height);
		public abstract void copyrect (uint16 srcx, uint16 srcy, uint16 dstx, uint16 dsty, uint16 width, uint16 height);
		public abstract void fill (uint8 src, uint16 x, uint16 y, uint16 width, uint16 height);
		public abstract uint8 get_buffer ();
		public abstract uint16 get_height ();
		public abstract unowned Vnc.PixelFormat get_local_format ();
		public abstract unowned Vnc.PixelFormat get_remote_format ();
		public abstract int get_rowstride ();
		public abstract uint16 get_width ();
		public abstract bool perfect_format_match ();
		public abstract void rgb24_blt (uint8 src, int rowstride, uint16 x, uint16 y, uint16 width, uint16 height);
		public abstract void set_color_map (Vnc.ColorMap map);
		public abstract void set_pixel_at (uint8 src, uint16 x, uint16 y);
	}
	[CCode (cheader_filename = "gvnc.h", has_type_id = false)]
	public struct ColorMapEntry {
		public uint16 red;
		public uint16 green;
		public uint16 blue;
	}
	[CCode (cheader_filename = "gvnc.h")]
	public enum ConnectionAuth {
		[CCode (cname = "VNC_CONNECTION_AUTH_INVALID")]
		INVALID,
		[CCode (cname = "VNC_CONNECTION_AUTH_NONE")]
		NONE,
		[CCode (cname = "VNC_CONNECTION_AUTH_VNC")]
		VNC,
		[CCode (cname = "VNC_CONNECTION_AUTH_RA2")]
		RA2,
		[CCode (cname = "VNC_CONNECTION_AUTH_RA2NE")]
		RA2NE,
		[CCode (cname = "VNC_CONNECTION_AUTH_TIGHT")]
		TIGHT,
		[CCode (cname = "VNC_CONNECTION_AUTH_ULTRA")]
		ULTRA,
		[CCode (cname = "VNC_CONNECTION_AUTH_TLS")]
		TLS,
		[CCode (cname = "VNC_CONNECTION_AUTH_VENCRYPT")]
		VENCRYPT,
		[CCode (cname = "VNC_CONNECTION_AUTH_SASL")]
		SASL,
		[CCode (cname = "VNC_CONNECTION_AUTH_ARD")]
		ARD,
		[CCode (cname = "VNC_CONNECTION_AUTH_MSLOGON")]
		MSLOGON
	}
	[CCode (cheader_filename = "gvnc.h")]
	public enum ConnectionAuthVencrypt {
		[CCode (cname = "VNC_CONNECTION_AUTH_VENCRYPT_PLAIN")]
		PLAIN,
		[CCode (cname = "VNC_CONNECTION_AUTH_VENCRYPT_TLSNONE")]
		TLSNONE,
		[CCode (cname = "VNC_CONNECTION_AUTH_VENCRYPT_TLSVNC")]
		TLSVNC,
		[CCode (cname = "VNC_CONNECTION_AUTH_VENCRYPT_TLSPLAIN")]
		TLSPLAIN,
		[CCode (cname = "VNC_CONNECTION_AUTH_VENCRYPT_X509NONE")]
		X509NONE,
		[CCode (cname = "VNC_CONNECTION_AUTH_VENCRYPT_X509VNC")]
		X509VNC,
		[CCode (cname = "VNC_CONNECTION_AUTH_VENCRYPT_X509PLAIN")]
		X509PLAIN,
		[CCode (cname = "VNC_CONNECTION_AUTH_VENCRYPT_X509SASL")]
		X509SASL,
		[CCode (cname = "VNC_CONNECTION_AUTH_VENCRYPT_TLSSASL")]
		TLSSASL
	}
	[CCode (cheader_filename = "gvnc.h")]
	public enum ConnectionCredential {
		[CCode (cname = "VNC_CONNECTION_CREDENTIAL_PASSWORD")]
		PASSWORD,
		[CCode (cname = "VNC_CONNECTION_CREDENTIAL_USERNAME")]
		USERNAME,
		[CCode (cname = "VNC_CONNECTION_CREDENTIAL_CLIENTNAME")]
		CLIENTNAME
	}
	[CCode (cheader_filename = "gvnc.h")]
	public enum ConnectionEncoding {
		[CCode (cname = "VNC_CONNECTION_ENCODING_RAW")]
		RAW,
		[CCode (cname = "VNC_CONNECTION_ENCODING_COPY_RECT")]
		COPY_RECT,
		[CCode (cname = "VNC_CONNECTION_ENCODING_RRE")]
		RRE,
		[CCode (cname = "VNC_CONNECTION_ENCODING_CORRE")]
		CORRE,
		[CCode (cname = "VNC_CONNECTION_ENCODING_HEXTILE")]
		HEXTILE,
		[CCode (cname = "VNC_CONNECTION_ENCODING_TIGHT")]
		TIGHT,
		[CCode (cname = "VNC_CONNECTION_ENCODING_ZRLE")]
		ZRLE,
		[CCode (cname = "VNC_CONNECTION_ENCODING_TIGHT_JPEG0")]
		TIGHT_JPEG0,
		[CCode (cname = "VNC_CONNECTION_ENCODING_TIGHT_JPEG1")]
		TIGHT_JPEG1,
		[CCode (cname = "VNC_CONNECTION_ENCODING_TIGHT_JPEG2")]
		TIGHT_JPEG2,
		[CCode (cname = "VNC_CONNECTION_ENCODING_TIGHT_JPEG3")]
		TIGHT_JPEG3,
		[CCode (cname = "VNC_CONNECTION_ENCODING_TIGHT_JPEG4")]
		TIGHT_JPEG4,
		[CCode (cname = "VNC_CONNECTION_ENCODING_TIGHT_JPEG5")]
		TIGHT_JPEG5,
		[CCode (cname = "VNC_CONNECTION_ENCODING_TIGHT_JPEG6")]
		TIGHT_JPEG6,
		[CCode (cname = "VNC_CONNECTION_ENCODING_TIGHT_JPEG7")]
		TIGHT_JPEG7,
		[CCode (cname = "VNC_CONNECTION_ENCODING_TIGHT_JPEG8")]
		TIGHT_JPEG8,
		[CCode (cname = "VNC_CONNECTION_ENCODING_TIGHT_JPEG9")]
		TIGHT_JPEG9,
		[CCode (cname = "VNC_CONNECTION_ENCODING_DESKTOP_RESIZE")]
		DESKTOP_RESIZE,
		[CCode (cname = "VNC_CONNECTION_ENCODING_WMVi")]
		WMVI,
		[CCode (cname = "VNC_CONNECTION_ENCODING_CURSOR_POS")]
		CURSOR_POS,
		[CCode (cname = "VNC_CONNECTION_ENCODING_RICH_CURSOR")]
		RICH_CURSOR,
		[CCode (cname = "VNC_CONNECTION_ENCODING_XCURSOR")]
		XCURSOR,
		[CCode (cname = "VNC_CONNECTION_ENCODING_POINTER_CHANGE")]
		POINTER_CHANGE,
		[CCode (cname = "VNC_CONNECTION_ENCODING_EXT_KEY_EVENT")]
		EXT_KEY_EVENT
	}
	[CCode (cheader_filename = "gvnc.h", cname = "VNC_PADDING")]
	public const int PADDING;
	[CCode (cheader_filename = "gvnc.h", cname = "VNC_PADDING_LARGE")]
	public const int PADDING_LARGE;
	[CCode (cheader_filename = "gvnc.h")]
	public static bool util_check_version (int major, int minor, int micro);
	[CCode (cheader_filename = "gvnc.h")]
	public static bool util_get_debug ();
	[CCode (cheader_filename = "gvnc.h")]
	public static int util_get_version ();
	[CCode (cheader_filename = "gvnc.h")]
	public static unowned string util_get_version_string ();
	[CCode (cheader_filename = "gvnc.h")]
	public static void util_set_debug (bool enabled);
}
