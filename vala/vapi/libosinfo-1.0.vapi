/* libosinfo-1.0.vapi generated by vapigen, do not modify. */

[CCode (cprefix = "Osinfo", gir_namespace = "Libosinfo", gir_version = "1.0", lower_case_cprefix = "osinfo_")]
namespace Osinfo {
	[CCode (cheader_filename = "osinfo/osinfo.h", type_id = "osinfo_db_get_type ()")]
	public class Db : GLib.Object {
		[CCode (has_construct_function = false)]
		public Db ();
		public void add_deployment (Osinfo.Deployment deployment);
		public void add_device (Osinfo.Device device);
		public void add_os (Osinfo.Os os);
		public void add_platform (Osinfo.Platform platform);
		public unowned Osinfo.Deployment find_deployment (Osinfo.Os os, Osinfo.Platform platform);
		public unowned Osinfo.Deployment get_deployment (string id);
		public Osinfo.DeploymentList get_deployment_list ();
		public unowned Osinfo.Device get_device (string id);
		public Osinfo.DeviceList get_device_list ();
		public unowned Osinfo.Os get_os (string id);
		public Osinfo.OsList get_os_list ();
		public unowned Osinfo.Platform get_platform (string id);
		public Osinfo.PlatformList get_platform_list ();
		public unowned Osinfo.Os guess_os_from_media (Osinfo.Media media, out unowned Osinfo.Media matched_media);
		public unowned Osinfo.Os guess_os_from_tree (Osinfo.Tree tree, out unowned Osinfo.Tree matched_tree);
		public Osinfo.OsList unique_values_for_os_relationship (Osinfo.ProductRelationship relshp);
		public Osinfo.PlatformList unique_values_for_platform_relationship (Osinfo.ProductRelationship relshp);
		public GLib.List<weak string> unique_values_for_property_in_deployment (string propName);
		public GLib.List<weak string> unique_values_for_property_in_device (string propName);
		public GLib.List<weak string> unique_values_for_property_in_os (string propName);
		public GLib.List<weak string> unique_values_for_property_in_platform (string propName);
	}
	[CCode (cheader_filename = "osinfo/osinfo.h", type_id = "osinfo_deployment_get_type ()")]
	public class Deployment : Osinfo.Entity {
		[CCode (has_construct_function = false)]
		public Deployment (string id, Osinfo.Os os, Osinfo.Platform platform);
		public unowned Osinfo.DeviceLink add_device (Osinfo.Device dev);
		public Osinfo.DeviceLinkList get_device_links (Osinfo.Filter? filter);
		public Osinfo.DeviceList get_devices (Osinfo.Filter? filter);
		public unowned Osinfo.Os get_os ();
		public unowned Osinfo.Platform get_platform ();
		public unowned Osinfo.Device get_preferred_device (Osinfo.Filter? filter);
		public unowned Osinfo.DeviceLink get_preferred_device_link (Osinfo.Filter? filter);
		public Osinfo.Os os { get; construct; }
		public Osinfo.Platform platform { get; construct; }
	}
	[CCode (cheader_filename = "osinfo/osinfo.h", lower_case_csuffix = "deploymentlist", type_id = "osinfo_deploymentlist_get_type ()")]
	public class DeploymentList : Osinfo.List {
		[CCode (has_construct_function = false)]
		public DeploymentList ();
		public Osinfo.DeploymentList new_copy ();
		public Osinfo.DeploymentList new_filtered (Osinfo.Filter filter);
		public Osinfo.DeploymentList new_intersection (Osinfo.DeploymentList sourceTwo);
		public Osinfo.DeploymentList new_union (Osinfo.DeploymentList sourceTwo);
	}
	[CCode (cheader_filename = "osinfo/osinfo.h", type_id = "osinfo_device_get_type ()")]
	public class Device : Osinfo.Entity {
		[CCode (has_construct_function = false)]
		public Device (string id);
		public unowned string get_bus_type ();
		public unowned string get_class ();
		public unowned string get_name ();
		public unowned string get_product ();
		public unowned string get_product_id ();
		public unowned string get_vendor ();
		public unowned string get_vendor_id ();
	}
	[CCode (cheader_filename = "osinfo/osinfo.h", lower_case_csuffix = "devicelink", type_id = "osinfo_devicelink_get_type ()")]
	public class DeviceLink : Osinfo.Entity {
		[CCode (has_construct_function = false)]
		public DeviceLink (Osinfo.Device target);
		public unowned string get_driver ();
		public unowned Osinfo.Device get_target ();
		public Osinfo.Device target { get; construct; }
	}
	[CCode (cheader_filename = "osinfo/osinfo.h", lower_case_csuffix = "devicelinkfilter", type_id = "osinfo_devicelinkfilter_get_type ()")]
	public class DeviceLinkFilter : Osinfo.Filter {
		[CCode (has_construct_function = false)]
		public DeviceLinkFilter (Osinfo.Filter filter);
		public unowned Osinfo.Filter get_target_filter ();
		public Osinfo.Filter target_filter { get; construct; }
	}
	[CCode (cheader_filename = "osinfo/osinfo.h", lower_case_csuffix = "devicelinklist", type_id = "osinfo_devicelinklist_get_type ()")]
	public class DeviceLinkList : Osinfo.List {
		[CCode (has_construct_function = false)]
		public DeviceLinkList ();
		public Osinfo.DeviceList get_devices (Osinfo.Filter? filter);
		public Osinfo.DeviceLinkList new_copy ();
		public Osinfo.DeviceLinkList new_filtered (Osinfo.Filter filter);
		public Osinfo.DeviceLinkList new_intersection (Osinfo.DeviceLinkList sourceTwo);
		public Osinfo.DeviceLinkList new_union (Osinfo.DeviceLinkList sourceTwo);
	}
	[CCode (cheader_filename = "osinfo/osinfo.h", lower_case_csuffix = "devicelist", type_id = "osinfo_devicelist_get_type ()")]
	public class DeviceList : Osinfo.List {
		[CCode (has_construct_function = false)]
		public DeviceList ();
		public Osinfo.DeviceList new_copy ();
		public Osinfo.DeviceList new_filtered (Osinfo.Filter filter);
		public Osinfo.DeviceList new_intersection (Osinfo.DeviceList sourceTwo);
		public Osinfo.DeviceList new_union (Osinfo.DeviceList sourceTwo);
	}
	[CCode (cheader_filename = "osinfo/osinfo.h", type_id = "osinfo_entity_get_type ()")]
	public abstract class Entity : GLib.Object {
		[CCode (has_construct_function = false)]
		protected Entity ();
		public void add_param (string key, string value);
		public void clear_param (string key);
		public unowned string get_id ();
		public GLib.List<weak string> get_param_keys ();
		public unowned string get_param_value (string key);
		public GLib.List<weak string> get_param_value_list (string key);
		public void set_param (string key, string value);
		public string id { get; construct; }
	}
	[CCode (cheader_filename = "osinfo/osinfo.h", type_id = "osinfo_filter_get_type ()")]
	public class Filter : GLib.Object {
		[CCode (has_construct_function = false)]
		public Filter ();
		public void add_constraint (string propName, string propVal);
		public void clear_constraint (string propName);
		public void clear_constraints ();
		public GLib.List<weak string> get_constraint_keys ();
		public GLib.List<weak string> get_constraint_values (string propName);
		public virtual bool matches (Osinfo.Entity entity);
	}
	[CCode (cheader_filename = "osinfo/osinfo.h", type_id = "osinfo_list_get_type ()")]
	public abstract class List : GLib.Object {
		[CCode (has_construct_function = false)]
		protected List ();
		public void add (Osinfo.Entity entity);
		public void add_all (Osinfo.List source);
		public void add_filtered (Osinfo.List source, Osinfo.Filter filter);
		public void add_intersection (Osinfo.List sourceOne, Osinfo.List sourceTwo);
		public void add_union (Osinfo.List sourceOne, Osinfo.List sourceTwo);
		public unowned Osinfo.Entity find_by_id (string id);
		public GLib.Type get_element_type ();
		public GLib.List<weak Osinfo.Entity> get_elements ();
		public int get_length ();
		public unowned Osinfo.Entity get_nth (int idx);
		public GLib.Type element_type { get; construct; }
	}
	[CCode (cheader_filename = "osinfo/osinfo.h", type_id = "osinfo_loader_get_type ()")]
	public class Loader : GLib.Object {
		[CCode (has_construct_function = false)]
		public Loader ();
		public unowned Osinfo.Db get_db ();
		public void process_default_path () throws GLib.Error;
		public void process_local_path () throws GLib.Error;
		public void process_path (string path) throws GLib.Error;
		public void process_system_path () throws GLib.Error;
		public void process_uri (string uri) throws GLib.Error;
		public void process_user_path () throws GLib.Error;
	}
	[CCode (cheader_filename = "osinfo/osinfo.h", type_id = "osinfo_media_get_type ()")]
	public class Media : Osinfo.Entity {
		[CCode (has_construct_function = false)]
		public Media (string id, string architecture);
		public static Osinfo.Media create_from_location (string location, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public static async Osinfo.Media create_from_location_async (string location, int priority, GLib.Cancellable? cancellable) throws GLib.Error;
		public static GLib.Quark error_quark ();
		public unowned string get_application_id ();
		public unowned string get_architecture ();
		public unowned string get_initrd_path ();
		public bool get_installer ();
		public unowned string get_kernel_path ();
		public bool get_live ();
		public unowned string get_publisher_id ();
		public unowned string get_system_id ();
		public unowned string get_url ();
		public unowned string get_volume_id ();
		[NoAccessorMethod]
		public string application_id { owned get; set; }
		[NoAccessorMethod]
		public string architecture { owned get; set; }
		[NoAccessorMethod]
		public string initrd_path { owned get; set; }
		[NoAccessorMethod]
		public bool installer { get; set construct; }
		[NoAccessorMethod]
		public string kernel_path { owned get; set; }
		[NoAccessorMethod]
		public bool live { get; set construct; }
		[NoAccessorMethod]
		public string publisher_id { owned get; set; }
		[NoAccessorMethod]
		public string system_id { owned get; set; }
		[NoAccessorMethod]
		public string url { owned get; set; }
		[NoAccessorMethod]
		public string volume_id { owned get; set; }
	}
	[CCode (cheader_filename = "osinfo/osinfo.h", lower_case_csuffix = "medialist", type_id = "osinfo_medialist_get_type ()")]
	public class MediaList : Osinfo.List {
		[CCode (has_construct_function = false)]
		public MediaList ();
		public Osinfo.MediaList new_copy ();
		public Osinfo.MediaList new_filtered (Osinfo.Filter filter);
		public Osinfo.MediaList new_intersection (Osinfo.MediaList sourceTwo);
		public Osinfo.MediaList new_union (Osinfo.MediaList sourceTwo);
	}
	[CCode (cheader_filename = "osinfo/osinfo.h", type_id = "osinfo_os_get_type ()")]
	public class Os : Osinfo.Product {
		[CCode (has_construct_function = false)]
		public Os (string id);
		public unowned Osinfo.DeviceLink add_device (Osinfo.Device dev);
		public void add_media (Osinfo.Media media);
		public void add_minimum_resources (Osinfo.Resources resources);
		public void add_recommended_resources (Osinfo.Resources resources);
		public void add_tree (Osinfo.Tree tree);
		public Osinfo.DeviceList get_all_devices (Osinfo.Filter? filter);
		public Osinfo.DeviceLinkList get_device_links (Osinfo.Filter? filter);
		public Osinfo.DeviceList get_devices (Osinfo.Filter? filter);
		public Osinfo.DeviceList get_devices_by_property (string property, string value, bool inherited);
		public unowned string get_distro ();
		public unowned string get_family ();
		public Osinfo.MediaList get_media_list ();
		public Osinfo.ResourcesList get_minimum_resources ();
		public Osinfo.ResourcesList get_recommended_resources ();
		public Osinfo.TreeList get_tree_list ();
		public string distro { get; }
		public string family { get; }
	}
	[CCode (cheader_filename = "osinfo/osinfo.h", lower_case_csuffix = "oslist", type_id = "osinfo_oslist_get_type ()")]
	public class OsList : Osinfo.ProductList {
		[CCode (has_construct_function = false)]
		public OsList ();
		public Osinfo.OsList new_copy ();
		public Osinfo.OsList new_filtered (Osinfo.Filter filter);
		public Osinfo.OsList new_intersection (Osinfo.OsList sourceTwo);
		public Osinfo.OsList new_union (Osinfo.OsList sourceTwo);
	}
	[CCode (cheader_filename = "osinfo/osinfo.h", type_id = "osinfo_platform_get_type ()")]
	public class Platform : Osinfo.Product {
		[CCode (has_construct_function = false)]
		public Platform (string id);
		public unowned Osinfo.DeviceLink add_device (Osinfo.Device dev);
		public Osinfo.DeviceLinkList get_device_links (Osinfo.Filter? filter);
		public Osinfo.DeviceList get_devices (Osinfo.Filter? filter);
	}
	[CCode (cheader_filename = "osinfo/osinfo.h", lower_case_csuffix = "platformlist", type_id = "osinfo_platformlist_get_type ()")]
	public class PlatformList : Osinfo.ProductList {
		[CCode (has_construct_function = false)]
		public PlatformList ();
		public Osinfo.PlatformList new_copy ();
		public Osinfo.PlatformList new_filtered (Osinfo.Filter filter);
		public Osinfo.PlatformList new_intersection (Osinfo.PlatformList sourceTwo);
		public Osinfo.PlatformList new_union (Osinfo.PlatformList sourceTwo);
	}
	[CCode (cheader_filename = "osinfo/osinfo.h", type_id = "osinfo_product_get_type ()")]
	public abstract class Product : Osinfo.Entity {
		[CCode (has_construct_function = false)]
		protected Product ();
		public void add_related (Osinfo.ProductRelationship relshp, Osinfo.Product otherproduct);
		public unowned string get_codename ();
		public GLib.Date get_eol_date ();
		public unowned string get_eol_date_string ();
		public unowned string get_name ();
		public Osinfo.ProductList get_related (Osinfo.ProductRelationship relshp);
		public GLib.Date get_release_date ();
		public unowned string get_release_date_string ();
		public unowned string get_short_id ();
		public unowned string get_vendor ();
		public unowned string get_version ();
		public string codename { get; }
		public string name { get; }
		public string short_id { get; }
		public string vendor { get; }
		public string version { get; }
	}
	[CCode (cheader_filename = "osinfo/osinfo.h", lower_case_csuffix = "productfilter", type_id = "osinfo_productfilter_get_type ()")]
	public class ProductFilter : Osinfo.Filter {
		[CCode (has_construct_function = false)]
		public ProductFilter ();
		public int add_product_constraint (Osinfo.ProductRelationship relshp, Osinfo.Product product);
		public void add_support_date_constraint (GLib.Date when);
		public void clear_product_constraint (Osinfo.ProductRelationship relshp);
		public void clear_product_constraints ();
		public GLib.List<weak Osinfo.Product> get_product_constraint_values (Osinfo.ProductRelationship relshp);
	}
	[CCode (cheader_filename = "osinfo/osinfo.h", lower_case_csuffix = "productlist", type_id = "osinfo_productlist_get_type ()")]
	public class ProductList : Osinfo.List {
		[CCode (has_construct_function = false)]
		public ProductList ();
		public Osinfo.ProductList new_copy ();
		public Osinfo.ProductList new_filtered (Osinfo.Filter filter);
		public Osinfo.ProductList new_intersection (Osinfo.ProductList sourceTwo);
		public Osinfo.ProductList new_union (Osinfo.ProductList sourceTwo);
	}
	[CCode (cheader_filename = "osinfo/osinfo.h", type_id = "osinfo_resources_get_type ()")]
	public class Resources : Osinfo.Entity {
		[CCode (has_construct_function = false)]
		public Resources (string id, string architecture);
		public unowned string get_architecture ();
		public int64 get_cpu ();
		public int get_n_cpus ();
		public int64 get_ram ();
		public int64 get_storage ();
		public void set_cpu (int64 cpu);
		public void set_n_cpus (int n_cpus);
		public void set_ram (int64 ram);
		public void set_storage (int64 storage);
		public string architecture { get; construct; }
		public int64 cpu { get; set; }
		public int n_cpus { get; set; }
		public int64 ram { get; set; }
		public int64 storage { get; set; }
	}
	[CCode (cheader_filename = "osinfo/osinfo.h", lower_case_csuffix = "resourceslist", type_id = "osinfo_resourceslist_get_type ()")]
	public class ResourcesList : Osinfo.List {
		[CCode (has_construct_function = false)]
		public ResourcesList ();
		public Osinfo.ResourcesList new_copy ();
		public Osinfo.ResourcesList new_filtered (Osinfo.Filter filter);
		public Osinfo.ResourcesList new_intersection (Osinfo.ResourcesList sourceTwo);
		public Osinfo.ResourcesList new_union (Osinfo.ResourcesList sourceTwo);
	}
	[CCode (cheader_filename = "osinfo/osinfo.h", type_id = "osinfo_tree_get_type ()")]
	public class Tree : Osinfo.Entity {
		[CCode (has_construct_function = false)]
		public Tree (string id, string architecture);
		public static Osinfo.Tree create_from_location (string location, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public static async Osinfo.Tree create_from_location_async (string location, int priority, GLib.Cancellable? cancellable) throws GLib.Error;
		public static GLib.Quark error_quark ();
		public unowned string get_architecture ();
		public unowned string get_boot_iso_path ();
		public unowned string get_initrd_path ();
		public unowned string get_kernel_path ();
		public unowned string get_treeinfo_arch ();
		public unowned string get_treeinfo_family ();
		public unowned string get_treeinfo_variant ();
		public unowned string get_treeinfo_version ();
		public unowned string get_url ();
		[NoAccessorMethod]
		public string application_id { owned get; set; }
		[NoAccessorMethod]
		public string architecture { owned get; set; }
		[NoAccessorMethod]
		public string boot_iso_path { owned get; set; }
		[NoAccessorMethod]
		public string initrd_path { owned get; set; }
		[NoAccessorMethod]
		public string kernel_path { owned get; set; }
		[NoAccessorMethod]
		public string publisher_id { owned get; set; }
		[NoAccessorMethod]
		public string system_id { owned get; set; }
		[NoAccessorMethod]
		public string url { owned get; set; }
		[NoAccessorMethod]
		public string volume_id { owned get; set; }
	}
	[CCode (cheader_filename = "osinfo/osinfo.h", lower_case_csuffix = "treelist", type_id = "osinfo_treelist_get_type ()")]
	public class TreeList : Osinfo.List {
		[CCode (has_construct_function = false)]
		public TreeList ();
		public Osinfo.TreeList new_copy ();
		public Osinfo.TreeList new_filtered (Osinfo.Filter filter);
		public Osinfo.TreeList new_intersection (Osinfo.TreeList sourceTwo);
		public Osinfo.TreeList new_union (Osinfo.TreeList sourceTwo);
	}
	[CCode (cheader_filename = "osinfo/osinfo.h", cprefix = "OSINFO_MEDIA_ERROR_")]
	public enum MediaError {
		NO_DESCRIPTORS,
		NO_PVD,
		NO_SVD,
		INSUFFICIENT_METADATA,
		NOT_BOOTABLE
	}
	[CCode (cheader_filename = "osinfo/osinfo.h", cprefix = "OSINFO_PRODUCT_RELATIONSHIP_")]
	public enum ProductRelationship {
		DERIVES_FROM,
		UPGRADES,
		CLONES
	}
	[CCode (cheader_filename = "osinfo/osinfo.h", cname = "OSINFO_ARCHITECTURE_ALL")]
	public const string ARCHITECTURE_ALL;
	[CCode (cheader_filename = "osinfo/osinfo.h", cname = "OSINFO_DEVICELINK_PROP_DRIVER")]
	public const string DEVICELINK_PROP_DRIVER;
	[CCode (cheader_filename = "osinfo/osinfo.h", cname = "OSINFO_DEVICE_PROP_BUS_TYPE")]
	public const string DEVICE_PROP_BUS_TYPE;
	[CCode (cheader_filename = "osinfo/osinfo.h", cname = "OSINFO_DEVICE_PROP_CLASS")]
	public const string DEVICE_PROP_CLASS;
	[CCode (cheader_filename = "osinfo/osinfo.h", cname = "OSINFO_DEVICE_PROP_NAME")]
	public const string DEVICE_PROP_NAME;
	[CCode (cheader_filename = "osinfo/osinfo.h", cname = "OSINFO_DEVICE_PROP_PRODUCT")]
	public const string DEVICE_PROP_PRODUCT;
	[CCode (cheader_filename = "osinfo/osinfo.h", cname = "OSINFO_DEVICE_PROP_PRODUCT_ID")]
	public const string DEVICE_PROP_PRODUCT_ID;
	[CCode (cheader_filename = "osinfo/osinfo.h", cname = "OSINFO_DEVICE_PROP_VENDOR")]
	public const string DEVICE_PROP_VENDOR;
	[CCode (cheader_filename = "osinfo/osinfo.h", cname = "OSINFO_DEVICE_PROP_VENDOR_ID")]
	public const string DEVICE_PROP_VENDOR_ID;
	[CCode (cheader_filename = "osinfo/osinfo.h", cname = "OSINFO_ENTITY_PROP_ID")]
	public const string ENTITY_PROP_ID;
	[CCode (cheader_filename = "osinfo/osinfo.h", cname = "OSINFO_GIBIBYTES")]
	public const int GIBIBYTES;
	[CCode (cheader_filename = "osinfo/osinfo.h", cname = "OSINFO_KIBIBYTES")]
	public const int KIBIBYTES;
	[CCode (cheader_filename = "osinfo/osinfo.h", cname = "OSINFO_MEBIBYTES")]
	public const int MEBIBYTES;
	[CCode (cheader_filename = "osinfo/osinfo.h", cname = "OSINFO_MEDIA_PROP_APPLICATION_ID")]
	public const string MEDIA_PROP_APPLICATION_ID;
	[CCode (cheader_filename = "osinfo/osinfo.h", cname = "OSINFO_MEDIA_PROP_ARCHITECTURE")]
	public const string MEDIA_PROP_ARCHITECTURE;
	[CCode (cheader_filename = "osinfo/osinfo.h", cname = "OSINFO_MEDIA_PROP_INITRD")]
	public const string MEDIA_PROP_INITRD;
	[CCode (cheader_filename = "osinfo/osinfo.h", cname = "OSINFO_MEDIA_PROP_INSTALLER")]
	public const string MEDIA_PROP_INSTALLER;
	[CCode (cheader_filename = "osinfo/osinfo.h", cname = "OSINFO_MEDIA_PROP_KERNEL")]
	public const string MEDIA_PROP_KERNEL;
	[CCode (cheader_filename = "osinfo/osinfo.h", cname = "OSINFO_MEDIA_PROP_LIVE")]
	public const string MEDIA_PROP_LIVE;
	[CCode (cheader_filename = "osinfo/osinfo.h", cname = "OSINFO_MEDIA_PROP_PUBLISHER_ID")]
	public const string MEDIA_PROP_PUBLISHER_ID;
	[CCode (cheader_filename = "osinfo/osinfo.h", cname = "OSINFO_MEDIA_PROP_SYSTEM_ID")]
	public const string MEDIA_PROP_SYSTEM_ID;
	[CCode (cheader_filename = "osinfo/osinfo.h", cname = "OSINFO_MEDIA_PROP_URL")]
	public const string MEDIA_PROP_URL;
	[CCode (cheader_filename = "osinfo/osinfo.h", cname = "OSINFO_MEDIA_PROP_VOLUME_ID")]
	public const string MEDIA_PROP_VOLUME_ID;
	[CCode (cheader_filename = "osinfo/osinfo.h", cname = "OSINFO_MEGAHERTZ")]
	public const int MEGAHERTZ;
	[CCode (cheader_filename = "osinfo/osinfo.h", cname = "OSINFO_OS_PROP_DISTRO")]
	public const string OS_PROP_DISTRO;
	[CCode (cheader_filename = "osinfo/osinfo.h", cname = "OSINFO_OS_PROP_FAMILY")]
	public const string OS_PROP_FAMILY;
	[CCode (cheader_filename = "osinfo/osinfo.h", cname = "OSINFO_PRODUCT_PROP_CODENAME")]
	public const string PRODUCT_PROP_CODENAME;
	[CCode (cheader_filename = "osinfo/osinfo.h", cname = "OSINFO_PRODUCT_PROP_EOL_DATE")]
	public const string PRODUCT_PROP_EOL_DATE;
	[CCode (cheader_filename = "osinfo/osinfo.h", cname = "OSINFO_PRODUCT_PROP_NAME")]
	public const string PRODUCT_PROP_NAME;
	[CCode (cheader_filename = "osinfo/osinfo.h", cname = "OSINFO_PRODUCT_PROP_RELEASE_DATE")]
	public const string PRODUCT_PROP_RELEASE_DATE;
	[CCode (cheader_filename = "osinfo/osinfo.h", cname = "OSINFO_PRODUCT_PROP_SHORT_ID")]
	public const string PRODUCT_PROP_SHORT_ID;
	[CCode (cheader_filename = "osinfo/osinfo.h", cname = "OSINFO_PRODUCT_PROP_VENDOR")]
	public const string PRODUCT_PROP_VENDOR;
	[CCode (cheader_filename = "osinfo/osinfo.h", cname = "OSINFO_PRODUCT_PROP_VERSION")]
	public const string PRODUCT_PROP_VERSION;
	[CCode (cheader_filename = "osinfo/osinfo.h", cname = "OSINFO_RESOURCES_PROP_ARCHITECTURE")]
	public const string RESOURCES_PROP_ARCHITECTURE;
	[CCode (cheader_filename = "osinfo/osinfo.h", cname = "OSINFO_RESOURCES_PROP_CPU")]
	public const string RESOURCES_PROP_CPU;
	[CCode (cheader_filename = "osinfo/osinfo.h", cname = "OSINFO_RESOURCES_PROP_N_CPUS")]
	public const string RESOURCES_PROP_N_CPUS;
	[CCode (cheader_filename = "osinfo/osinfo.h", cname = "OSINFO_RESOURCES_PROP_RAM")]
	public const string RESOURCES_PROP_RAM;
	[CCode (cheader_filename = "osinfo/osinfo.h", cname = "OSINFO_RESOURCES_PROP_STORAGE")]
	public const string RESOURCES_PROP_STORAGE;
	[CCode (cheader_filename = "osinfo/osinfo.h", cname = "OSINFO_TREE_PROP_ARCHITECTURE")]
	public const string TREE_PROP_ARCHITECTURE;
	[CCode (cheader_filename = "osinfo/osinfo.h", cname = "OSINFO_TREE_PROP_BOOT_ISO")]
	public const string TREE_PROP_BOOT_ISO;
	[CCode (cheader_filename = "osinfo/osinfo.h", cname = "OSINFO_TREE_PROP_INITRD")]
	public const string TREE_PROP_INITRD;
	[CCode (cheader_filename = "osinfo/osinfo.h", cname = "OSINFO_TREE_PROP_KERNEL")]
	public const string TREE_PROP_KERNEL;
	[CCode (cheader_filename = "osinfo/osinfo.h", cname = "OSINFO_TREE_PROP_TREEINFO_ARCH")]
	public const string TREE_PROP_TREEINFO_ARCH;
	[CCode (cheader_filename = "osinfo/osinfo.h", cname = "OSINFO_TREE_PROP_TREEINFO_FAMILY")]
	public const string TREE_PROP_TREEINFO_FAMILY;
	[CCode (cheader_filename = "osinfo/osinfo.h", cname = "OSINFO_TREE_PROP_TREEINFO_VARIANT")]
	public const string TREE_PROP_TREEINFO_VARIANT;
	[CCode (cheader_filename = "osinfo/osinfo.h", cname = "OSINFO_TREE_PROP_TREEINFO_VERSION")]
	public const string TREE_PROP_TREEINFO_VERSION;
	[CCode (cheader_filename = "osinfo/osinfo.h", cname = "OSINFO_TREE_PROP_URL")]
	public const string TREE_PROP_URL;
}
