/* libosinfo-1.0.vapi generated by vapigen, do not modify. */

[CCode (cprefix = "Osinfo", gir_namespace = "Libosinfo", gir_version = "1.0", lower_case_cprefix = "osinfo_")]
namespace Osinfo {
	[CCode (cheader_filename = "osinfo/osinfo.h", type_id = "osinfo_avatar_format_get_type ()")]
	public class AvatarFormat : Osinfo.Entity {
		[CCode (has_construct_function = false)]
		public AvatarFormat ();
		public bool get_alpha ();
		public int get_height ();
		public GLib.List<weak string> get_mime_types ();
		public int get_width ();
		public bool alpha { get; }
		public int height { get; }
		public GLib.List<weak string> mime_types { owned get; }
		public int width { get; }
	}
	[CCode (cheader_filename = "osinfo/osinfo.h", type_id = "osinfo_datamap_get_type ()")]
	public class Datamap : Osinfo.Entity {
		[CCode (has_construct_function = false)]
		public Datamap (string id);
		public void insert (string inval, string outval);
		public unowned string lookup (string inval);
		public unowned string reverse_lookup (string outval);
	}
	[CCode (cheader_filename = "osinfo/osinfo.h", lower_case_csuffix = "datamaplist", type_id = "osinfo_datamaplist_get_type ()")]
	public class DatamapList : Osinfo.List {
		[CCode (has_construct_function = false)]
		public DatamapList ();
	}
	[CCode (cheader_filename = "osinfo/osinfo.h", type_id = "osinfo_db_get_type ()")]
	public class Db : GLib.Object {
		[CCode (has_construct_function = false)]
		public Db ();
		public void add_datamap (Osinfo.Datamap datamap);
		public void add_deployment (Osinfo.Deployment deployment);
		public void add_device (Osinfo.Device device);
		public void add_install_script (Osinfo.InstallScript script);
		public void add_os (Osinfo.Os os);
		public void add_platform (Osinfo.Platform platform);
		public unowned Osinfo.Deployment find_deployment (Osinfo.Os os, Osinfo.Platform platform);
		public unowned Osinfo.Datamap get_datamap (string id);
		public Osinfo.DatamapList get_datamap_list ();
		public unowned Osinfo.Deployment get_deployment (string id);
		public Osinfo.DeploymentList get_deployment_list ();
		public unowned Osinfo.Device get_device (string id);
		public Osinfo.DeviceList get_device_list ();
		public unowned Osinfo.InstallScript get_install_script (string id);
		public Osinfo.InstallScriptList get_install_script_list ();
		public unowned Osinfo.Os get_os (string id);
		public Osinfo.OsList get_os_list ();
		public unowned Osinfo.Platform get_platform (string id);
		public Osinfo.PlatformList get_platform_list ();
		[Deprecated (since = "0.2.3")]
		public unowned Osinfo.Os guess_os_from_media (Osinfo.Media media, out unowned Osinfo.Media matched_media);
		public unowned Osinfo.Os guess_os_from_tree (Osinfo.Tree tree, out unowned Osinfo.Tree matched_tree);
		public bool identify_media (Osinfo.Media media);
		public Osinfo.OsList unique_values_for_os_relationship (Osinfo.ProductRelationship relshp);
		public Osinfo.PlatformList unique_values_for_platform_relationship (Osinfo.ProductRelationship relshp);
		public GLib.List<weak string> unique_values_for_property_in_deployment (string propName);
		public GLib.List<weak string> unique_values_for_property_in_device (string propName);
		public GLib.List<weak string> unique_values_for_property_in_os (string propName);
		public GLib.List<weak string> unique_values_for_property_in_platform (string propName);
	}
	[CCode (cheader_filename = "osinfo/osinfo.h", type_id = "osinfo_deployment_get_type ()")]
	public class Deployment : Osinfo.Entity {
		[CCode (has_construct_function = false)]
		public Deployment (string id, Osinfo.Os os, Osinfo.Platform platform);
		public unowned Osinfo.DeviceLink add_device (Osinfo.Device dev);
		public Osinfo.DeviceLinkList get_device_links (Osinfo.Filter? filter);
		public Osinfo.DeviceList get_devices (Osinfo.Filter? filter);
		public unowned Osinfo.Os get_os ();
		public unowned Osinfo.Platform get_platform ();
		public unowned Osinfo.Device get_preferred_device (Osinfo.Filter? filter);
		public unowned Osinfo.DeviceLink get_preferred_device_link (Osinfo.Filter? filter);
		public Osinfo.Os os { get; construct; }
		public Osinfo.Platform platform { get; construct; }
	}
	[CCode (cheader_filename = "osinfo/osinfo.h", lower_case_csuffix = "deploymentlist", type_id = "osinfo_deploymentlist_get_type ()")]
	public class DeploymentList : Osinfo.List {
		[CCode (has_construct_function = false)]
		public DeploymentList ();
		[Deprecated (since = "0.2.2")]
		public Osinfo.DeploymentList new_copy ();
		[Deprecated (since = "0.2.2")]
		public Osinfo.DeploymentList new_filtered (Osinfo.Filter filter);
		[Deprecated (since = "0.2.2")]
		public Osinfo.DeploymentList new_intersection (Osinfo.DeploymentList sourceTwo);
		[Deprecated (since = "0.2.2")]
		public Osinfo.DeploymentList new_union (Osinfo.DeploymentList sourceTwo);
	}
	[CCode (cheader_filename = "osinfo/osinfo.h", type_id = "osinfo_device_get_type ()")]
	public class Device : Osinfo.Entity {
		[CCode (has_construct_function = false)]
		public Device (string id);
		public unowned string get_bus_type ();
		public unowned string get_class ();
		public unowned string get_name ();
		public unowned string get_product ();
		public unowned string get_product_id ();
		public unowned string get_subsystem ();
		public unowned string get_vendor ();
		public unowned string get_vendor_id ();
	}
	[CCode (cheader_filename = "osinfo/osinfo.h", type_id = "osinfo_device_driver_get_type ()")]
	public class DeviceDriver : Osinfo.Entity {
		[CCode (has_construct_function = false)]
		public DeviceDriver (string id);
		public void add_device (Osinfo.Device device);
		public unowned string get_architecture ();
		public unowned Osinfo.DeviceList get_devices ();
		public GLib.List<weak string> get_files ();
		public unowned string get_location ();
		public bool get_pre_installable ();
		public bool get_signed ();
	}
	[CCode (cheader_filename = "osinfo/osinfo.h", lower_case_csuffix = "device_driverlist", type_id = "osinfo_device_driverlist_get_type ()")]
	public class DeviceDriverList : Osinfo.List {
		[CCode (has_construct_function = false)]
		public DeviceDriverList ();
	}
	[CCode (cheader_filename = "osinfo/osinfo.h", lower_case_csuffix = "devicelink", type_id = "osinfo_devicelink_get_type ()")]
	public class DeviceLink : Osinfo.Entity {
		[CCode (has_construct_function = false)]
		public DeviceLink (Osinfo.Device target);
		public unowned string get_driver ();
		public unowned Osinfo.Device get_target ();
		public Osinfo.Device target { get; construct; }
	}
	[CCode (cheader_filename = "osinfo/osinfo.h", lower_case_csuffix = "devicelinkfilter", type_id = "osinfo_devicelinkfilter_get_type ()")]
	public class DeviceLinkFilter : Osinfo.Filter {
		[CCode (has_construct_function = false)]
		public DeviceLinkFilter (Osinfo.Filter filter);
		public unowned Osinfo.Filter get_target_filter ();
		public Osinfo.Filter target_filter { get; construct; }
	}
	[CCode (cheader_filename = "osinfo/osinfo.h", lower_case_csuffix = "devicelinklist", type_id = "osinfo_devicelinklist_get_type ()")]
	public class DeviceLinkList : Osinfo.List {
		[CCode (has_construct_function = false)]
		public DeviceLinkList ();
		public Osinfo.DeviceList get_devices (Osinfo.Filter? filter);
		[Deprecated (since = "0.2.2")]
		public Osinfo.DeviceLinkList new_copy ();
		[Deprecated (since = "0.2.2")]
		public Osinfo.DeviceLinkList new_filtered (Osinfo.Filter filter);
		[Deprecated (since = "0.2.2")]
		public Osinfo.DeviceLinkList new_intersection (Osinfo.DeviceLinkList sourceTwo);
		[Deprecated (since = "0.2.2")]
		public Osinfo.DeviceLinkList new_union (Osinfo.DeviceLinkList sourceTwo);
	}
	[CCode (cheader_filename = "osinfo/osinfo.h", lower_case_csuffix = "devicelist", type_id = "osinfo_devicelist_get_type ()")]
	public class DeviceList : Osinfo.List {
		[CCode (has_construct_function = false)]
		public DeviceList ();
		[Deprecated (since = "0.2.2")]
		public Osinfo.DeviceList new_copy ();
		[Deprecated (since = "0.2.2")]
		public Osinfo.DeviceList new_filtered (Osinfo.Filter filter);
		[Deprecated (since = "0.2.2")]
		public Osinfo.DeviceList new_intersection (Osinfo.DeviceList sourceTwo);
		[Deprecated (since = "0.2.2")]
		public Osinfo.DeviceList new_union (Osinfo.DeviceList sourceTwo);
	}
	[CCode (cheader_filename = "osinfo/osinfo.h", type_id = "osinfo_entity_get_type ()")]
	public abstract class Entity : GLib.Object {
		[CCode (has_construct_function = false)]
		protected Entity ();
		public void add_param (string key, string value);
		public void clear_param (string key);
		public unowned string get_id ();
		public GLib.List<weak string> get_param_keys ();
		public unowned string get_param_value (string key);
		public bool get_param_value_boolean (string key);
		public bool get_param_value_boolean_with_default (string key, bool default_value);
		public int get_param_value_enum (string key, GLib.Type enum_type, int default_value);
		public int64 get_param_value_int64 (string key);
		public int64 get_param_value_int64_with_default (string key, int64 default_value);
		public GLib.List<weak string> get_param_value_list (string key);
		public void set_param (string key, string value);
		public void set_param_boolean (string key, bool value);
		public void set_param_enum (string key, int value, GLib.Type enum_type);
		public void set_param_int64 (string key, int64 value);
		[NoAccessorMethod]
		public string id { owned get; set construct; }
	}
	[CCode (cheader_filename = "osinfo/osinfo.h", type_id = "osinfo_filter_get_type ()")]
	public class Filter : GLib.Object {
		[CCode (has_construct_function = false)]
		public Filter ();
		public void add_constraint (string propName, string propVal);
		public void clear_constraint (string propName);
		public void clear_constraints ();
		public GLib.List<weak string> get_constraint_keys ();
		public GLib.List<weak string> get_constraint_values (string propName);
		public virtual bool matches (Osinfo.Entity entity);
	}
	[CCode (cheader_filename = "osinfo/osinfo.h", type_id = "osinfo_install_config_get_type ()")]
	public class InstallConfig : Osinfo.Entity {
		[CCode (has_construct_function = false)]
		public InstallConfig (string id);
		public unowned string get_admin_password ();
		public unowned string get_avatar_disk ();
		public unowned string get_avatar_location ();
		public bool get_driver_signing ();
		public unowned string get_hardware_arch ();
		public unowned string get_hostname ();
		public unowned string get_l10n_keyboard ();
		public unowned string get_l10n_language ();
		public unowned string get_l10n_timezone ();
		public unowned string get_post_install_drivers_disk ();
		public unowned string get_post_install_drivers_location ();
		public unowned string get_pre_install_drivers_disk ();
		public unowned string get_pre_install_drivers_location ();
		public unowned string get_reg_login ();
		public unowned string get_reg_password ();
		public unowned string get_reg_product_key ();
		public unowned string get_script_disk ();
		public unowned string get_target_disk ();
		public bool get_user_administrator ();
		public bool get_user_autologin ();
		public unowned string get_user_login ();
		public unowned string get_user_password ();
		public unowned string get_user_realname ();
		public void set_admin_password (string password);
		public void set_avatar_disk (string disk);
		public void set_avatar_location (string location);
		public void set_driver_signing (bool signing);
		public void set_hardware_arch (string arch);
		public void set_hostname (string hostname);
		public void set_l10n_keyboard (string keyboard);
		public void set_l10n_language (string language);
		public void set_l10n_timezone (string timezone);
		public void set_post_install_drivers_disk (string disk);
		public void set_post_install_drivers_location (string location);
		public void set_pre_install_drivers_disk (string disk);
		public void set_pre_install_drivers_location (string location);
		public void set_reg_login (string name);
		public void set_reg_password (string password);
		public void set_reg_product_key (string key);
		public void set_script_disk (string disk);
		public void set_target_disk (string disk);
		public void set_user_administrator (bool admin);
		public void set_user_autologin (bool autologin);
		public void set_user_login (string username);
		public void set_user_password (string password);
		public void set_user_realname (string name);
	}
	[CCode (cheader_filename = "osinfo/osinfo.h", type_id = "osinfo_install_config_param_get_type ()")]
	public class InstallConfigParam : Osinfo.Entity {
		[CCode (has_construct_function = false)]
		public InstallConfigParam (string name);
		public unowned string get_name ();
		public Osinfo.InstallConfigParamPolicy get_policy ();
		public bool is_optional ();
		public bool is_required ();
		public void set_value_map (Osinfo.Datamap datamap);
		public string name { get; construct; }
		[NoAccessorMethod]
		public Osinfo.Datamap value_map { owned get; set; }
	}
	[CCode (cheader_filename = "osinfo/osinfo.h", lower_case_csuffix = "install_config_paramlist", type_id = "osinfo_install_config_paramlist_get_type ()")]
	public class InstallConfigParamList : Osinfo.List {
		[CCode (has_construct_function = false)]
		public InstallConfigParamList ();
	}
	[CCode (cheader_filename = "osinfo/osinfo.h", type_id = "osinfo_install_script_get_type ()")]
	public class InstallScript : Osinfo.Entity {
		[CCode (has_construct_function = false)]
		public InstallScript (string id);
		public void add_config_param (Osinfo.InstallConfigParam param);
		[CCode (has_construct_function = false)]
		public InstallScript.data (string id, string profile, string templateData);
		public string generate (Osinfo.Os os, Osinfo.InstallConfig config, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public async string generate_async (Osinfo.Os os, Osinfo.InstallConfig config, GLib.Cancellable? cancellable) throws GLib.Error;
		public string generate_command_line (Osinfo.Os os, Osinfo.InstallConfig config);
		public string generate_command_line_for_media (Osinfo.Media media, Osinfo.InstallConfig config);
		public string generate_for_media (Osinfo.Media media, Osinfo.InstallConfig config, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public async string generate_for_media_async (Osinfo.Media media, Osinfo.InstallConfig config, GLib.Cancellable? cancellable) throws GLib.Error;
		public GLib.File generate_output (Osinfo.Os os, Osinfo.InstallConfig config, GLib.File output_dir, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public async GLib.File generate_output_async (Osinfo.Os os, Osinfo.InstallConfig config, GLib.File output_dir, GLib.Cancellable? cancellable) throws GLib.Error;
		public GLib.File generate_output_for_media (Osinfo.Media media, Osinfo.InstallConfig config, GLib.File output_dir, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public async GLib.File generate_output_for_media_async (Osinfo.Media media, Osinfo.InstallConfig config, GLib.File output_dir, GLib.Cancellable? cancellable) throws GLib.Error;
		public unowned Osinfo.AvatarFormat get_avatar_format ();
		public bool get_can_post_install_drivers ();
		public bool get_can_pre_install_drivers ();
		public Osinfo.InstallConfigParam get_config_param (string name);
		public GLib.List<weak Osinfo.InstallScript> get_config_param_list ();
		public unowned Osinfo.InstallConfigParamList get_config_params ();
		public unowned string get_expected_filename ();
		public Osinfo.InstallScriptInjectionMethod get_injection_methods ();
		public bool get_needs_internet ();
		public unowned string get_output_filename ();
		public unowned string get_output_prefix ();
		public Osinfo.PathFormat get_path_format ();
		public Osinfo.DeviceDriverSigningReq get_post_install_drivers_signing_req ();
		public Osinfo.DeviceDriverSigningReq get_pre_install_drivers_signing_req ();
		public unowned string get_product_key_format ();
		public unowned string get_profile ();
		public unowned string get_template_data ();
		public unowned string get_template_uri ();
		public bool has_config_param (Osinfo.InstallConfigParam config_param);
		public bool has_config_param_name (string name);
		public void set_avatar_format (Osinfo.AvatarFormat avatar);
		public void set_output_prefix (string prefix);
		[CCode (has_construct_function = false)]
		public InstallScript.uri (string id, string profile, string templateUri);
		public Osinfo.AvatarFormat avatar_format { get; }
		public string product_key_format { get; }
		public string profile { get; construct; }
		public string template_data { get; construct; }
		public string template_uri { get; construct; }
	}
	[CCode (cheader_filename = "osinfo/osinfo.h", lower_case_csuffix = "install_scriptlist", type_id = "osinfo_install_scriptlist_get_type ()")]
	public class InstallScriptList : Osinfo.List {
		[CCode (has_construct_function = false)]
		public InstallScriptList ();
		[Deprecated (since = "0.2.2")]
		public Osinfo.InstallScriptList new_copy ();
		[Deprecated (since = "0.2.2")]
		public Osinfo.InstallScriptList new_filtered (Osinfo.Filter filter);
		[Deprecated (since = "0.2.2")]
		public Osinfo.InstallScriptList new_intersection (Osinfo.InstallScriptList sourceTwo);
		[Deprecated (since = "0.2.2")]
		public Osinfo.InstallScriptList new_union (Osinfo.InstallScriptList sourceTwo);
	}
	[CCode (cheader_filename = "osinfo/osinfo.h", type_id = "osinfo_list_get_type ()")]
	public abstract class List : GLib.Object {
		[CCode (has_construct_function = false)]
		protected List ();
		public void add (Osinfo.Entity entity);
		public void add_all (Osinfo.List source);
		public void add_filtered (Osinfo.List source, Osinfo.Filter filter);
		public void add_intersection (Osinfo.List sourceOne, Osinfo.List sourceTwo);
		public void add_union (Osinfo.List sourceOne, Osinfo.List sourceTwo);
		public unowned Osinfo.Entity find_by_id (string id);
		public GLib.Type get_element_type ();
		public GLib.List<weak Osinfo.Entity> get_elements ();
		public int get_length ();
		public unowned Osinfo.Entity get_nth (int idx);
		public Osinfo.List new_copy ();
		public Osinfo.List new_filtered (Osinfo.Filter filter);
		public Osinfo.List new_intersection (Osinfo.List sourceTwo);
		public Osinfo.List new_union (Osinfo.List sourceTwo);
		public GLib.Type element_type { get; construct; }
	}
	[CCode (cheader_filename = "osinfo/osinfo.h", type_id = "osinfo_loader_get_type ()")]
	public class Loader : GLib.Object {
		[CCode (has_construct_function = false)]
		public Loader ();
		public unowned Osinfo.Db get_db ();
		public void process_default_path () throws GLib.Error;
		public void process_local_path () throws GLib.Error;
		public void process_path (string path) throws GLib.Error;
		public void process_system_path () throws GLib.Error;
		public void process_uri (string uri) throws GLib.Error;
		public void process_user_path () throws GLib.Error;
	}
	[CCode (cheader_filename = "osinfo/osinfo.h", type_id = "osinfo_media_get_type ()")]
	public class Media : Osinfo.Entity {
		[CCode (has_construct_function = false)]
		public Media (string id, string architecture);
		public static Osinfo.Media create_from_location (string location, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public static async Osinfo.Media create_from_location_async (string location, int priority, GLib.Cancellable? cancellable) throws GLib.Error;
		public static GLib.Quark error_quark ();
		public unowned string get_application_id ();
		public unowned string get_architecture ();
		public unowned string get_initrd_path ();
		public bool get_installer ();
		public int get_installer_reboots ();
		public unowned string get_kernel_path ();
		public GLib.List<weak string> get_languages ();
		public bool get_live ();
		public Osinfo.Os get_os ();
		public Osinfo.OsVariantList get_os_variants ();
		public unowned string get_publisher_id ();
		public unowned string get_system_id ();
		public unowned string get_url ();
		public unowned string get_volume_id ();
		public int64 get_volume_size ();
		public void set_languages (GLib.List<string> languages);
		public void set_os (Osinfo.Os os);
		[NoAccessorMethod]
		public string application_id { owned get; set; }
		[NoAccessorMethod]
		public string architecture { owned get; set; }
		[NoAccessorMethod]
		public string initrd_path { owned get; set; }
		[NoAccessorMethod]
		public bool installer { get; set; }
		[NoAccessorMethod]
		public int installer_reboots { get; set; }
		[NoAccessorMethod]
		public string kernel_path { owned get; set; }
		public GLib.List<weak string> languages { owned get; }
		[NoAccessorMethod]
		public bool live { get; set; }
		public Osinfo.Os os { owned get; set; }
		[NoAccessorMethod]
		public string publisher_id { owned get; set; }
		[NoAccessorMethod]
		public string system_id { owned get; set; }
		[NoAccessorMethod]
		public string url { owned get; set; }
		[NoAccessorMethod]
		public string volume_id { owned get; set; }
		[NoAccessorMethod]
		public int64 volume_size { get; set; }
	}
	[CCode (cheader_filename = "osinfo/osinfo.h", lower_case_csuffix = "medialist", type_id = "osinfo_medialist_get_type ()")]
	public class MediaList : Osinfo.List {
		[CCode (has_construct_function = false)]
		public MediaList ();
		[Deprecated (since = "0.2.2")]
		public Osinfo.MediaList new_copy ();
		[Deprecated (since = "0.2.2")]
		public Osinfo.MediaList new_filtered (Osinfo.Filter filter);
		[Deprecated (since = "0.2.2")]
		public Osinfo.MediaList new_intersection (Osinfo.MediaList sourceTwo);
		[Deprecated (since = "0.2.2")]
		public Osinfo.MediaList new_union (Osinfo.MediaList sourceTwo);
	}
	[CCode (cheader_filename = "osinfo/osinfo.h", type_id = "osinfo_os_get_type ()")]
	public class Os : Osinfo.Product {
		[CCode (has_construct_function = false)]
		public Os (string id);
		public unowned Osinfo.DeviceLink add_device (Osinfo.Device dev);
		public void add_device_driver (Osinfo.DeviceDriver driver);
		public void add_install_script (Osinfo.InstallScript script);
		public void add_media (Osinfo.Media media);
		public void add_minimum_resources (Osinfo.Resources resources);
		public void add_recommended_resources (Osinfo.Resources resources);
		public void add_tree (Osinfo.Tree tree);
		public void add_variant (Osinfo.OsVariant variant);
		public Osinfo.InstallScript find_install_script (string profile);
		public Osinfo.DeviceList get_all_devices (Osinfo.Filter? filter);
		public unowned Osinfo.DeviceDriverList get_device_drivers ();
		public Osinfo.DeviceLinkList get_device_links (Osinfo.Filter? filter);
		public Osinfo.DeviceList get_devices (Osinfo.Filter? filter);
		public Osinfo.DeviceList get_devices_by_property (string property, string value, bool inherited);
		public unowned string get_distro ();
		public unowned string get_family ();
		public Osinfo.InstallScriptList get_install_script_list ();
		public Osinfo.MediaList get_media_list ();
		public Osinfo.ResourcesList get_minimum_resources ();
		public Osinfo.ResourcesList get_recommended_resources ();
		public Osinfo.ReleaseStatus get_release_status ();
		public Osinfo.TreeList get_tree_list ();
		public Osinfo.OsVariantList get_variant_list ();
		public string distro { get; }
		public string family { get; }
	}
	[CCode (cheader_filename = "osinfo/osinfo.h", lower_case_csuffix = "oslist", type_id = "osinfo_oslist_get_type ()")]
	public class OsList : Osinfo.ProductList {
		[CCode (has_construct_function = false)]
		public OsList ();
		[Deprecated (since = "0.2.2")]
		public Osinfo.OsList new_copy ();
		[Deprecated (since = "0.2.2")]
		public Osinfo.OsList new_filtered (Osinfo.Filter filter);
		[Deprecated (since = "0.2.2")]
		public Osinfo.OsList new_intersection (Osinfo.OsList sourceTwo);
		[Deprecated (since = "0.2.2")]
		public Osinfo.OsList new_union (Osinfo.OsList sourceTwo);
	}
	[CCode (cheader_filename = "osinfo/osinfo.h", type_id = "osinfo_os_variant_get_type ()")]
	public class OsVariant : Osinfo.Entity {
		[CCode (has_construct_function = false)]
		public OsVariant (string id);
		public unowned string get_name ();
		[NoAccessorMethod]
		public string name { owned get; set; }
	}
	[CCode (cheader_filename = "osinfo/osinfo.h", lower_case_csuffix = "os_variantlist", type_id = "osinfo_os_variantlist_get_type ()")]
	public class OsVariantList : Osinfo.List {
		[CCode (has_construct_function = false)]
		public OsVariantList ();
	}
	[CCode (cheader_filename = "osinfo/osinfo.h", type_id = "osinfo_platform_get_type ()")]
	public class Platform : Osinfo.Product {
		[CCode (has_construct_function = false)]
		public Platform (string id);
		public unowned Osinfo.DeviceLink add_device (Osinfo.Device dev);
		public Osinfo.DeviceList get_all_devices (Osinfo.Filter? filter);
		public Osinfo.DeviceLinkList get_device_links (Osinfo.Filter? filter);
		public Osinfo.DeviceList get_devices (Osinfo.Filter? filter);
	}
	[CCode (cheader_filename = "osinfo/osinfo.h", lower_case_csuffix = "platformlist", type_id = "osinfo_platformlist_get_type ()")]
	public class PlatformList : Osinfo.ProductList {
		[CCode (has_construct_function = false)]
		public PlatformList ();
		[Deprecated (since = "0.2.2")]
		public Osinfo.PlatformList new_copy ();
		[Deprecated (since = "0.2.2")]
		public Osinfo.PlatformList new_filtered (Osinfo.Filter filter);
		[Deprecated (since = "0.2.2")]
		public Osinfo.PlatformList new_intersection (Osinfo.PlatformList sourceTwo);
		[Deprecated (since = "0.2.2")]
		public Osinfo.PlatformList new_union (Osinfo.PlatformList sourceTwo);
	}
	[CCode (cheader_filename = "osinfo/osinfo.h", type_id = "osinfo_product_get_type ()")]
	public abstract class Product : Osinfo.Entity {
		[CCode (has_construct_function = false)]
		protected Product ();
		public void add_related (Osinfo.ProductRelationship relshp, Osinfo.Product otherproduct);
		public unowned string get_codename ();
		public GLib.Date? get_eol_date ();
		public unowned string get_eol_date_string ();
		public unowned string get_logo ();
		public unowned string get_name ();
		public Osinfo.ProductList get_related (Osinfo.ProductRelationship relshp);
		public GLib.Date? get_release_date ();
		public unowned string get_release_date_string ();
		public unowned string get_short_id ();
		public unowned string get_vendor ();
		public unowned string get_version ();
		public string codename { get; }
		public string logo { get; }
		public string name { get; }
		public string short_id { get; }
		public string vendor { get; }
		public string version { get; }
	}
	[CCode (cheader_filename = "osinfo/osinfo.h", lower_case_csuffix = "productfilter", type_id = "osinfo_productfilter_get_type ()")]
	public class ProductFilter : Osinfo.Filter {
		[CCode (has_construct_function = false)]
		public ProductFilter ();
		public int add_product_constraint (Osinfo.ProductRelationship relshp, Osinfo.Product product);
		public void add_support_date_constraint (GLib.Date when);
		public void clear_product_constraint (Osinfo.ProductRelationship relshp);
		public void clear_product_constraints ();
		public GLib.List<weak Osinfo.Product> get_product_constraint_values (Osinfo.ProductRelationship relshp);
	}
	[CCode (cheader_filename = "osinfo/osinfo.h", lower_case_csuffix = "productlist", type_id = "osinfo_productlist_get_type ()")]
	public class ProductList : Osinfo.List {
		[CCode (has_construct_function = false)]
		public ProductList ();
		[Deprecated (since = "0.2.2")]
		public Osinfo.ProductList new_copy ();
		[Deprecated (since = "0.2.2")]
		public Osinfo.ProductList new_filtered (Osinfo.Filter filter);
		[Deprecated (since = "0.2.2")]
		public Osinfo.ProductList new_intersection (Osinfo.ProductList sourceTwo);
		[Deprecated (since = "0.2.2")]
		public Osinfo.ProductList new_union (Osinfo.ProductList sourceTwo);
	}
	[CCode (cheader_filename = "osinfo/osinfo.h", type_id = "osinfo_resources_get_type ()")]
	public class Resources : Osinfo.Entity {
		[CCode (has_construct_function = false)]
		public Resources (string id, string architecture);
		public unowned string get_architecture ();
		public int64 get_cpu ();
		public int get_n_cpus ();
		public int64 get_ram ();
		public int64 get_storage ();
		public void set_cpu (int64 cpu);
		public void set_n_cpus (int n_cpus);
		public void set_ram (int64 ram);
		public void set_storage (int64 storage);
		public string architecture { get; construct; }
		public int64 cpu { get; set; }
		public int n_cpus { get; set; }
		public int64 ram { get; set; }
		public int64 storage { get; set; }
	}
	[CCode (cheader_filename = "osinfo/osinfo.h", lower_case_csuffix = "resourceslist", type_id = "osinfo_resourceslist_get_type ()")]
	public class ResourcesList : Osinfo.List {
		[CCode (has_construct_function = false)]
		public ResourcesList ();
		[Deprecated (since = "0.2.2")]
		public Osinfo.ResourcesList new_copy ();
		[Deprecated (since = "0.2.2")]
		public Osinfo.ResourcesList new_filtered (Osinfo.Filter filter);
		[Deprecated (since = "0.2.2")]
		public Osinfo.ResourcesList new_intersection (Osinfo.ResourcesList sourceTwo);
		[Deprecated (since = "0.2.2")]
		public Osinfo.ResourcesList new_union (Osinfo.ResourcesList sourceTwo);
	}
	[CCode (cheader_filename = "osinfo/osinfo.h", type_id = "osinfo_tree_get_type ()")]
	public class Tree : Osinfo.Entity {
		[CCode (has_construct_function = false)]
		public Tree (string id, string architecture);
		public static Osinfo.Tree create_from_location (string location, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public static async Osinfo.Tree create_from_location_async (string location, int priority, GLib.Cancellable? cancellable) throws GLib.Error;
		public static GLib.Quark error_quark ();
		public unowned string get_architecture ();
		public unowned string get_boot_iso_path ();
		public unowned string get_initrd_path ();
		public unowned string get_kernel_path ();
		public unowned string get_treeinfo_arch ();
		public unowned string get_treeinfo_family ();
		public unowned string get_treeinfo_variant ();
		public unowned string get_treeinfo_version ();
		public unowned string get_url ();
		[NoAccessorMethod]
		public string application_id { owned get; set; }
		[NoAccessorMethod]
		public string architecture { owned get; set; }
		[NoAccessorMethod]
		public string boot_iso_path { owned get; set; }
		[NoAccessorMethod]
		public string initrd_path { owned get; set; }
		[NoAccessorMethod]
		public string kernel_path { owned get; set; }
		[NoAccessorMethod]
		public string publisher_id { owned get; set; }
		[NoAccessorMethod]
		public string system_id { owned get; set; }
		[NoAccessorMethod]
		public string url { owned get; set; }
		[NoAccessorMethod]
		public string volume_id { owned get; set; }
	}
	[CCode (cheader_filename = "osinfo/osinfo.h", lower_case_csuffix = "treelist", type_id = "osinfo_treelist_get_type ()")]
	public class TreeList : Osinfo.List {
		[CCode (has_construct_function = false)]
		public TreeList ();
		[Deprecated (since = "0.2.2")]
		public Osinfo.TreeList new_copy ();
		[Deprecated (since = "0.2.2")]
		public Osinfo.TreeList new_filtered (Osinfo.Filter filter);
		[Deprecated (since = "0.2.2")]
		public Osinfo.TreeList new_intersection (Osinfo.TreeList sourceTwo);
		[Deprecated (since = "0.2.2")]
		public Osinfo.TreeList new_union (Osinfo.TreeList sourceTwo);
	}
	[CCode (cheader_filename = "osinfo/osinfo.h", cprefix = "OSINFO_DEVICE_DRIVER_SIGNING_REQ_", has_type_id = false)]
	public enum DeviceDriverSigningReq {
		NONE,
		STRICT,
		WARN
	}
	[CCode (cheader_filename = "osinfo/osinfo.h", cprefix = "OSINFO_INSTALL_CONFIG_PARAM_POLICY_", has_type_id = false)]
	public enum InstallConfigParamPolicy {
		NONE,
		REQUIRED,
		OPTIONAL
	}
	[CCode (cheader_filename = "osinfo/osinfo.h", cprefix = "OSINFO_INSTALL_SCRIPT_INJECTION_METHOD_", has_type_id = false)]
	[Flags]
	public enum InstallScriptInjectionMethod {
		CDROM,
		DISK,
		FLOPPY,
		INITRD,
		WEB
	}
	[CCode (cheader_filename = "osinfo/osinfo.h", cprefix = "OSINFO_MEDIA_ERROR_", has_type_id = false)]
	public enum MediaError {
		NO_DESCRIPTORS,
		NO_PVD,
		NO_SVD,
		INSUFFICIENT_METADATA,
		NOT_BOOTABLE
	}
	[CCode (cheader_filename = "osinfo/osinfo.h", cprefix = "OSINFO_PATH_FORMAT_", has_type_id = false)]
	public enum PathFormat {
		UNIX,
		DOS
	}
	[CCode (cheader_filename = "osinfo/osinfo.h", cprefix = "OSINFO_PRODUCT_FOREACH_FLAG_", has_type_id = false)]
	[Flags]
	public enum ProductForeachFlag {
		DERIVES_FROM,
		UPGRADES,
		CLONES
	}
	[CCode (cheader_filename = "osinfo/osinfo.h", cprefix = "OSINFO_PRODUCT_RELATIONSHIP_", has_type_id = false)]
	public enum ProductRelationship {
		DERIVES_FROM,
		UPGRADES,
		CLONES
	}
	[CCode (cheader_filename = "osinfo/osinfo.h", cprefix = "OSINFO_RELEASE_STATUS_", has_type_id = false)]
	public enum ReleaseStatus {
		RELEASED,
		SNAPSHOT,
		PRERELEASE
	}
	[CCode (cheader_filename = "osinfo/osinfo.h", instance_pos = 1.9)]
	public delegate void ProductForeach (Osinfo.Product product);
	[CCode (cheader_filename = "osinfo/osinfo.h", cname = "OSINFO_ARCHITECTURE_ALL")]
	public const string ARCHITECTURE_ALL;
	[CCode (cheader_filename = "osinfo/osinfo.h", cname = "OSINFO_AVATAR_FORMAT_PROP_ALPHA")]
	public const string AVATAR_FORMAT_PROP_ALPHA;
	[CCode (cheader_filename = "osinfo/osinfo.h", cname = "OSINFO_AVATAR_FORMAT_PROP_HEIGHT")]
	public const string AVATAR_FORMAT_PROP_HEIGHT;
	[CCode (cheader_filename = "osinfo/osinfo.h", cname = "OSINFO_AVATAR_FORMAT_PROP_MIME_TYPE")]
	public const string AVATAR_FORMAT_PROP_MIME_TYPE;
	[CCode (cheader_filename = "osinfo/osinfo.h", cname = "OSINFO_AVATAR_FORMAT_PROP_WIDTH")]
	public const string AVATAR_FORMAT_PROP_WIDTH;
	[CCode (cheader_filename = "osinfo/osinfo.h", cname = "OSINFO_DEVICELINK_PROP_DRIVER")]
	public const string DEVICELINK_PROP_DRIVER;
	[CCode (cheader_filename = "osinfo/osinfo.h", cname = "OSINFO_DEVICE_DRIVER_PROP_ARCHITECTURE")]
	public const string DEVICE_DRIVER_PROP_ARCHITECTURE;
	[CCode (cheader_filename = "osinfo/osinfo.h", cname = "OSINFO_DEVICE_DRIVER_PROP_DEVICE")]
	public const string DEVICE_DRIVER_PROP_DEVICE;
	[CCode (cheader_filename = "osinfo/osinfo.h", cname = "OSINFO_DEVICE_DRIVER_PROP_FILE")]
	public const string DEVICE_DRIVER_PROP_FILE;
	[CCode (cheader_filename = "osinfo/osinfo.h", cname = "OSINFO_DEVICE_DRIVER_PROP_LOCATION")]
	public const string DEVICE_DRIVER_PROP_LOCATION;
	[CCode (cheader_filename = "osinfo/osinfo.h", cname = "OSINFO_DEVICE_DRIVER_PROP_PRE_INSTALLABLE")]
	public const string DEVICE_DRIVER_PROP_PRE_INSTALLABLE;
	[CCode (cheader_filename = "osinfo/osinfo.h", cname = "OSINFO_DEVICE_DRIVER_PROP_SIGNED")]
	public const string DEVICE_DRIVER_PROP_SIGNED;
	[CCode (cheader_filename = "osinfo/osinfo.h", cname = "OSINFO_DEVICE_PROP_BUS_TYPE")]
	public const string DEVICE_PROP_BUS_TYPE;
	[CCode (cheader_filename = "osinfo/osinfo.h", cname = "OSINFO_DEVICE_PROP_CLASS")]
	public const string DEVICE_PROP_CLASS;
	[CCode (cheader_filename = "osinfo/osinfo.h", cname = "OSINFO_DEVICE_PROP_NAME")]
	public const string DEVICE_PROP_NAME;
	[CCode (cheader_filename = "osinfo/osinfo.h", cname = "OSINFO_DEVICE_PROP_PRODUCT")]
	public const string DEVICE_PROP_PRODUCT;
	[CCode (cheader_filename = "osinfo/osinfo.h", cname = "OSINFO_DEVICE_PROP_PRODUCT_ID")]
	public const string DEVICE_PROP_PRODUCT_ID;
	[CCode (cheader_filename = "osinfo/osinfo.h", cname = "OSINFO_DEVICE_PROP_SUBSYSTEM")]
	public const string DEVICE_PROP_SUBSYSTEM;
	[CCode (cheader_filename = "osinfo/osinfo.h", cname = "OSINFO_DEVICE_PROP_VENDOR")]
	public const string DEVICE_PROP_VENDOR;
	[CCode (cheader_filename = "osinfo/osinfo.h", cname = "OSINFO_DEVICE_PROP_VENDOR_ID")]
	public const string DEVICE_PROP_VENDOR_ID;
	[CCode (cheader_filename = "osinfo/osinfo.h", cname = "OSINFO_ENTITY_PROP_ID")]
	public const string ENTITY_PROP_ID;
	[CCode (cheader_filename = "osinfo/osinfo.h", cname = "OSINFO_GIBIBYTES")]
	public const int GIBIBYTES;
	[CCode (cheader_filename = "osinfo/osinfo.h", cname = "OSINFO_INSTALL_CONFIG_PARAM_PROP_DATAMAP")]
	public const string INSTALL_CONFIG_PARAM_PROP_DATAMAP;
	[CCode (cheader_filename = "osinfo/osinfo.h", cname = "OSINFO_INSTALL_CONFIG_PARAM_PROP_NAME")]
	public const string INSTALL_CONFIG_PARAM_PROP_NAME;
	[CCode (cheader_filename = "osinfo/osinfo.h", cname = "OSINFO_INSTALL_CONFIG_PARAM_PROP_POLICY")]
	public const string INSTALL_CONFIG_PARAM_PROP_POLICY;
	[CCode (cheader_filename = "osinfo/osinfo.h", cname = "OSINFO_INSTALL_CONFIG_PROP_ADMIN_PASSWORD")]
	public const string INSTALL_CONFIG_PROP_ADMIN_PASSWORD;
	[CCode (cheader_filename = "osinfo/osinfo.h", cname = "OSINFO_INSTALL_CONFIG_PROP_AVATAR_DISK")]
	public const string INSTALL_CONFIG_PROP_AVATAR_DISK;
	[CCode (cheader_filename = "osinfo/osinfo.h", cname = "OSINFO_INSTALL_CONFIG_PROP_AVATAR_LOCATION")]
	public const string INSTALL_CONFIG_PROP_AVATAR_LOCATION;
	[CCode (cheader_filename = "osinfo/osinfo.h", cname = "OSINFO_INSTALL_CONFIG_PROP_DRIVER_SIGNING")]
	public const string INSTALL_CONFIG_PROP_DRIVER_SIGNING;
	[CCode (cheader_filename = "osinfo/osinfo.h", cname = "OSINFO_INSTALL_CONFIG_PROP_HARDWARE_ARCH")]
	public const string INSTALL_CONFIG_PROP_HARDWARE_ARCH;
	[CCode (cheader_filename = "osinfo/osinfo.h", cname = "OSINFO_INSTALL_CONFIG_PROP_HOSTNAME")]
	public const string INSTALL_CONFIG_PROP_HOSTNAME;
	[CCode (cheader_filename = "osinfo/osinfo.h", cname = "OSINFO_INSTALL_CONFIG_PROP_L10N_KEYBOARD")]
	public const string INSTALL_CONFIG_PROP_L10N_KEYBOARD;
	[CCode (cheader_filename = "osinfo/osinfo.h", cname = "OSINFO_INSTALL_CONFIG_PROP_L10N_LANGUAGE")]
	public const string INSTALL_CONFIG_PROP_L10N_LANGUAGE;
	[CCode (cheader_filename = "osinfo/osinfo.h", cname = "OSINFO_INSTALL_CONFIG_PROP_L10N_TIMEZONE")]
	public const string INSTALL_CONFIG_PROP_L10N_TIMEZONE;
	[CCode (cheader_filename = "osinfo/osinfo.h", cname = "OSINFO_INSTALL_CONFIG_PROP_POST_INSTALL_DRIVERS_DISK")]
	public const string INSTALL_CONFIG_PROP_POST_INSTALL_DRIVERS_DISK;
	[CCode (cheader_filename = "osinfo/osinfo.h", cname = "OSINFO_INSTALL_CONFIG_PROP_POST_INSTALL_DRIVERS_LOCATION")]
	public const string INSTALL_CONFIG_PROP_POST_INSTALL_DRIVERS_LOCATION;
	[CCode (cheader_filename = "osinfo/osinfo.h", cname = "OSINFO_INSTALL_CONFIG_PROP_PRE_INSTALL_DRIVERS_DISK")]
	public const string INSTALL_CONFIG_PROP_PRE_INSTALL_DRIVERS_DISK;
	[CCode (cheader_filename = "osinfo/osinfo.h", cname = "OSINFO_INSTALL_CONFIG_PROP_PRE_INSTALL_DRIVERS_LOCATION")]
	public const string INSTALL_CONFIG_PROP_PRE_INSTALL_DRIVERS_LOCATION;
	[CCode (cheader_filename = "osinfo/osinfo.h", cname = "OSINFO_INSTALL_CONFIG_PROP_REG_LOGIN")]
	public const string INSTALL_CONFIG_PROP_REG_LOGIN;
	[CCode (cheader_filename = "osinfo/osinfo.h", cname = "OSINFO_INSTALL_CONFIG_PROP_REG_PASSWORD")]
	public const string INSTALL_CONFIG_PROP_REG_PASSWORD;
	[CCode (cheader_filename = "osinfo/osinfo.h", cname = "OSINFO_INSTALL_CONFIG_PROP_REG_PRODUCTKEY")]
	public const string INSTALL_CONFIG_PROP_REG_PRODUCTKEY;
	[CCode (cheader_filename = "osinfo/osinfo.h", cname = "OSINFO_INSTALL_CONFIG_PROP_SCRIPT_DISK")]
	public const string INSTALL_CONFIG_PROP_SCRIPT_DISK;
	[CCode (cheader_filename = "osinfo/osinfo.h", cname = "OSINFO_INSTALL_CONFIG_PROP_TARGET_DISK")]
	public const string INSTALL_CONFIG_PROP_TARGET_DISK;
	[CCode (cheader_filename = "osinfo/osinfo.h", cname = "OSINFO_INSTALL_CONFIG_PROP_USER_ADMIN")]
	public const string INSTALL_CONFIG_PROP_USER_ADMIN;
	[CCode (cheader_filename = "osinfo/osinfo.h", cname = "OSINFO_INSTALL_CONFIG_PROP_USER_AUTOLOGIN")]
	public const string INSTALL_CONFIG_PROP_USER_AUTOLOGIN;
	[CCode (cheader_filename = "osinfo/osinfo.h", cname = "OSINFO_INSTALL_CONFIG_PROP_USER_LOGIN")]
	public const string INSTALL_CONFIG_PROP_USER_LOGIN;
	[CCode (cheader_filename = "osinfo/osinfo.h", cname = "OSINFO_INSTALL_CONFIG_PROP_USER_PASSWORD")]
	public const string INSTALL_CONFIG_PROP_USER_PASSWORD;
	[CCode (cheader_filename = "osinfo/osinfo.h", cname = "OSINFO_INSTALL_CONFIG_PROP_USER_REALNAME")]
	public const string INSTALL_CONFIG_PROP_USER_REALNAME;
	[CCode (cheader_filename = "osinfo/osinfo.h", cname = "OSINFO_INSTALL_SCRIPT_PROFILE_DESKTOP")]
	public const string INSTALL_SCRIPT_PROFILE_DESKTOP;
	[CCode (cheader_filename = "osinfo/osinfo.h", cname = "OSINFO_INSTALL_SCRIPT_PROFILE_JEOS")]
	public const string INSTALL_SCRIPT_PROFILE_JEOS;
	[CCode (cheader_filename = "osinfo/osinfo.h", cname = "OSINFO_INSTALL_SCRIPT_PROP_CAN_POST_INSTALL_DRIVERS")]
	public const string INSTALL_SCRIPT_PROP_CAN_POST_INSTALL_DRIVERS;
	[CCode (cheader_filename = "osinfo/osinfo.h", cname = "OSINFO_INSTALL_SCRIPT_PROP_CAN_PRE_INSTALL_DRIVERS")]
	public const string INSTALL_SCRIPT_PROP_CAN_PRE_INSTALL_DRIVERS;
	[CCode (cheader_filename = "osinfo/osinfo.h", cname = "OSINFO_INSTALL_SCRIPT_PROP_EXPECTED_FILENAME")]
	public const string INSTALL_SCRIPT_PROP_EXPECTED_FILENAME;
	[CCode (cheader_filename = "osinfo/osinfo.h", cname = "OSINFO_INSTALL_SCRIPT_PROP_INJECTION_METHOD")]
	public const string INSTALL_SCRIPT_PROP_INJECTION_METHOD;
	[CCode (cheader_filename = "osinfo/osinfo.h", cname = "OSINFO_INSTALL_SCRIPT_PROP_NEEDS_INTERNET")]
	public const string INSTALL_SCRIPT_PROP_NEEDS_INTERNET;
	[CCode (cheader_filename = "osinfo/osinfo.h", cname = "OSINFO_INSTALL_SCRIPT_PROP_PATH_FORMAT")]
	public const string INSTALL_SCRIPT_PROP_PATH_FORMAT;
	[CCode (cheader_filename = "osinfo/osinfo.h", cname = "OSINFO_INSTALL_SCRIPT_PROP_POST_INSTALL_DRIVERS_SIGNING_REQ")]
	public const string INSTALL_SCRIPT_PROP_POST_INSTALL_DRIVERS_SIGNING_REQ;
	[CCode (cheader_filename = "osinfo/osinfo.h", cname = "OSINFO_INSTALL_SCRIPT_PROP_PRE_INSTALL_DRIVERS_SIGNING_REQ")]
	public const string INSTALL_SCRIPT_PROP_PRE_INSTALL_DRIVERS_SIGNING_REQ;
	[CCode (cheader_filename = "osinfo/osinfo.h", cname = "OSINFO_INSTALL_SCRIPT_PROP_PRODUCT_KEY_FORMAT")]
	public const string INSTALL_SCRIPT_PROP_PRODUCT_KEY_FORMAT;
	[CCode (cheader_filename = "osinfo/osinfo.h", cname = "OSINFO_INSTALL_SCRIPT_PROP_PROFILE")]
	public const string INSTALL_SCRIPT_PROP_PROFILE;
	[CCode (cheader_filename = "osinfo/osinfo.h", cname = "OSINFO_INSTALL_SCRIPT_PROP_TEMPLATE_DATA")]
	public const string INSTALL_SCRIPT_PROP_TEMPLATE_DATA;
	[CCode (cheader_filename = "osinfo/osinfo.h", cname = "OSINFO_INSTALL_SCRIPT_PROP_TEMPLATE_URI")]
	public const string INSTALL_SCRIPT_PROP_TEMPLATE_URI;
	[CCode (cheader_filename = "osinfo/osinfo.h", cname = "OSINFO_KIBIBYTES")]
	public const int KIBIBYTES;
	[CCode (cheader_filename = "osinfo/osinfo.h", cname = "OSINFO_MEBIBYTES")]
	public const int MEBIBYTES;
	[CCode (cheader_filename = "osinfo/osinfo.h", cname = "OSINFO_MEDIA_PROP_APPLICATION_ID")]
	public const string MEDIA_PROP_APPLICATION_ID;
	[CCode (cheader_filename = "osinfo/osinfo.h", cname = "OSINFO_MEDIA_PROP_ARCHITECTURE")]
	public const string MEDIA_PROP_ARCHITECTURE;
	[CCode (cheader_filename = "osinfo/osinfo.h", cname = "OSINFO_MEDIA_PROP_INITRD")]
	public const string MEDIA_PROP_INITRD;
	[CCode (cheader_filename = "osinfo/osinfo.h", cname = "OSINFO_MEDIA_PROP_INSTALLER")]
	public const string MEDIA_PROP_INSTALLER;
	[CCode (cheader_filename = "osinfo/osinfo.h", cname = "OSINFO_MEDIA_PROP_INSTALLER_REBOOTS")]
	public const string MEDIA_PROP_INSTALLER_REBOOTS;
	[CCode (cheader_filename = "osinfo/osinfo.h", cname = "OSINFO_MEDIA_PROP_KERNEL")]
	public const string MEDIA_PROP_KERNEL;
	[CCode (cheader_filename = "osinfo/osinfo.h", cname = "OSINFO_MEDIA_PROP_LANG")]
	public const string MEDIA_PROP_LANG;
	[CCode (cheader_filename = "osinfo/osinfo.h", cname = "OSINFO_MEDIA_PROP_LANG_MAP")]
	public const string MEDIA_PROP_LANG_MAP;
	[CCode (cheader_filename = "osinfo/osinfo.h", cname = "OSINFO_MEDIA_PROP_LANG_REGEX")]
	public const string MEDIA_PROP_LANG_REGEX;
	[CCode (cheader_filename = "osinfo/osinfo.h", cname = "OSINFO_MEDIA_PROP_LIVE")]
	public const string MEDIA_PROP_LIVE;
	[CCode (cheader_filename = "osinfo/osinfo.h", cname = "OSINFO_MEDIA_PROP_PUBLISHER_ID")]
	public const string MEDIA_PROP_PUBLISHER_ID;
	[CCode (cheader_filename = "osinfo/osinfo.h", cname = "OSINFO_MEDIA_PROP_SYSTEM_ID")]
	public const string MEDIA_PROP_SYSTEM_ID;
	[CCode (cheader_filename = "osinfo/osinfo.h", cname = "OSINFO_MEDIA_PROP_URL")]
	public const string MEDIA_PROP_URL;
	[CCode (cheader_filename = "osinfo/osinfo.h", cname = "OSINFO_MEDIA_PROP_VARIANT")]
	public const string MEDIA_PROP_VARIANT;
	[CCode (cheader_filename = "osinfo/osinfo.h", cname = "OSINFO_MEDIA_PROP_VOLUME_ID")]
	public const string MEDIA_PROP_VOLUME_ID;
	[CCode (cheader_filename = "osinfo/osinfo.h", cname = "OSINFO_MEDIA_PROP_VOLUME_SIZE")]
	public const string MEDIA_PROP_VOLUME_SIZE;
	[CCode (cheader_filename = "osinfo/osinfo.h", cname = "OSINFO_MEGAHERTZ")]
	public const int MEGAHERTZ;
	[CCode (cheader_filename = "osinfo/osinfo.h", cname = "OSINFO_OS_PROP_DISTRO")]
	public const string OS_PROP_DISTRO;
	[CCode (cheader_filename = "osinfo/osinfo.h", cname = "OSINFO_OS_PROP_FAMILY")]
	public const string OS_PROP_FAMILY;
	[CCode (cheader_filename = "osinfo/osinfo.h", cname = "OSINFO_OS_PROP_RELEASE_STATUS")]
	public const string OS_PROP_RELEASE_STATUS;
	[CCode (cheader_filename = "osinfo/osinfo.h", cname = "OSINFO_OS_VARIANT_PROP_NAME")]
	public const string OS_VARIANT_PROP_NAME;
	[CCode (cheader_filename = "osinfo/osinfo.h", cname = "OSINFO_PRODUCT_PROP_CODENAME")]
	public const string PRODUCT_PROP_CODENAME;
	[CCode (cheader_filename = "osinfo/osinfo.h", cname = "OSINFO_PRODUCT_PROP_EOL_DATE")]
	public const string PRODUCT_PROP_EOL_DATE;
	[CCode (cheader_filename = "osinfo/osinfo.h", cname = "OSINFO_PRODUCT_PROP_LOGO")]
	public const string PRODUCT_PROP_LOGO;
	[CCode (cheader_filename = "osinfo/osinfo.h", cname = "OSINFO_PRODUCT_PROP_NAME")]
	public const string PRODUCT_PROP_NAME;
	[CCode (cheader_filename = "osinfo/osinfo.h", cname = "OSINFO_PRODUCT_PROP_RELEASE_DATE")]
	public const string PRODUCT_PROP_RELEASE_DATE;
	[CCode (cheader_filename = "osinfo/osinfo.h", cname = "OSINFO_PRODUCT_PROP_SHORT_ID")]
	public const string PRODUCT_PROP_SHORT_ID;
	[CCode (cheader_filename = "osinfo/osinfo.h", cname = "OSINFO_PRODUCT_PROP_VENDOR")]
	public const string PRODUCT_PROP_VENDOR;
	[CCode (cheader_filename = "osinfo/osinfo.h", cname = "OSINFO_PRODUCT_PROP_VERSION")]
	public const string PRODUCT_PROP_VERSION;
	[CCode (cheader_filename = "osinfo/osinfo.h", cname = "OSINFO_RESOURCES_PROP_ARCHITECTURE")]
	public const string RESOURCES_PROP_ARCHITECTURE;
	[CCode (cheader_filename = "osinfo/osinfo.h", cname = "OSINFO_RESOURCES_PROP_CPU")]
	public const string RESOURCES_PROP_CPU;
	[CCode (cheader_filename = "osinfo/osinfo.h", cname = "OSINFO_RESOURCES_PROP_N_CPUS")]
	public const string RESOURCES_PROP_N_CPUS;
	[CCode (cheader_filename = "osinfo/osinfo.h", cname = "OSINFO_RESOURCES_PROP_RAM")]
	public const string RESOURCES_PROP_RAM;
	[CCode (cheader_filename = "osinfo/osinfo.h", cname = "OSINFO_RESOURCES_PROP_STORAGE")]
	public const string RESOURCES_PROP_STORAGE;
	[CCode (cheader_filename = "osinfo/osinfo.h", cname = "OSINFO_TREE_PROP_ARCHITECTURE")]
	public const string TREE_PROP_ARCHITECTURE;
	[CCode (cheader_filename = "osinfo/osinfo.h", cname = "OSINFO_TREE_PROP_BOOT_ISO")]
	public const string TREE_PROP_BOOT_ISO;
	[CCode (cheader_filename = "osinfo/osinfo.h", cname = "OSINFO_TREE_PROP_INITRD")]
	public const string TREE_PROP_INITRD;
	[CCode (cheader_filename = "osinfo/osinfo.h", cname = "OSINFO_TREE_PROP_KERNEL")]
	public const string TREE_PROP_KERNEL;
	[CCode (cheader_filename = "osinfo/osinfo.h", cname = "OSINFO_TREE_PROP_TREEINFO_ARCH")]
	public const string TREE_PROP_TREEINFO_ARCH;
	[CCode (cheader_filename = "osinfo/osinfo.h", cname = "OSINFO_TREE_PROP_TREEINFO_FAMILY")]
	public const string TREE_PROP_TREEINFO_FAMILY;
	[CCode (cheader_filename = "osinfo/osinfo.h", cname = "OSINFO_TREE_PROP_TREEINFO_VARIANT")]
	public const string TREE_PROP_TREEINFO_VARIANT;
	[CCode (cheader_filename = "osinfo/osinfo.h", cname = "OSINFO_TREE_PROP_TREEINFO_VERSION")]
	public const string TREE_PROP_TREEINFO_VERSION;
	[CCode (cheader_filename = "osinfo/osinfo.h", cname = "OSINFO_TREE_PROP_URL")]
	public const string TREE_PROP_URL;
}
