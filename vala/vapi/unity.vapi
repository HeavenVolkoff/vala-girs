/* unity.vapi generated by valac 0.16.0.2-de1cb, do not modify. */

namespace Unity {
	namespace IO {
		[CCode (cheader_filename = "unity.h")]
		public static string[] get_system_data_dirs ();
		[CCode (cheader_filename = "unity.h")]
		public static async GLib.FileInputStream? open_from_data_dirs (string filename) throws GLib.Error;
		[CCode (cheader_filename = "unity.h")]
		public static async GLib.FileInputStream? open_from_dirs (string filename, string[] dirs) throws GLib.Error;
		[CCode (cheader_filename = "unity.h")]
		public static async void read_stream_async (GLib.InputStream input, int io_priority = GLib.Priority.LOW, GLib.Cancellable? cancellable = null, out uint8[] data, out size_t size) throws GLib.IOError;
	}
	[CCode (cheader_filename = "unity.h")]
	public class ActivationResponse : GLib.InitiallyUnowned {
		public ActivationResponse (Unity.HandledType handled, string goto_uri = "");
		public string goto_uri { get; set construct; }
		public Unity.HandledType handled { get; construct; }
	}
	[CCode (cheader_filename = "unity.h")]
	public class AlbumPreview : Unity.Preview {
		public AlbumPreview (string name, string artist, string year, string[] genres, string album_cover, string primary_action_name, string primary_action_icon_hint, string primary_action_uri);
	}
	[CCode (cheader_filename = "unity.h")]
	public class AppInfoManager : GLib.Object {
		public void clear ();
		public unowned string[]? get_categories (string id);
		public static Unity.AppInfoManager get_default ();
		[Deprecated (replacement = "AppInfoManager.get_default")]
		public static Unity.AppInfoManager get_instance ();
		public unowned string[]? get_keywords (string id);
		public string? get_path (string id);
		public GLib.AppInfo? lookup (string id);
		public async GLib.AppInfo? lookup_async (string id) throws GLib.Error;
		public signal void changed (string id, GLib.AppInfo? new_appinfo);
	}
	[CCode (cheader_filename = "unity.h")]
	public class ApplicationPreview : Unity.Preview {
		public ApplicationPreview (string name, string version, string size, string license, string last_updated, float rating, uint n_ratings, string description, string icon_hint, string screenshot_icon_hint, string primary_action_name, string primary_action_icon_hint, string primary_action_uri);
	}
	[CCode (cheader_filename = "unity.h")]
	public class Category : GLib.Object {
		public Category (string name, GLib.Icon icon_hint, Unity.CategoryRenderer renderer = CategoryRenderer.VERTICAL_TILE);
		public Unity.CategoryRenderer default_renderer { get; construct; }
		public GLib.Icon? icon_hint { get; construct; }
		public string name { get; construct; }
	}
	[CCode (cheader_filename = "unity.h")]
	public class CheckOptionFilter : Unity.OptionsFilter {
		public CheckOptionFilter (string id, string display_name, GLib.Icon? icon_hint = null, bool collapsed = false);
	}
	[CCode (cheader_filename = "unity.h")]
	public class CheckOptionFilterCompact : Unity.OptionsFilter {
		public CheckOptionFilterCompact (string id, string display_name, GLib.Icon? icon_hint = null, bool collapsed = false);
	}
	[CCode (cheader_filename = "unity.h")]
	public abstract class Filter : GLib.Object {
		public Filter ();
		public bool collapsed { get; construct; }
		public string display_name { get; internal set construct; }
		public bool filtering { get; internal set construct; }
		public GLib.Icon? icon_hint { get; construct; }
		public string id { get; construct; }
		public Unity.FilterRenderer renderer { get; construct; }
		public bool visible { get; set construct; }
		public signal void changed ();
	}
	[CCode (cheader_filename = "unity.h")]
	public class FilterOption : GLib.Object {
		public FilterOption (string id, string display_name, GLib.Icon? icon_hint = null, bool active = false);
		public bool active { get; internal set construct; }
		public string display_name { get; construct; }
		public GLib.Icon icon_hint { get; construct; }
		public string id { get; construct; }
	}
	[CCode (cheader_filename = "unity.h")]
	public class GenericPreview : Unity.Preview {
		public GenericPreview (string name, uint date_modified, uint size, string type, string description, string large_icon_hint, string primary_action_name, string primary_action_icon_hint, string primary_action_uri, string secondary_action_name = "", string secondary_action_icon_hint = "", string secondary_action_uri = "", string tertiary_action_name = "", string tertiary_action_icon_hint = "", string tertiary_action_uri = "");
	}
	[CCode (cheader_filename = "unity.h")]
	public class Inspector : GLib.Object {
		public static unowned Unity.Inspector get_default ();
		public string? unity_bus_name { get; }
		public bool unity_running { get; }
	}
	[CCode (cheader_filename = "unity.h")]
	public class LauncherEntry : Dee.Serializable, GLib.Object {
		public static Unity.LauncherEntry get_for_app_uri (string app_uri);
		public static Unity.LauncherEntry get_for_desktop_file (string desktop_file);
		public static Unity.LauncherEntry get_for_desktop_id (string desktop_id);
		public string app_uri { get; set construct; }
		public int64 count { get; set; }
		public bool count_visible { get; set; }
		public double progress { get; set; }
		public bool progress_visible { get; set; }
		public Dbusmenu.Menuitem? quicklist { get; set; }
		public bool urgent { get; set; }
	}
	[CCode (cheader_filename = "unity.h")]
	public class LauncherFavorites : GLib.Object {
		public GLib.AppInfo[] enumerate_app_infos ();
		public string[] enumerate_ids ();
		public static unowned Unity.LauncherFavorites get_default ();
		public bool has_app_id (string app_id);
		public bool has_app_info (GLib.AppInfo appinfo);
		public GLib.AppInfo? lookup (string app_id);
		public signal void changed ();
	}
	[CCode (cheader_filename = "unity.h")]
	public class Lens : GLib.Object {
		public Lens (string dbus_path_, string id_);
		public void add_local_scope (Unity.Scope scope);
		public void export () throws GLib.IOError;
		public bool active { get; private set; }
		public GLib.List<Unity.Category> categories { get; set; }
		public string dbus_path { get; construct; }
		public bool exported { get; private set; }
		public GLib.List<Unity.Filter> filters { get; set; }
		public Unity.MergeStrategy global_merge_strategy { get; set; }
		public string id { get; construct; }
		public Unity.MergeStrategy merge_strategy { get; set; }
		public string search_hint { get; set; }
		public bool search_in_global { get; set; }
		public bool searching { get; private set; }
		public string sources_display_name { get; set construct; }
		public bool visible { get; set; }
	}
	[CCode (cheader_filename = "unity.h")]
	public class LensSearch : GLib.InitiallyUnowned {
		public LensSearch (string search_string, GLib.HashTable<string,GLib.Variant> hints, Dee.SerializableModel results_model);
		[CCode (cname = "unity_lens_search_finished")]
		public void emit_finished ();
		public bool equals (Unity.LensSearch? other);
		public void set_reply_hint (string key, GLib.Variant variant);
		public GLib.HashTable<string,GLib.Variant> hints { get; construct; }
		public Dee.SerializableModel results_model { get; construct; }
		public string search_string { get; construct; }
		[Signal (action = true)]
		public signal void finished ();
	}
	[CCode (cheader_filename = "unity.h")]
	public class MultiRangeFilter : Unity.OptionsFilter {
		public MultiRangeFilter (string id, string display_name, GLib.Icon? icon_hint = null, bool collapsed = false);
		public Unity.FilterOption? get_first_active ();
		public Unity.FilterOption? get_last_active ();
	}
	[CCode (cheader_filename = "unity.h")]
	public class MusicPlayer : GLib.Object {
		public MusicPlayer (string desktop);
		public bool add_playlist (Unity.Playlist p);
		public void edit_playlist_name (string id, string name);
		public void export ();
		public Unity.Playlist[] get_playlists ();
		public bool remove_playlist (Unity.Playlist p);
		public void unexport ();
		public GLib.AppInfo app_info { get; construct; }
		public bool can_go_next { get; set; }
		public bool can_go_previous { get; set; }
		public bool can_pause { get; set; }
		public bool can_play { get; set; }
		public Unity.Playlist current_playlist { get; set; }
		public Unity.TrackMetadata current_track { get; set; }
		public string desktop_file_name { get; construct; }
		public bool is_blacklisted { get; set; }
		public Unity.PlaybackState playback_state { get; set; }
		public Dbusmenu.Menuitem? player_menu { get; set; }
		public string title { get; set; }
		public Dbusmenu.Menuitem? track_menu { get; set; }
		public signal void activate_playlist (GLib.ObjectPath playlist_id);
		public signal void next ();
		public signal void play_pause ();
		public signal void previous ();
		public signal void raise ();
	}
	[CCode (cheader_filename = "unity.h")]
	public class NoPreview : Unity.Preview {
		public NoPreview ();
	}
	[CCode (cheader_filename = "unity.h")]
	public class OptionsFilter : Unity.Filter {
		public enum SortType {
			MANUAL,
			DISPLAY_NAME,
			ID
		}
		public GLib.List<Unity.FilterOption> options;
		public OptionsFilter ();
		public Unity.FilterOption add_option (string id, string display_name, GLib.Icon? icon_hint = null);
		public Unity.FilterOption? get_option (string id);
		public bool remove_option (string id);
		public Unity.OptionsFilter.SortType sort_type { get; set; }
	}
	[CCode (cheader_filename = "unity.h")]
	public class Playlist : GLib.Object {
		public Playlist (string id);
		public GLib.DateTime creation_date { get; set; }
		public GLib.Icon icon { get; set; }
		public string id { get; construct; }
		public GLib.DateTime last_play_date { get; set; }
		public GLib.DateTime modification_date { get; set; }
		public string name { get; set; }
	}
	[CCode (cheader_filename = "unity.h")]
	public abstract class Preview : GLib.InitiallyUnowned {
		public Preview ();
	}
	[CCode (cheader_filename = "unity.h")]
	public class RadioOptionFilter : Unity.OptionsFilter {
		public RadioOptionFilter (string id, string display_name, GLib.Icon? icon_hint = null, bool collapsed = false);
		public Unity.FilterOption? get_active_option ();
	}
	[CCode (cheader_filename = "unity.h")]
	public class RatingsFilter : Unity.Filter {
		public RatingsFilter (string id, string display_name, GLib.Icon? icon_hint = null, bool collapsed = false);
		public float rating { get; internal set construct; }
	}
	[CCode (cheader_filename = "unity.h")]
	public class Scope : GLib.Object {
		public Scope (string dbus_path_);
		public void export () throws GLib.IOError;
		public Unity.Filter? get_filter (string id);
		public void invalidate_search (Unity.SearchType search_type);
		public void queue_search_changed (Unity.SearchType search_type);
		public bool active { get; set; }
		public string dbus_path { get; construct; }
		public bool exported { get; private set; }
		public GLib.List<Unity.Filter> filters { get; }
		public Dee.SerializableModel global_results_model { get; }
		public Dee.SerializableModel results_model { get; }
		public bool search_in_global { get; set; }
		public Unity.OptionsFilter sources { get; internal set; }
		public signal Unity.ActivationResponse? activate_uri (string uri);
		public signal void active_sources_changed (string[] active_ids);
		public signal void filters_changed ();
		[Signal (detailed = true)]
		public signal string generate_search_key (Unity.LensSearch search);
		public signal Unity.Preview? preview_uri (string uri);
		public signal void search_changed (Unity.LensSearch search, Unity.SearchType search_type, GLib.Cancellable cancellable);
	}
	[CCode (cheader_filename = "unity.h")]
	public class TrackMetadata : GLib.Object {
		public TrackMetadata ();
		public string album { get; set; }
		public GLib.File art_location { get; set; }
		public string artist { get; set; }
		public string title { get; set; }
	}
	[CCode (cheader_filename = "unity.h")]
	public class TrackPreview : Unity.Preview {
		public TrackPreview (uint number, string title, string artist, string album, uint length, string[] genres, string album_cover, string primary_action_name, string primary_action_icon_hint, string primary_action_uri, string play_action_uri, string pause_action_uri);
	}
	[CCode (cheader_filename = "unity.h")]
	public interface MergeStrategy : GLib.Object {
		public abstract unowned Dee.ModelIter? merge_result (Dee.Model target, GLib.Variant[] row);
	}
	[CCode (cheader_filename = "unity.h")]
	public struct ActivePlaylistContainer {
		public bool valid;
		public Unity.PlaylistDetails details;
	}
	[CCode (cheader_filename = "unity.h")]
	public struct PlaylistDetails {
		public GLib.ObjectPath id;
		public string name;
		public string icon_name;
	}
	[CCode (cheader_filename = "unity.h")]
	public enum CategoryRenderer {
		VERTICAL_TILE,
		HORIZONTAL_TILE,
		LIST_TILE,
		FLOW
	}
	[CCode (cheader_filename = "unity.h")]
	public enum FilterRenderer {
		CHECK_OPTIONS,
		RADIO_OPTIONS,
		MULTIRANGE,
		RATINGS,
		CHECK_OPTIONS_COMPACT
	}
	[CCode (cheader_filename = "unity.h")]
	public enum HandledType {
		NOT_HANDLED,
		SHOW_DASH,
		HIDE_DASH,
		GOTO_DASH_URI
	}
	[CCode (cheader_filename = "unity.h")]
	public enum PlaybackState {
		PLAYING,
		PAUSED
	}
	[CCode (cheader_filename = "unity.h")]
	public enum SearchType {
		DEFAULT,
		GLOBAL,
		N_TYPES
	}
	[CCode (cheader_filename = "unity.h")]
	[DBus (name = "com.canonical.Unity.ScopeError")]
	public errordomain ScopeError {
		SEARCH_CANCELLED,
		UNKNOWN
	}
}
