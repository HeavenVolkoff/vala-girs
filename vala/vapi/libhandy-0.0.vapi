/* libhandy-0.0.vapi generated by vapigen, do not modify. */

[CCode (cprefix = "Hdy", gir_namespace = "Handy", gir_version = "0.0", lower_case_cprefix = "hdy_")]
namespace Hdy {
	[CCode (cheader_filename = "handy.h", type_id = "hdy_arrows_get_type ()")]
	public class Arrows : Gtk.DrawingArea, Atk.Implementor, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public Arrows ();
		public void animate ();
		public uint get_count ();
		public Hdy.ArrowsDirection get_direction ();
		public uint get_duration ();
		public void set_count (uint count);
		public void set_direction (Hdy.ArrowsDirection direction);
		public void set_duration (uint duration);
		public uint count { get; set; }
		public Hdy.ArrowsDirection direction { get; set; }
		public uint duration { get; set; }
	}
	[CCode (cheader_filename = "handy.h", type_id = "hdy_column_get_type ()")]
	public class Column : Gtk.Bin, Atk.Implementor, Gtk.Buildable {
		[CCode (has_construct_function = false)]
		public Column ();
		public int get_linear_growth_width ();
		public int get_maximum_width ();
		public void set_linear_growth_width (int linear_growth_width);
		public void set_maximum_width (int maximum_width);
		public int linear_growth_width { get; set; }
		public int maximum_width { get; set; }
	}
	[CCode (cheader_filename = "handy.h", type_id = "hdy_dialer_get_type ()")]
	public class Dialer : Gtk.EventBox, Atk.Implementor, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public Dialer ();
		public void clear_number ();
		public unowned string get_number ();
		public bool get_show_action_buttons ();
		public void set_number (string number);
		public void set_show_action_buttons (bool show);
		[NoAccessorMethod]
		public uint column_spacing { get; set; }
		public string number { get; set; }
		[NoAccessorMethod]
		public uint row_spacing { get; set; }
		public bool show_action_buttons { get; set; }
		public signal void deleted ();
		public virtual signal void submitted (string number);
		public signal void symbol_clicked (char button);
	}
	[CCode (cheader_filename = "handy.h", type_id = "hdy_dialer_button_get_type ()")]
	public class DialerButton : Gtk.Button, Atk.Implementor, Gtk.Actionable, Gtk.Activatable, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public DialerButton (string? symbols);
		public int get_digit ();
		public unowned string get_symbols ();
		public int digit { get; }
		[NoAccessorMethod]
		public string symbols { owned get; set; }
	}
	[CCode (cheader_filename = "handy.h", type_id = "hdy_dialer_cycle_button_get_type ()")]
	public class DialerCycleButton : Hdy.DialerButton, Atk.Implementor, Gtk.Actionable, Gtk.Activatable, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public DialerCycleButton (string symbols);
		public unichar get_current_symbol ();
		public int get_cycle_timeout ();
		public bool is_cycling ();
		public void set_cycle_timeout (int timeout);
		public void stop_cycle ();
		public int cycle_timeout { get; set construct; }
		public virtual signal void cycle_end ();
		public virtual signal void cycle_start ();
	}
	[CCode (cheader_filename = "handy.h", type_id = "hdy_header_group_get_type ()")]
	public class HeaderGroup : GLib.Object, Gtk.Buildable {
		[CCode (has_construct_function = false)]
		public HeaderGroup ();
		public void add_header_bar (Gtk.HeaderBar header_bar);
		public void set_focus (Gtk.Widget child);
		[NoAccessorMethod]
		public bool focus { get; set; }
	}
	[CCode (cheader_filename = "handy.h", type_id = "hdy_leaflet_get_type ()")]
	public class Leaflet : Gtk.Container, Atk.Implementor, Gtk.Buildable, Gtk.Orientable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public Leaflet ();
		public uint get_child_transition_duration ();
		public bool get_child_transition_running ();
		public Hdy.LeafletChildTransitionType get_child_transition_type ();
		public Hdy.Fold get_fold ();
		public bool get_homogeneous (Hdy.Fold fold, Gtk.Orientation orientation);
		public bool get_interpolate_size ();
		public uint get_mode_transition_duration ();
		public Hdy.LeafletModeTransitionType get_mode_transition_type ();
		public unowned Gtk.Widget get_visible_child ();
		public unowned string get_visible_child_name ();
		public void set_child_transition_duration (uint duration);
		public void set_child_transition_type (Hdy.LeafletChildTransitionType transition);
		public void set_homogeneous (Hdy.Fold fold, Gtk.Orientation orientation, bool homogeneous);
		public void set_interpolate_size (bool interpolate_size);
		public void set_mode_transition_duration (uint duration);
		public void set_mode_transition_type (Hdy.LeafletModeTransitionType transition);
		public void set_visible_child (Gtk.Widget visible_child);
		public void set_visible_child_name (string name);
		[NoWrapper]
		public virtual void todo ();
		public uint child_transition_duration { get; set; }
		public bool child_transition_running { get; }
		public Hdy.LeafletChildTransitionType child_transition_type { get; set; }
		public Hdy.Fold fold { get; }
		[NoAccessorMethod]
		public bool folded { get; }
		[NoAccessorMethod]
		public bool hhomogeneous_folded { get; set; }
		[NoAccessorMethod]
		public bool hhomogeneous_unfolded { get; set; }
		public bool interpolate_size { get; set; }
		public uint mode_transition_duration { get; set; }
		public Hdy.LeafletModeTransitionType mode_transition_type { get; set; }
		[NoAccessorMethod]
		public bool vhomogeneous_folded { get; set; }
		[NoAccessorMethod]
		public bool vhomogeneous_unfolded { get; set; }
		public Gtk.Widget visible_child { get; set; }
		public string visible_child_name { get; set; }
	}
	[CCode (cheader_filename = "handy.h", type_id = "hdy_title_bar_get_type ()")]
	public class TitleBar : Gtk.Bin, Atk.Implementor, Gtk.Buildable {
		[CCode (has_construct_function = false)]
		public TitleBar ();
		public bool get_selection_mode ();
		public void set_selection_mode (bool selection_mode);
		public bool selection_mode { get; set; }
	}
	[CCode (cheader_filename = "handy.h", cprefix = "HDY_ARROWS_DIRECTION_", type_id = "hdy_arrows_direction_get_type ()")]
	public enum ArrowsDirection {
		UP,
		DOWN,
		LEFT,
		RIGHT
	}
	[CCode (cheader_filename = "handy.h", cprefix = "HDY_FOLD_", type_id = "hdy_fold_get_type ()")]
	public enum Fold {
		UNFOLDED,
		FOLDED
	}
	[CCode (cheader_filename = "handy.h", cprefix = "HDY_LEAFLET_CHILD_TRANSITION_TYPE_", type_id = "hdy_leaflet_child_transition_type_get_type ()")]
	public enum LeafletChildTransitionType {
		NONE,
		CROSSFADE,
		SLIDE,
		OVER
	}
	[CCode (cheader_filename = "handy.h", cprefix = "HDY_LEAFLET_MODE_TRANSITION_TYPE_", type_id = "hdy_leaflet_mode_transition_type_get_type ()")]
	public enum LeafletModeTransitionType {
		NONE,
		SLIDE
	}
	[CCode (cheader_filename = "handy.h")]
	public static long string_utf8_len (GLib.StringBuilder string);
	[CCode (cheader_filename = "handy.h")]
	public static unowned GLib.StringBuilder string_utf8_truncate (GLib.StringBuilder string, size_t len);
}
