/* gtk-vnc-2.0.vapi generated by vapigen, do not modify. */

[CCode (cprefix = "Vnc", gir_namespace = "GtkVnc", gir_version = "2.0", lower_case_cprefix = "vnc_")]
namespace Vnc {
	[CCode (cheader_filename = "gtk-vnc.h", type_id = "vnc_cairo_framebuffer_get_type ()")]
	public class CairoFramebuffer : Vnc.BaseFramebuffer, Vnc.Framebuffer {
		[CCode (has_construct_function = false)]
		public CairoFramebuffer (uint16 width, uint16 height, Vnc.PixelFormat remoteFormat);
		public Cairo.Surface get_surface ();
		public void* surface { get; construct; }
	}
	[CCode (cheader_filename = "gtk-vnc.h", type_id = "vnc_display_get_type ()")]
	public class Display : Gtk.DrawingArea, Atk.Implementor, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public Display ();
		public void client_cut_text (string text);
		public void close ();
		public void force_grab (bool enable);
		public Vnc.DisplayDepthColor get_depth ();
		public bool get_force_size ();
		public Vnc.GrabSequence get_grab_keys ();
		public int get_height ();
		public bool get_keyboard_grab ();
		public bool get_lossy_encoding ();
		public static GLib.OptionEntry get_option_entries ();
		public Gdk.Pixbuf get_pixbuf ();
		public bool get_pointer_grab ();
		public bool get_pointer_local ();
		public bool get_read_only ();
		public bool get_scaling ();
		public bool get_shared_flag ();
		public int get_width ();
		public bool is_open ();
		public bool is_pointer_absolute ();
		public bool open_fd (int fd);
		public bool open_host (string host, string port);
		public bool request_update ();
		public void send_keys (uint keyvals, int nkeyvals);
		public void send_keys_ex (uint keyvals, int nkeyvals, Vnc.DisplayKeyEvent kind);
		public void send_pointer (int x, int y, int button_mask);
		public bool set_credential (int type, string data);
		public void set_depth (Vnc.DisplayDepthColor depth);
		public void set_force_size (bool enable);
		public void set_grab_keys (Vnc.GrabSequence seq);
		public void set_keyboard_grab (bool enable);
		public void set_lossy_encoding (bool enable);
		public void set_pointer_grab (bool enable);
		public void set_pointer_local (bool enable);
		public void set_read_only (bool enable);
		public bool set_scaling (bool enable);
		public void set_shared_flag (bool shared);
		public Vnc.DisplayDepthColor depth { get; set construct; }
		public bool force_size { get; set construct; }
		[NoAccessorMethod]
		public bool grab_keyboard { get; set construct; }
		public Vnc.GrabSequence grab_keys { owned get; set construct; }
		[NoAccessorMethod]
		public bool grab_pointer { get; set construct; }
		public int height { get; }
		[NoAccessorMethod]
		public bool local_pointer { get; set construct; }
		public bool lossy_encoding { get; set construct; }
		public string name { get; }
		public bool read_only { get; set construct; }
		[NoAccessorMethod]
		public bool scaling { get; set construct; }
		public bool shared_flag { get; set construct; }
		public int width { get; }
		public virtual signal void vnc_auth_credential (GLib.ValueArray credList);
		public signal void vnc_auth_failure (string object);
		public signal void vnc_auth_unsupported (uint object);
		public signal void vnc_bell ();
		public virtual signal void vnc_connected ();
		public signal void vnc_desktop_resize (int object, int p0);
		public virtual signal void vnc_disconnected ();
		public virtual signal void vnc_initialized ();
		public signal void vnc_keyboard_grab ();
		public signal void vnc_keyboard_ungrab ();
		public signal void vnc_pointer_grab ();
		public signal void vnc_pointer_ungrab ();
		public signal void vnc_server_cut_text (string object);
	}
	[CCode (cheader_filename = "gtk-vnc.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "vnc_grab_sequence_get_type ()")]
	[Compact]
	public class GrabSequence {
		public uint keysyms;
		public uint nkeysyms;
		[CCode (has_construct_function = false)]
		public GrabSequence (uint nkeysyms, uint keysyms);
		public string as_string ();
		public Vnc.GrabSequence copy ();
		public void free ();
		[CCode (has_construct_function = false)]
		public GrabSequence.from_string (string str);
	}
	[CCode (cheader_filename = "gtk-vnc.h")]
	public enum DisplayCredential {
		[CCode (cname = "VNC_DISPLAY_CREDENTIAL_PASSWORD")]
		PASSWORD,
		[CCode (cname = "VNC_DISPLAY_CREDENTIAL_USERNAME")]
		USERNAME,
		[CCode (cname = "VNC_DISPLAY_CREDENTIAL_CLIENTNAME")]
		CLIENTNAME
	}
	[CCode (cheader_filename = "gtk-vnc.h")]
	public enum DisplayDepthColor {
		[CCode (cname = "VNC_DISPLAY_DEPTH_COLOR_DEFAULT")]
		DEFAULT,
		[CCode (cname = "VNC_DISPLAY_DEPTH_COLOR_FULL")]
		FULL,
		[CCode (cname = "VNC_DISPLAY_DEPTH_COLOR_MEDIUM")]
		MEDIUM,
		[CCode (cname = "VNC_DISPLAY_DEPTH_COLOR_LOW")]
		LOW,
		[CCode (cname = "VNC_DISPLAY_DEPTH_COLOR_ULTRA_LOW")]
		ULTRA_LOW
	}
	[CCode (cheader_filename = "gtk-vnc.h")]
	public enum DisplayKeyEvent {
		[CCode (cname = "VNC_DISPLAY_KEY_EVENT_PRESS")]
		PRESS,
		[CCode (cname = "VNC_DISPLAY_KEY_EVENT_RELEASE")]
		RELEASE,
		[CCode (cname = "VNC_DISPLAY_KEY_EVENT_CLICK")]
		CLICK
	}
}
