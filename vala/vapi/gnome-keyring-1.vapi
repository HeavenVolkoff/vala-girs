/* gnome-keyring-1.vapi generated by vapigen-0.16, do not modify. */

[CCode (cprefix = "GnomeKeyring", gir_namespace = "GnomeKeyring", gir_version = "1.0", lower_case_cprefix = "gnome_keyring_")]
namespace GnomeKeyring {
	[CCode (cheader_filename = "gnome-keyring.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "gnome_keyring_access_control_get_type ()")]
	[Compact]
	public class AccessControl {
		[CCode (has_construct_function = false)]
		public AccessControl (GnomeKeyring.ApplicationRef application, GnomeKeyring.AccessType types_allowed);
		public GnomeKeyring.AccessControl copy ();
		public void free ();
	}
	[CCode (cheader_filename = "gnome-keyring.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "gnome_keyring_application_ref_get_type ()")]
	[Compact]
	public class ApplicationRef {
		[CCode (has_construct_function = false)]
		public ApplicationRef ();
		public GnomeKeyring.ApplicationRef copy ();
		public void free ();
	}
	[CCode (cheader_filename = "gnome-keyring.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "gnome_keyring_attribute_get_type ()")]
	[Compact]
	public class Attribute {
		public string name;
		public GnomeKeyring.AttributeType type;
		[CCode (cname = "value.integer")]
		public uint32 value_integer;
		[CCode (cname = "value.string")]
		public weak string value_string;
		public unowned string get_string ();
		public uint32 get_uint32 ();
	}
	[CCode (cheader_filename = "gnome-keyring.h")]
	public class AttributeList : GLib.Array<GnomeKeyring.Attribute> {
		public AttributeList ();
		public void append_string (string name, string value);
		public void append_uint32 (string name, uint32 value);
		public GnomeKeyring.AttributeList copy ();
		public GLib.List<GnomeKeyring.Attribute> to_glist ();
	}
	[CCode (cheader_filename = "gnome-keyring.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "gnome_keyring_found_get_type ()")]
	[Compact]
	public class Found {
		public GnomeKeyring.AttributeList attributes;
		public uint item_id;
		public string keyring;
		public string secret;
		public GnomeKeyring.Found copy ();
		public void free ();
		public static void list_free (GLib.List<GnomeKeyring.Found> found_list);
	}
	[CCode (cheader_filename = "gnome-keyring.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "gnome_keyring_info_get_type ()")]
	[Compact]
	public class Info {
		public GnomeKeyring.Info copy ();
		public void free ();
		public long get_ctime ();
		public bool get_is_locked ();
		public bool get_lock_on_idle ();
		public uint32 get_lock_timeout ();
		public long get_mtime ();
		public void set_lock_on_idle (bool value);
		public void set_lock_timeout (uint32 value);
	}
	[CCode (cheader_filename = "gnome-keyring.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "gnome_keyring_item_info_get_gtype ()")]
	[Compact]
	public class ItemInfo {
		[CCode (has_construct_function = false)]
		public ItemInfo ();
		public GnomeKeyring.ItemInfo copy ();
		public void free ();
		public long get_ctime ();
		public string get_display_name ();
		public long get_mtime ();
		public string get_secret ();
		public static GnomeKeyring.ItemType get_type (GnomeKeyring.ItemInfo item_info);
		public void set_display_name (string value);
		public void set_secret (string value);
		public void set_type (GnomeKeyring.ItemType type);
	}
	[CCode (cheader_filename = "gnome-keyring.h", has_type_id = false)]
	public struct NetworkPasswordData {
		public string keyring;
		public uint32 item_id;
		public string protocol;
		public string server;
		public string object;
		public string authtype;
		public uint32 port;
		public string user;
		public string domain;
		public string password;
	}
	[CCode (cheader_filename = "gnome-keyring.h", has_type_id = false)]
	public struct PasswordSchema {
		public GnomeKeyring.ItemType item_type;
		[CCode (array_length = false, array_null_terminated = true)]
		public GnomeKeyring.PasswordSchemaAttribute[] attributes;
	}
	[CCode (cheader_filename = "gnome-keyring.h", has_type_id = false)]
	public struct PasswordSchemaAttribute {
		public string name;
		public GnomeKeyring.AttributeType type;
	}
	[CCode (cheader_filename = "gnome-keyring.h", cprefix = "GNOME_KEYRING_ACCESS_")]
	public enum AccessRestriction {
		ASK,
		DENY,
		ALLOW
	}
	[CCode (cheader_filename = "gnome-keyring.h", cprefix = "GNOME_KEYRING_ACCESS_")]
	[Flags]
	public enum AccessType {
		READ,
		WRITE,
		REMOVE
	}
	[CCode (cheader_filename = "gnome-keyring.h", cprefix = "GNOME_KEYRING_ATTRIBUTE_TYPE_")]
	public enum AttributeType {
		STRING,
		UINT32
	}
	[CCode (cheader_filename = "gnome-keyring.h", cprefix = "GNOME_KEYRING_ITEM_INFO_")]
	[Flags]
	public enum ItemInfoFlags {
		BASICS,
		SECRET
	}
	[CCode (cheader_filename = "gnome-keyring.h", cprefix = "GNOME_KEYRING_ITEM_")]
	public enum ItemType {
		GENERIC_SECRET,
		NETWORK_PASSWORD,
		NOTE,
		CHAINED_KEYRING_PASSWORD,
		ENCRYPTION_KEY_PASSWORD,
		PK_STORAGE,
		LAST_TYPE
	}
	[CCode (cheader_filename = "gnome-keyring.h", cprefix = "GNOME_KEYRING_RESULT_")]
	public enum Result {
		OK,
		DENIED,
		NO_KEYRING_DAEMON,
		ALREADY_UNLOCKED,
		NO_SUCH_KEYRING,
		BAD_ARGUMENTS,
		IO_ERROR,
		CANCELLED,
		KEYRING_ALREADY_EXISTS,
		NO_MATCH;
		public static unowned string to_message (GnomeKeyring.Result res);
	}
	[CCode (cheader_filename = "gnome-keyring.h", instance_pos = 1.9)]
	public delegate void OperationDoneCallback (GnomeKeyring.Result result);
	[CCode (cheader_filename = "gnome-keyring.h", instance_pos = 2.9)]
	public delegate void OperationGetAttributesCallback (GnomeKeyring.Result result, GnomeKeyring.AttributeList attributes);
	[CCode (cheader_filename = "gnome-keyring.h", instance_pos = 2.9)]
	public delegate void OperationGetIntCallback (GnomeKeyring.Result result, uint32 val);
	[CCode (cheader_filename = "gnome-keyring.h", instance_pos = 2.9)]
	public delegate void OperationGetItemInfoCallback (GnomeKeyring.Result result, GnomeKeyring.ItemInfo info);
	[CCode (cheader_filename = "gnome-keyring.h", instance_pos = 2.9)]
	public delegate void OperationGetKeyringInfoCallback (GnomeKeyring.Result result, GnomeKeyring.Info info);
	[CCode (cheader_filename = "GnomeKeyring-1.0.h", instance_pos = 2.9)]
	public delegate void OperationGetListCallback<T> (GnomeKeyring.Result result, GLib.List<T> list);
	[CCode (cheader_filename = "gnome-keyring.h", instance_pos = 2.9)]
	public delegate void OperationGetStringCallback (GnomeKeyring.Result result, string? string);
	[CCode (cheader_filename = "gnome-keyring.h", cname = "GNOME_KEYRING_ITEM_APPLICATION_SECRET")]
	public const int ITEM_APPLICATION_SECRET;
	[CCode (cheader_filename = "gnome-keyring.h", cname = "GNOME_KEYRING_ITEM_INFO_ALL")]
	public const int ITEM_INFO_ALL;
	[CCode (cheader_filename = "gnome-keyring.h", cname = "GNOME_KEYRING_ITEM_TYPE_MASK")]
	public const int ITEM_TYPE_MASK;
	[CCode (cheader_filename = "gnome-keyring.h", cname = "GNOME_KEYRING_SESSION")]
	public const string SESSION;
	[CCode (cheader_filename = "gnome-keyring.h")]
	public static GLib.List<GnomeKeyring.AccessControl> acl_copy (GLib.List<GnomeKeyring.AccessControl> list);
	[CCode (cheader_filename = "gnome-keyring.h")]
	public static void acl_free (GLib.List<GnomeKeyring.AccessControl> acl);
	[CCode (cheader_filename = "gnome-keyring.h")]
	public static void cancel_request (void* request);
	[CCode (cheader_filename = "gnome-keyring.h")]
	public static GnomeKeyring.Result change_password_sync (string keyring, string? original, string? password);
	[CCode (cheader_filename = "gnome-keyring.h")]
	public static GnomeKeyring.Result create_sync (string keyring_name, string? password);
	[CCode (cheader_filename = "gnome-keyring.h")]
	public static GnomeKeyring.Result daemon_prepare_environment_sync ();
	[CCode (cheader_filename = "gnome-keyring.h")]
	public static GnomeKeyring.Result daemon_set_display_sync (string display);
	[CCode (cheader_filename = "gnome-keyring.h")]
	public static GnomeKeyring.Result delete_sync (string keyring);
	[CCode (cheader_filename = "gnome-keyring.h")]
	public static GnomeKeyring.Result find_items_sync (GnomeKeyring.ItemType type, GnomeKeyring.AttributeList attributes, out GLib.List<GnomeKeyring.Found> found);
	[CCode (cheader_filename = "gnome-keyring.h")]
	public static GnomeKeyring.Result find_network_password_sync (string? user, string? domain, string? server, string? object, string? protocol, string? authtype, uint32 port, out GLib.List<GnomeKeyring.NetworkPasswordData> results);
	[CCode (cheader_filename = "gnome-keyring.h")]
	public static void free_password (string password);
	[CCode (cheader_filename = "gnome-keyring.h")]
	public static GnomeKeyring.Result get_default_keyring_sync (out string keyring);
	[CCode (cheader_filename = "gnome-keyring.h")]
	public static GnomeKeyring.Result get_info_sync (string? keyring, out GnomeKeyring.Info info);
	[CCode (cheader_filename = "gnome-keyring.h")]
	public static bool is_available ();
	[CCode (cheader_filename = "gnome-keyring.h")]
	public static GnomeKeyring.AccessType item_ac_get_access_type (GnomeKeyring.AccessControl ac);
	[CCode (cheader_filename = "gnome-keyring.h")]
	public static string item_ac_get_display_name (GnomeKeyring.AccessControl ac);
	[CCode (cheader_filename = "gnome-keyring.h")]
	public static string item_ac_get_path_name (GnomeKeyring.AccessControl ac);
	[CCode (cheader_filename = "gnome-keyring.h")]
	public static void item_ac_set_access_type (GnomeKeyring.AccessControl ac, GnomeKeyring.AccessType value);
	[CCode (cheader_filename = "gnome-keyring.h")]
	public static void item_ac_set_display_name (GnomeKeyring.AccessControl ac, string value);
	[CCode (cheader_filename = "gnome-keyring.h")]
	public static void item_ac_set_path_name (GnomeKeyring.AccessControl ac, string value);
	[CCode (cheader_filename = "gnome-keyring.h")]
	public static GnomeKeyring.Result item_create_sync (string? keyring, GnomeKeyring.ItemType type, string display_name, GnomeKeyring.AttributeList attributes, string secret, bool update_if_exists, out uint32 item_id);
	[CCode (cheader_filename = "gnome-keyring.h")]
	public static GnomeKeyring.Result item_delete_sync (string? keyring, uint32 id);
	[CCode (cheader_filename = "gnome-keyring.h")]
	public static GnomeKeyring.Result item_get_acl_sync (string? keyring, uint32 id, out GLib.List<GnomeKeyring.AccessControl> acl);
	[CCode (cheader_filename = "gnome-keyring.h")]
	public static GnomeKeyring.Result item_get_attributes_sync (string? keyring, uint32 id, GnomeKeyring.AttributeList attributes);
	[CCode (cheader_filename = "gnome-keyring.h")]
	public static GnomeKeyring.Result item_get_info_full_sync (string? keyring, uint32 id, uint32 flags, out GnomeKeyring.ItemInfo info);
	[CCode (cheader_filename = "gnome-keyring.h")]
	public static GnomeKeyring.Result item_get_info_sync (string? keyring, uint32 id, out GnomeKeyring.ItemInfo info);
	[CCode (cheader_filename = "gnome-keyring.h")]
	public static GnomeKeyring.Result item_grant_access_rights_sync (string? keyring, string display_name, string full_path, uint32 id, GnomeKeyring.AccessType rights);
	[CCode (cheader_filename = "gnome-keyring.h")]
	public static GnomeKeyring.Result item_set_acl_sync (string? keyring, uint32 id, GLib.List<GnomeKeyring.AccessControl> acl);
	[CCode (cheader_filename = "gnome-keyring.h")]
	public static GnomeKeyring.Result item_set_attributes_sync (string? keyring, uint32 id, GnomeKeyring.AttributeList attributes);
	[CCode (cheader_filename = "gnome-keyring.h")]
	public static GnomeKeyring.Result item_set_info_sync (string? keyring, uint32 id, GnomeKeyring.ItemInfo info);
	[CCode (cheader_filename = "gnome-keyring.h")]
	public static GnomeKeyring.Result list_item_ids_sync (string? keyring, out GLib.List<uint> ids);
	[CCode (cheader_filename = "gnome-keyring.h")]
	public static GnomeKeyring.Result list_keyring_names_sync (out GLib.List<string> keyrings);
	[CCode (cheader_filename = "gnome-keyring.h")]
	public static GnomeKeyring.Result lock_all_sync ();
	[CCode (cheader_filename = "gnome-keyring.h")]
	public static GnomeKeyring.Result lock_sync (string? keyring);
	[CCode (cheader_filename = "gnome-keyring.h")]
	public static void network_password_free (GnomeKeyring.NetworkPasswordData? data);
	[CCode (cheader_filename = "gnome-keyring.h")]
	public static void network_password_list_free (GLib.List<GnomeKeyring.NetworkPasswordData> list);
	[CCode (cheader_filename = "gnome-keyring.h")]
	public static void* set_default_keyring (string keyring, owned GnomeKeyring.OperationDoneCallback callback);
	[CCode (cheader_filename = "gnome-keyring.h")]
	public static GnomeKeyring.Result set_default_keyring_sync (string keyring);
	[CCode (cheader_filename = "gnome-keyring.h")]
	public static GnomeKeyring.Result set_info_sync (string? keyring, GnomeKeyring.Info info);
	[CCode (cheader_filename = "gnome-keyring.h")]
	public static GnomeKeyring.Result set_network_password_sync (string? keyring, string? user, string? domain, string? server, string? object, string? protocol, string? authtype, uint32 port, string password, out uint32 item_id);
	[CCode (cheader_filename = "gnome-keyring.h")]
	public static void string_list_free (GLib.List<string> strings);
	[CCode (cheader_filename = "gnome-keyring.h")]
	public static GnomeKeyring.Result unlock_sync (string? keyring, string? password);
}
