/* gupnp-av-1.0.vapi generated by vapigen, do not modify. */

[CCode (lower_case_cprefix = "gupnp_")]
namespace GUPnP {
	[CCode (cheader_filename = "libgupnp-av/gupnp-av.h")]
	public class DIDLLiteContainer : GUPnP.DIDLLiteObject {
		[CCode (has_construct_function = false)]
		protected DIDLLiteContainer ();
		public void add_create_class (string create_class);
		public void add_create_class_full (string create_class, bool include_derived);
		public void add_search_class (string search_class);
		public void add_search_class_full (string search_class, bool include_derived);
		public GLib.List<string> get_create_classes ();
		public GLib.List<string> get_search_classes ();
		public int64 get_storage_used ();
		public void set_storage_used (int64 storage_used);
		public int child_count { get; set; }
		public bool searchable { get; set; }
		public int64 storage_used { get; set; }
	}
	[CCode (cheader_filename = "libgupnp-av/gupnp-av.h")]
	public class DIDLLiteContributor : GLib.Object {
		[CCode (has_construct_function = false)]
		protected DIDLLiteContributor ();
		public unowned string get_name ();
		public unowned string get_role ();
		public unowned Xml.Node get_xml_node ();
		public void set_name (string name);
		public void set_role (string role);
		public string name { get; set; }
		public string role { get; set; }
		public GUPnP.XMLDoc xml_doc { construct; }
		public void* xml_node { get; construct; }
	}
	[CCode (cheader_filename = "libgupnp-av/gupnp-av.h")]
	public class DIDLLiteDescriptor : GLib.Object {
		[CCode (has_construct_function = false)]
		protected DIDLLiteDescriptor ();
		public string content { get; set; }
		public string id { get; set; }
		public string metadata_type { get; set; }
		public string name_space { get; set; }
		public GUPnP.XMLDoc xml_doc { construct; }
		public void* xml_node { get; construct; }
	}
	[CCode (cheader_filename = "libgupnp-av/gupnp-av.h")]
	public class DIDLLiteItem : GUPnP.DIDLLiteObject {
		[CCode (has_construct_function = false)]
		protected DIDLLiteItem ();
		public string ref_id { get; set; }
	}
	[CCode (cheader_filename = "libgupnp-av/gupnp-av.h")]
	public class DIDLLiteObject : GLib.Object {
		[CCode (has_construct_function = false)]
		protected DIDLLiteObject ();
		public GUPnP.DIDLLiteContributor add_artist ();
		public GUPnP.DIDLLiteContributor add_author ();
		public GUPnP.DIDLLiteContributor add_creator ();
		public GUPnP.DIDLLiteDescriptor add_descriptor ();
		public GUPnP.DIDLLiteResource add_resource ();
		public GLib.List<GUPnP.DIDLLiteContributor> get_artists ();
		public GLib.List<GUPnP.DIDLLiteContributor> get_authors ();
		public GUPnP.DIDLLiteResource get_compat_resource (string sink_protocol_info, bool lenient);
		public GLib.List<GUPnP.DIDLLiteContributor> get_creators ();
		public GLib.List<GUPnP.DIDLLiteDescriptor> get_descriptors ();
		public GUPnP.OCMFlags get_dlna_managed ();
		public unowned GLib.List get_properties (string name);
		public GLib.List<GUPnP.DIDLLiteResource> get_resources ();
		public void set_dlna_managed (GUPnP.OCMFlags dlna_managed);
		public string album { get; set; }
		public string album_art { get; set; }
		public string artist { get; set; }
		public string author { get; set; }
		public string creator { get; set; }
		public string date { get; set; }
		public void* dc_namespace { get; construct; }
		public string description { get; set; }
		public GUPnP.OCMFlags dlna_managed { get; set; }
		public void* dlna_namespace { get; construct; }
		public string genre { get; set; }
		public string id { get; set; }
		public string parent_id { get; set; }
		public bool restricted { get; set; }
		public string title { get; set; }
		public int track_number { get; set; }
		public string upnp_class { get; set; }
		public void* upnp_namespace { get; construct; }
		public string write_status { get; set; }
		public GUPnP.XMLDoc xml_doc { construct; }
		public void* xml_node { get; construct; }
	}
	[CCode (cheader_filename = "libgupnp-av/gupnp-av.h")]
	public class DIDLLiteParser : GLib.Object {
		public void* gupnp_reserved;
		[CCode (has_construct_function = false)]
		public DIDLLiteParser ();
		public bool parse_didl (string didl) throws GLib.Error;
		public virtual signal void container_available (GUPnP.DIDLLiteContainer container);
		public virtual signal void item_available (GUPnP.DIDLLiteItem item);
		public virtual signal void object_available (GUPnP.DIDLLiteObject object);
	}
	[CCode (cheader_filename = "libgupnp-av/gupnp-av.h")]
	public class DIDLLiteResource : GLib.Object {
		[CCode (has_construct_function = false)]
		protected DIDLLiteResource ();
		public int64 get_size64 ();
		public void set_size64 (int64 size);
		public int audio_channels { get; set; }
		public int bitrate { get; set; }
		public int bits_per_sample { get; set; }
		public int color_depth { get; set; }
		public long duration { get; set; }
		public int height { get; set; }
		public string import_uri { get; set; }
		public string protection { get; set; }
		public GUPnP.ProtocolInfo protocol_info { get; set; }
		public int sample_freq { get; set; }
		public long size { get; set; }
		public int64 size64 { get; set; }
		public string uri { get; set; }
		public int width { get; set; }
		public GUPnP.XMLDoc xml_doc { construct; }
		public void* xml_node { get; construct; }
	}
	[CCode (cheader_filename = "libgupnp-av/gupnp-av.h")]
	public class DIDLLiteWriter : GLib.Object {
		[CCode (cname = "GUPNP_DIDL_LITE_WRITER_NAMESPACE_DC")]
		public const string NAMESPACE_DC;
		[CCode (cname = "GUPNP_DIDL_LITE_WRITER_NAMESPACE_UPNP")]
		public const string NAMESPACE_UPNP;
		[CCode (has_construct_function = false)]
		public DIDLLiteWriter (string? language);
		public GUPnP.DIDLLiteContainer add_container ();
		public GUPnP.DIDLLiteDescriptor add_descriptor ();
		public GUPnP.DIDLLiteItem add_item ();
		public void filter (string filter);
		public string get_string ();
		public unowned Xml.Node get_xml_node ();
		public string language { get; construct; }
		public void* xml_node { get; }
	}
	[CCode (cheader_filename = "libgupnp-av/gupnp-av.h")]
	public class LastChangeParser : GLib.Object {
		[CCode (has_construct_function = false)]
		public LastChangeParser ();
		public bool parse_last_change (uint instance_id, string last_change_xml, ...) throws GLib.Error;
	}
	[CCode (cheader_filename = "libgupnp-av/gupnp-av.h")]
	public class ProtocolInfo : GLib.Object {
		[CCode (has_construct_function = false)]
		public ProtocolInfo ();
		[CCode (has_construct_function = false)]
		public ProtocolInfo.from_string (string protocol_info) throws GLib.Error;
		public bool is_compatible (GUPnP.ProtocolInfo info2);
		public string to_string ();
		public GUPnP.DLNAConversion dlna_conversion { get; set; }
		public GUPnP.DLNAFlags dlna_flags { get; set; }
		public GUPnP.DLNAOperation dlna_operation { get; set; }
		public string dlna_profile { get; set; }
		public string mime_type { get; set; }
		public string network { get; set; }
		[CCode (array_length = false, array_null_terminated = true)]
		public string[] play_speeds { get; set; }
		public string protocol { get; set; }
	}
	[CCode (cheader_filename = "libgupnp-av/gupnp-av.h")]
	public class SearchCriteriaParser : GLib.Object {
		[CCode (has_construct_function = false)]
		public SearchCriteriaParser ();
		public static GLib.Quark error_quark ();
		public bool parse_text (string text) throws GLib.Error;
		public virtual signal void begin_parens ();
		public virtual signal void conjunction ();
		public virtual signal void disjunction ();
		public virtual signal void end_parens ();
		public virtual signal bool expression (string property, GUPnP.SearchCriteriaOp op, string value, void* error);
	}
	[CCode (cheader_filename = "libgupnp-av/gupnp-av.h", cprefix = "GUPNP_DLNA_CONVERSION_")]
	[Flags]
	public enum DLNAConversion {
		NONE,
		TRANSCODED
	}
	[CCode (cheader_filename = "libgupnp-av/gupnp-av.h", cprefix = "GUPNP_DLNA_FLAGS_")]
	[Flags]
	public enum DLNAFlags {
		NONE,
		SENDER_PACED,
		TIME_BASED_SEEK,
		BYTE_BASED_SEEK,
		PLAY_CONTAINER,
		S0_INCREASE,
		SN_INCREASE,
		RTSP_PAUSE,
		STREAMING_TRANSFER_MODE,
		INTERACTIVE_TRANSFER_MODE,
		BACKGROUND_TRANSFER_MODE,
		CONNECTION_STALL,
		DLNA_V15
	}
	[CCode (cheader_filename = "libgupnp-av/gupnp-av.h", cprefix = "GUPNP_DLNA_OPERATION_")]
	[Flags]
	public enum DLNAOperation {
		NONE,
		RANGE,
		TIMESEEK
	}
	[CCode (cheader_filename = "libgupnp-av/gupnp-av.h", cprefix = "GUPNP_OCM_FLAGS_")]
	[Flags]
	public enum OCMFlags {
		NONE,
		UPLOAD,
		CREATE_CONTAINER,
		DESTROYABLE,
		UPLOAD_DESTROYABLE,
		CHANGE_METADATA
	}
	[CCode (cheader_filename = "libgupnp-av/gupnp-av.h", cprefix = "GUPNP_PROTOCOL_ERROR_", has_type_id = false)]
	public enum ProtocolError {
		INVALID_SYNTAX,
		OTHER
	}
	[CCode (cheader_filename = "libgupnp-av/gupnp-av.h", cprefix = "GUPNP_SEARCH_CRITERIA_OP_")]
	public enum SearchCriteriaOp {
		EQ,
		NEQ,
		LESS,
		LEQ,
		GREATER,
		GEQ,
		CONTAINS,
		DOES_NOT_CONTAIN,
		DERIVED_FROM,
		EXISTS
	}
	[CCode (cheader_filename = "libgupnp-av/gupnp-av.h", cprefix = "GUPNP_SEARCH_CRITERIA_PARSER_ERROR_")]
	public errordomain SearchCriteriaParserError {
		FAILED
	}
	[CCode (cheader_filename = "libgupnp-av/gupnp-av.h")]
	public const string DIDL_LITE_WRITER_NAMESPACE_DLNA;
	[CCode (cheader_filename = "libgupnp-av/gupnp-av.h")]
	public static GLib.Quark protocol_error_quark ();
}
