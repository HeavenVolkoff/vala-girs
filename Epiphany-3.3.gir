<?xml version="1.0"?>
<!-- This file was automatically generated from C sources - DO NOT EDIT!
To affect the contents of this file, edit the original C definitions,
and/or use gtk-doc annotations.  -->
<repository version="1.2"
            xmlns="http://www.gtk.org/introspection/core/1.0"
            xmlns:c="http://www.gtk.org/introspection/c/1.0"
            xmlns:glib="http://www.gtk.org/introspection/glib/1.0">
  <include name="Atk" version="1.0"/>
  <include name="GLib" version="2.0"/>
  <include name="GModule" version="2.0"/>
  <include name="GObject" version="2.0"/>
  <include name="Gdk" version="3.0"/>
  <include name="GdkPixbuf" version="2.0"/>
  <include name="Gio" version="2.0"/>
  <include name="Gtk" version="3.0"/>
  <include name="JSCore" version="3.0"/>
  <include name="Pango" version="1.0"/>
  <include name="Soup" version="2.4"/>
  <include name="WebKit" version="3.0"/>
  <include name="cairo" version="1.0"/>
  <include name="libxml2" version="2.0"/>
  <include name="xlib" version="2.0"/>
  <package name="epiphany-3.3"/>
  <namespace name="Epiphany"
             version="3.3"
             shared-library=""
             c:identifier-prefixes="Ephy"
             c:symbol-prefixes="ephy">
    <enumeration name="BookmarkProperty" c:type="EphyBookmarkProperty">
      <member name="bmk_prop_title"
              value="2"
              c:identifier="EPHY_NODE_BMK_PROP_TITLE"/>
      <member name="bmk_prop_location"
              value="3"
              c:identifier="EPHY_NODE_BMK_PROP_LOCATION"/>
      <member name="bmk_prop_keywords"
              value="4"
              c:identifier="EPHY_NODE_BMK_PROP_KEYWORDS"/>
      <member name="keyword_prop_name"
              value="5"
              c:identifier="EPHY_NODE_KEYWORD_PROP_NAME"/>
      <member name="bmk_prop_usericon"
              value="6"
              c:identifier="EPHY_NODE_BMK_PROP_USERICON"/>
      <member name="bmk_prop_icon"
              value="7"
              c:identifier="EPHY_NODE_BMK_PROP_ICON"/>
      <member name="keyword_prop_priority"
              value="8"
              c:identifier="EPHY_NODE_KEYWORD_PROP_PRIORITY"/>
      <member name="bmk_prop_service_id"
              value="14"
              c:identifier="EPHY_NODE_BMK_PROP_SERVICE_ID"/>
      <member name="bmk_prop_immutable"
              value="15"
              c:identifier="EPHY_NODE_BMK_PROP_IMMUTABLE"/>
    </enumeration>
    <class name="Bookmarks"
           c:symbol-prefix="bookmarks"
           c:type="EphyBookmarks"
           parent="GObject.Object"
           glib:type-name="EphyBookmarks"
           glib:get-type="ephy_bookmarks_get_type"
           glib:type-struct="BookmarksClass">
      <constructor name="new" c:identifier="ephy_bookmarks_new">
        <return-value transfer-ownership="full">
          <type name="Bookmarks" c:type="EphyBookmarks*"/>
        </return-value>
      </constructor>
      <function name="compare_bookmark_pointers"
                c:identifier="ephy_bookmarks_compare_bookmark_pointers">
        <return-value transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <parameter name="a" transfer-ownership="none">
            <type name="gpointer" c:type="gconstpointer"/>
          </parameter>
          <parameter name="b" transfer-ownership="none">
            <type name="gpointer" c:type="gconstpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="compare_bookmarks"
                c:identifier="ephy_bookmarks_compare_bookmarks">
        <return-value transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <parameter name="a" transfer-ownership="none">
            <type name="gpointer" c:type="gconstpointer"/>
          </parameter>
          <parameter name="b" transfer-ownership="none">
            <type name="gpointer" c:type="gconstpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="compare_topic_pointers"
                c:identifier="ephy_bookmarks_compare_topic_pointers">
        <return-value transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <parameter name="a" transfer-ownership="none">
            <type name="gpointer" c:type="gconstpointer"/>
          </parameter>
          <parameter name="b" transfer-ownership="none">
            <type name="gpointer" c:type="gconstpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="compare_topics"
                c:identifier="ephy_bookmarks_compare_topics">
        <return-value transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <parameter name="a" transfer-ownership="none">
            <type name="gpointer" c:type="gconstpointer"/>
          </parameter>
          <parameter name="b" transfer-ownership="none">
            <type name="gpointer" c:type="gconstpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="get_smart_bookmark_width"
                c:identifier="ephy_bookmarks_get_smart_bookmark_width">
        <return-value transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="bookmark" transfer-ownership="none">
            <type name="Node" c:type="EphyNode*"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="resolve_address" invoker="resolve_address">
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <parameter name="address" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="argument" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="tree_changed">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </virtual-method>
      <method name="add" c:identifier="ephy_bookmarks_add">
        <return-value transfer-ownership="full">
          <type name="Node" c:type="EphyNode*"/>
        </return-value>
        <parameters>
          <parameter name="title" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="url" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_keyword" c:identifier="ephy_bookmarks_add_keyword">
        <return-value transfer-ownership="full">
          <type name="Node" c:type="EphyNode*"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="find_bookmark" c:identifier="ephy_bookmarks_find_bookmark">
        <return-value transfer-ownership="full">
          <type name="Node" c:type="EphyNode*"/>
        </return-value>
        <parameters>
          <parameter name="url" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="find_keyword" c:identifier="ephy_bookmarks_find_keyword">
        <return-value transfer-ownership="full">
          <type name="Node" c:type="EphyNode*"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="partial_match" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_bookmarks" c:identifier="ephy_bookmarks_get_bookmarks">
        <return-value transfer-ownership="none">
          <type name="Node" c:type="EphyNode*"/>
        </return-value>
      </method>
      <method name="get_favorites" c:identifier="ephy_bookmarks_get_favorites">
        <return-value transfer-ownership="none">
          <type name="Node" c:type="EphyNode*"/>
        </return-value>
      </method>
      <method name="get_from_id" c:identifier="ephy_bookmarks_get_from_id">
        <return-value transfer-ownership="none">
          <type name="Node" c:type="EphyNode*"/>
        </return-value>
        <parameters>
          <parameter name="id" transfer-ownership="none">
            <type name="glong" c:type="long"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_keywords" c:identifier="ephy_bookmarks_get_keywords">
        <return-value transfer-ownership="none">
          <type name="Node" c:type="EphyNode*"/>
        </return-value>
      </method>
      <method name="get_local" c:identifier="ephy_bookmarks_get_local">
        <return-value transfer-ownership="none">
          <type name="Node" c:type="EphyNode*"/>
        </return-value>
      </method>
      <method name="get_not_categorized"
              c:identifier="ephy_bookmarks_get_not_categorized">
        <return-value transfer-ownership="none">
          <type name="Node" c:type="EphyNode*"/>
        </return-value>
      </method>
      <method name="get_similar" c:identifier="ephy_bookmarks_get_similar">
        <return-value transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <parameter name="bookmark" transfer-ownership="none">
            <type name="Node" c:type="EphyNode*"/>
          </parameter>
          <parameter name="identical" transfer-ownership="none">
            <array name="GLib.PtrArray" c:type="GPtrArray*">
              <type name="gpointer" c:type="gpointer"/>
            </array>
          </parameter>
          <parameter name="similar" transfer-ownership="none">
            <array name="GLib.PtrArray" c:type="GPtrArray*">
              <type name="gpointer" c:type="gpointer"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="get_smart_bookmarks"
              c:identifier="ephy_bookmarks_get_smart_bookmarks">
        <return-value transfer-ownership="none">
          <type name="Node" c:type="EphyNode*"/>
        </return-value>
      </method>
      <method name="get_topic_uri" c:identifier="ephy_bookmarks_get_topic_uri">
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <parameter name="node" transfer-ownership="none">
            <type name="Node" c:type="EphyNode*"/>
          </parameter>
        </parameters>
      </method>
      <method name="has_keyword" c:identifier="ephy_bookmarks_has_keyword">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="keyword" transfer-ownership="none">
            <type name="Node" c:type="EphyNode*"/>
          </parameter>
          <parameter name="bookmark" transfer-ownership="none">
            <type name="Node" c:type="EphyNode*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_keyword"
              c:identifier="ephy_bookmarks_remove_keyword">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="keyword" transfer-ownership="none">
            <type name="Node" c:type="EphyNode*"/>
          </parameter>
        </parameters>
      </method>
      <method name="resolve_address"
              c:identifier="ephy_bookmarks_resolve_address">
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <parameter name="address" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="parameter" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_address" c:identifier="ephy_bookmarks_set_address">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bookmark" transfer-ownership="none">
            <type name="Node" c:type="EphyNode*"/>
          </parameter>
          <parameter name="address" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_icon" c:identifier="ephy_bookmarks_set_icon">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="url" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="icon" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_keyword" c:identifier="ephy_bookmarks_set_keyword">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="keyword" transfer-ownership="none">
            <type name="Node" c:type="EphyNode*"/>
          </parameter>
          <parameter name="bookmark" transfer-ownership="none">
            <type name="Node" c:type="EphyNode*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_usericon" c:identifier="ephy_bookmarks_set_usericon">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="url" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="icon" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="unset_keyword" c:identifier="ephy_bookmarks_unset_keyword">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="keyword" transfer-ownership="none">
            <type name="Node" c:type="EphyNode*"/>
          </parameter>
          <parameter name="bookmark" transfer-ownership="none">
            <type name="Node" c:type="EphyNode*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="BookmarksPrivate" c:type="EphyBookmarksPrivate*"/>
      </field>
      <glib:signal name="resolve-address" when="last">
        <return-value transfer-ownership="full">
          <type name="utf8"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="utf8"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <type name="utf8"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="tree-changed" when="last">
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="BookmarksClass"
            c:type="EphyBookmarksClass"
            glib:is-gtype-struct-for="Bookmarks">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="tree_changed">
        <callback name="tree_changed">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="eb" transfer-ownership="none">
              <type name="Bookmarks" c:type="EphyBookmarks*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="resolve_address">
        <callback name="resolve_address">
          <return-value transfer-ownership="full">
            <type name="utf8" c:type="char*"/>
          </return-value>
          <parameters>
            <parameter name="eb" transfer-ownership="none">
              <type name="Bookmarks" c:type="EphyBookmarks*"/>
            </parameter>
            <parameter name="address" transfer-ownership="none">
              <type name="utf8" c:type="char*"/>
            </parameter>
            <parameter name="argument" transfer-ownership="none">
              <type name="utf8" c:type="char*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <record name="BookmarksPrivate"
            c:type="EphyBookmarksPrivate"
            disguised="1">
    </record>
    <class name="Dialog"
           c:symbol-prefix="dialog"
           c:type="EphyDialog"
           parent="GObject.Object"
           glib:type-name="EphyDialog"
           glib:get-type="ephy_dialog_get_type"
           glib:type-struct="DialogClass">
      <constructor name="new" c:identifier="ephy_dialog_new">
        <doc xml:whitespace="preserve">Creates a new #EphyDialog.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a new #EphyDialog</doc>
          <type name="Dialog" c:type="EphyDialog*"/>
        </return-value>
      </constructor>
      <constructor name="new_with_parent"
                   c:identifier="ephy_dialog_new_with_parent">
        <doc xml:whitespace="preserve">Creates a new #EphyDialog with @parent_window as its parent.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a new #EphyDialog</doc>
          <type name="Dialog" c:type="EphyDialog*"/>
        </return-value>
        <parameters>
          <parameter name="parent_window" transfer-ownership="none">
            <doc xml:whitespace="preserve">a window to be parent of the new dialog</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </constructor>
      <virtual-method name="changed">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="value" transfer-ownership="none">
            <type name="GObject.Value" c:type="GValue*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="construct" invoker="construct">
        <doc xml:whitespace="preserve">Constructs the widget part of @dialog using the widget identified by @name
in the #GtkBuilder file found at @file.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="file" transfer-ownership="none">
            <doc xml:whitespace="preserve">the path to a #GtkBuilder file</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:whitespace="preserve">name of the widget to use for @dialog, found in @file</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="domain" transfer-ownership="none">
            <doc xml:whitespace="preserve">translation domain to set for @dialog</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="show" invoker="show">
        <doc xml:whitespace="preserve">Shows @dialog on screen.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </virtual-method>
      <method name="construct" c:identifier="ephy_dialog_construct">
        <doc xml:whitespace="preserve">Constructs the widget part of @dialog using the widget identified by @name
in the #GtkBuilder file found at @file.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="file" transfer-ownership="none">
            <doc xml:whitespace="preserve">the path to a #GtkBuilder file</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:whitespace="preserve">name of the widget to use for @dialog, found in @file</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="domain" transfer-ownership="none">
            <doc xml:whitespace="preserve">translation domain to set for @dialog</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_control" c:identifier="ephy_dialog_get_control">
        <doc xml:whitespace="preserve">Gets the internal widget corresponding to @property_id from @dialog.
or %NULL</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the #GtkWidget corresponding to @property_id</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="property_id" transfer-ownership="none">
            <doc xml:whitespace="preserve">the string identifier of the requested control</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_controls"
              c:identifier="ephy_dialog_get_controls"
              shadowed-by="get_controls"
              introspectable="0">
        <doc xml:whitespace="preserve">Gets the requested controls according to given property-store_location pairs.
Properties are given as strings (const char *), controls are returned as
#GtkWidget elements.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="first_id" transfer-ownership="none">
            <doc xml:whitespace="preserve">identifier of the requested control</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter transfer-ownership="none">
            <varargs>
            </varargs>
          </parameter>
        </parameters>
      </method>
      <method name="get_parent" c:identifier="ephy_dialog_get_parent">
        <doc xml:whitespace="preserve">Gets @dialog's parent-window.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the parent-window of @dialog</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </method>
      <method name="hide" c:identifier="ephy_dialog_hide">
        <doc xml:whitespace="preserve">Calls gtk_widget_hide on @dialog.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="run" c:identifier="ephy_dialog_run">
        <doc xml:whitespace="preserve">Runs gtk_dialog_run on @dialog and waits for a response.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the user response to gtk_dialog_run or 0 if @dialog is not valid</doc>
          <type name="gint" c:type="int"/>
        </return-value>
      </method>
      <method name="set_parent" c:identifier="ephy_dialog_set_parent">
        <doc xml:whitespace="preserve">Sets @parent as the parent-window of @dialog.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="parent" transfer-ownership="none">
            <doc xml:whitespace="preserve">new parent for @dialog</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_size_group"
              c:identifier="ephy_dialog_set_size_group"
              introspectable="0">
        <doc xml:whitespace="preserve">Put @first_id and @Varargs widgets into the same #GtkSizeGroup.
Note that this are all widgets inside @dialog.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="first_id" transfer-ownership="none">
            <doc xml:whitespace="preserve">id of a widget in @dialog</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter transfer-ownership="none">
            <varargs>
            </varargs>
          </parameter>
        </parameters>
      </method>
      <method name="show" c:identifier="ephy_dialog_show">
        <doc xml:whitespace="preserve">Shows @dialog on screen.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <property name="default-height"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The dialog default height.</doc>
        <type name="gint"/>
      </property>
      <property name="default-width"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The dialog default width.</doc>
        <type name="gint"/>
      </property>
      <property name="parent-window" writable="1" transfer-ownership="none">
        <doc xml:whitespace="preserve">Dialog's parent window.</doc>
        <type name="Gtk.Window"/>
      </property>
      <property name="persist-position"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">If dialog position should be persistent.</doc>
        <type name="gboolean"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="DialogPrivate" c:type="EphyDialogPrivate*"/>
      </field>
      <glib:signal name="changed" when="first" detailed="1">
        <doc xml:whitespace="preserve">Emitted everytime a child widget of the dialog has its changed or
clicked signal emitted.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="value" transfer-ownership="none">
            <doc xml:whitespace="preserve">new value of the modified widget, as a #GValue</doc>
            <type name="gpointer"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="DialogClass"
            c:type="EphyDialogClass"
            glib:is-gtype-struct-for="Dialog">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="changed">
        <callback name="changed">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="dialog" transfer-ownership="none">
              <type name="Dialog" c:type="EphyDialog*"/>
            </parameter>
            <parameter name="value" transfer-ownership="none">
              <type name="GObject.Value" c:type="GValue*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="construct">
        <callback name="construct">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="dialog" transfer-ownership="none">
              <type name="Dialog" c:type="EphyDialog*"/>
            </parameter>
            <parameter name="file" transfer-ownership="none">
              <doc xml:whitespace="preserve">the path to a #GtkBuilder file</doc>
              <type name="utf8" c:type="char*"/>
            </parameter>
            <parameter name="name" transfer-ownership="none">
              <doc xml:whitespace="preserve">name of the widget to use for @dialog, found in @file</doc>
              <type name="utf8" c:type="char*"/>
            </parameter>
            <parameter name="domain" transfer-ownership="none">
              <doc xml:whitespace="preserve">translation domain to set for @dialog</doc>
              <type name="utf8" c:type="char*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="show">
        <callback name="show">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="dialog" transfer-ownership="none">
              <type name="Dialog" c:type="EphyDialog*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <record name="DialogPrivate" c:type="EphyDialogPrivate" disguised="1">
    </record>
    <record name="DialogProperty" c:type="EphyDialogProperty" disguised="1">
    </record>
    <class name="Download"
           c:symbol-prefix="download"
           c:type="EphyDownload"
           parent="GObject.Object"
           glib:type-name="EphyDownload"
           glib:get-type="ephy_download_get_type"
           glib:type-struct="DownloadClass">
      <constructor name="new" c:identifier="ephy_download_new">
        <doc xml:whitespace="preserve">Creates a new #EphyDownload. You can use ephy_download_new_for_download and
ephy_download_new_for_uri as convenience functions to create #EphyDownload
objects.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">an #EphyDownload.</doc>
          <type name="Download" c:type="EphyDownload*"/>
        </return-value>
      </constructor>
      <constructor name="new_for_download"
                   c:identifier="ephy_download_new_for_download">
        <doc xml:whitespace="preserve">Wraps @download in an #EphyDownload.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">an #EphyDownload.</doc>
          <type name="Download" c:type="EphyDownload*"/>
        </return-value>
        <parameters>
          <parameter name="download" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitDownload to wrap</doc>
            <type name="WebKit.Download" c:type="WebKitDownload*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_uri" c:identifier="ephy_download_new_for_uri">
        <doc xml:whitespace="preserve">Creates an #EphyDownload to download @uri.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">an #EphyDownload.</doc>
          <type name="Download" c:type="EphyDownload*"/>
        </return-value>
        <parameters>
          <parameter name="uri" transfer-ownership="none">
            <doc xml:whitespace="preserve">a source URI from where to download</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </constructor>
      <virtual-method name="completed">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </virtual-method>
      <virtual-method name="error">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="error_code" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="error_detail" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="reason" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="cancel" c:identifier="ephy_download_cancel">
        <doc xml:whitespace="preserve">Cancels the wrapped #WebKitDownload.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="do_download_action"
              c:identifier="ephy_download_do_download_action">
        <doc xml:whitespace="preserve">Executes the given @action for @download, this can be any of
#EphyDownloadActionType, including #EPHY_DOWNLOAD_ACTION_AUTO which decides
the default action from the mime type of @download.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the action was executed succesfully.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="action" transfer-ownership="none">
            <doc xml:whitespace="preserve">one of #EphyDownloadActionType</doc>
            <type name="DownloadActionType" c:type="EphyDownloadActionType"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_action" c:identifier="ephy_download_get_action">
        <doc xml:whitespace="preserve">Gets the #EphyDownloadActionType that this download will execute when
ephy_download_do_download_action () is called on it. This action is
performed automatically is "Automatically download and open files" is
enabled.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the #EphyDownloadActionType to be executed</doc>
          <type name="DownloadActionType" c:type="EphyDownloadActionType"/>
        </return-value>
      </method>
      <method name="get_content_type"
              c:identifier="ephy_download_get_content_type">
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="char*"/>
        </return-value>
      </method>
      <method name="get_destination_uri"
              c:identifier="ephy_download_get_destination_uri">
        <doc xml:whitespace="preserve">Gets the destination URI where the download is being saved.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">destination URI.</doc>
          <type name="utf8" c:type="char*"/>
        </return-value>
      </method>
      <method name="get_source_uri"
              c:identifier="ephy_download_get_source_uri">
        <doc xml:whitespace="preserve">Gets the source URI that this download is/will download.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">source URI.</doc>
          <type name="utf8" c:type="char*"/>
        </return-value>
      </method>
      <method name="get_start_time"
              c:identifier="ephy_download_get_start_time">
        <doc xml:whitespace="preserve">Gets the time (returned by gtk_get_current_event_time ()) when @download was
started with ephy_download_start (). Defaults to 0.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the time when @download was started.</doc>
          <type name="guint32" c:type="guint32"/>
        </return-value>
      </method>
      <method name="get_webkit_download"
              c:identifier="ephy_download_get_webkit_download">
        <doc xml:whitespace="preserve">Gets the #WebKitDownload being wrapped by @download.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a #WebKitDownload.</doc>
          <type name="WebKit.Download" c:type="WebKitDownload*"/>
        </return-value>
      </method>
      <method name="get_widget" c:identifier="ephy_download_get_widget">
        <doc xml:whitespace="preserve">Gets the #GtkWidget associated to this download.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GtkWidget.</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </method>
      <method name="get_window" c:identifier="ephy_download_get_window">
        <doc xml:whitespace="preserve">Gets the window set as the parent of @download, this can be NULL if no
specific window generated this download.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GtkWidget</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </method>
      <method name="pause" c:identifier="ephy_download_pause">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="set_action" c:identifier="ephy_download_set_action">
        <doc xml:whitespace="preserve">Sets the @action to be executed when ephy_download_do_download_action () is
called on @download or on finish when "Automatically download and open
files" is set.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="action" transfer-ownership="none">
            <doc xml:whitespace="preserve">#EphyDownloadActionType to execute</doc>
            <type name="DownloadActionType" c:type="EphyDownloadActionType"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_auto_destination"
              c:identifier="ephy_download_set_auto_destination">
        <doc xml:whitespace="preserve">Tells @download to automatically determine a destination for itself.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="set_destination_uri"
              c:identifier="ephy_download_set_destination_uri">
        <doc xml:whitespace="preserve">Sets the destination URI of @download. It must be a proper URI, with a
scheme like file:/// or similar.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="destination" transfer-ownership="none">
            <doc xml:whitespace="preserve">URI where to save @download</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_widget" c:identifier="ephy_download_set_widget">
        <doc xml:whitespace="preserve">Sets @widget to be associated with @download as its UI.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="widget" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GtkWidget</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_window" c:identifier="ephy_download_set_window">
        <doc xml:whitespace="preserve">Sets @window to be @download's parent, this means that @download will be
shown on @window's #EphyWindow (where it is contained).</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="window" transfer-ownership="none">
            <doc xml:whitespace="preserve">#GtkWidget that produced @download</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="start" c:identifier="ephy_download_start">
        <doc xml:whitespace="preserve">Starts the wrapped #WebKitDownload.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <property name="action" introspectable="0" transfer-ownership="none">
        <type/>
      </property>
      <property name="destination" writable="1" transfer-ownership="none">
        <type name="utf8"/>
      </property>
      <property name="download" transfer-ownership="none">
        <type name="WebKit.Download"/>
      </property>
      <property name="source" transfer-ownership="none">
        <type name="utf8"/>
      </property>
      <property name="start-time" transfer-ownership="none">
        <type name="guint"/>
      </property>
      <property name="widget" writable="1" transfer-ownership="none">
        <type name="Gtk.Widget"/>
      </property>
      <property name="window" writable="1" transfer-ownership="none">
        <type name="Gtk.Widget"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="DownloadPrivate" c:type="EphyDownloadPrivate*"/>
      </field>
      <glib:signal name="completed" when="last">
        <doc xml:whitespace="preserve">The ::completed signal is emitted when @download has finished downloading.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
      </glib:signal>
      <glib:signal name="error" when="last">
        <doc xml:whitespace="preserve">The ::error signal wraps the @download ::error signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
      </glib:signal>
    </class>
    <enumeration name="DownloadActionType" c:type="EphyDownloadActionType">
      <member name="none" value="0" c:identifier="EPHY_DOWNLOAD_ACTION_NONE"/>
      <member name="auto" value="1" c:identifier="EPHY_DOWNLOAD_ACTION_AUTO"/>
      <member name="browse_to"
              value="2"
              c:identifier="EPHY_DOWNLOAD_ACTION_BROWSE_TO"/>
      <member name="open" value="3" c:identifier="EPHY_DOWNLOAD_ACTION_OPEN"/>
    </enumeration>
    <record name="DownloadClass"
            c:type="EphyDownloadClass"
            glib:is-gtype-struct-for="Download">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="completed">
        <callback name="completed">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="download" transfer-ownership="none">
              <type name="Download" c:type="EphyDownload*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="error">
        <callback name="error">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="download" transfer-ownership="none">
              <type name="Download" c:type="EphyDownload*"/>
            </parameter>
            <parameter name="error_code" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
            <parameter name="error_detail" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
            <parameter name="reason" transfer-ownership="none">
              <type name="utf8" c:type="char*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <record name="DownloadPrivate" c:type="EphyDownloadPrivate" disguised="1">
    </record>
    <class name="DownloadWidget"
           c:symbol-prefix="download_widget"
           c:type="EphyDownloadWidget"
           parent="Gtk.Box"
           glib:type-name="EphyDownloadWidget"
           glib:get-type="ephy_download_widget_get_type"
           glib:type-struct="DownloadWidgetClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.Orientable"/>
      <constructor name="new" c:identifier="ephy_download_widget_new">
        <doc xml:whitespace="preserve">Creates an #EphyDownloadWidget to wrap @ephy_download. It also associates
@ephy_download to it.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a new #EphyDownloadWidget</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="ephy_download" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #EphyDownload that @widget is wrapping</doc>
            <type name="Download" c:type="EphyDownload*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_download"
              c:identifier="ephy_download_widget_get_download">
        <doc xml:whitespace="preserve">Gets the #EphyDownload that @widget is showing.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">an #EphyDownload.</doc>
          <type name="Download" c:type="EphyDownload*"/>
        </return-value>
      </method>
      <property name="download"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="GObject.Object"/>
      </property>
      <field name="parent">
        <type name="Gtk.Box" c:type="GtkBox"/>
      </field>
      <field name="priv">
        <type name="DownloadWidgetPrivate"
              c:type="EphyDownloadWidgetPrivate*"/>
      </field>
    </class>
    <record name="DownloadWidgetClass"
            c:type="EphyDownloadWidgetClass"
            glib:is-gtype-struct-for="DownloadWidget">
      <field name="parent_class">
        <type name="Gtk.BoxClass" c:type="GtkBoxClass"/>
      </field>
    </record>
    <record name="DownloadWidgetPrivate"
            c:type="EphyDownloadWidgetPrivate"
            disguised="1">
    </record>
    <constant name="EMBED_STATUSBAR_HELP_MESSAGE_CONTEXT_DESCRIPTION"
              value="help_message"
              c:type="EPHY_EMBED_STATUSBAR_HELP_MESSAGE_CONTEXT_DESCRIPTION">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="EMBED_STATUSBAR_TAB_MESSAGE_CONTEXT_DESCRIPTION"
              value="tab_message"
              c:type="EPHY_EMBED_STATUSBAR_TAB_MESSAGE_CONTEXT_DESCRIPTION">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <class name="Embed"
           c:symbol-prefix="embed"
           c:type="EphyEmbed"
           parent="Gtk.Box"
           glib:type-name="EphyEmbed"
           glib:get-type="ephy_embed_get_type"
           glib:type-struct="EmbedClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.Orientable"/>
      <method name="add_top_widget" c:identifier="ephy_embed_add_top_widget">
        <doc xml:whitespace="preserve">Adds a #GtkWidget to the top of the embed.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="widget" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GtkWidget</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="destroy_on_transition" transfer-ownership="none">
            <doc xml:whitespace="preserve">whether the widget be automatically destroyed on page transitions</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="auto_download_url"
              c:identifier="ephy_embed_auto_download_url">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="url" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_web_view" c:identifier="ephy_embed_get_web_view">
        <doc xml:whitespace="preserve">Returns the #EphyWebView wrapped by @embed.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">an #EphyWebView</doc>
          <type name="WebView" c:type="EphyWebView*"/>
        </return-value>
      </method>
      <method name="remove_top_widget"
              c:identifier="ephy_embed_remove_top_widget">
        <doc xml:whitespace="preserve">Removes an #GtkWidget from the top of the embed. The #GtkWidget
must be have been added using ephy_embed_add_widget(), and not
have been removed by other means. See gtk_container_remove() for
details.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="widget" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GtkWidget</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="statusbar_get_context_id"
              c:identifier="ephy_embed_statusbar_get_context_id">
        <return-value transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="context_description" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="statusbar_pop" c:identifier="ephy_embed_statusbar_pop">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="context_id" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="statusbar_push" c:identifier="ephy_embed_statusbar_push">
        <return-value transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="context_id" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="text" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent_instance">
        <type name="Gtk.Box" c:type="GtkBox"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="EmbedPrivate" c:type="EphyEmbedPrivate*"/>
      </field>
    </class>
    <record name="EmbedClass"
            c:type="EphyEmbedClass"
            glib:is-gtype-struct-for="Embed">
      <field name="parent_class">
        <type name="Gtk.BoxClass" c:type="GtkBoxClass"/>
      </field>
    </record>
    <interface name="EmbedContainer"
               c:symbol-prefix="embed_container"
               c:type="EphyEmbedContainer"
               glib:type-name="EphyEmbedContainer"
               glib:get-type="ephy_embed_container_get_type"
               glib:type-struct="EmbedContainerIface">
      <virtual-method name="add_child" invoker="add_child">
        <doc xml:whitespace="preserve">Inserts @child into @container.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">@child's new position inside @container.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <parameter name="child" transfer-ownership="none">
            <doc xml:whitespace="preserve">an #EphyEmbed</doc>
            <type name="Embed" c:type="EphyEmbed*"/>
          </parameter>
          <parameter name="position" transfer-ownership="none">
            <doc xml:whitespace="preserve">the position in @container's</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="set_active" transfer-ownership="none">
            <doc xml:whitespace="preserve">whether to set @embed as the active child of @container after insertion</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_active_child" invoker="get_active_child">
        <doc xml:whitespace="preserve">Returns @container's active #EphyEmbed.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">@container's active child</doc>
          <type name="Embed" c:type="EphyEmbed*"/>
        </return-value>
      </virtual-method>
      <virtual-method name="get_children" invoker="get_children">
        <doc xml:whitespace="preserve">Returns the list of #EphyEmbed:s in the container.

a newly-allocated list of #EphyEmbed:s</doc>
        <return-value transfer-ownership="container">
          <type name="GLib.List" c:type="GList*">
            <type name="Embed"/>
          </type>
        </return-value>
      </virtual-method>
      <virtual-method name="get_chrome" invoker="get_chrome">
        <doc xml:whitespace="preserve">Returns the #EphyWebViewChrome flags indicating the visibility of several parts
of the UI.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">#EphyWebViewChrome flags.</doc>
          <type name="WebViewChrome" c:type="EphyWebViewChrome"/>
        </return-value>
      </virtual-method>
      <virtual-method name="get_is_popup" invoker="get_is_popup">
        <doc xml:whitespace="preserve">Returns whether this embed container is a popup.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if it is a popup</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </virtual-method>
      <virtual-method name="remove_child" invoker="remove_child">
        <doc xml:whitespace="preserve">Removes @child from @container.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="child" transfer-ownership="none">
            <doc xml:whitespace="preserve">an #EphyEmbed</doc>
            <type name="Embed" c:type="EphyEmbed*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="set_active_child" invoker="set_active_child">
        <doc xml:whitespace="preserve">Sets @child as @container's active child.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="child" transfer-ownership="none">
            <doc xml:whitespace="preserve">an #EphyEmbed inside @container</doc>
            <type name="Embed" c:type="EphyEmbed*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="add_child" c:identifier="ephy_embed_container_add_child">
        <doc xml:whitespace="preserve">Inserts @child into @container.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">@child's new position inside @container.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <parameter name="child" transfer-ownership="none">
            <doc xml:whitespace="preserve">an #EphyEmbed</doc>
            <type name="Embed" c:type="EphyEmbed*"/>
          </parameter>
          <parameter name="position" transfer-ownership="none">
            <doc xml:whitespace="preserve">the position in @container's</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="set_active" transfer-ownership="none">
            <doc xml:whitespace="preserve">whether to set @embed as the active child of @container after insertion</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_active_child"
              c:identifier="ephy_embed_container_get_active_child">
        <doc xml:whitespace="preserve">Returns @container's active #EphyEmbed.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">@container's active child</doc>
          <type name="Embed" c:type="EphyEmbed*"/>
        </return-value>
      </method>
      <method name="get_children"
              c:identifier="ephy_embed_container_get_children">
        <doc xml:whitespace="preserve">Returns the list of #EphyEmbed:s in the container.

a newly-allocated list of #EphyEmbed:s</doc>
        <return-value transfer-ownership="container">
          <type name="GLib.List" c:type="GList*">
            <type name="Embed"/>
          </type>
        </return-value>
      </method>
      <method name="get_chrome" c:identifier="ephy_embed_container_get_chrome">
        <doc xml:whitespace="preserve">Returns the #EphyWebViewChrome flags indicating the visibility of several parts
of the UI.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">#EphyWebViewChrome flags.</doc>
          <type name="WebViewChrome" c:type="EphyWebViewChrome"/>
        </return-value>
      </method>
      <method name="get_is_popup"
              c:identifier="ephy_embed_container_get_is_popup">
        <doc xml:whitespace="preserve">Returns whether this embed container is a popup.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if it is a popup</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="remove_child"
              c:identifier="ephy_embed_container_remove_child">
        <doc xml:whitespace="preserve">Removes @child from @container.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="child" transfer-ownership="none">
            <doc xml:whitespace="preserve">an #EphyEmbed</doc>
            <type name="Embed" c:type="EphyEmbed*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_active_child"
              c:identifier="ephy_embed_container_set_active_child">
        <doc xml:whitespace="preserve">Sets @child as @container's active child.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="child" transfer-ownership="none">
            <doc xml:whitespace="preserve">an #EphyEmbed inside @container</doc>
            <type name="Embed" c:type="EphyEmbed*"/>
          </parameter>
        </parameters>
      </method>
      <property name="active-child" writable="1" transfer-ownership="none">
        <type name="Gtk.Widget"/>
      </property>
      <property name="chrome"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="WebViewChrome"/>
      </property>
      <property name="is-popup"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gboolean"/>
      </property>
    </interface>
    <record name="EmbedContainerIface"
            c:type="EphyEmbedContainerIface"
            glib:is-gtype-struct-for="EmbedContainer">
      <field name="parent_iface">
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="add_child">
        <callback name="add_child">
          <return-value transfer-ownership="none">
            <doc xml:whitespace="preserve">@child's new position inside @container.</doc>
            <type name="gint" c:type="gint"/>
          </return-value>
          <parameters>
            <parameter name="container" transfer-ownership="none">
              <type name="EmbedContainer" c:type="EphyEmbedContainer*"/>
            </parameter>
            <parameter name="child" transfer-ownership="none">
              <doc xml:whitespace="preserve">an #EphyEmbed</doc>
              <type name="Embed" c:type="EphyEmbed*"/>
            </parameter>
            <parameter name="position" transfer-ownership="none">
              <doc xml:whitespace="preserve">the position in @container's</doc>
              <type name="gint" c:type="gint"/>
            </parameter>
            <parameter name="set_active" transfer-ownership="none">
              <doc xml:whitespace="preserve">whether to set @embed as the active child of @container after insertion</doc>
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="set_active_child">
        <callback name="set_active_child">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="container" transfer-ownership="none">
              <type name="EmbedContainer" c:type="EphyEmbedContainer*"/>
            </parameter>
            <parameter name="child" transfer-ownership="none">
              <doc xml:whitespace="preserve">an #EphyEmbed inside @container</doc>
              <type name="Embed" c:type="EphyEmbed*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="remove_child">
        <callback name="remove_child">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="container" transfer-ownership="none">
              <type name="EmbedContainer" c:type="EphyEmbedContainer*"/>
            </parameter>
            <parameter name="child" transfer-ownership="none">
              <doc xml:whitespace="preserve">an #EphyEmbed</doc>
              <type name="Embed" c:type="EphyEmbed*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_active_child">
        <callback name="get_active_child">
          <return-value transfer-ownership="none">
            <doc xml:whitespace="preserve">@container's active child</doc>
            <type name="Embed" c:type="EphyEmbed*"/>
          </return-value>
          <parameters>
            <parameter name="container" transfer-ownership="none">
              <type name="EmbedContainer" c:type="EphyEmbedContainer*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_children">
        <callback name="get_children">
          <return-value transfer-ownership="container">
            <type name="GLib.List" c:type="GList*">
              <type name="Embed"/>
            </type>
          </return-value>
          <parameters>
            <parameter name="container" transfer-ownership="none">
              <type name="EmbedContainer" c:type="EphyEmbedContainer*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_is_popup">
        <callback name="get_is_popup">
          <return-value transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE if it is a popup</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="container" transfer-ownership="none">
              <type name="EmbedContainer" c:type="EphyEmbedContainer*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_chrome">
        <callback name="get_chrome">
          <return-value transfer-ownership="none">
            <doc xml:whitespace="preserve">#EphyWebViewChrome flags.</doc>
            <type name="WebViewChrome" c:type="EphyWebViewChrome"/>
          </return-value>
          <parameters>
            <parameter name="container" transfer-ownership="none">
              <type name="EmbedContainer" c:type="EphyEmbedContainer*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="EmbedEvent"
           c:symbol-prefix="embed_event"
           c:type="EphyEmbedEvent"
           parent="GObject.Object"
           glib:type-name="EphyEmbedEvent"
           glib:get-type="ephy_embed_event_get_type"
           glib:type-struct="EmbedEventClass">
      <constructor name="new" c:identifier="ephy_embed_event_new">
        <return-value transfer-ownership="full">
          <type name="EmbedEvent" c:type="EphyEmbedEvent*"/>
        </return-value>
        <parameters>
          <parameter name="event" transfer-ownership="none">
            <type name="Gdk.EventButton" c:type="GdkEventButton*"/>
          </parameter>
          <parameter name="hit_test_result" transfer-ownership="none">
            <type name="WebKit.HitTestResult" c:type="WebKitHitTestResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_button" c:identifier="ephy_embed_event_get_button">
        <return-value transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </return-value>
      </method>
      <method name="get_context" c:identifier="ephy_embed_event_get_context">
        <return-value transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </return-value>
      </method>
      <method name="get_coords" c:identifier="ephy_embed_event_get_coords">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="x" transfer-ownership="none">
            <type name="guint" c:type="guint*"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <type name="guint" c:type="guint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_modifier" c:identifier="ephy_embed_event_get_modifier">
        <return-value transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </return-value>
      </method>
      <method name="get_property" c:identifier="ephy_embed_event_get_property">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="value"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <type name="GObject.Value" c:type="GValue*"/>
          </parameter>
        </parameters>
      </method>
      <method name="has_property" c:identifier="ephy_embed_event_has_property">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="EmbedEventPrivate" c:type="EphyEmbedEventPrivate*"/>
      </field>
    </class>
    <record name="EmbedEventClass"
            c:type="EphyEmbedEventClass"
            glib:is-gtype-struct-for="EmbedEvent">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="EmbedEventPrivate"
            c:type="EphyEmbedEventPrivate"
            disguised="1">
    </record>
    <record name="EmbedPrivate" c:type="EphyEmbedPrivate" disguised="1">
    </record>
    <class name="EmbedShell"
           c:symbol-prefix="embed_shell"
           c:type="EphyEmbedShell"
           parent="Gtk.Application"
           glib:type-name="EphyEmbedShell"
           glib:get-type="ephy_embed_shell_get_type"
           glib:type-struct="EmbedShellClass">
      <implements name="Gio.ActionGroup"/>
      <implements name="Gio.ActionMap"/>
      <function name="get_default" c:identifier="ephy_embed_shell_get_default">
        <doc xml:whitespace="preserve">Retrieves the default #EphyEmbedShell object</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the default #EphyEmbedShell</doc>
          <type name="EmbedShell" c:type="EphyEmbedShell*"/>
        </return-value>
      </function>
      <virtual-method name="download_added">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="download" transfer-ownership="none">
            <type name="Download" c:type="EphyDownload*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="download_removed">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="download" transfer-ownership="none">
            <type name="Download" c:type="EphyDownload*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_embed_single" invoker="get_embed_single">
        <return-value transfer-ownership="none">
          <type name="GObject.Object" c:type="GObject*"/>
        </return-value>
      </virtual-method>
      <virtual-method name="prepare_close" invoker="prepare_close">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </virtual-method>
      <method name="add_download" c:identifier="ephy_embed_shell_add_download">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="download" transfer-ownership="none">
            <type name="Download" c:type="EphyDownload*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_adblock_manager"
              c:identifier="ephy_embed_shell_get_adblock_manager">
        <doc xml:whitespace="preserve">Returns the adblock manager.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the adblock manager</doc>
          <type name="GObject.Object" c:type="GObject*"/>
        </return-value>
      </method>
      <method name="get_downloads"
              c:identifier="ephy_embed_shell_get_downloads"
              introspectable="0">
        <doc xml:whitespace="preserve">Gets the global #GList object listing active downloads.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GList object</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="gpointer" c:type="gpointer"/>
          </type>
        </return-value>
      </method>
      <method name="get_embed_single"
              c:identifier="ephy_embed_shell_get_embed_single">
        <return-value transfer-ownership="none">
          <type name="GObject.Object" c:type="GObject*"/>
        </return-value>
      </method>
      <method name="get_encodings"
              c:identifier="ephy_embed_shell_get_encodings">
        <return-value transfer-ownership="none">
          <type name="GObject.Object" c:type="GObject*"/>
        </return-value>
      </method>
      <method name="get_favicon_cache"
              c:identifier="ephy_embed_shell_get_favicon_cache">
        <doc xml:whitespace="preserve">Returns the favicons cache.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the favicons cache</doc>
          <type name="GObject.Object" c:type="GObject*"/>
        </return-value>
      </method>
      <method name="get_global_history"
              c:identifier="ephy_embed_shell_get_global_history">
        <return-value transfer-ownership="none">
          <type name="GObject.Object" c:type="GObject*"/>
        </return-value>
      </method>
      <method name="get_mode" c:identifier="ephy_embed_shell_get_mode">
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the global mode of the @shell</doc>
          <type name="EmbedShellMode" c:type="EphyEmbedShellMode"/>
        </return-value>
      </method>
      <method name="get_page_setup"
              c:identifier="ephy_embed_shell_get_page_setup">
        <return-value transfer-ownership="none">
          <type name="Gtk.PageSetup" c:type="GtkPageSetup*"/>
        </return-value>
      </method>
      <method name="get_print_settings"
              c:identifier="ephy_embed_shell_get_print_settings">
        <doc xml:whitespace="preserve">Gets the global #GtkPrintSettings object.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GtkPrintSettings object</doc>
          <type name="Gtk.PrintSettings" c:type="GtkPrintSettings*"/>
        </return-value>
      </method>
      <method name="prepare_close"
              c:identifier="ephy_embed_shell_prepare_close">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="remove_download"
              c:identifier="ephy_embed_shell_remove_download">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="download" transfer-ownership="none">
            <type name="Download" c:type="EphyDownload*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_page_setup"
              c:identifier="ephy_embed_shell_set_page_setup">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="page_setup" transfer-ownership="none">
            <type name="Gtk.PageSetup" c:type="GtkPageSetup*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_print_settings"
              c:identifier="ephy_embed_shell_set_print_settings">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="settings" transfer-ownership="none">
            <type name="Gtk.PrintSettings" c:type="GtkPrintSettings*"/>
          </parameter>
        </parameters>
      </method>
      <property name="mode"
                introspectable="0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type/>
      </property>
      <field name="parent">
        <type name="Gtk.Application" c:type="GtkApplication"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="EmbedShellPrivate" c:type="EphyEmbedShellPrivate*"/>
      </field>
      <glib:signal name="download-added" when="last">
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="Download"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="download-removed" when="last">
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="Download"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="prepare-close" when="first">
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="EmbedShellClass"
            c:type="EphyEmbedShellClass"
            glib:is-gtype-struct-for="EmbedShell">
      <field name="parent_class">
        <type name="Gtk.ApplicationClass" c:type="GtkApplicationClass"/>
      </field>
      <field name="download_added">
        <callback name="download_added">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="shell" transfer-ownership="none">
              <type name="EmbedShell" c:type="EphyEmbedShell*"/>
            </parameter>
            <parameter name="download" transfer-ownership="none">
              <type name="Download" c:type="EphyDownload*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="download_removed">
        <callback name="download_removed">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="shell" transfer-ownership="none">
              <type name="EmbedShell" c:type="EphyEmbedShell*"/>
            </parameter>
            <parameter name="download" transfer-ownership="none">
              <type name="Download" c:type="EphyDownload*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="prepare_close">
        <callback name="prepare_close">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="shell" transfer-ownership="none">
              <type name="EmbedShell" c:type="EphyEmbedShell*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_embed_single">
        <callback name="get_embed_single">
          <return-value transfer-ownership="none">
            <type name="GObject.Object" c:type="GObject*"/>
          </return-value>
          <parameters>
            <parameter name="shell" transfer-ownership="none">
              <type name="EmbedShell" c:type="EphyEmbedShell*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <enumeration name="EmbedShellMode" c:type="EphyEmbedShellMode">
      <member name="browser"
              value="0"
              c:identifier="EPHY_EMBED_SHELL_MODE_BROWSER"/>
      <member name="private"
              value="1"
              c:identifier="EPHY_EMBED_SHELL_MODE_PRIVATE"/>
      <member name="application"
              value="2"
              c:identifier="EPHY_EMBED_SHELL_MODE_APPLICATION"/>
    </enumeration>
    <record name="EmbedShellPrivate"
            c:type="EphyEmbedShellPrivate"
            disguised="1">
    </record>
    <class name="EmbedSingle"
           c:symbol-prefix="embed_single"
           c:type="EphyEmbedSingle"
           parent="GObject.Object"
           glib:type-name="EphyEmbedSingle"
           glib:get-type="ephy_embed_single_get_type"
           glib:type-struct="EmbedSingleClass">
      <implements name="PermissionManager"/>
      <virtual-method name="handle_content">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="mime_type" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="uri" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="new_window" introspectable="0">
        <return-value>
          <type name="Embed" c:type="EphyEmbed*"/>
        </return-value>
        <parameters>
          <parameter name="parent_embed" transfer-ownership="none">
            <type name="Embed" c:type="EphyEmbed*"/>
          </parameter>
          <parameter name="chromemask" transfer-ownership="none">
            <type name="WebViewChrome" c:type="EphyWebViewChrome"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="add_form_auth"
              c:identifier="ephy_embed_single_add_form_auth">
        <doc xml:whitespace="preserve">Adds a new entry to the local cache of form auth data stored in
@single.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="uri" transfer-ownership="none">
            <doc xml:whitespace="preserve">URI of the page</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="form_username" transfer-ownership="none">
            <doc xml:whitespace="preserve">name of the username input field</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="form_password" transfer-ownership="none">
            <doc xml:whitespace="preserve">name of the password input field</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="username" transfer-ownership="none">
            <doc xml:whitespace="preserve">username</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="clear_auth_cache"
              c:identifier="ephy_embed_single_clear_auth_cache">
        <doc xml:whitespace="preserve">Clears the HTTP authentication cache.

This does not clear regular website passwords; it only clears the HTTP
authentication cache. Websites which use HTTP authentication require the
browser to send a password along with every HTTP request; the browser will
ask the user for the password once and then cache the password for subsequent
HTTP requests. This function will clear the HTTP authentication cache,
meaning the user will have to re-enter a username and password the next time
Epiphany requests a web page secured with HTTP authentication.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="clear_cache" c:identifier="ephy_embed_single_clear_cache">
        <doc xml:whitespace="preserve">Clears the HTTP cache (temporarily saved web pages).</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="get_form_auth"
              c:identifier="ephy_embed_single_get_form_auth"
              introspectable="0">
        <doc xml:whitespace="preserve">Gets a #GSList of all stored login/passwords, in
#EphyEmbedSingleFormAuthData format, for any form in @uri, or %NULL
if we have none.

The #EphyEmbedSingleFormAuthData structs and the #GSList are owned
by @single and should not be freed by the user.

in @uri, or %NULL</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">#GSList with the possible auto-fills for the forms</doc>
          <type name="GLib.SList" c:type="GSList*">
            <type name="gpointer" c:type="gpointer"/>
          </type>
        </return-value>
        <parameters>
          <parameter name="uri" transfer-ownership="none">
            <doc xml:whitespace="preserve">the URI of a web page</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_network_status"
              c:identifier="ephy_embed_single_get_network_status">
        <doc xml:whitespace="preserve">Gets the state of the network connection.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE iff the network is on-line.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="initialize" c:identifier="ephy_embed_single_initialize">
        <doc xml:whitespace="preserve">Performs startup initialisations. Must be called before calling
any other methods.</doc>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="open_window" c:identifier="ephy_embed_single_open_window">
        <doc xml:whitespace="preserve">Opens a new window, as if it were opened in @parent using the Javascript
method and arguments: &lt;code&gt;window.open(&amp;quot;@address&amp;quot;,
&amp;quot;_blank&amp;quot;, &amp;quot;@features&amp;quot;);&lt;/code&gt;.

when @features specified "chrome", a #GtkMozEmbed.

NOTE: Use ephy_shell_new_tab() unless this handling of the @features string
is required.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the new embed. This is either a #EphyEmbed, or,</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="parent" transfer-ownership="none">
            <doc xml:whitespace="preserve">the requested window's parent #EphyEmbed</doc>
            <type name="Embed" c:type="EphyEmbed*"/>
          </parameter>
          <parameter name="address" transfer-ownership="none">
            <doc xml:whitespace="preserve">the URL to load</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:whitespace="preserve">a name for the window</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="features" transfer-ownership="none">
            <doc xml:whitespace="preserve">a Javascript features string</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_network_status"
              c:identifier="ephy_embed_single_set_network_status">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="online" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <property name="network-status" writable="1" transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="EmbedSinglePrivate" c:type="EphyEmbedSinglePrivate*"/>
      </field>
      <glib:signal name="handle-content" when="last">
        <return-value transfer-ownership="none">
          <type name="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="utf8"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <type name="utf8"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="new-window" when="first">
        <doc xml:whitespace="preserve">The ::new_window signal is emitted when a new window needs to be opened.
For example, when a JavaScript popup window was opened.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a new #EphyEmbed.</doc>
          <type name="Gtk.Widget"/>
        </return-value>
        <parameters>
          <parameter name="mask" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #EphyEmbedChrome</doc>
            <type name="Gtk.Widget"/>
          </parameter>
          <parameter name="returns" transfer-ownership="none">
            <doc xml:whitespace="preserve">a new #EphyEmbed.</doc>
            <type name="WebViewChrome"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="EmbedSingleClass"
            c:type="EphyEmbedSingleClass"
            glib:is-gtype-struct-for="EmbedSingle">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="new_window" introspectable="0">
        <callback name="new_window" introspectable="0">
          <return-value>
            <type name="Embed" c:type="EphyEmbed*"/>
          </return-value>
          <parameters>
            <parameter name="single" transfer-ownership="none">
              <type name="EmbedSingle" c:type="EphyEmbedSingle*"/>
            </parameter>
            <parameter name="parent_embed" transfer-ownership="none">
              <type name="Embed" c:type="EphyEmbed*"/>
            </parameter>
            <parameter name="chromemask" transfer-ownership="none">
              <type name="WebViewChrome" c:type="EphyWebViewChrome"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_content">
        <callback name="handle_content">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="shell" transfer-ownership="none">
              <type name="EmbedSingle" c:type="EphyEmbedSingle*"/>
            </parameter>
            <parameter name="mime_type" transfer-ownership="none">
              <type name="utf8" c:type="char*"/>
            </parameter>
            <parameter name="uri" transfer-ownership="none">
              <type name="utf8" c:type="char*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <record name="EmbedSingleFormAuthData"
            c:type="EphyEmbedSingleFormAuthData">
      <field name="form_username" writable="1">
        <type name="utf8" c:type="char*"/>
      </field>
      <field name="form_password" writable="1">
        <type name="utf8" c:type="char*"/>
      </field>
      <field name="username" writable="1">
        <type name="utf8" c:type="char*"/>
      </field>
    </record>
    <record name="EmbedSinglePrivate"
            c:type="EphyEmbedSinglePrivate"
            disguised="1">
    </record>
    <interface name="Extension"
               c:symbol-prefix="extension"
               c:type="EphyExtension"
               glib:type-name="EphyExtension"
               glib:get-type="ephy_extension_get_type"
               glib:type-struct="ExtensionIface">
      <virtual-method name="attach_tab" invoker="attach_tab">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="window" transfer-ownership="none">
            <type name="Window" c:type="EphyWindow*"/>
          </parameter>
          <parameter name="embed" transfer-ownership="none">
            <type name="Embed" c:type="EphyEmbed*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="attach_window" invoker="attach_window">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="window" transfer-ownership="none">
            <type name="Window" c:type="EphyWindow*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="detach_tab" invoker="detach_tab">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="window" transfer-ownership="none">
            <type name="Window" c:type="EphyWindow*"/>
          </parameter>
          <parameter name="embed" transfer-ownership="none">
            <type name="Embed" c:type="EphyEmbed*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="detach_window" invoker="detach_window">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="window" transfer-ownership="none">
            <type name="Window" c:type="EphyWindow*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="attach_tab" c:identifier="ephy_extension_attach_tab">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="window" transfer-ownership="none">
            <type name="Window" c:type="EphyWindow*"/>
          </parameter>
          <parameter name="embed" transfer-ownership="none">
            <type name="Embed" c:type="EphyEmbed*"/>
          </parameter>
        </parameters>
      </method>
      <method name="attach_window" c:identifier="ephy_extension_attach_window">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="window" transfer-ownership="none">
            <type name="Window" c:type="EphyWindow*"/>
          </parameter>
        </parameters>
      </method>
      <method name="detach_tab" c:identifier="ephy_extension_detach_tab">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="window" transfer-ownership="none">
            <type name="Window" c:type="EphyWindow*"/>
          </parameter>
          <parameter name="embed" transfer-ownership="none">
            <type name="Embed" c:type="EphyEmbed*"/>
          </parameter>
        </parameters>
      </method>
      <method name="detach_window" c:identifier="ephy_extension_detach_window">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="window" transfer-ownership="none">
            <type name="Window" c:type="EphyWindow*"/>
          </parameter>
        </parameters>
      </method>
    </interface>
    <record name="ExtensionIface"
            c:type="EphyExtensionIface"
            glib:is-gtype-struct-for="Extension">
      <field name="base_iface">
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="attach_window">
        <callback name="attach_window">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="extension" transfer-ownership="none">
              <type name="Extension" c:type="EphyExtension*"/>
            </parameter>
            <parameter name="window" transfer-ownership="none">
              <type name="Window" c:type="EphyWindow*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="detach_window">
        <callback name="detach_window">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="extension" transfer-ownership="none">
              <type name="Extension" c:type="EphyExtension*"/>
            </parameter>
            <parameter name="window" transfer-ownership="none">
              <type name="Window" c:type="EphyWindow*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="attach_tab">
        <callback name="attach_tab">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="extension" transfer-ownership="none">
              <type name="Extension" c:type="EphyExtension*"/>
            </parameter>
            <parameter name="window" transfer-ownership="none">
              <type name="Window" c:type="EphyWindow*"/>
            </parameter>
            <parameter name="embed" transfer-ownership="none">
              <type name="Embed" c:type="EphyEmbed*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="detach_tab">
        <callback name="detach_tab">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="extension" transfer-ownership="none">
              <type name="Extension" c:type="EphyExtension*"/>
            </parameter>
            <parameter name="window" transfer-ownership="none">
              <type name="Window" c:type="EphyWindow*"/>
            </parameter>
            <parameter name="embed" transfer-ownership="none">
              <type name="Embed" c:type="EphyEmbed*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <record name="ExtensionInfo" c:type="EphyExtensionInfo">
      <field name="identifier" writable="1">
        <type name="utf8" c:type="char*"/>
      </field>
      <field name="keyfile" writable="1">
        <type name="GLib.KeyFile" c:type="GKeyFile*"/>
      </field>
      <field name="active" writable="1" bits="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="enabled" writable="1" bits="1">
        <type name="guint" c:type="guint"/>
      </field>
    </record>
    <class name="ExtensionsManager"
           c:symbol-prefix="extensions_manager"
           c:type="EphyExtensionsManager"
           parent="GObject.Object"
           glib:type-name="EphyExtensionsManager"
           glib:get-type="ephy_extensions_manager_get_type"
           glib:type-struct="ExtensionsManagerClass">
      <implements name="Extension"/>
      <virtual-method name="added">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="info" transfer-ownership="none">
            <type name="ExtensionInfo" c:type="EphyExtensionInfo*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="changed">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="info" transfer-ownership="none">
            <type name="ExtensionInfo" c:type="EphyExtensionInfo*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="removed">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="info" transfer-ownership="none">
            <type name="ExtensionInfo" c:type="EphyExtensionInfo*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="get_extensions"
              c:identifier="ephy_extensions_manager_get_extensions">
        <doc xml:whitespace="preserve">Returns the list of known extensions.

#EphyExtensionInfo</doc>
        <return-value transfer-ownership="container">
          <doc xml:whitespace="preserve">a list of</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="Embed"/>
          </type>
        </return-value>
      </method>
      <method name="load" c:identifier="ephy_extensions_manager_load">
        <doc xml:whitespace="preserve">Loads the extension corresponding to @identifier.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="identifier" transfer-ownership="none">
            <doc xml:whitespace="preserve">identifier of the extension to load</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="register" c:identifier="ephy_extensions_manager_register">
        <doc xml:whitespace="preserve">Registers @object with the extensions manager. @object must implement the
#EphyExtension interface.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:whitespace="preserve">an Extension</doc>
            <type name="GObject.Object" c:type="GObject*"/>
          </parameter>
        </parameters>
      </method>
      <method name="startup" c:identifier="ephy_extensions_manager_startup">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="unload" c:identifier="ephy_extensions_manager_unload">
        <doc xml:whitespace="preserve">Unloads the extension specified by @identifier.

The extension with the same filename can afterwards be reloaded. However,
if any GTypes within the extension have changed parent types, Epiphany must
be restarted.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="identifier" transfer-ownership="none">
            <doc xml:whitespace="preserve">filename of extension to unload, minus "lib" and "extension.so"</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="ExtensionsManagerPrivate"
              c:type="EphyExtensionsManagerPrivate*"/>
      </field>
      <glib:signal name="added" when="first">
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="gpointer"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="changed" when="first">
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="gpointer"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="removed" when="first">
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="gpointer"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="ExtensionsManagerClass"
            c:type="EphyExtensionsManagerClass"
            glib:is-gtype-struct-for="ExtensionsManager">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="added">
        <callback name="added">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="manager" transfer-ownership="none">
              <type name="ExtensionsManager" c:type="EphyExtensionsManager*"/>
            </parameter>
            <parameter name="info" transfer-ownership="none">
              <type name="ExtensionInfo" c:type="EphyExtensionInfo*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="changed">
        <callback name="changed">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="manager" transfer-ownership="none">
              <type name="ExtensionsManager" c:type="EphyExtensionsManager*"/>
            </parameter>
            <parameter name="info" transfer-ownership="none">
              <type name="ExtensionInfo" c:type="EphyExtensionInfo*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="removed">
        <callback name="removed">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="manager" transfer-ownership="none">
              <type name="ExtensionsManager" c:type="EphyExtensionsManager*"/>
            </parameter>
            <parameter name="info" transfer-ownership="none">
              <type name="ExtensionInfo" c:type="EphyExtensionInfo*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <record name="ExtensionsManagerPrivate"
            c:type="EphyExtensionsManagerPrivate"
            disguised="1">
    </record>
    <class name="FaviconCache"
           c:symbol-prefix="favicon_cache"
           c:type="EphyFaviconCache"
           parent="GObject.Object"
           glib:type-name="EphyFaviconCache"
           glib:get-type="ephy_favicon_cache_get_type"
           glib:type-struct="FaviconCacheClass">
      <constructor name="new" c:identifier="ephy_favicon_cache_new">
        <return-value transfer-ownership="full">
          <type name="FaviconCache" c:type="EphyFaviconCache*"/>
        </return-value>
      </constructor>
      <virtual-method name="changed">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="url" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="clear" c:identifier="ephy_favicon_cache_clear">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="get" c:identifier="ephy_favicon_cache_get">
        <doc xml:whitespace="preserve">Note: This will always return %NULL for non-http URLs.

%NULL if if could not be retrieved. Unref when you don't need it anymore.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">the site icon at @url as a #GdkPixbuf, or</doc>
          <type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*"/>
        </return-value>
        <parameters>
          <parameter name="url" transfer-ownership="none">
            <doc xml:whitespace="preserve">the URL of the icon to retrieve</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="FaviconCachePrivate" c:type="EphyFaviconCachePrivate*"/>
      </field>
      <glib:signal name="changed" when="last">
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="utf8"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="FaviconCacheClass"
            c:type="EphyFaviconCacheClass"
            glib:is-gtype-struct-for="FaviconCache">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="changed">
        <callback name="changed">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="cache" transfer-ownership="none">
              <type name="FaviconCache" c:type="EphyFaviconCache*"/>
            </parameter>
            <parameter name="url" transfer-ownership="none">
              <type name="utf8" c:type="char*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <record name="FaviconCachePrivate"
            c:type="EphyFaviconCachePrivate"
            disguised="1">
    </record>
    <class name="FindToolbar"
           c:symbol-prefix="find_toolbar"
           c:type="EphyFindToolbar"
           parent="Gtk.Toolbar"
           glib:type-name="EphyFindToolbar"
           glib:get-type="ephy_find_toolbar_get_type"
           glib:type-struct="FindToolbarClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.Orientable"/>
      <implements name="Gtk.ToolShell"/>
      <constructor name="new" c:identifier="ephy_find_toolbar_new">
        <return-value transfer-ownership="none">
          <type name="FindToolbar" c:type="EphyFindToolbar*"/>
        </return-value>
        <parameters>
          <parameter name="window" transfer-ownership="none">
            <type name="Window" c:type="EphyWindow*"/>
          </parameter>
        </parameters>
      </constructor>
      <virtual-method name="close" invoker="close">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </virtual-method>
      <virtual-method name="next">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </virtual-method>
      <virtual-method name="previous">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </virtual-method>
      <method name="close" c:identifier="ephy_find_toolbar_close">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="find_next" c:identifier="ephy_find_toolbar_find_next">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="find_previous"
              c:identifier="ephy_find_toolbar_find_previous">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="get_text" c:identifier="ephy_find_toolbar_get_text">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="char*"/>
        </return-value>
      </method>
      <method name="open" c:identifier="ephy_find_toolbar_open">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="links_only" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="clear_search" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="request_close"
              c:identifier="ephy_find_toolbar_request_close">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="set_embed" c:identifier="ephy_find_toolbar_set_embed">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="embed" transfer-ownership="none">
            <type name="Embed" c:type="EphyEmbed*"/>
          </parameter>
        </parameters>
      </method>
      <property name="window"
                readable="0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="Window"/>
      </property>
      <field name="parent">
        <type name="Gtk.Toolbar" c:type="GtkToolbar"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="FindToolbarPrivate" c:type="EphyFindToolbarPrivate*"/>
      </field>
      <glib:signal name="close" when="first" action="1">
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
      </glib:signal>
      <glib:signal name="next" when="first">
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
      </glib:signal>
      <glib:signal name="previous" when="first">
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="FindToolbarClass"
            c:type="EphyFindToolbarClass"
            glib:is-gtype-struct-for="FindToolbar">
      <field name="parent_class">
        <type name="Gtk.ToolbarClass" c:type="GtkToolbarClass"/>
      </field>
      <field name="next">
        <callback name="next">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="toolbar" transfer-ownership="none">
              <type name="FindToolbar" c:type="EphyFindToolbar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="previous">
        <callback name="previous">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="toolbar" transfer-ownership="none">
              <type name="FindToolbar" c:type="EphyFindToolbar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="close">
        <callback name="close">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="toolbar" transfer-ownership="none">
              <type name="FindToolbar" c:type="EphyFindToolbar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <record name="FindToolbarPrivate"
            c:type="EphyFindToolbarPrivate"
            disguised="1">
    </record>
    <class name="History"
           c:symbol-prefix="history"
           c:type="EphyHistory"
           parent="GObject.Object"
           glib:type-name="EphyHistory"
           glib:get-type="ephy_history_get_type"
           glib:type-struct="HistoryClass">
      <constructor name="new" c:identifier="ephy_history_new">
        <return-value transfer-ownership="full">
          <type name="History" c:type="EphyHistory*"/>
        </return-value>
      </constructor>
      <virtual-method name="add_page">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="url" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="redirect" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="toplevel" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="cleared">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </virtual-method>
      <virtual-method name="icon_updated">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="address" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="icon" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="redirect">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="from_uri" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="to_uri" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="visited">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="url" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="add_page" c:identifier="ephy_history_add_page">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="url" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="redirect" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="toplevel" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="clear" c:identifier="ephy_history_clear">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="get_host" c:identifier="ephy_history_get_host">
        <return-value transfer-ownership="none">
          <type name="Node" c:type="EphyNode*"/>
        </return-value>
        <parameters>
          <parameter name="url" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_hosts" c:identifier="ephy_history_get_hosts">
        <return-value transfer-ownership="none">
          <type name="Node" c:type="EphyNode*"/>
        </return-value>
      </method>
      <method name="get_icon" c:identifier="ephy_history_get_icon">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <parameter name="url" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_last_page" c:identifier="ephy_history_get_last_page">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="char*"/>
        </return-value>
      </method>
      <method name="get_page" c:identifier="ephy_history_get_page">
        <return-value transfer-ownership="none">
          <type name="Node" c:type="EphyNode*"/>
        </return-value>
        <parameters>
          <parameter name="url" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_page_visits"
              c:identifier="ephy_history_get_page_visits">
        <return-value transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <parameter name="url" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_pages" c:identifier="ephy_history_get_pages">
        <return-value transfer-ownership="none">
          <type name="Node" c:type="EphyNode*"/>
        </return-value>
      </method>
      <method name="is_enabled" c:identifier="ephy_history_is_enabled">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="is_page_visited"
              c:identifier="ephy_history_is_page_visited">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="url" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_enabled" c:identifier="ephy_history_set_enabled">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="enabled" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_icon" c:identifier="ephy_history_set_icon">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="url" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="icon" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_page_title" c:identifier="ephy_history_set_page_title">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="url" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="title" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <property name="enabled" writable="1" transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="HistoryPrivate" c:type="EphyHistoryPrivate*"/>
      </field>
      <glib:signal name="add-page" when="last">
        <return-value transfer-ownership="none">
          <type name="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="utf8"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <type name="gboolean"/>
          </parameter>
          <parameter name="p1" transfer-ownership="none">
            <type name="gboolean"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="cleared" when="first">
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
      </glib:signal>
      <glib:signal name="icon-updated" when="first">
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="utf8"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <type name="utf8"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="redirect" when="first">
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="utf8"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <type name="utf8"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="visited" when="first">
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="utf8"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="HistoryClass"
            c:type="EphyHistoryClass"
            glib:is-gtype-struct-for="History">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="add_page">
        <callback name="add_page">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="history" transfer-ownership="none">
              <type name="History" c:type="EphyHistory*"/>
            </parameter>
            <parameter name="url" transfer-ownership="none">
              <type name="utf8" c:type="char*"/>
            </parameter>
            <parameter name="redirect" transfer-ownership="none">
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
            <parameter name="toplevel" transfer-ownership="none">
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="visited">
        <callback name="visited">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="history" transfer-ownership="none">
              <type name="History" c:type="EphyHistory*"/>
            </parameter>
            <parameter name="url" transfer-ownership="none">
              <type name="utf8" c:type="char*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="cleared">
        <callback name="cleared">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="history" transfer-ownership="none">
              <type name="History" c:type="EphyHistory*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="redirect">
        <callback name="redirect">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="history" transfer-ownership="none">
              <type name="History" c:type="EphyHistory*"/>
            </parameter>
            <parameter name="from_uri" transfer-ownership="none">
              <type name="utf8" c:type="char*"/>
            </parameter>
            <parameter name="to_uri" transfer-ownership="none">
              <type name="utf8" c:type="char*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="icon_updated">
        <callback name="icon_updated">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="history" transfer-ownership="none">
              <type name="History" c:type="EphyHistory*"/>
            </parameter>
            <parameter name="address" transfer-ownership="none">
              <type name="utf8" c:type="char*"/>
            </parameter>
            <parameter name="icon" transfer-ownership="none">
              <type name="utf8" c:type="char*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <record name="HistoryPrivate" c:type="EphyHistoryPrivate" disguised="1">
    </record>
    <interface name="Link"
               c:symbol-prefix="link"
               c:type="EphyLink"
               glib:type-name="EphyLink"
               glib:get-type="ephy_link_get_type"
               glib:type-struct="LinkIface">
      <virtual-method name="open_link" introspectable="0">
        <return-value>
          <type name="Embed" c:type="EphyEmbed*"/>
        </return-value>
        <parameters>
          <parameter name="address" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="embed" transfer-ownership="none">
            <type name="Embed" c:type="EphyEmbed*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <type name="LinkFlags" c:type="EphyLinkFlags"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="open" c:identifier="ephy_link_open">
        <doc xml:whitespace="preserve">Triggers @link open action.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the #EphyEmbed where @link opened.</doc>
          <type name="Embed" c:type="EphyEmbed*"/>
        </return-value>
        <parameters>
          <parameter name="address" transfer-ownership="none">
            <doc xml:whitespace="preserve">the address of @link</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="embed" transfer-ownership="none">
            <doc xml:whitespace="preserve">#EphyEmbed associated with @link</doc>
            <type name="Embed" c:type="EphyEmbed*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:whitespace="preserve">flags for @link</doc>
            <type name="LinkFlags" c:type="EphyLinkFlags"/>
          </parameter>
        </parameters>
      </method>
      <glib:signal name="open-link" when="last">
        <doc xml:whitespace="preserve">The ::open-link signal is emitted when @link is requested to
open it's associated @address.

been handled.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the #EphyEmbed where @address has</doc>
          <type name="Gtk.Widget"/>
        </return-value>
        <parameters>
          <parameter name="embed" transfer-ownership="none">
            <doc xml:whitespace="preserve">#EphyEmbed associated with @link</doc>
            <type name="utf8"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:whitespace="preserve">flags for @link</doc>
            <type name="Gtk.Widget"/>
          </parameter>
          <parameter name="returns" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #EphyEmbed where @address has</doc>
            <type name="LinkFlags"/>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <class name="LinkAction"
           c:symbol-prefix="link_action"
           c:type="EphyLinkAction"
           parent="Gtk.Action"
           glib:type-name="EphyLinkAction"
           glib:get-type="ephy_link_action_get_type"
           glib:type-struct="LinkActionClass">
      <implements name="Link"/>
      <implements name="Gtk.Buildable"/>
      <method name="get_button" c:identifier="ephy_link_action_get_button">
        <doc xml:whitespace="preserve">This method stores the mouse button number that last activated, or
is activating, the @action. This is useful because #GtkButton's
cannot be clicked with a middle click by default, so inside
Epiphany we fake this by forwarding a left click (button 1) event
instead of a middle click (button 2) to the button. That makes the
EphyGUI methods like ephy_gui_is_middle_click not work here, so we
need to ask the @action directly about the button that activated
it.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the button number that last activated (or is activating) the @action</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
      </method>
      <field name="parent_instance">
        <type name="Gtk.Action" c:type="GtkAction"/>
      </field>
      <field name="priv">
        <type name="LinkActionPrivate" c:type="EphyLinkActionPrivate*"/>
      </field>
    </class>
    <record name="LinkActionClass"
            c:type="EphyLinkActionClass"
            glib:is-gtype-struct-for="LinkAction">
      <field name="parent_class">
        <type name="Gtk.ActionClass" c:type="GtkActionClass"/>
      </field>
    </record>
    <class name="LinkActionGroup"
           c:symbol-prefix="link_action_group"
           c:type="EphyLinkActionGroup"
           parent="Gtk.ActionGroup"
           glib:type-name="EphyLinkActionGroup"
           glib:get-type="ephy_link_action_group_get_type"
           glib:type-struct="LinkActionGroupClass">
      <implements name="Link"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new" c:identifier="ephy_link_action_group_new">
        <return-value transfer-ownership="full">
          <type name="LinkActionGroup" c:type="EphyLinkActionGroup*"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </constructor>
      <field name="parent_instance">
        <type name="Gtk.ActionGroup" c:type="GtkActionGroup"/>
      </field>
    </class>
    <record name="LinkActionGroupClass"
            c:type="EphyLinkActionGroupClass"
            glib:is-gtype-struct-for="LinkActionGroup">
      <field name="parent_class">
        <type name="Gtk.ActionGroupClass" c:type="GtkActionGroupClass"/>
      </field>
    </record>
    <record name="LinkActionPrivate"
            c:type="EphyLinkActionPrivate"
            disguised="1">
    </record>
    <bitfield name="LinkFlags"
              glib:type-name="EphyLinkFlags"
              glib:get-type="ephy_link_flags_get_type"
              c:type="EphyLinkFlags">
      <member name="new_window"
              value="1"
              c:identifier="EPHY_LINK_NEW_WINDOW"
              glib:nick="new-window"/>
      <member name="new_tab"
              value="2"
              c:identifier="EPHY_LINK_NEW_TAB"
              glib:nick="new-tab"/>
      <member name="jump_to"
              value="4"
              c:identifier="EPHY_LINK_JUMP_TO"
              glib:nick="jump-to"/>
      <member name="new_tab_append_after"
              value="8"
              c:identifier="EPHY_LINK_NEW_TAB_APPEND_AFTER"
              glib:nick="new-tab-append-after"/>
      <function name="from_current_event"
                c:identifier="ephy_link_flags_from_current_event">
        <return-value transfer-ownership="none">
          <type name="LinkFlags" c:type="EphyLinkFlags"/>
        </return-value>
      </function>
    </bitfield>
    <record name="LinkIface"
            c:type="EphyLinkIface"
            glib:is-gtype-struct-for="Link">
      <field name="base_iface">
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="open_link" introspectable="0">
        <callback name="open_link" introspectable="0">
          <return-value>
            <type name="Embed" c:type="EphyEmbed*"/>
          </return-value>
          <parameters>
            <parameter name="link" transfer-ownership="none">
              <type name="Link" c:type="EphyLink*"/>
            </parameter>
            <parameter name="address" transfer-ownership="none">
              <type name="utf8" c:type="char*"/>
            </parameter>
            <parameter name="embed" transfer-ownership="none">
              <type name="Embed" c:type="EphyEmbed*"/>
            </parameter>
            <parameter name="flags" transfer-ownership="none">
              <type name="LinkFlags" c:type="EphyLinkFlags"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="LocationAction"
           c:symbol-prefix="location_action"
           c:type="EphyLocationAction"
           parent="LinkAction"
           glib:type-name="EphyLocationAction"
           glib:get-type="ephy_location_action_get_type"
           glib:type-struct="LocationActionClass">
      <implements name="Link"/>
      <implements name="Gtk.Buildable"/>
      <virtual-method name="lock_clicked">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </virtual-method>
      <method name="get_address"
              c:identifier="ephy_location_action_get_address">
        <doc xml:whitespace="preserve">Retrieves the currently loaded address.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the current address</doc>
          <type name="utf8" c:type="char*"/>
        </return-value>
      </method>
      <method name="set_address"
              c:identifier="ephy_location_action_set_address">
        <doc xml:whitespace="preserve">Sets @address as the address of @action.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="address" transfer-ownership="none">
            <doc xml:whitespace="preserve">new address</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <property name="address" writable="1" transfer-ownership="none">
        <doc xml:whitespace="preserve">The address of the current location.</doc>
        <type name="utf8"/>
      </property>
      <property name="editable" writable="1" transfer-ownership="none">
        <doc xml:whitespace="preserve">Whether the location bar entry can be edited.</doc>
        <type name="gboolean"/>
      </property>
      <property name="icon" writable="1" transfer-ownership="none">
        <doc xml:whitespace="preserve">The icon corresponding to the current location.</doc>
        <type name="GdkPixbuf.Pixbuf"/>
      </property>
      <property name="lock-stock-id" writable="1" transfer-ownership="none">
        <doc xml:whitespace="preserve">Stock id of the security icon.</doc>
        <type name="utf8"/>
      </property>
      <property name="lock-tooltip" writable="1" transfer-ownership="none">
        <doc xml:whitespace="preserve">Tooltip for the security icon.</doc>
        <type name="utf8"/>
      </property>
      <property name="show-lock" writable="1" transfer-ownership="none">
        <doc xml:whitespace="preserve">If we should show the security icon.</doc>
        <type name="gboolean"/>
      </property>
      <property name="window"
                readable="0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The parent window.</doc>
        <type name="GObject.Object"/>
      </property>
      <field name="parent">
        <type name="LinkAction" c:type="EphyLinkAction"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="LocationActionPrivate"
              c:type="EphyLocationActionPrivate*"/>
      </field>
      <glib:signal name="lock-clicked" when="first">
        <doc xml:whitespace="preserve">Emitted when the user clicks on the security icon of the internal
#EphyLocationEntry.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="LocationActionClass"
            c:type="EphyLocationActionClass"
            glib:is-gtype-struct-for="LocationAction">
      <field name="parent_class">
        <type name="LinkActionClass" c:type="EphyLinkActionClass"/>
      </field>
      <field name="lock_clicked">
        <callback name="lock_clicked">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="action" transfer-ownership="none">
              <type name="LocationAction" c:type="EphyLocationAction*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <record name="LocationActionPrivate"
            c:type="EphyLocationActionPrivate"
            disguised="1">
    </record>
    <bitfield name="NewTabFlags"
              glib:type-name="EphyNewTabFlags"
              glib:get-type="ephy_new_tab_flags_get_type"
              c:type="EphyNewTabFlags">
      <member name="home_page"
              value="1"
              c:identifier="EPHY_NEW_TAB_HOME_PAGE"
              glib:nick="home-page"/>
      <member name="new_page"
              value="2"
              c:identifier="EPHY_NEW_TAB_NEW_PAGE"
              glib:nick="new-page"/>
      <member name="open_page"
              value="4"
              c:identifier="EPHY_NEW_TAB_OPEN_PAGE"
              glib:nick="open-page"/>
      <member name="fullscreen_mode"
              value="16"
              c:identifier="EPHY_NEW_TAB_FULLSCREEN_MODE"
              glib:nick="fullscreen-mode"/>
      <member name="dont_show_window"
              value="32"
              c:identifier="EPHY_NEW_TAB_DONT_SHOW_WINDOW"
              glib:nick="dont-show-window"/>
      <member name="append_last"
              value="128"
              c:identifier="EPHY_NEW_TAB_APPEND_LAST"
              glib:nick="append-last"/>
      <member name="append_after"
              value="256"
              c:identifier="EPHY_NEW_TAB_APPEND_AFTER"
              glib:nick="append-after"/>
      <member name="jump"
              value="512"
              c:identifier="EPHY_NEW_TAB_JUMP"
              glib:nick="jump"/>
      <member name="in_new_window"
              value="1024"
              c:identifier="EPHY_NEW_TAB_IN_NEW_WINDOW"
              glib:nick="in-new-window"/>
      <member name="in_existing_window"
              value="2048"
              c:identifier="EPHY_NEW_TAB_IN_EXISTING_WINDOW"
              glib:nick="in-existing-window"/>
      <member name="from_external"
              value="4096"
              c:identifier="EPHY_NEW_TAB_FROM_EXTERNAL"
              glib:nick="from-external"/>
      <member name="dont_copy_history"
              value="8192"
              c:identifier="EPHY_NEW_TAB_DONT_COPY_HISTORY"
              glib:nick="dont-copy-history"/>
    </bitfield>
    <record name="Node"
            c:type="EphyNode"
            glib:type-name="EphyNode"
            glib:get-type="ephy_node_get_type"
            c:symbol-prefix="node">
      <constructor name="new" c:identifier="ephy_node_new">
        <return-value transfer-ownership="full">
          <type name="Node" c:type="EphyNode*"/>
        </return-value>
        <parameters>
          <parameter name="db" transfer-ownership="none">
            <type name="NodeDb" c:type="EphyNodeDb*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_from_xml" c:identifier="ephy_node_new_from_xml">
        <return-value transfer-ownership="full">
          <type name="Node" c:type="EphyNode*"/>
        </return-value>
        <parameters>
          <parameter name="db" transfer-ownership="none">
            <type name="NodeDb" c:type="EphyNodeDb*"/>
          </parameter>
          <parameter name="xml_node" transfer-ownership="none">
            <type name="libxml2.NodePtr" c:type="xmlNodePtr"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_with_id" c:identifier="ephy_node_new_with_id">
        <return-value transfer-ownership="full">
          <type name="Node" c:type="EphyNode*"/>
        </return-value>
        <parameters>
          <parameter name="db" transfer-ownership="none">
            <type name="NodeDb" c:type="EphyNodeDb*"/>
          </parameter>
          <parameter name="reserved_id" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="add_child" c:identifier="ephy_node_add_child">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="child" transfer-ownership="none">
            <type name="Node" c:type="EphyNode*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_child_index" c:identifier="ephy_node_get_child_index">
        <return-value transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <parameter name="child" transfer-ownership="none">
            <type name="Node" c:type="EphyNode*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_children" c:identifier="ephy_node_get_children">
        <return-value transfer-ownership="none">
          <array zero-terminated="0" name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="Node"/>
          </array>
        </return-value>
      </method>
      <method name="get_db" c:identifier="ephy_node_get_db">
        <return-value transfer-ownership="none">
          <type name="NodeDb" c:type="EphyNodeDb*"/>
        </return-value>
      </method>
      <method name="get_id" c:identifier="ephy_node_get_id">
        <return-value transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </return-value>
      </method>
      <method name="get_is_drag_dest"
              c:identifier="ephy_node_get_is_drag_dest">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_is_drag_source"
              c:identifier="ephy_node_get_is_drag_source">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_n_children" c:identifier="ephy_node_get_n_children">
        <return-value transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </return-value>
      </method>
      <method name="get_next_child" c:identifier="ephy_node_get_next_child">
        <return-value transfer-ownership="none">
          <type name="Node" c:type="EphyNode*"/>
        </return-value>
        <parameters>
          <parameter name="child" transfer-ownership="none">
            <type name="Node" c:type="EphyNode*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_nth_child" c:identifier="ephy_node_get_nth_child">
        <return-value transfer-ownership="none">
          <type name="Node" c:type="EphyNode*"/>
        </return-value>
        <parameters>
          <parameter name="n" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_previous_child"
              c:identifier="ephy_node_get_previous_child">
        <return-value transfer-ownership="none">
          <type name="Node" c:type="EphyNode*"/>
        </return-value>
        <parameters>
          <parameter name="child" transfer-ownership="none">
            <type name="Node" c:type="EphyNode*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_property" c:identifier="ephy_node_get_property">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="property_id" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="value"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <type name="GObject.Value" c:type="GValue*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_property_boolean"
              c:identifier="ephy_node_get_property_boolean">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="property_id" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_property_double"
              c:identifier="ephy_node_get_property_double">
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="double"/>
        </return-value>
        <parameters>
          <parameter name="property_id" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_property_float"
              c:identifier="ephy_node_get_property_float">
        <return-value transfer-ownership="none">
          <type name="gfloat" c:type="float"/>
        </return-value>
        <parameters>
          <parameter name="property_id" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_property_int"
              c:identifier="ephy_node_get_property_int">
        <return-value transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <parameter name="property_id" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_property_long"
              c:identifier="ephy_node_get_property_long">
        <return-value transfer-ownership="none">
          <type name="glong" c:type="long"/>
        </return-value>
        <parameters>
          <parameter name="property_id" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_property_node"
              c:identifier="ephy_node_get_property_node">
        <return-value transfer-ownership="none">
          <type name="Node" c:type="EphyNode*"/>
        </return-value>
        <parameters>
          <parameter name="property_id" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_property_string"
              c:identifier="ephy_node_get_property_string">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <parameter name="property_id" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="has_child" c:identifier="ephy_node_has_child">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="child" transfer-ownership="none">
            <type name="Node" c:type="EphyNode*"/>
          </parameter>
        </parameters>
      </method>
      <method name="ref" c:identifier="ephy_node_ref">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="remove_child" c:identifier="ephy_node_remove_child">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="child" transfer-ownership="none">
            <type name="Node" c:type="EphyNode*"/>
          </parameter>
        </parameters>
      </method>
      <method name="reorder_children"
              c:identifier="ephy_node_reorder_children">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="new_order" transfer-ownership="none">
            <type name="gint" c:type="int*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_is_drag_dest"
              c:identifier="ephy_node_set_is_drag_dest">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="allow" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_is_drag_source"
              c:identifier="ephy_node_set_is_drag_source">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="allow" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_property" c:identifier="ephy_node_set_property">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="property_id" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <type name="GObject.Value" c:type="GValue*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_property_boolean"
              c:identifier="ephy_node_set_property_boolean">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="property_id" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_property_double"
              c:identifier="ephy_node_set_property_double">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="property_id" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <type name="gdouble" c:type="double"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_property_float"
              c:identifier="ephy_node_set_property_float">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="property_id" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <type name="gfloat" c:type="float"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_property_int"
              c:identifier="ephy_node_set_property_int">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="property_id" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_property_long"
              c:identifier="ephy_node_set_property_long">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="property_id" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <type name="glong" c:type="long"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_property_string"
              c:identifier="ephy_node_set_property_string">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="property_id" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="signal_connect_object"
              c:identifier="ephy_node_signal_connect_object"
              introspectable="0">
        <doc xml:whitespace="preserve">Connects a callback function to the @type signal of @node.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">an identifier for the connected signal</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <parameter name="type" transfer-ownership="none">
            <doc xml:whitespace="preserve">signal type</doc>
            <type name="NodeSignalType" c:type="EphyNodeSignalType"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     scope="notified">
            <doc xml:whitespace="preserve">the callback to connect</doc>
            <type name="NodeCallback" c:type="EphyNodeCallback"/>
          </parameter>
          <parameter name="object" transfer-ownership="none">
            <doc xml:whitespace="preserve">data to pass to @callback</doc>
            <type name="GObject.Object" c:type="GObject*"/>
          </parameter>
        </parameters>
      </method>
      <method name="signal_disconnect"
              c:identifier="ephy_node_signal_disconnect">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="signal_id" transfer-ownership="none">
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="signal_disconnect_object"
              c:identifier="ephy_node_signal_disconnect_object"
              introspectable="0">
        <doc xml:whitespace="preserve">Disconnects @callback from @type in @node. @callback is identified by the
@object previously passed in ephy_node_signal_connect_object.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the number of signal handlers removed</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="type" transfer-ownership="none">
            <doc xml:whitespace="preserve">signal type</doc>
            <type name="NodeSignalType" c:type="EphyNodeSignalType"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     scope="notified">
            <doc xml:whitespace="preserve">the callback to disconnect</doc>
            <type name="NodeCallback" c:type="EphyNodeCallback"/>
          </parameter>
          <parameter name="object" transfer-ownership="none">
            <doc xml:whitespace="preserve">data passed to @callback when it was connected</doc>
            <type name="GObject.Object" c:type="GObject*"/>
          </parameter>
        </parameters>
      </method>
      <method name="sort_children" c:identifier="ephy_node_sort_children">
        <doc xml:whitespace="preserve">Sorts the children of @node using @compare_func.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="compare_func"
                     transfer-ownership="none"
                     scope="call">
            <doc xml:whitespace="preserve">function to compare children</doc>
            <type name="GLib.CompareFunc" c:type="GCompareFunc"/>
          </parameter>
        </parameters>
      </method>
      <method name="unref" c:identifier="ephy_node_unref">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="write_to_xml" c:identifier="ephy_node_write_to_xml">
        <return-value transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <parameter name="writer" transfer-ownership="none">
            <type name="libxml2.TextWriter" c:type="xmlTextWriterPtr"/>
          </parameter>
        </parameters>
      </method>
    </record>
    <callback name="NodeCallback" c:type="EphyNodeCallback" introspectable="0">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="node" transfer-ownership="none">
          <type name="Node" c:type="EphyNode*"/>
        </parameter>
        <parameter transfer-ownership="none">
          <varargs>
          </varargs>
        </parameter>
      </parameters>
    </callback>
    <class name="NodeDb"
           c:symbol-prefix="node_db"
           c:type="EphyNodeDb"
           parent="GObject.Object"
           glib:type-name="EphyNodeDb"
           glib:get-type="ephy_node_db_get_type"
           glib:type-struct="NodeDbClass">
      <constructor name="new" c:identifier="ephy_node_db_new">
        <doc xml:whitespace="preserve">Creates and returns a new #EphyNodeDb, named @name.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">the new #EphyNodeDb</doc>
          <type name="NodeDb" c:type="EphyNodeDb*"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <doc xml:whitespace="preserve">the name of the new #EphyNodeDb</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_name" c:identifier="ephy_node_db_get_name">
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the name of @db</doc>
          <type name="utf8" c:type="char*"/>
        </return-value>
      </method>
      <method name="get_node_from_id"
              c:identifier="ephy_node_db_get_node_from_id">
        <doc xml:whitespace="preserve">Returns the #EphyNode with id @id from @db, or %NULL if no such id exists.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">an #EphyNode</doc>
          <type name="Node" c:type="EphyNode*"/>
        </return-value>
        <parameters>
          <parameter name="id" transfer-ownership="none">
            <doc xml:whitespace="preserve">an id specifying an #EphyNode in @db</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="is_immutable" c:identifier="ephy_node_db_is_immutable">
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if @db is immutable</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="load_from_file" c:identifier="ephy_node_db_load_from_file">
        <doc xml:whitespace="preserve">Populates @db with data from @xml_file. The node database will be populated
with everything inside of the @xml_root tag from @xml_file. If @xml_version
is different from the version attribute of the @xml_root element, this
function will fail.

The data will most probably have been stored using
ephy_node_db_write_to_xml_safe().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if successful</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="xml_file" transfer-ownership="none">
            <doc xml:whitespace="preserve">the filename from which @db will be populated</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="xml_root" transfer-ownership="none">
            <doc xml:whitespace="preserve">the root element in @xml_file</doc>
            <type name="libxml2.Char" c:type="xmlChar*"/>
          </parameter>
          <parameter name="xml_version" transfer-ownership="none">
            <doc xml:whitespace="preserve">the required version attribute in the @xml_root</doc>
            <type name="libxml2.Char" c:type="xmlChar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_immutable" c:identifier="ephy_node_db_set_immutable">
        <doc xml:whitespace="preserve">If @immutable is %TRUE, sets @db immutable (read-only). Otherwise, sets @db
to be read-write.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="immutable" transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE to make @db immutable</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="write_to_xml_safe"
              c:identifier="ephy_node_db_write_to_xml_safe"
              introspectable="0">
        <doc xml:whitespace="preserve">Writes @db's data to an XML file for storage. The data can be retrieved in
the future using ephy_node_db_load_from_file().

The function arguments are straightforward until @node, at which point some
explanation is necessary.

The variable argument list starts at @node, which is an #EphyNode containing
data to write to @filename. The next argument is an integer specifying the
number of &lt;quote&gt;exception&lt;/quote&gt; nodes. After this integer, that number of
#EphyNode arguments should be given. Each of these &lt;quote&gt;exception&lt;/quote&gt;
nodes determines which data out of @node will &lt;emphasis&gt;not&lt;/emphasis&gt; be
written to @filename.

To insert all of an #EphyNode's contents without exception, simply give the
integer %0 after @node.

The remainder of this function's arguments will be groups of such #EphyNode -
integer - (list of #EphyNode&lt;!-- --&gt;s). Finally, the last argument must be
%NULL.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%0 on success or a negative number on failure</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <parameter name="filename" transfer-ownership="none">
            <doc xml:whitespace="preserve">the XML file in which @db's data will be stored</doc>
            <type name="libxml2.Char" c:type="xmlChar*"/>
          </parameter>
          <parameter name="root" transfer-ownership="none">
            <doc xml:whitespace="preserve">the desired root element in @filename</doc>
            <type name="libxml2.Char" c:type="xmlChar*"/>
          </parameter>
          <parameter name="version" transfer-ownership="none">
            <doc xml:whitespace="preserve">the version attribute to the @root element</doc>
            <type name="libxml2.Char" c:type="xmlChar*"/>
          </parameter>
          <parameter name="comment" transfer-ownership="none">
            <doc xml:whitespace="preserve">a comment to place directly inside the @root element of @filename</doc>
            <type name="libxml2.Char" c:type="xmlChar*"/>
          </parameter>
          <parameter name="node" transfer-ownership="none">
            <doc xml:whitespace="preserve">The first node of data to write</doc>
            <type name="Node" c:type="EphyNode*"/>
          </parameter>
          <parameter transfer-ownership="none">
            <varargs>
            </varargs>
          </parameter>
        </parameters>
      </method>
      <property name="immutable" writable="1" transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <property name="name"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="NodeDbPrivate" c:type="EphyNodeDbPrivate*"/>
      </field>
    </class>
    <record name="NodeDbClass"
            c:type="EphyNodeDbClass"
            glib:is-gtype-struct-for="NodeDb">
      <field name="parent">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="NodeDbPrivate" c:type="EphyNodeDbPrivate" disguised="1">
    </record>
    <callback name="NodeFilterFunc" c:type="EphyNodeFilterFunc">
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter transfer-ownership="none">
          <type name="Node" c:type="EphyNode*"/>
        </parameter>
        <parameter transfer-ownership="none">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <enumeration name="NodeSignalType" c:type="EphyNodeSignalType">
      <member name="destroy" value="0" c:identifier="EPHY_NODE_DESTROY"/>
      <member name="restored" value="1" c:identifier="EPHY_NODE_RESTORED"/>
      <member name="changed" value="2" c:identifier="EPHY_NODE_CHANGED"/>
      <member name="child_added"
              value="3"
              c:identifier="EPHY_NODE_CHILD_ADDED"/>
      <member name="child_changed"
              value="4"
              c:identifier="EPHY_NODE_CHILD_CHANGED"/>
      <member name="child_removed"
              value="5"
              c:identifier="EPHY_NODE_CHILD_REMOVED"/>
      <member name="children_reordered"
              value="6"
              c:identifier="EPHY_NODE_CHILDREN_REORDERED"/>
    </enumeration>
    <class name="Notebook"
           c:symbol-prefix="notebook"
           c:type="EphyNotebook"
           parent="Gtk.Notebook"
           glib:type-name="EphyNotebook"
           glib:get-type="ephy_notebook_get_type"
           glib:type-struct="NotebookClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Link"/>
      <implements name="Gtk.Buildable"/>
      <virtual-method name="tab_close_req">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="embed" transfer-ownership="none">
            <type name="Embed" c:type="EphyEmbed*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="add_tab" c:identifier="ephy_notebook_add_tab">
        <return-value transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <parameter name="embed" transfer-ownership="none">
            <type name="Embed" c:type="EphyEmbed*"/>
          </parameter>
          <parameter name="position" transfer-ownership="none">
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="jump_to" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_dnd_enabled"
              c:identifier="ephy_notebook_set_dnd_enabled">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="enabled" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_show_tabs" c:identifier="ephy_notebook_set_show_tabs">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="show_tabs" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <property name="dnd-enabled" writable="1" transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <property name="show-tabs" writable="1" transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <field name="parent">
        <type name="Gtk.Notebook" c:type="GtkNotebook"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="NotebookPrivate" c:type="EphyNotebookPrivate*"/>
      </field>
      <glib:signal name="tab-close-request" when="last">
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="Gtk.Widget"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="NotebookClass"
            c:type="EphyNotebookClass"
            glib:is-gtype-struct-for="Notebook">
      <field name="parent_class">
        <type name="Gtk.NotebookClass" c:type="GtkNotebookClass"/>
      </field>
      <field name="tab_close_req">
        <callback name="tab_close_req">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="notebook" transfer-ownership="none">
              <type name="Notebook" c:type="EphyNotebook*"/>
            </parameter>
            <parameter name="embed" transfer-ownership="none">
              <type name="Embed" c:type="EphyEmbed*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <record name="NotebookPrivate" c:type="EphyNotebookPrivate" disguised="1">
    </record>
    <constant name="PERMISSION_TYPE_COOKIE"
              value="cookie"
              c:type="EPHY_PERMISSION_TYPE_COOKIE">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PERMISSION_TYPE_IMAGE"
              value="image"
              c:type="EPHY_PERMISSION_TYPE_IMAGE">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PERMISSION_TYPE_POPUP"
              value="popup"
              c:type="EPHY_PERMISSION_TYPE_POPUP">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <enumeration name="Permission"
                 glib:type-name="EphyPermission"
                 glib:get-type="ephy_permission_get_type"
                 c:type="EphyPermission">
      <member name="allowed"
              value="0"
              c:identifier="EPHY_PERMISSION_ALLOWED"
              glib:nick="allowed"/>
      <member name="denied"
              value="1"
              c:identifier="EPHY_PERMISSION_DENIED"
              glib:nick="denied"/>
      <member name="default"
              value="2"
              c:identifier="EPHY_PERMISSION_DEFAULT"
              glib:nick="default"/>
    </enumeration>
    <record name="PermissionInfo"
            c:type="EphyPermissionInfo"
            glib:type-name="EphyPermissionInfo"
            glib:get-type="ephy_permission_info_get_type"
            c:symbol-prefix="permission_info">
      <field name="host" writable="1">
        <type name="utf8" c:type="char*"/>
      </field>
      <field name="qtype" writable="1">
        <type name="GLib.Quark" c:type="GQuark"/>
      </field>
      <field name="permission" writable="1">
        <type name="Permission" c:type="EphyPermission"/>
      </field>
      <constructor name="new" c:identifier="ephy_permission_info_new">
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">the new #EphyPermissionInfo</doc>
          <type name="PermissionInfo" c:type="EphyPermissionInfo*"/>
        </return-value>
        <parameters>
          <parameter name="host" transfer-ownership="none">
            <doc xml:whitespace="preserve">a host name</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="type" transfer-ownership="none">
            <doc xml:whitespace="preserve">an #EphyPermissionType</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="permission" transfer-ownership="none">
            <doc xml:whitespace="preserve">whether @host should be allowed to do what @type specifies</doc>
            <type name="Permission" c:type="EphyPermission"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="copy" c:identifier="ephy_permission_info_copy">
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a copy of @info</doc>
          <type name="PermissionInfo" c:type="EphyPermissionInfo*"/>
        </return-value>
      </method>
      <method name="free" c:identifier="ephy_permission_info_free">
        <doc xml:whitespace="preserve">Frees @info.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
    </record>
    <interface name="PermissionManager"
               c:symbol-prefix="permission_manager"
               c:type="EphyPermissionManager"
               glib:type-name="EphyPermissionManager"
               glib:get-type="ephy_permission_manager_get_type"
               glib:type-struct="PermissionManagerIface">
      <virtual-method name="add">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="host" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="type" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="permission" transfer-ownership="none">
            <type name="Permission" c:type="EphyPermission"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="added">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="info" transfer-ownership="none">
            <type name="PermissionInfo" c:type="EphyPermissionInfo*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="changed">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="info" transfer-ownership="none">
            <type name="PermissionInfo" c:type="EphyPermissionInfo*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="clear">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </virtual-method>
      <virtual-method name="cleared">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </virtual-method>
      <virtual-method name="deleted">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="info" transfer-ownership="none">
            <type name="PermissionInfo" c:type="EphyPermissionInfo*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="list" introspectable="0">
        <return-value>
          <type name="GLib.List" c:type="GList*">
            <type name="gpointer" c:type="gpointer"/>
          </type>
        </return-value>
        <parameters>
          <parameter name="type" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="remove">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="host" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="type" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="test">
        <return-value transfer-ownership="none">
          <type name="Permission" c:type="EphyPermission"/>
        </return-value>
        <parameters>
          <parameter name="host" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="type" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="add_permission"
              c:identifier="ephy_permission_manager_add_permission">
        <doc xml:whitespace="preserve">Adds the specified permission to the permissions database.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="host" transfer-ownership="none">
            <doc xml:whitespace="preserve">a website URL</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="type" transfer-ownership="none">
            <doc xml:whitespace="preserve">a string to identify the type of the permission</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="permission" transfer-ownership="none">
            <doc xml:whitespace="preserve">either %EPHY_PERMISSION_ALLOWED or %EPHY_PERMISSION_DENIED</doc>
            <type name="Permission" c:type="EphyPermission"/>
          </parameter>
        </parameters>
      </method>
      <method name="clear_permissions"
              c:identifier="ephy_permission_manager_clear_permissions">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="list_permissions"
              c:identifier="ephy_permission_manager_list_permissions"
              introspectable="0">
        <doc xml:whitespace="preserve">Lists all permission entries of type @type in the permissions database, each
as its own #EphyPermissionInfo. These entries must be freed using
ephy_permission_info_free().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the list of permission database entries</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="gpointer" c:type="gpointer"/>
          </type>
        </return-value>
        <parameters>
          <parameter name="type" transfer-ownership="none">
            <doc xml:whitespace="preserve">a string to identify the type of the permission</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_permission"
              c:identifier="ephy_permission_manager_remove_permission">
        <doc xml:whitespace="preserve">Removes the specified permission from the permissions database. This implies
that the browser should use defaults when next visiting the specified
@host's web pages.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="host" transfer-ownership="none">
            <doc xml:whitespace="preserve">a website URL</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="type" transfer-ownership="none">
            <doc xml:whitespace="preserve">a string to identify the type of the permission</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="test_permission"
              c:identifier="ephy_permission_manager_test_permission">
        <doc xml:whitespace="preserve">Retrieves an #EphyPermissionType from the permissions database. If there is
no entry for this @type and @host, it will return %EPHY_PERMISSION_DEFAULT.
In that case, the caller may need to determine the appropriate default
behavior.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the permission of type #EphyPermission</doc>
          <type name="Permission" c:type="EphyPermission"/>
        </return-value>
        <parameters>
          <parameter name="host" transfer-ownership="none">
            <doc xml:whitespace="preserve">a website URL</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="type" transfer-ownership="none">
            <doc xml:whitespace="preserve">a string to identify the type of the permission</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <glib:signal name="permission-added" when="first">
        <doc xml:whitespace="preserve">The permission-added signal is emitted when a permission entry has
been added.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="info" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #EphyPermissionInfo</doc>
            <type name="PermissionInfo"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="permission-changed" when="first">
        <doc xml:whitespace="preserve">The permission-changed signal is emitted when a permission entry has
been changed.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="info" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #EphyPermissionInfo</doc>
            <type name="PermissionInfo"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="permission-deleted" when="first">
        <doc xml:whitespace="preserve">The permission-deleted signal is emitted when a permission entry has
been deleted.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="info" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #EphyPermissionInfo</doc>
            <type name="PermissionInfo"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="permissions-cleared" when="first">
        <doc xml:whitespace="preserve">The permissions-cleared signal is emitted when the permissions
database has been cleared.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
      </glib:signal>
    </interface>
    <record name="PermissionManagerIface"
            c:type="EphyPermissionManagerIface"
            glib:is-gtype-struct-for="PermissionManager">
      <field name="base_iface">
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="added">
        <callback name="added">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="manager" transfer-ownership="none">
              <type name="PermissionManager" c:type="EphyPermissionManager*"/>
            </parameter>
            <parameter name="info" transfer-ownership="none">
              <type name="PermissionInfo" c:type="EphyPermissionInfo*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="changed">
        <callback name="changed">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="manager" transfer-ownership="none">
              <type name="PermissionManager" c:type="EphyPermissionManager*"/>
            </parameter>
            <parameter name="info" transfer-ownership="none">
              <type name="PermissionInfo" c:type="EphyPermissionInfo*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="deleted">
        <callback name="deleted">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="manager" transfer-ownership="none">
              <type name="PermissionManager" c:type="EphyPermissionManager*"/>
            </parameter>
            <parameter name="info" transfer-ownership="none">
              <type name="PermissionInfo" c:type="EphyPermissionInfo*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="cleared">
        <callback name="cleared">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="manager" transfer-ownership="none">
              <type name="PermissionManager" c:type="EphyPermissionManager*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="add">
        <callback name="add">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="manager" transfer-ownership="none">
              <type name="PermissionManager" c:type="EphyPermissionManager*"/>
            </parameter>
            <parameter name="host" transfer-ownership="none">
              <type name="utf8" c:type="char*"/>
            </parameter>
            <parameter name="type" transfer-ownership="none">
              <type name="utf8" c:type="char*"/>
            </parameter>
            <parameter name="permission" transfer-ownership="none">
              <type name="Permission" c:type="EphyPermission"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="remove">
        <callback name="remove">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="manager" transfer-ownership="none">
              <type name="PermissionManager" c:type="EphyPermissionManager*"/>
            </parameter>
            <parameter name="host" transfer-ownership="none">
              <type name="utf8" c:type="char*"/>
            </parameter>
            <parameter name="type" transfer-ownership="none">
              <type name="utf8" c:type="char*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="clear">
        <callback name="clear">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="manager" transfer-ownership="none">
              <type name="PermissionManager" c:type="EphyPermissionManager*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="test">
        <callback name="test">
          <return-value transfer-ownership="none">
            <type name="Permission" c:type="EphyPermission"/>
          </return-value>
          <parameters>
            <parameter name="manager" transfer-ownership="none">
              <type name="PermissionManager" c:type="EphyPermissionManager*"/>
            </parameter>
            <parameter name="host" transfer-ownership="none">
              <type name="utf8" c:type="char*"/>
            </parameter>
            <parameter name="type" transfer-ownership="none">
              <type name="utf8" c:type="char*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="list" introspectable="0">
        <callback name="list" introspectable="0">
          <return-value>
            <type name="GLib.List" c:type="GList*">
              <type name="gpointer" c:type="gpointer"/>
            </type>
          </return-value>
          <parameters>
            <parameter name="manager" transfer-ownership="none">
              <type name="PermissionManager" c:type="EphyPermissionManager*"/>
            </parameter>
            <parameter name="type" transfer-ownership="none">
              <type name="utf8" c:type="char*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="SearchEntry"
           c:symbol-prefix="search_entry"
           c:type="EphySearchEntry"
           parent="Gtk.Entry"
           glib:type-name="EphySearchEntry"
           glib:get-type="ephy_search_entry_get_type"
           glib:type-struct="SearchEntryClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.CellEditable"/>
      <implements name="Gtk.Editable"/>
      <constructor name="new" c:identifier="ephy_search_entry_new">
        <doc xml:whitespace="preserve">Creates a new #EphySearchEntry.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a new #EphySearchEntry, as a #GtkWidget</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <virtual-method name="search">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="text" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="clear" c:identifier="ephy_search_entry_clear">
        <doc xml:whitespace="preserve">Clears the text of the internal #GtkEntry of @entry.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <field name="parent">
        <type name="Gtk.Entry" c:type="GtkEntry"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="SearchEntryPrivate" c:type="EphySearchEntryPrivate*"/>
      </field>
      <glib:signal name="search" when="last">
        <doc xml:whitespace="preserve">Emitted when the user activates the search entry after introducing
text.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="text" transfer-ownership="none">
            <doc xml:whitespace="preserve">the text introduced by the user</doc>
            <type name="utf8"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="SearchEntryClass"
            c:type="EphySearchEntryClass"
            glib:is-gtype-struct-for="SearchEntry">
      <field name="parent">
        <type name="Gtk.EntryClass" c:type="GtkEntryClass"/>
      </field>
      <field name="search">
        <callback name="search">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="entry" transfer-ownership="none">
              <type name="SearchEntry" c:type="EphySearchEntry*"/>
            </parameter>
            <parameter name="text" transfer-ownership="none">
              <type name="utf8" c:type="char*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <record name="SearchEntryPrivate"
            c:type="EphySearchEntryPrivate"
            disguised="1">
    </record>
    <class name="Session"
           c:symbol-prefix="session"
           c:type="EphySession"
           parent="GObject.Object"
           glib:type-name="EphySession"
           glib:get-type="ephy_session_get_type"
           glib:type-struct="SessionClass">
      <implements name="Extension"/>
      <method name="add_window" c:identifier="ephy_session_add_window">
        <doc xml:whitespace="preserve">Add a tool window to the session. #EphyWindow take care of adding
itself to session.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="window" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #EphyWindow</doc>
            <type name="Gtk.Window" c:type="GtkWindow*"/>
          </parameter>
        </parameters>
      </method>
      <method name="close" c:identifier="ephy_session_close">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="get_active_window"
              c:identifier="ephy_session_get_active_window">
        <doc xml:whitespace="preserve">Get the current active browser window. Use it when you
need to take an action (like opening an url) on
a window but you dont have a target window.

window, or NULL of there is none.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the current active non-popup browser</doc>
          <type name="Window" c:type="EphyWindow*"/>
        </return-value>
      </method>
      <method name="get_windows" c:identifier="ephy_session_get_windows">
        <doc xml:whitespace="preserve">open #EphyWindow:s.</doc>
        <return-value transfer-ownership="container">
          <doc xml:whitespace="preserve">the list of</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="Window"/>
          </type>
        </return-value>
      </method>
      <method name="load" c:identifier="ephy_session_load">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="filename" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="user_time" transfer-ownership="none">
            <type name="guint32" c:type="guint32"/>
          </parameter>
        </parameters>
      </method>
      <method name="queue_command" c:identifier="ephy_session_queue_command">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="op" transfer-ownership="none">
            <type name="SessionCommand" c:type="EphySessionCommand"/>
          </parameter>
          <parameter name="arg" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="args" transfer-ownership="none">
            <type name="utf8" c:type="char**"/>
          </parameter>
          <parameter name="user_time" transfer-ownership="none">
            <type name="guint32" c:type="guint32"/>
          </parameter>
          <parameter name="priority" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_window" c:identifier="ephy_session_remove_window">
        <doc xml:whitespace="preserve">Remove a tool window from the session.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="window" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GtkWindow, which must be either the bookmarks editor or the history window.</doc>
            <type name="Gtk.Window" c:type="GtkWindow*"/>
          </parameter>
        </parameters>
      </method>
      <method name="save" c:identifier="ephy_session_save">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="filename" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <property name="active-window" transfer-ownership="none">
        <type name="Window"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="SessionPrivate" c:type="EphySessionPrivate*"/>
      </field>
    </class>
    <record name="SessionClass"
            c:type="EphySessionClass"
            glib:is-gtype-struct-for="Session">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <enumeration name="SessionCommand" c:type="EphySessionCommand">
      <member name="resume_session"
              value="0"
              c:identifier="EPHY_SESSION_CMD_RESUME_SESSION"/>
      <member name="load_session"
              value="1"
              c:identifier="EPHY_SESSION_CMD_LOAD_SESSION"/>
      <member name="open_bookmarks_editor"
              value="2"
              c:identifier="EPHY_SESSION_CMD_OPEN_BOOKMARKS_EDITOR"/>
      <member name="open_uris"
              value="3"
              c:identifier="EPHY_SESSION_CMD_OPEN_URIS"/>
      <member name="maybe_open_window"
              value="4"
              c:identifier="EPHY_SESSION_CMD_MAYBE_OPEN_WINDOW"/>
      <member name="maybe_open_window_restore"
              value="5"
              c:identifier="EPHY_SESSION_CMD_MAYBE_OPEN_WINDOW_RESTORE"/>
      <member name="last" value="6" c:identifier="EPHY_SESSION_CMD_LAST"/>
    </enumeration>
    <record name="SessionPrivate" c:type="EphySessionPrivate" disguised="1">
    </record>
    <class name="Shell"
           c:symbol-prefix="shell"
           c:type="EphyShell"
           parent="EmbedShell"
           glib:type-name="EphyShell"
           glib:get-type="ephy_shell_get_type"
           glib:type-struct="ShellClass">
      <implements name="Gio.ActionGroup"/>
      <implements name="Gio.ActionMap"/>
      <function name="get_default" c:identifier="ephy_shell_get_default">
        <doc xml:whitespace="preserve">Retrieve the default #EphyShell object</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the default #EphyShell</doc>
          <type name="Shell" c:type="EphyShell*"/>
        </return-value>
      </function>
      <method name="get_bookmarks" c:identifier="ephy_shell_get_bookmarks">
        <return-value transfer-ownership="none">
          <type name="Bookmarks" c:type="EphyBookmarks*"/>
        </return-value>
      </method>
      <method name="get_bookmarks_editor"
              c:identifier="ephy_shell_get_bookmarks_editor">
        <return-value transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </method>
      <method name="get_extensions_manager"
              c:identifier="ephy_shell_get_extensions_manager">
        <return-value transfer-ownership="none">
          <type name="GObject.Object" c:type="GObject*"/>
        </return-value>
      </method>
      <method name="get_history_window"
              c:identifier="ephy_shell_get_history_window">
        <return-value transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </method>
      <method name="get_net_monitor" c:identifier="ephy_shell_get_net_monitor">
        <return-value transfer-ownership="none">
          <type name="GObject.Object" c:type="GObject*"/>
        </return-value>
      </method>
      <method name="get_pdm_dialog" c:identifier="ephy_shell_get_pdm_dialog">
        <return-value transfer-ownership="none">
          <type name="GObject.Object" c:type="GObject*"/>
        </return-value>
      </method>
      <method name="get_prefs_dialog"
              c:identifier="ephy_shell_get_prefs_dialog">
        <return-value transfer-ownership="none">
          <type name="GObject.Object" c:type="GObject*"/>
        </return-value>
      </method>
      <method name="get_session" c:identifier="ephy_shell_get_session">
        <doc xml:whitespace="preserve">Returns current session.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the current session.</doc>
          <type name="GObject.Object" c:type="GObject*"/>
        </return-value>
      </method>
      <method name="new_tab" c:identifier="ephy_shell_new_tab">
        <doc xml:whitespace="preserve">Create a new tab and the parent window when necessary.
Use this function to open urls in new window/tabs.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the created #EphyEmbed</doc>
          <type name="Embed" c:type="EphyEmbed*"/>
        </return-value>
        <parameters>
          <parameter name="parent_window" transfer-ownership="none">
            <doc xml:whitespace="preserve">the target #EphyWindow or %NULL</doc>
            <type name="Window" c:type="EphyWindow*"/>
          </parameter>
          <parameter name="previous_embed" transfer-ownership="none">
            <doc xml:whitespace="preserve">the referrer embed, or %NULL</doc>
            <type name="Embed" c:type="EphyEmbed*"/>
          </parameter>
          <parameter name="url" transfer-ownership="none">
            <doc xml:whitespace="preserve">an url to load or %NULL</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <type name="NewTabFlags" c:type="EphyNewTabFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="new_tab_full" c:identifier="ephy_shell_new_tab_full">
        <doc xml:whitespace="preserve">Create a new tab and the parent window when necessary.
Use this function to open urls in new window/tabs.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the created #EphyEmbed</doc>
          <type name="Embed" c:type="EphyEmbed*"/>
        </return-value>
        <parameters>
          <parameter name="parent_window" transfer-ownership="none">
            <doc xml:whitespace="preserve">the target #EphyWindow or %NULL</doc>
            <type name="Window" c:type="EphyWindow*"/>
          </parameter>
          <parameter name="previous_embed" transfer-ownership="none">
            <doc xml:whitespace="preserve">the referrer embed, or %NULL</doc>
            <type name="Embed" c:type="EphyEmbed*"/>
          </parameter>
          <parameter name="request" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #WebKitNetworkRequest to load or %NULL</doc>
            <type name="WebKit.NetworkRequest" c:type="WebKitNetworkRequest*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <type name="NewTabFlags" c:type="EphyNewTabFlags"/>
          </parameter>
          <parameter name="chrome" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #EphyEmbedChrome mask to use if creating a new window</doc>
            <type name="WebViewChrome" c:type="EphyWebViewChrome"/>
          </parameter>
          <parameter name="is_popup" transfer-ownership="none">
            <doc xml:whitespace="preserve">whether the new window is a popup</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="user_time" transfer-ownership="none">
            <doc xml:whitespace="preserve">a timestamp, or 0</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_startup_context"
              c:identifier="ephy_shell_set_startup_context">
        <doc xml:whitespace="preserve">Sets the startup context to be used during activation of a new instance.
See ephy_shell_set_startup_new().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="ctx" transfer-ownership="full">
            <doc xml:whitespace="preserve">a #EphyShellStartupContext</doc>
            <type name="ShellStartupContext"
                  c:type="EphyShellStartupContext*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent">
        <type name="EmbedShell" c:type="EphyEmbedShell"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="ShellPrivate" c:type="EphyShellPrivate*"/>
      </field>
    </class>
    <record name="ShellClass"
            c:type="EphyShellClass"
            glib:is-gtype-struct-for="Shell">
      <field name="parent_class">
        <type name="EmbedShellClass" c:type="EphyEmbedShellClass"/>
      </field>
    </record>
    <record name="ShellPrivate" c:type="EphyShellPrivate" disguised="1">
    </record>
    <record name="ShellStartupContext" c:type="EphyShellStartupContext">
      <field name="startup_flags" writable="1">
        <type name="StartupFlags" c:type="EphyStartupFlags"/>
      </field>
      <field name="bookmarks_filename" writable="1">
        <type name="utf8" c:type="char*"/>
      </field>
      <field name="session_filename" writable="1">
        <type name="utf8" c:type="char*"/>
      </field>
      <field name="bookmark_url" writable="1">
        <type name="utf8" c:type="char*"/>
      </field>
      <field name="arguments" writable="1">
        <type name="utf8" c:type="char**"/>
      </field>
      <field name="user_time" writable="1">
        <type name="guint32" c:type="guint32"/>
      </field>
      <function name="new"
                c:identifier="ephy_shell_startup_context_new"
                introspectable="0">
        <doc xml:whitespace="preserve">Creates a new startup context. All string parameters, including
@arguments, are copied.</doc>
        <return-value>
          <doc xml:whitespace="preserve">a newly allocated #EphyShellStartupContext</doc>
          <type name="ShellStartupContext" c:type="EphyShellStartupContext*"/>
        </return-value>
        <parameters>
          <parameter name="startup_flags" transfer-ownership="none">
            <type name="StartupFlags" c:type="EphyStartupFlags"/>
          </parameter>
          <parameter name="bookmarks_filename" transfer-ownership="none">
            <doc xml:whitespace="preserve">A bookmarks file to import.</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="session_filename" transfer-ownership="none">
            <doc xml:whitespace="preserve">A session to restore.</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="bookmark_url" transfer-ownership="none">
            <doc xml:whitespace="preserve">A URL to be added to the bookmarks.</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="arguments" transfer-ownership="none">
            <doc xml:whitespace="preserve">A %NULL-terminated array of URLs and file URIs to be opened.</doc>
            <type name="utf8" c:type="char**"/>
          </parameter>
          <parameter name="user_time" transfer-ownership="none">
            <doc xml:whitespace="preserve">The user time when the EphyShell startup was invoked.</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
        </parameters>
      </function>
    </record>
    <bitfield name="StartupFlags" c:type="EphyStartupFlags">
      <member name="new_tab" value="1" c:identifier="EPHY_STARTUP_NEW_TAB"/>
      <member name="new_window"
              value="2"
              c:identifier="EPHY_STARTUP_NEW_WINDOW"/>
      <member name="bookmarks_editor"
              value="4"
              c:identifier="EPHY_STARTUP_BOOKMARKS_EDITOR"/>
    </bitfield>
    <bitfield name="StateWindowFlags" c:type="EphyStateWindowFlags">
      <member name="none"
              value="0"
              c:identifier="EPHY_STATE_WINDOW_SAVE_NONE"/>
      <member name="size"
              value="1"
              c:identifier="EPHY_STATE_WINDOW_SAVE_SIZE"/>
      <member name="position"
              value="2"
              c:identifier="EPHY_STATE_WINDOW_SAVE_POSITION"/>
    </bitfield>
    <constant name="WEB_VIEW_CHROME_ALL"
              value="0"
              c:type="EPHY_WEB_VIEW_CHROME_ALL">
      <type name="gint" c:type="gint"/>
    </constant>
    <class name="WebView"
           c:symbol-prefix="web_view"
           c:type="EphyWebView"
           parent="WebKit.WebView"
           glib:type-name="EphyWebView"
           glib:get-type="ephy_web_view_get_type"
           glib:type-struct="WebViewClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.Scrollable"/>
      <constructor name="new" c:identifier="ephy_web_view_new">
        <doc xml:whitespace="preserve">Equivalent to g_object_new() but returns an #GtkWidget so you don't have
to cast it when dealing with most code.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the newly created #EphyWebView widget</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <virtual-method name="close_request">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </virtual-method>
      <virtual-method name="content_blocked">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="uri" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="feed_link">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="type" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="title" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="address" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="modal_alert">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </virtual-method>
      <virtual-method name="modal_alert_closed">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </virtual-method>
      <virtual-method name="new_document_now">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="uri" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="new_window">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="new_view" transfer-ownership="none">
            <type name="WebView" c:type="EphyWebView*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="popup_blocked">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="address" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="target" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="features" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="search_key_press">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="event" transfer-ownership="none">
            <type name="Gdk.EventKey" c:type="GdkEventKey*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="search_link">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="type" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="title" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="address" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="can_go_up" c:identifier="ephy_web_view_can_go_up">
        <doc xml:whitespace="preserve">Returns whether @view can travel to a higher-level directory on the server.
For example, for http://www.example.com/subdir/foo.html, returns %TRUE; for
http://www.example.com/, returns %FALSE.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if @view can browse to a higher-level directory</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="clear_history" c:identifier="ephy_web_view_clear_history">
        <doc xml:whitespace="preserve">Clears history of @view.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="copy_back_history"
              c:identifier="ephy_web_view_copy_back_history">
        <doc xml:whitespace="preserve">Sets the back history (up to the current item) of @source as the
back history of @dest.

Useful to keep the history when opening links in new tabs or
windows.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="dest" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #EphyWebView to copy the history to</doc>
            <type name="WebView" c:type="EphyWebView*"/>
          </parameter>
        </parameters>
      </method>
      <method name="create_web_application"
              c:identifier="ephy_web_view_create_web_application">
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <parameter name="title" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="icon" transfer-ownership="none">
            <type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_address" c:identifier="ephy_web_view_get_address">
        <doc xml:whitespace="preserve">Returns the address of the currently loaded page.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">@view's address. Will never be %NULL.</doc>
          <type name="utf8" c:type="char*"/>
        </return-value>
      </method>
      <method name="get_document_type"
              c:identifier="ephy_web_view_get_document_type">
        <doc xml:whitespace="preserve">Returns the type of document loaded in the @view</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the #EphyWebViewDocumentType</doc>
          <type name="WebViewDocumentType" c:type="EphyWebViewDocumentType"/>
        </return-value>
      </method>
      <method name="get_go_up_list"
              c:identifier="ephy_web_view_get_go_up_list"
              introspectable="0">
        <doc xml:whitespace="preserve">Returns a list of (%char *) URLs to higher-level directories on the same
server, in order of deepest to shallowest. For example, given
"http://www.example.com/dir/subdir/file.html", will return a list containing
"http://www.example.com/dir/subdir/", "http://www.example.com/dir/" and
"http://www.example.com/".

page's directory hierarchy</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a list of URLs higher up in @view's web</doc>
          <type name="GLib.SList" c:type="GSList*">
            <type name="gpointer" c:type="gpointer"/>
          </type>
        </return-value>
      </method>
      <method name="get_icon" c:identifier="ephy_web_view_get_icon">
        <doc xml:whitespace="preserve">Returns the view's site icon as a #GdkPixbuf,
or %NULL if it is not available.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a the view's site icon</doc>
          <type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*"/>
        </return-value>
      </method>
      <method name="get_is_blank" c:identifier="ephy_web_view_get_is_blank">
        <doc xml:whitespace="preserve">Returns whether the  @view's address is "blank".</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the @view's address is "blank"</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_link_message"
              c:identifier="ephy_web_view_get_link_message">
        <doc xml:whitespace="preserve">When the user is hovering the mouse over a hyperlink, returns the URL of the
hyperlink.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the URL of the link over which the mouse is hovering</doc>
          <type name="utf8" c:type="char*"/>
        </return-value>
      </method>
      <method name="get_loading_title"
              c:identifier="ephy_web_view_get_loading_title">
        <doc xml:whitespace="preserve">Returns the loading title for @view.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the provisional title of @view while loading</doc>
          <type name="utf8" c:type="char*"/>
        </return-value>
      </method>
      <method name="get_location" c:identifier="ephy_web_view_get_location">
        <doc xml:whitespace="preserve">Returns the URL of the web page displayed in @view.

If the web page contains frames, @toplevel will determine which location to
retrieve. If @toplevel is %TRUE, the return value will be the location of the
frameset document. If @toplevel is %FALSE, the return value will be the
location of the currently-focused frame.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">the URL of the web page displayed in @view</doc>
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <parameter name="toplevel" transfer-ownership="none">
            <doc xml:whitespace="preserve">%FALSE to return the location of the focused frame only</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_navigation_flags"
              c:identifier="ephy_web_view_get_navigation_flags">
        <doc xml:whitespace="preserve">Returns @view's navigation flags.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">@view's navigation flags</doc>
          <type name="WebViewNavigationFlags"
                c:type="EphyWebViewNavigationFlags"/>
        </return-value>
      </method>
      <method name="get_security_level"
              c:identifier="ephy_web_view_get_security_level">
        <doc xml:whitespace="preserve">Fetches the #EphyWebViewSecurityLevel and a string description of the
security state of @view.  The description will be a newly-allocated
string or %NULL.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="level"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:whitespace="preserve">return value of security level</doc>
            <type name="WebViewSecurityLevel"
                  c:type="EphyWebViewSecurityLevel*"/>
          </parameter>
          <parameter name="description"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:whitespace="preserve">return value of the description of the security level</doc>
            <type name="utf8" c:type="char**"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_snapshot" c:identifier="ephy_web_view_get_snapshot">
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a #GdkPixbuf with a snapshot of the requested area.</doc>
          <type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*"/>
        </return-value>
        <parameters>
          <parameter name="x" transfer-ownership="none">
            <doc xml:whitespace="preserve">the x coordinate of the snapshot</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:whitespace="preserve">the y coordinate of the snapshot</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="width" transfer-ownership="none">
            <doc xml:whitespace="preserve">the width of the snapshot</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <doc xml:whitespace="preserve">the height of the snapshot</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_status_message"
              c:identifier="ephy_web_view_get_status_message">
        <doc xml:whitespace="preserve">Returns the message displayed in @view's #EphyWindow's
#EphyStatusbar. If the user is hovering the mouse over a hyperlink,
this function will return the same value as
ephy_web_view_get_link_message(). Otherwise, it will return a network
status message, or NULL.

The message returned has a limited lifetime, and so should be copied with
g_strdup() if it must be stored.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">The current statusbar message</doc>
          <type name="utf8" c:type="char*"/>
        </return-value>
      </method>
      <method name="get_title" c:identifier="ephy_web_view_get_title">
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the title of the web page displayed in @view</doc>
          <type name="utf8" c:type="char*"/>
        </return-value>
      </method>
      <method name="get_title_composite"
              c:identifier="ephy_web_view_get_title_composite">
        <doc xml:whitespace="preserve">Returns the title of the web page loaded in @view.

This differs from #ephy_web_view_get_title in that this function
will return a special title while the page is still loading.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">@view's web page's title. Will never be %NULL.</doc>
          <type name="utf8" c:type="char*"/>
        </return-value>
      </method>
      <method name="get_typed_address"
              c:identifier="ephy_web_view_get_typed_address">
        <doc xml:whitespace="preserve">Returns the text that @view's #EphyWindow will display in its location toolbar
entry when @view is selected.

This is not guaranteed to be the same as @view's location,
available through ephy_web_view_get_location(). As the user types a new address
into the location entry, ephy_web_view_get_location()'s returned string will
change.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">@view's #EphyWindow's location entry text when @view is selected</doc>
          <type name="utf8" c:type="char*"/>
        </return-value>
      </method>
      <method name="get_visibility"
              c:identifier="ephy_web_view_get_visibility">
        <doc xml:whitespace="preserve">Returns whether the @view's toplevel is visible or not. Used
mostly for popup visibility management.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if @view's "visibility" property is set</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="go_up" c:identifier="ephy_web_view_go_up">
        <doc xml:whitespace="preserve">Moves @view one level up in its web page's directory hierarchy.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="has_modified_forms"
              c:identifier="ephy_web_view_has_modified_forms">
        <doc xml:whitespace="preserve">Returns %TRUE if the user has modified &amp;lt;input&amp;gt; or &amp;lt;textarea&amp;gt;
values in @view's loaded document.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if @view has user-modified forms</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="is_loading" c:identifier="ephy_web_view_is_loading">
        <doc xml:whitespace="preserve">Returns whether the web page in @view has finished loading. A web
page is only finished loading after all images, styles, and other
dependencies have been downloaded and rendered, or when the load
has failed for some reason.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the page is still loading, %FALSE if complete</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="load_error_page"
              c:identifier="ephy_web_view_load_error_page">
        <doc xml:whitespace="preserve">Loads an error page appropiate for @page in @view.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="uri" transfer-ownership="none">
            <doc xml:whitespace="preserve">uri that caused the failure</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="page" transfer-ownership="none">
            <doc xml:whitespace="preserve">one of #EphyWebViewErrorPage</doc>
            <type name="WebViewErrorPage" c:type="EphyWebViewErrorPage"/>
          </parameter>
          <parameter name="error" transfer-ownership="none">
            <doc xml:whitespace="preserve">a GError to inspect, or %NULL</doc>
            <type name="GLib.Error" c:type="GError*"/>
          </parameter>
        </parameters>
      </method>
      <method name="load_homepage" c:identifier="ephy_web_view_load_homepage">
        <doc xml:whitespace="preserve">Loads the homepage, which is hardcoded to be "about:blank"</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="load_request" c:identifier="ephy_web_view_load_request">
        <doc xml:whitespace="preserve">Loads the given #WebKitNetworkRequest in the given #EphyWebView.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="request" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #WebKitNetworkRequest to be loaded</doc>
            <type name="WebKit.NetworkRequest" c:type="WebKitNetworkRequest*"/>
          </parameter>
        </parameters>
      </method>
      <method name="load_url" c:identifier="ephy_web_view_load_url">
        <doc xml:whitespace="preserve">Loads @url in @view.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="url" transfer-ownership="none">
            <doc xml:whitespace="preserve">a URL</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="location_changed"
              c:identifier="ephy_web_view_location_changed">
        <doc xml:whitespace="preserve">Sets @location as the new address for @view while preventing notify events
in @view.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="location" transfer-ownership="none">
            <doc xml:whitespace="preserve">new location for @view</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="popups_manager_reset"
              c:identifier="ephy_web_view_popups_manager_reset">
        <doc xml:whitespace="preserve">Resets the state of the popups manager in @view.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="print" c:identifier="ephy_web_view_print" version="2.30">
        <doc xml:whitespace="preserve">Opens a dialog to print the specified view.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="save" c:identifier="ephy_web_view_save">
        <doc xml:whitespace="preserve">Saves the currently loaded page of @view to @uri.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="uri" transfer-ownership="none">
            <doc xml:whitespace="preserve">location to store the saved page</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_address" c:identifier="ephy_web_view_set_address">
        <doc xml:whitespace="preserve">Sets @view location to be @address. Note that this function might also set
the typed-address property to %NULL.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="address" transfer-ownership="none">
            <doc xml:whitespace="preserve">address to set @view to</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_link_message"
              c:identifier="ephy_web_view_set_link_message">
        <doc xml:whitespace="preserve">Sets the value of link-message property which tells the URL of the hovered
link.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="link_message" transfer-ownership="none">
            <doc xml:whitespace="preserve">new value for link-message in @view</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_loading_title"
              c:identifier="ephy_web_view_set_loading_title">
        <doc xml:whitespace="preserve">Update @view's loading title to @title, if @is_address is %TRUE it will
retrieve the title of the page at @title.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="title" transfer-ownership="none">
            <doc xml:whitespace="preserve">new loading title for @view</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="is_address" transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE if @title is an address</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_security_level"
              c:identifier="ephy_web_view_set_security_level">
        <doc xml:whitespace="preserve">Sets @view's security-level property to @level.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="level" transfer-ownership="none">
            <doc xml:whitespace="preserve">the new #EphyWebViewSecurityLevel for @view</doc>
            <type name="WebViewSecurityLevel"
                  c:type="EphyWebViewSecurityLevel"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_title" c:identifier="ephy_web_view_set_title">
        <doc xml:whitespace="preserve">Sets @view title to @view_title.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="view_title" transfer-ownership="none">
            <doc xml:whitespace="preserve">new title for @view</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_typed_address"
              c:identifier="ephy_web_view_set_typed_address">
        <doc xml:whitespace="preserve">Sets the text that @view's #EphyWindow will display in its location toolbar
entry when @view is selected.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="address" transfer-ownership="none">
            <doc xml:whitespace="preserve">the new typed address, or %NULL to clear it</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_visibility"
              c:identifier="ephy_web_view_set_visibility">
        <doc xml:whitespace="preserve">Sets whether the @view's toplevel is visible or not. See
ephy_web_view_get_visibility().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="visibility" transfer-ownership="none">
            <doc xml:whitespace="preserve">value for the visibility property of @view</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="show_page_certificate"
              c:identifier="ephy_web_view_show_page_certificate">
        <doc xml:whitespace="preserve">Shows a dialogue displaying the certificate of the currently loaded page
of @view, if it was loaded over a secure connection; else does nothing.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="show_print_preview"
              c:identifier="ephy_web_view_show_print_preview"
              version="2.30">
        <doc xml:whitespace="preserve">Generates a print preview of the specified view.
An external viewer is used to display the preview.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <property name="address" transfer-ownership="none">
        <doc xml:whitespace="preserve">View's current address.</doc>
        <type name="utf8"/>
      </property>
      <property name="document-type"
                introspectable="0"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">Document type determined for the view.</doc>
        <type/>
      </property>
      <property name="embed-title" transfer-ownership="none">
        <doc xml:whitespace="preserve">Title for this embed.</doc>
        <type name="utf8"/>
      </property>
      <property name="hidden-popup-count" transfer-ownership="none">
        <doc xml:whitespace="preserve">Number of hidden (blocked) popup windows.</doc>
        <type name="gint"/>
      </property>
      <property name="icon" transfer-ownership="none">
        <doc xml:whitespace="preserve">View's favicon set by the loaded site.</doc>
        <type name="GdkPixbuf.Pixbuf"/>
      </property>
      <property name="link-message" transfer-ownership="none">
        <doc xml:whitespace="preserve">???</doc>
        <type name="utf8"/>
      </property>
      <property name="navigation" introspectable="0" transfer-ownership="none">
        <doc xml:whitespace="preserve">View's navigation flags as #EphyWebViewNavigationFlags.</doc>
        <type/>
      </property>
      <property name="popups-allowed" writable="1" transfer-ownership="none">
        <doc xml:whitespace="preserve">If popup windows from this view are to be displayed.</doc>
        <type name="gboolean"/>
      </property>
      <property name="security-level" transfer-ownership="none">
        <doc xml:whitespace="preserve">One of #EphyWebViewSecurityLevel, determining view's current security level.</doc>
        <type name="WebViewSecurityLevel"/>
      </property>
      <property name="status-message" transfer-ownership="none">
        <doc xml:whitespace="preserve">Statusbar message corresponding to this view.</doc>
        <type name="utf8"/>
      </property>
      <property name="typed-address" writable="1" transfer-ownership="none">
        <doc xml:whitespace="preserve">User typed address for the current view.</doc>
        <type name="utf8"/>
      </property>
      <property name="visibility" transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <field name="parent">
        <type name="WebKit.WebView" c:type="WebKitWebView"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="WebViewPrivate" c:type="EphyWebViewPrivate*"/>
      </field>
      <glib:signal name="close-request" when="last">
        <doc xml:whitespace="preserve">The ::close signal is emitted when the embed requests closing.
Return %TRUE to prevent closing. You HAVE to process removal of the embed
as soon as possible after that.</doc>
        <return-value transfer-ownership="none">
          <type name="gboolean"/>
        </return-value>
      </glib:signal>
      <glib:signal name="content-blocked" when="last">
        <doc xml:whitespace="preserve">The ::content-blocked signal is emitted when an url has been blocked.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="uri" transfer-ownership="none">
            <doc xml:whitespace="preserve">blocked URI</doc>
            <type name="utf8"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="ge-feed-link" when="first">
        <doc xml:whitespace="preserve">The ::ge_rss signal is emitted when @embed discovers that a news feed
is available for the site it is visiting.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="type" transfer-ownership="none">
            <doc xml:whitespace="preserve">the mime-type of the news feed</doc>
            <type name="utf8"/>
          </parameter>
          <parameter name="title" transfer-ownership="none">
            <doc xml:whitespace="preserve">the title of the news feed</doc>
            <type name="utf8"/>
          </parameter>
          <parameter name="address" transfer-ownership="none">
            <doc xml:whitespace="preserve">the URL to @embed's web site's news feed</doc>
            <type name="utf8"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="ge-modal-alert" when="last">
        <doc xml:whitespace="preserve">The ::ge-modal-alert signal is emitted when a DOM event will open a
modal alert.

Return %TRUE to prevent the dialog from being opened.</doc>
        <return-value transfer-ownership="none">
          <type name="gboolean"/>
        </return-value>
      </glib:signal>
      <glib:signal name="ge-modal-alert-closed" when="last">
        <doc xml:whitespace="preserve">The ::ge-modal-alert-closed signal is emitted when a modal alert put up by a
DOM event was closed.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
      </glib:signal>
      <glib:signal name="ge-popup-blocked" when="first">
        <doc xml:whitespace="preserve">The ::ge_popup_blocked signal is emitted when the viewed web page requests
a popup window (with javascript:open()) but popup windows are not allowed.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="address" transfer-ownership="none">
            <doc xml:whitespace="preserve">The requested URL</doc>
            <type name="utf8"/>
          </parameter>
          <parameter name="target" transfer-ownership="none">
            <doc xml:whitespace="preserve">The requested window name, e.g. "_blank"</doc>
            <type name="utf8"/>
          </parameter>
          <parameter name="features" transfer-ownership="none">
            <doc xml:whitespace="preserve">The requested features: for example, "height=400,width=200"</doc>
            <type name="utf8"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="ge-search-link" when="first">
        <doc xml:whitespace="preserve">The ::ge_rss signal is emitted when @embed discovers that a search
description is available for the site it is visiting.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="type" transfer-ownership="none">
            <doc xml:whitespace="preserve">the mime-type of the search description</doc>
            <type name="utf8"/>
          </parameter>
          <parameter name="title" transfer-ownership="none">
            <doc xml:whitespace="preserve">the title of the news feed</doc>
            <type name="utf8"/>
          </parameter>
          <parameter name="address" transfer-ownership="none">
            <doc xml:whitespace="preserve">the URL to @embed's web site's search description</doc>
            <type name="utf8"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="loading-homepage" when="first">
        <doc xml:whitespace="preserve">The ::loading-homepage signal is emitted when the @view is about to
load the homepage set by the user.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
      </glib:signal>
      <glib:signal name="new-document-now" when="first">
        <doc xml:whitespace="preserve">The ::new-document-now signal is emitted when a new page content
is being loaded into the browser. It's a good place to do view
related changes, for example to restore the zoom level of a page
or to set an user style sheet.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="uri" transfer-ownership="none">
            <doc xml:whitespace="preserve">URI of the new content</doc>
            <type name="utf8"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="new-window" when="first">
        <doc xml:whitespace="preserve">The ::new-window signal is emitted after a new window has been opened by
the view. For example, when a JavaScript popup window is opened.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="new_view" transfer-ownership="none">
            <doc xml:whitespace="preserve">the newly opened #EphyWebView</doc>
            <type name="Gtk.Widget"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="search-key-press" when="last">
        <doc xml:whitespace="preserve">The ::search-key-press signal is emitted for keypresses which
should be used for find implementations.</doc>
        <return-value transfer-ownership="none">
          <type name="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="event" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #GdkEventKey which triggered this signal</doc>
            <type name="Gdk.Event"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <bitfield name="WebViewChrome"
              glib:type-name="EphyWebViewChrome"
              glib:get-type="ephy_web_view_chrome_get_type"
              c:type="EphyWebViewChrome">
      <member name="menubar"
              value="1"
              c:identifier="EPHY_WEB_VIEW_CHROME_MENUBAR"
              glib:nick="menubar"/>
      <member name="toolbar"
              value="2"
              c:identifier="EPHY_WEB_VIEW_CHROME_TOOLBAR"
              glib:nick="toolbar"/>
      <member name="statusbar"
              value="4"
              c:identifier="EPHY_WEB_VIEW_CHROME_STATUSBAR"
              glib:nick="statusbar"/>
      <member name="bookmarksbar"
              value="8"
              c:identifier="EPHY_WEB_VIEW_CHROME_BOOKMARKSBAR"
              glib:nick="bookmarksbar"/>
    </bitfield>
    <record name="WebViewClass"
            c:type="EphyWebViewClass"
            glib:is-gtype-struct-for="WebView">
      <field name="parent_class">
        <type name="WebKit.WebViewClass" c:type="WebKitWebViewClass"/>
      </field>
      <field name="feed_link">
        <callback name="feed_link">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="view" transfer-ownership="none">
              <type name="WebView" c:type="EphyWebView*"/>
            </parameter>
            <parameter name="type" transfer-ownership="none">
              <type name="utf8" c:type="char*"/>
            </parameter>
            <parameter name="title" transfer-ownership="none">
              <type name="utf8" c:type="char*"/>
            </parameter>
            <parameter name="address" transfer-ownership="none">
              <type name="utf8" c:type="char*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="search_link">
        <callback name="search_link">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="view" transfer-ownership="none">
              <type name="WebView" c:type="EphyWebView*"/>
            </parameter>
            <parameter name="type" transfer-ownership="none">
              <type name="utf8" c:type="char*"/>
            </parameter>
            <parameter name="title" transfer-ownership="none">
              <type name="utf8" c:type="char*"/>
            </parameter>
            <parameter name="address" transfer-ownership="none">
              <type name="utf8" c:type="char*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="popup_blocked">
        <callback name="popup_blocked">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="view" transfer-ownership="none">
              <type name="WebView" c:type="EphyWebView*"/>
            </parameter>
            <parameter name="address" transfer-ownership="none">
              <type name="utf8" c:type="char*"/>
            </parameter>
            <parameter name="target" transfer-ownership="none">
              <type name="utf8" c:type="char*"/>
            </parameter>
            <parameter name="features" transfer-ownership="none">
              <type name="utf8" c:type="char*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="content_blocked">
        <callback name="content_blocked">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="view" transfer-ownership="none">
              <type name="WebView" c:type="EphyWebView*"/>
            </parameter>
            <parameter name="uri" transfer-ownership="none">
              <type name="utf8" c:type="char*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="modal_alert">
        <callback name="modal_alert">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="view" transfer-ownership="none">
              <type name="WebView" c:type="EphyWebView*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="modal_alert_closed">
        <callback name="modal_alert_closed">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="view" transfer-ownership="none">
              <type name="WebView" c:type="EphyWebView*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="new_window">
        <callback name="new_window">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="view" transfer-ownership="none">
              <type name="WebView" c:type="EphyWebView*"/>
            </parameter>
            <parameter name="new_view" transfer-ownership="none">
              <type name="WebView" c:type="EphyWebView*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="search_key_press">
        <callback name="search_key_press">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="view" transfer-ownership="none">
              <type name="WebView" c:type="EphyWebView*"/>
            </parameter>
            <parameter name="event" transfer-ownership="none">
              <type name="Gdk.EventKey" c:type="GdkEventKey*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="close_request">
        <callback name="close_request">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="view" transfer-ownership="none">
              <type name="WebView" c:type="EphyWebView*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="new_document_now">
        <callback name="new_document_now">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="view" transfer-ownership="none">
              <type name="WebView" c:type="EphyWebView*"/>
            </parameter>
            <parameter name="uri" transfer-ownership="none">
              <type name="utf8" c:type="char*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <enumeration name="WebViewDocumentType" c:type="EphyWebViewDocumentType">
      <member name="html"
              value="0"
              c:identifier="EPHY_WEB_VIEW_DOCUMENT_HTML"/>
      <member name="xml" value="1" c:identifier="EPHY_WEB_VIEW_DOCUMENT_XML"/>
      <member name="image"
              value="2"
              c:identifier="EPHY_WEB_VIEW_DOCUMENT_IMAGE"/>
      <member name="other"
              value="3"
              c:identifier="EPHY_WEB_VIEW_DOCUMENT_OTHER"/>
    </enumeration>
    <enumeration name="WebViewErrorPage" c:type="EphyWebViewErrorPage">
      <member name="network_error"
              value="0"
              c:identifier="EPHY_WEB_VIEW_ERROR_PAGE_NETWORK_ERROR"/>
      <member name="crash"
              value="1"
              c:identifier="EPHY_WEB_VIEW_ERROR_PAGE_CRASH"/>
    </enumeration>
    <bitfield name="WebViewNavigationFlags"
              c:type="EphyWebViewNavigationFlags">
      <member name="up" value="1" c:identifier="EPHY_WEB_VIEW_NAV_UP"/>
      <member name="back" value="2" c:identifier="EPHY_WEB_VIEW_NAV_BACK"/>
      <member name="forward"
              value="4"
              c:identifier="EPHY_WEB_VIEW_NAV_FORWARD"/>
    </bitfield>
    <record name="WebViewPrivate" c:type="EphyWebViewPrivate" disguised="1">
    </record>
    <enumeration name="WebViewSecurityLevel"
                 glib:type-name="EphyWebViewSecurityLevel"
                 glib:get-type="ephy_web_view_security_level_get_type"
                 c:type="EphyWebViewSecurityLevel">
      <member name="unknown"
              value="0"
              c:identifier="EPHY_WEB_VIEW_STATE_IS_UNKNOWN"
              glib:nick="unknown"/>
      <member name="insecure"
              value="1"
              c:identifier="EPHY_WEB_VIEW_STATE_IS_INSECURE"
              glib:nick="insecure"/>
      <member name="broken"
              value="2"
              c:identifier="EPHY_WEB_VIEW_STATE_IS_BROKEN"
              glib:nick="broken"/>
      <member name="secure_low"
              value="3"
              c:identifier="EPHY_WEB_VIEW_STATE_IS_SECURE_LOW"
              glib:nick="secure-low"/>
      <member name="secure_med"
              value="4"
              c:identifier="EPHY_WEB_VIEW_STATE_IS_SECURE_MED"
              glib:nick="secure-med"/>
      <member name="secure_high"
              value="5"
              c:identifier="EPHY_WEB_VIEW_STATE_IS_SECURE_HIGH"
              glib:nick="secure-high"/>
    </enumeration>
    <class name="Window"
           c:symbol-prefix="window"
           c:type="EphyWindow"
           parent="Gtk.Window"
           glib:type-name="EphyWindow"
           glib:get-type="ephy_window_get_type"
           glib:type-struct="WindowClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="EmbedContainer"/>
      <implements name="Link"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new" c:identifier="ephy_window_new">
        <doc xml:whitespace="preserve">Equivalent to g_object_new() but returns an #EphyWindow so you don't have
to cast it.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a new #EphyWindow</doc>
          <type name="Window" c:type="EphyWindow*"/>
        </return-value>
      </constructor>
      <constructor name="new_with_chrome"
                   c:identifier="ephy_window_new_with_chrome">
        <doc xml:whitespace="preserve">Identical to ephy_window_new(), but allows you to specify a chrome.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a new #EphyWindow</doc>
          <type name="Window" c:type="EphyWindow*"/>
        </return-value>
        <parameters>
          <parameter name="chrome" transfer-ownership="none">
            <doc xml:whitespace="preserve">an #EphyWebViewChrome</doc>
            <type name="WebViewChrome" c:type="EphyWebViewChrome"/>
          </parameter>
          <parameter name="is_popup" transfer-ownership="none">
            <doc xml:whitespace="preserve">whether the new window is a popup window</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="activate_location"
              c:identifier="ephy_window_activate_location">
        <doc xml:whitespace="preserve">Activates the location entry on @window's toolbar.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="get_context_event"
              c:identifier="ephy_window_get_context_event">
        <doc xml:whitespace="preserve">Returns the #EphyEmbedEvent for the current context menu.
Use this to get the event from the action callback.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">an #EphyEmbedEvent, or %NULL</doc>
          <type name="EmbedEvent" c:type="EphyEmbedEvent*"/>
        </return-value>
      </method>
      <method name="get_find_toolbar"
              c:identifier="ephy_window_get_find_toolbar">
        <doc xml:whitespace="preserve">Returns the #EphyFindToolbar used by this window.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the @window's #EphyFindToolbar</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </method>
      <method name="get_location" c:identifier="ephy_window_get_location">
        <doc xml:whitespace="preserve">Gets the current address according to @window's #EphyLocationAction.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">current @window address</doc>
          <type name="utf8" c:type="char*"/>
        </return-value>
      </method>
      <method name="get_notebook" c:identifier="ephy_window_get_notebook">
        <doc xml:whitespace="preserve">Returns the #GtkNotebook used by this window.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the @window's #GtkNotebook</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </method>
      <method name="get_ui_manager" c:identifier="ephy_window_get_ui_manager">
        <doc xml:whitespace="preserve">Returns this window's UI manager.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">an #GtkUIManager</doc>
          <type name="GObject.Object" c:type="GObject*"/>
        </return-value>
      </method>
      <method name="load_url" c:identifier="ephy_window_load_url">
        <doc xml:whitespace="preserve">Loads a new url in the active tab of @window.
Unlike ephy_web_view_load_url(), this function activates
the embed.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="url" transfer-ownership="none">
            <doc xml:whitespace="preserve">the url to load</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_downloads_box_visibility"
              c:identifier="ephy_window_set_downloads_box_visibility">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="show" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_location" c:identifier="ephy_window_set_location">
        <doc xml:whitespace="preserve">Sets the internal #EphyLocationAction address to @address.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="address" transfer-ownership="none">
            <doc xml:whitespace="preserve">new address</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_zoom" c:identifier="ephy_window_set_zoom">
        <doc xml:whitespace="preserve">Sets the zoom on @window's active #EphyEmbed. A @zoom of 1.0 corresponds to
100% zoom (normal size).</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="zoom" transfer-ownership="none">
            <doc xml:whitespace="preserve">the desired zoom level</doc>
            <type name="gfloat" c:type="float"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent">
        <type name="Gtk.Window" c:type="GtkWindow"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="WindowPrivate" c:type="EphyWindowPrivate*"/>
      </field>
    </class>
    <record name="WindowClass"
            c:type="EphyWindowClass"
            glib:is-gtype-struct-for="Window">
      <field name="parent_class">
        <type name="Gtk.WindowClass" c:type="GtkWindowClass"/>
      </field>
    </record>
    <record name="WindowPrivate" c:type="EphyWindowPrivate" disguised="1">
    </record>
    <function name="link_flags_from_current_event"
              c:identifier="ephy_link_flags_from_current_event"
              moved-to="LinkFlags.from_current_event">
      <return-value transfer-ownership="none">
        <type name="LinkFlags" c:type="EphyLinkFlags"/>
      </return-value>
    </function>
    <function name="state_add_expander" c:identifier="ephy_state_add_expander">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="widget" transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </parameter>
        <parameter name="name" transfer-ownership="none">
          <type name="utf8" c:type="char*"/>
        </parameter>
        <parameter name="default_state" transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="state_add_paned" c:identifier="ephy_state_add_paned">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="paned" transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </parameter>
        <parameter name="name" transfer-ownership="none">
          <type name="utf8" c:type="char*"/>
        </parameter>
        <parameter name="default_width" transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </parameter>
      </parameters>
    </function>
    <function name="state_add_window" c:identifier="ephy_state_add_window">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="window" transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </parameter>
        <parameter name="name" transfer-ownership="none">
          <type name="utf8" c:type="char*"/>
        </parameter>
        <parameter name="default_width" transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="default_heigth" transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="maximize" transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
        <parameter name="flags" transfer-ownership="none">
          <type name="StateWindowFlags" c:type="EphyStateWindowFlags"/>
        </parameter>
      </parameters>
    </function>
    <function name="state_save" c:identifier="ephy_state_save">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
    </function>
  </namespace>
</repository>
